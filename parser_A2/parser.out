Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    AND_EQ
    BITAND
    BITOR
    BOOL
    BOROP
    B_I_OR
    CHAR16_T
    CHAR32_T
    CHAR8_T
    COMMENT
    COMPL
    CONDTIONAL
    DQUOTE
    EXPOP
    FALSE
    HASHTAG
    LEFTQOP
    LEFTSHIFT
    MODQOP
    NAMESPACE
    NOT
    NOT_EQ
    NULLPTR
    OR
    OR_EQ
    RIGHTLIFT
    RIGHTQOP
    SCHAR
    SQUOTE
    STD
    TRUE
    UMINUSOP
    UPLUSOP
    USING
    XOR
    XOREQOP
    XOR_EQ

Grammar

Rule 0     S' -> program
Rule 1     program -> NUMBER
Rule 2     program -> STRING
Rule 3     program -> expression
Rule 4     program -> statement
Rule 5     class_name -> IDENTIFIER
Rule 6     enum_name -> IDENTIFIER
Rule 7     typedef_name -> IDENTIFIER
Rule 8     expression -> assignment_expression
Rule 9     expression -> expression COMMA assignment_expression
Rule 10    assignment_expression -> conditional_expression
Rule 11    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 12    assignment_operator -> EQUAL
Rule 13    assignment_operator -> MULTEQOP
Rule 14    assignment_operator -> DIVEQOP
Rule 15    assignment_operator -> MODEQOP
Rule 16    assignment_operator -> PLUSEQOP
Rule 17    assignment_operator -> MINUSEQOP
Rule 18    assignment_operator -> LSHIFTEQOP
Rule 19    assignment_operator -> RSHIFTEQOP
Rule 20    assignment_operator -> BANDEQOP
Rule 21    assignment_operator -> B_E_OR
Rule 22    assignment_operator -> BOREQOP
Rule 23    conditional_expression -> logical_OR_expression
Rule 24    conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression
Rule 25    logical_OR_expression -> logical_AND_expression
Rule 26    logical_OR_expression -> logical_OR_expression OROP logical_AND_expression
Rule 27    logical_AND_expression -> inclusive_OR_expression
Rule 28    logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression
Rule 29    inclusive_OR_expression -> exclusive_OR_expression
Rule 30    inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression
Rule 31    exclusive_OR_expression -> AND_expression
Rule 32    exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression
Rule 33    AND_expression -> equality_expression
Rule 34    AND_expression -> AND_expression BANDOP equality_expression
Rule 35    equality_expression -> relational_expression
Rule 36    equality_expression -> equality_expression EQCOMP relational_expression
Rule 37    equality_expression -> equality_expression NEQCOMP relational_expression
Rule 38    relational_expression -> shift_expression
Rule 39    relational_expression -> relational_expression LTCOMP shift_expression
Rule 40    relational_expression -> relational_expression GTCOMP shift_expression
Rule 41    relational_expression -> relational_expression LTECOMP shift_expression
Rule 42    relational_expression -> relational_expression GTECOMP shift_expression
Rule 43    shift_expression -> additive_expression
Rule 44    shift_expression -> shift_expression LSHIFT additive_expression
Rule 45    shift_expression -> shift_expression RSHIFT additive_expression
Rule 46    additive_expression -> multiplicative_expression
Rule 47    additive_expression -> additive_expression PLUSOP multiplicative_expression
Rule 48    additive_expression -> additive_expression MINUSOP multiplicative_expression
Rule 49    multiplicative_expression -> pm_expression
Rule 50    multiplicative_expression -> multiplicative_expression MULTOP pm_expression
Rule 51    multiplicative_expression -> multiplicative_expression DIVOP pm_expression
Rule 52    multiplicative_expression -> multiplicative_expression MODOP pm_expression
Rule 53    pm_expression -> cast_expression
Rule 54    pm_expression -> pm_expression DOTSTAR cast_expression
Rule 55    pm_expression -> pm_expression ARROWSTAR cast_expression
Rule 56    cast_expression -> unary_expression
Rule 57    cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 58    unary_expression -> postfix_expression
Rule 59    unary_expression -> DPLUSOP unary_expression
Rule 60    unary_expression -> DMINUSOP unary_expression
Rule 61    unary_expression -> unary_operator cast_expression
Rule 62    unary_expression -> SIZEOF unary_expression
Rule 63    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 64    unary_expression -> allocation_expression
Rule 65    unary_expression -> deallocation_expression
Rule 66    unary_operator -> MULTOP
Rule 67    unary_operator -> BANDOP
Rule 68    unary_operator -> PLUSOP
Rule 69    unary_operator -> MINUSOP
Rule 70    unary_operator -> NOTSYM
Rule 71    unary_operator -> BNOP
Rule 72    allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer
Rule 73    allocation_expression -> NEW placement new_type_name new_initializer
Rule 74    allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer
Rule 75    allocation_expression -> NEW new_type_name new_initializer
Rule 76    allocation_expression -> DOUBLECOLON NEW placement new_type_name
Rule 77    allocation_expression -> NEW placement new_type_name
Rule 78    allocation_expression -> DOUBLECOLON NEW new_type_name
Rule 79    allocation_expression -> NEW new_type_name
Rule 80    allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
Rule 81    allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer
Rule 82    allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
Rule 83    allocation_expression -> NEW LPAREN type_name RPAREN new_initializer
Rule 84    allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN
Rule 85    allocation_expression -> NEW placement LPAREN type_name RPAREN
Rule 86    allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN
Rule 87    allocation_expression -> NEW LPAREN type_name RPAREN
Rule 88    placement -> LPAREN expression_list RPAREN
Rule 89    new_type_name -> type_specifier_list new_declarator
Rule 90    new_type_name -> type_specifier_list
Rule 91    new_declarator -> MULTOP cv_qualifier_list new_declarator
Rule 92    new_declarator -> MULTOP new_declarator
Rule 93    new_declarator -> MULTOP cv_qualifier_list
Rule 94    new_declarator -> MULTOP
Rule 95    new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator
Rule 96    new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator
Rule 97    new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
Rule 98    new_declarator -> complete_class_name DOUBLECOLON MULTOP
Rule 99    new_declarator -> new_declarator LSPAREN expression RSPAREN
Rule 100   new_declarator -> LSPAREN expression RSPAREN
Rule 101   new_initializer -> LPAREN initializer_list RPAREN
Rule 102   new_initializer -> LPAREN RPAREN
Rule 103   deallocation_expression -> DOUBLECOLON DELETE cast_expression
Rule 104   deallocation_expression -> DELETE cast_expression
Rule 105   deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
Rule 106   deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression
Rule 107   postfix_expression -> primary_expression
Rule 108   postfix_expression -> postfix_expression LSPAREN expression RSPAREN
Rule 109   postfix_expression -> postfix_expression LPAREN expression_list RPAREN
Rule 110   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 111   postfix_expression -> simple_type_name LPAREN expression_list RPAREN
Rule 112   postfix_expression -> simple_type_name LPAREN RPAREN
Rule 113   postfix_expression -> postfix_expression DOT name
Rule 114   postfix_expression -> postfix_expression ARROW name
Rule 115   postfix_expression -> postfix_expression DPLUSOP
Rule 116   postfix_expression -> postfix_expression DMINUSOP
Rule 117   expression_list -> assignment_expression
Rule 118   expression_list -> expression_list COMMA assignment_expression
Rule 119   primary_expression -> literal
Rule 120   primary_expression -> THIS
Rule 121   primary_expression -> DOUBLECOLON IDENTIFIER
Rule 122   primary_expression -> DOUBLECOLON operator_function_name
Rule 123   primary_expression -> DOUBLECOLON qualified_name
Rule 124   primary_expression -> LPAREN expression RPAREN
Rule 125   primary_expression -> name
Rule 126   name -> IDENTIFIER
Rule 127   name -> operator_function_name
Rule 128   name -> conversion_function_name
Rule 129   name -> BNOP class_name
Rule 130   name -> qualified_name
Rule 131   qualified_name -> qualified_class_name DOUBLECOLON name
Rule 132   literal -> NUMBER
Rule 133   literal -> CHAR
Rule 134   literal -> STRING
Rule 135   declaration -> decl_specifiers declarator_list SEMICOLON
Rule 136   declaration -> decl_specifiers SEMICOLON
Rule 137   declaration -> declarator_list SEMICOLON
Rule 138   declaration -> asm_declaration
Rule 139   declaration -> function_definition
Rule 140   declaration -> template_declaration
Rule 141   declaration -> linkage_specification
Rule 142   decl_specifier -> storage_class_specifier
Rule 143   decl_specifier -> type_specifier
Rule 144   decl_specifier -> fct_specifier
Rule 145   decl_specifier -> TYPEDEF
Rule 146   decl_specifiers -> decl_specifiers decl_specifier
Rule 147   decl_specifiers -> decl_specifier
Rule 148   storage_class_specifier -> AUTO
Rule 149   storage_class_specifier -> STATIC
Rule 150   storage_class_specifier -> EXTERN
Rule 151   fct_specifier -> INLINE
Rule 152   fct_specifier -> VIRTUAL
Rule 153   type_specifier -> simple_type_name
Rule 154   type_specifier -> class_specifier
Rule 155   type_specifier -> enum_specifier
Rule 156   type_specifier -> elaborated_type_specifier
Rule 157   type_specifier -> CONST
Rule 158   type_specifier -> VOLATILE
Rule 159   simple_type_name -> complete_class_name
Rule 160   simple_type_name -> qualified_type_name
Rule 161   simple_type_name -> CHAR
Rule 162   simple_type_name -> SHORT
Rule 163   simple_type_name -> INT
Rule 164   simple_type_name -> LONG
Rule 165   simple_type_name -> SIGNED
Rule 166   simple_type_name -> UNSIGNED
Rule 167   simple_type_name -> FLOAT
Rule 168   simple_type_name -> DOUBLE
Rule 169   simple_type_name -> VOID
Rule 170   elaborated_type_specifier -> class_key IDENTIFIER
Rule 171   elaborated_type_specifier -> class_key class_name
Rule 172   elaborated_type_specifier -> ENUM enum_name
Rule 173   class_key -> CLASS
Rule 174   class_key -> STRUCT
Rule 175   class_key -> UNION
Rule 176   qualified_type_name -> typedef_name
Rule 177   qualified_type_name -> class_name DOUBLECOLON qualified_type_name
Rule 178   complete_class_name -> qualified_class_name
Rule 179   complete_class_name -> DOUBLECOLON qualified_class_name
Rule 180   qualified_class_name -> class_name
Rule 181   qualified_class_name -> class_name DOUBLECOLON qualified_class_name
Rule 182   enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN
Rule 183   enum_specifier -> ENUM LCPAREN enum_list RCPAREN
Rule 184   enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN
Rule 185   enum_specifier -> ENUM LCPAREN RCPAREN
Rule 186   enum_list -> enumerator
Rule 187   enum_list -> enum_list COMMA enumerator
Rule 188   enumerator -> IDENTIFIER
Rule 189   enumerator -> IDENTIFIER EQUAL constant_expression
Rule 190   constant_expression -> conditional_expression
Rule 191   linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN
Rule 192   linkage_specification -> EXTERN STRING LCPAREN RCPAREN
Rule 193   linkage_specification -> EXTERN STRING declaration
Rule 194   declaration_list -> declaration
Rule 195   declaration_list -> declaration_list declaration
Rule 196   asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON
Rule 197   declarator_list -> init_declarator
Rule 198   declarator_list -> declarator_list COMMA init_declarator
Rule 199   init_declarator -> declarator initializer
Rule 200   init_declarator -> declarator
Rule 201   declarator -> dname
Rule 202   declarator -> ptr_operator declarator
Rule 203   declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
Rule 204   declarator -> declarator LPAREN argument_declaration_list RPAREN
Rule 205   declarator -> declarator LSPAREN constant_expression RSPAREN
Rule 206   declarator -> declarator LSPAREN RSPAREN
Rule 207   declarator -> LPAREN declarator RPAREN
Rule 208   ptr_operator -> MULTOP cv_qualifier_list
Rule 209   ptr_operator -> MULTOP
Rule 210   ptr_operator -> BANDOP cv_qualifier_list
Rule 211   ptr_operator -> BANDOP
Rule 212   ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
Rule 213   ptr_operator -> complete_class_name DOUBLECOLON MULTOP
Rule 214   cv_qualifier_list -> cv_qualifier cv_qualifier_list
Rule 215   cv_qualifier_list -> cv_qualifier
Rule 216   cv_qualifier -> CONST
Rule 217   cv_qualifier -> VOLATILE
Rule 218   dname -> name
Rule 219   dname -> class_name
Rule 220   dname -> BNOP class_name
Rule 221   dname -> typedef_name
Rule 222   dname -> qualified_type_name
Rule 223   type_name -> type_specifier_list abstract_declarator
Rule 224   type_name -> type_specifier_list
Rule 225   type_specifier_list -> type_specifier type_specifier_list
Rule 226   type_specifier_list -> type_specifier
Rule 227   abstract_declarator -> ptr_operator abstract_declarator
Rule 228   abstract_declarator -> ptr_operator
Rule 229   abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
Rule 230   abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list
Rule 231   abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN
Rule 232   abstract_declarator -> LPAREN argument_declaration_list RPAREN
Rule 233   abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN
Rule 234   abstract_declarator -> LSPAREN constant_expression RSPAREN
Rule 235   abstract_declarator -> abstract_declarator LSPAREN RSPAREN
Rule 236   abstract_declarator -> LSPAREN RSPAREN
Rule 237   abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 238   argument_declaration_list -> arg_declaration_list
Rule 239   argument_declaration_list -> <empty>
Rule 240   arg_declaration_list -> argument_declaration
Rule 241   arg_declaration_list -> arg_declaration_list COMMA argument_declaration
Rule 242   argument_declaration -> decl_specifiers declarator
Rule 243   argument_declaration -> decl_specifiers declarator EQUAL expression
Rule 244   argument_declaration -> decl_specifiers abstract_declarator
Rule 245   argument_declaration -> decl_specifiers
Rule 246   argument_declaration -> decl_specifiers abstract_declarator EQUAL expression
Rule 247   argument_declaration -> decl_specifiers EQUAL expression
Rule 248   function_definition -> decl_specifiers declarator ctor_initializer fct_body
Rule 249   function_definition -> declarator ctor_initializer fct_body
Rule 250   function_definition -> decl_specifiers declarator fct_body
Rule 251   function_definition -> declarator fct_body
Rule 252   fct_body -> compound_statement
Rule 253   initializer -> EQUAL assignment_expression
Rule 254   initializer -> EQUAL LCPAREN initializer_list RCPAREN
Rule 255   initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN
Rule 256   initializer -> LPAREN expression_list RPAREN
Rule 257   initializer_list -> assignment_expression
Rule 258   initializer_list -> initializer_list COMMA assignment_expression
Rule 259   initializer_list -> LCPAREN initializer_list RCPAREN
Rule 260   initializer_list -> LCPAREN initializer_list COMMA RCPAREN
Rule 261   class_specifier -> class_head LCPAREN member_list RCPAREN
Rule 262   class_specifier -> class_head LCPAREN RCPAREN
Rule 263   class_head -> class_key IDENTIFIER base_spec
Rule 264   class_head -> class_key base_spec
Rule 265   class_head -> class_key IDENTIFIER
Rule 266   class_head -> class_key
Rule 267   class_head -> class_key class_name base_spec
Rule 268   class_head -> class_key class_name
Rule 269   member_list -> member_declaration member_list
Rule 270   member_list -> member_declaration
Rule 271   member_list -> access_specifier COLON member_list
Rule 272   member_list -> access_specifier COLON
Rule 273   member_declaration -> decl_specifiers member_declarator_list SEMICOLON
Rule 274   member_declaration -> member_declarator_list SEMICOLON
Rule 275   member_declaration -> decl_specifiers SEMICOLON
Rule 276   member_declaration -> SEMICOLON
Rule 277   member_declaration -> function_definition SEMICOLON
Rule 278   member_declaration -> function_definition
Rule 279   member_declaration -> qualified_name SEMICOLON
Rule 280   member_declarator_list -> member_declarator
Rule 281   member_declarator_list -> member_declarator_list COMMA member_declarator
Rule 282   member_declarator -> declarator pure_specifier
Rule 283   member_declarator -> declarator
Rule 284   member_declarator -> IDENTIFIER COLON constant_expression
Rule 285   member_declarator -> COLON constant_expression
Rule 286   pure_specifier -> EQUAL NUMBER
Rule 287   base_spec -> COLON base_list
Rule 288   base_list -> base_specifier
Rule 289   base_list -> base_list COMMA base_specifier
Rule 290   base_specifier -> complete_class_name
Rule 291   base_specifier -> VIRTUAL access_specifier complete_class_name
Rule 292   base_specifier -> VIRTUAL complete_class_name
Rule 293   base_specifier -> access_specifier VIRTUAL complete_class_name
Rule 294   base_specifier -> access_specifier complete_class_name
Rule 295   access_specifier -> PRIVATE
Rule 296   access_specifier -> PROTECTED
Rule 297   access_specifier -> PUBLIC
Rule 298   conversion_function_name -> OPERATOR conversion_type_name
Rule 299   conversion_type_name -> type_specifier_list ptr_operator
Rule 300   conversion_type_name -> type_specifier_list
Rule 301   ctor_initializer -> COLON mem_initializer_list
Rule 302   mem_initializer_list -> mem_initializer
Rule 303   mem_initializer_list -> mem_initializer COMMA mem_initializer_list
Rule 304   mem_initializer -> complete_class_name LPAREN expression_list RPAREN
Rule 305   mem_initializer -> complete_class_name LPAREN RPAREN
Rule 306   mem_initializer -> IDENTIFIER LPAREN expression_list RPAREN
Rule 307   mem_initializer -> IDENTIFIER LPAREN RPAREN
Rule 308   operator_function_name -> OPERATOR operator_name
Rule 309   operator_name -> NEW
Rule 310   operator_name -> DELETE
Rule 311   operator_name -> PLUSOP
Rule 312   operator_name -> MINUSOP
Rule 313   operator_name -> MULTOP
Rule 314   operator_name -> DIVOP
Rule 315   operator_name -> MODOP
Rule 316   operator_name -> XOROP
Rule 317   operator_name -> BANDOP
Rule 318   operator_name -> BNOP
Rule 319   operator_name -> NOTSYM
Rule 320   operator_name -> EQUAL
Rule 321   operator_name -> LTCOMP
Rule 322   operator_name -> GTCOMP
Rule 323   operator_name -> PLUSEQOP
Rule 324   operator_name -> MINUSEQOP
Rule 325   operator_name -> MULTEQOP
Rule 326   operator_name -> DIVEQOP
Rule 327   operator_name -> MODEQOP
Rule 328   operator_name -> B_E_OR
Rule 329   operator_name -> BANDEQOP
Rule 330   operator_name -> LSHIFT
Rule 331   operator_name -> RSHIFT
Rule 332   operator_name -> RSHIFTEQOP
Rule 333   operator_name -> LSHIFTEQOP
Rule 334   operator_name -> EQCOMP
Rule 335   operator_name -> NEQCOMP
Rule 336   operator_name -> LTECOMP
Rule 337   operator_name -> GTECOMP
Rule 338   operator_name -> ANDOP
Rule 339   operator_name -> OROP
Rule 340   operator_name -> DPLUSOP
Rule 341   operator_name -> DMINUSOP
Rule 342   operator_name -> COMMA
Rule 343   operator_name -> ARROWSTAR
Rule 344   operator_name -> ARROW
Rule 345   operator_name -> LPAREN RPAREN
Rule 346   operator_name -> LSPAREN RSPAREN
Rule 347   statement -> labeled_statement
Rule 348   statement -> expression_statement
Rule 349   statement -> compound_statement
Rule 350   statement -> selection_statement
Rule 351   statement -> iteration_statement
Rule 352   statement -> jump_statement
Rule 353   statement -> declaration_statement
Rule 354   statement -> try_block
Rule 355   labeled_statement -> IDENTIFIER COLON statement
Rule 356   labeled_statement -> CASE constant_expression COLON statement
Rule 357   labeled_statement -> DEFAULT COLON statement
Rule 358   expression_statement -> expression SEMICOLON
Rule 359   expression_statement -> SEMICOLON
Rule 360   compound_statement -> LCPAREN statement_list RCPAREN
Rule 361   compound_statement -> LCPAREN RCPAREN
Rule 362   statement_list -> statement
Rule 363   statement_list -> statement_list statement
Rule 364   selection_statement -> IF LPAREN expression RPAREN statement
Rule 365   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 366   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 367   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 368   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 369   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
Rule 370   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
Rule 371   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
Rule 372   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement
Rule 373   for_init_statement -> expression_statement
Rule 374   for_init_statement -> declaration_statement
Rule 375   jump_statement -> BREAK SEMICOLON
Rule 376   jump_statement -> CONTINUE SEMICOLON
Rule 377   jump_statement -> RETURN expression SEMICOLON
Rule 378   jump_statement -> RETURN SEMICOLON
Rule 379   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 380   declaration_statement -> declaration
Rule 381   template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration
Rule 382   template_argument_list -> template_argument
Rule 383   template_argument_list -> template_argument_list COMMA template_argument
Rule 384   template_argument -> type_argument
Rule 385   template_argument -> argument_declaration
Rule 386   type_argument -> CLASS IDENTIFIER
Rule 387   template_name -> IDENTIFIER
Rule 388   template_class_name -> template_name LTCOMP template_arg_list GTCOMP
Rule 389   template_arg_list -> template_arg
Rule 390   template_arg_list -> template_arg_list COMMA template_arg
Rule 391   template_arg -> expression
Rule 392   template_arg -> type_name
Rule 393   try_block -> TRY compound_statement handler_list
Rule 394   handler_list -> handler handler_list
Rule 395   handler_list -> handler
Rule 396   handler -> CATCH LPAREN exception_declaration RPAREN compound_statement
Rule 397   exception_declaration -> type_specifier_list declarator
Rule 398   exception_declaration -> type_specifier_list abstract_declarator
Rule 399   exception_declaration -> type_specifier_list
Rule 400   throw_expression -> THROW expression
Rule 401   throw_expression -> THROW
Rule 402   exception_specification -> THROW LPAREN type_list RPAREN
Rule 403   exception_specification -> THROW LPAREN RPAREN
Rule 404   type_list -> type_name
Rule 405   type_list -> type_list COMMA type_name
Rule 406   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ANDOP                : 28 338
AND_EQ               : 
ARROW                : 114 344
ARROWSTAR            : 55 343
ASM                  : 196
AUTO                 : 148
BANDEQOP             : 20 329
BANDOP               : 34 67 210 211 317
BITAND               : 
BITOR                : 
BNOP                 : 71 129 220 318
BOOL                 : 
BOREQOP              : 22
BOROP                : 
BREAK                : 375
B_E_OR               : 21 328
B_I_OR               : 
CASE                 : 356
CATCH                : 396
CHAR                 : 133 161
CHAR16_T             : 
CHAR32_T             : 
CHAR8_T              : 
CLASS                : 173 386
COLON                : 24 271 272 284 285 287 301 355 356 357
COMMA                : 9 118 187 198 241 255 258 260 281 289 303 342 383 390 405
COMMENT              : 
COMPL                : 
CONDTIONAL           : 
CONST                : 157 216
CONTINUE             : 376
DEFAULT              : 357
DELETE               : 103 104 105 106 310
DIVEQOP              : 14 326
DIVOP                : 51 314
DMINUSOP             : 60 116 341
DO                   : 368
DOT                  : 113
DOTSTAR              : 54
DOUBLE               : 168
DOUBLECOLON          : 72 74 76 78 80 82 84 86 95 96 97 98 103 105 121 122 123 131 177 179 181 212 213
DPLUSOP              : 59 115 340
DQUOTE               : 
ELSE                 : 365
ENUM                 : 172 182 183 184 185
EQCOMP               : 36 334
EQUAL                : 12 189 243 246 247 253 254 255 286 320
EXPOP                : 
EXTERN               : 150 191 192 193
FALSE                : 
FLOAT                : 167
FOR                  : 369 370 371 372
GOTO                 : 379
GTCOMP               : 40 322 381 388
GTECOMP              : 42 337
HASHTAG              : 
IDENTIFIER           : 5 6 7 121 126 170 182 184 188 189 263 265 284 306 307 355 379 386 387
IF                   : 364 365
INLINE               : 151
INT                  : 163
LCPAREN              : 182 183 184 185 191 192 254 255 259 260 261 262 360 361
LEFTQOP              : 
LEFTSHIFT            : 
LONG                 : 164
LPAREN               : 57 63 80 81 82 83 84 85 86 87 88 101 102 109 110 111 112 124 196 203 204 207 229 230 231 232 237 256 304 305 306 307 345 364 365 366 367 368 369 370 371 372 396 402 403
LSHIFT               : 44 330
LSHIFTEQOP           : 18 333
LSPAREN              : 99 100 105 106 108 205 206 233 234 235 236 346
LTCOMP               : 39 321 381 388
LTECOMP              : 41 336
MINUSEQOP            : 17 324
MINUSOP              : 48 69 312
MODEQOP              : 15 327
MODOP                : 52 315
MODQOP               : 
MULTEQOP             : 13 325
MULTOP               : 50 66 91 92 93 94 95 96 97 98 208 209 212 213 313
NAMESPACE            : 
NEQCOMP              : 37 335
NEW                  : 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 309
NOT                  : 
NOTSYM               : 70 319
NOT_EQ               : 
NULLPTR              : 
NUMBER               : 1 132 286
OPERATOR             : 298 308
OR                   : 
OROP                 : 26 30 339
OR_EQ                : 
PLUSEQOP             : 16 323
PLUSOP               : 47 68 311
PRIVATE              : 295
PROTECTED            : 296
PUBLIC               : 297
QUESMARK             : 24
RCPAREN              : 182 183 184 185 191 192 254 255 259 260 261 262 360 361
RETURN               : 377 378
RIGHTLIFT            : 
RIGHTQOP             : 
RPAREN               : 57 63 80 81 82 83 84 85 86 87 88 101 102 109 110 111 112 124 196 203 204 207 229 230 231 232 237 256 304 305 306 307 345 364 365 366 367 368 369 370 371 372 396 402 403
RSHIFT               : 45 331
RSHIFTEQOP           : 19 332
RSPAREN              : 99 100 105 106 108 205 206 233 234 235 236 346
SCHAR                : 
SEMICOLON            : 135 136 137 196 273 274 275 276 277 279 358 359 368 369 370 371 372 375 376 377 378 379
SHORT                : 162
SIGNED               : 165
SIZEOF               : 62 63
SQUOTE               : 
STATIC               : 149
STD                  : 
STRING               : 2 134 191 192 193 196
STRUCT               : 174
SWITCH               : 366
TEMPLATE             : 381
THIS                 : 120
THROW                : 400 401 402 403
TRUE                 : 
TRY                  : 393
TYPEDEF              : 145
UMINUSOP             : 
UNION                : 175
UNSIGNED             : 166
UPLUSOP              : 
USING                : 
VIRTUAL              : 152 291 292 293
VOID                 : 169
VOLATILE             : 158 217
WHILE                : 367 368
XOR                  : 
XOREQOP              : 
XOROP                : 32 316
XOR_EQ               : 
error                : 

Nonterminals, with rules where they appear

AND_expression       : 31 32 34
abstract_declarator  : 223 227 229 231 233 235 237 244 246 398
access_specifier     : 271 272 291 293 294
additive_expression  : 43 44 45 47 48
allocation_expression : 64
arg_declaration_list : 238 241
argument_declaration : 240 241 385
argument_declaration_list : 203 204 229 230 231 232
asm_declaration      : 138
assignment_expression : 8 9 11 117 118 253 257 258
assignment_operator  : 11
base_list            : 287 289
base_spec            : 263 264 267
base_specifier       : 288 289
cast_expression      : 53 54 55 57 61 103 104 105 106
class_head           : 261 262
class_key            : 170 171 263 264 265 266 267 268
class_name           : 129 171 177 180 181 219 220 267 268
class_specifier      : 154
complete_class_name  : 95 96 97 98 159 212 213 290 291 292 293 294 304 305
compound_statement   : 252 349 393 396
conditional_expression : 10 24 190
constant_expression  : 189 205 233 234 284 285 356
conversion_function_name : 128
conversion_type_name : 298
ctor_initializer     : 248 249
cv_qualifier         : 214 215
cv_qualifier_list    : 91 93 95 97 203 208 210 212 214 229 230
deallocation_expression : 65
decl_specifier       : 146 147
decl_specifiers      : 135 136 146 242 243 244 245 246 247 248 250 273 275
declaration          : 193 194 195 380 381
declaration_list     : 191 195
declaration_statement : 353 374
declarator           : 199 200 202 203 204 205 206 207 242 243 248 249 250 251 282 283 397
declarator_list      : 135 137 198
dname                : 201
elaborated_type_specifier : 156
empty                : 
enum_list            : 182 183 187
enum_name            : 172
enum_specifier       : 155
enumerator           : 186 187
equality_expression  : 33 34 36 37
exception_declaration : 396
exception_specification : 
exclusive_OR_expression : 29 30 32
expression           : 3 9 24 99 100 108 124 243 246 247 358 364 365 366 367 368 369 369 370 371 377 391 400
expression_list      : 88 109 111 118 256 304 306
expression_statement : 348 373
fct_body             : 248 249 250 251
fct_specifier        : 144
for_init_statement   : 369 370 371 372
function_definition  : 139 277 278
handler              : 394 395
handler_list         : 393 394
inclusive_OR_expression : 27 28 30
init_declarator      : 197 198
initializer          : 199
initializer_list     : 101 254 255 258 259 260
iteration_statement  : 351
jump_statement       : 352
labeled_statement    : 347
linkage_specification : 141
literal              : 119
logical_AND_expression : 25 26 28
logical_OR_expression : 23 24 26
mem_initializer      : 302 303
mem_initializer_list : 301 303
member_declaration   : 269 270
member_declarator    : 280 281
member_declarator_list : 273 274 281
member_list          : 261 269 271
multiplicative_expression : 46 47 48 50 51 52
name                 : 113 114 125 131 218
new_declarator       : 89 91 92 95 96 99
new_initializer      : 72 73 74 75 80 81 82 83
new_type_name        : 72 73 74 75 76 77 78 79
operator_function_name : 122 127
operator_name        : 308
placement            : 72 73 76 77 80 81 84 85
pm_expression        : 49 50 51 52 54 55
postfix_expression   : 58 108 109 110 113 114 115 116
primary_expression   : 107
program              : 0
ptr_operator         : 202 227 228 299
pure_specifier       : 282
qualified_class_name : 131 178 179 181
qualified_name       : 123 130 279
qualified_type_name  : 160 177 222
relational_expression : 35 36 37 39 40 41 42
selection_statement  : 350
shift_expression     : 38 39 40 41 42 44 45
simple_type_name     : 111 112 153
statement            : 4 355 356 357 362 363 364 365 365 366 367 368 369 370 371 372
statement_list       : 360 363
storage_class_specifier : 142
template_arg         : 389 390
template_arg_list    : 388 390
template_argument    : 382 383
template_argument_list : 381 383
template_class_name  : 
template_declaration : 140
template_name        : 388
throw_expression     : 
try_block            : 354
type_argument        : 384
type_list            : 402 405
type_name            : 57 63 80 81 82 83 84 85 86 87 392 404 405
type_specifier       : 143 225 226
type_specifier_list  : 89 90 223 224 225 299 300 397 398 399
typedef_name         : 176 221
unary_expression     : 11 56 59 60 62
unary_operator       : 61

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . NUMBER
    (2) program -> . STRING
    (3) program -> . expression
    (4) program -> . statement
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    NUMBER          shift and go to state 2
    STRING          shift and go to state 3
    IDENTIFIER      shift and go to state 17
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 58
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    THIS            shift and go to state 70
    LPAREN          shift and go to state 23
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    TYPEDEF         shift and go to state 87
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    OPERATOR        shift and go to state 105
    ENUM            shift and go to state 107
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112

    program                        shift and go to state 1
    expression                     shift and go to state 4
    statement                      shift and go to state 5
    assignment_expression          shift and go to state 6
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    declaration                    shift and go to state 32
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 52
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 73
    qualified_type_name            shift and go to state 74
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 92
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 94
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    AND_expression                 shift and go to state 104
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 1

    (0) S' -> program .



state 2

    (1) program -> NUMBER .
    (132) literal -> NUMBER .

  ! reduce/reduce conflict for $end resolved using rule 1 (program -> NUMBER .)
    $end            reduce using rule 1 (program -> NUMBER .)
    LSPAREN         reduce using rule 132 (literal -> NUMBER .)
    LPAREN          reduce using rule 132 (literal -> NUMBER .)
    DOT             reduce using rule 132 (literal -> NUMBER .)
    ARROW           reduce using rule 132 (literal -> NUMBER .)
    DPLUSOP         reduce using rule 132 (literal -> NUMBER .)
    DMINUSOP        reduce using rule 132 (literal -> NUMBER .)
    EQUAL           reduce using rule 132 (literal -> NUMBER .)
    MULTEQOP        reduce using rule 132 (literal -> NUMBER .)
    DIVEQOP         reduce using rule 132 (literal -> NUMBER .)
    MODEQOP         reduce using rule 132 (literal -> NUMBER .)
    PLUSEQOP        reduce using rule 132 (literal -> NUMBER .)
    MINUSEQOP       reduce using rule 132 (literal -> NUMBER .)
    LSHIFTEQOP      reduce using rule 132 (literal -> NUMBER .)
    RSHIFTEQOP      reduce using rule 132 (literal -> NUMBER .)
    BANDEQOP        reduce using rule 132 (literal -> NUMBER .)
    B_E_OR          reduce using rule 132 (literal -> NUMBER .)
    BOREQOP         reduce using rule 132 (literal -> NUMBER .)
    DOTSTAR         reduce using rule 132 (literal -> NUMBER .)
    ARROWSTAR       reduce using rule 132 (literal -> NUMBER .)
    MULTOP          reduce using rule 132 (literal -> NUMBER .)
    DIVOP           reduce using rule 132 (literal -> NUMBER .)
    MODOP           reduce using rule 132 (literal -> NUMBER .)
    PLUSOP          reduce using rule 132 (literal -> NUMBER .)
    MINUSOP         reduce using rule 132 (literal -> NUMBER .)
    LSHIFT          reduce using rule 132 (literal -> NUMBER .)
    RSHIFT          reduce using rule 132 (literal -> NUMBER .)
    LTCOMP          reduce using rule 132 (literal -> NUMBER .)
    GTCOMP          reduce using rule 132 (literal -> NUMBER .)
    LTECOMP         reduce using rule 132 (literal -> NUMBER .)
    GTECOMP         reduce using rule 132 (literal -> NUMBER .)
    EQCOMP          reduce using rule 132 (literal -> NUMBER .)
    NEQCOMP         reduce using rule 132 (literal -> NUMBER .)
    BANDOP          reduce using rule 132 (literal -> NUMBER .)
    XOROP           reduce using rule 132 (literal -> NUMBER .)
    OROP            reduce using rule 132 (literal -> NUMBER .)
    ANDOP           reduce using rule 132 (literal -> NUMBER .)
    QUESMARK        reduce using rule 132 (literal -> NUMBER .)
    COMMA           reduce using rule 132 (literal -> NUMBER .)
    SEMICOLON       reduce using rule 132 (literal -> NUMBER .)

  ! $end            [ reduce using rule 132 (literal -> NUMBER .) ]


state 3

    (2) program -> STRING .
    (134) literal -> STRING .

  ! reduce/reduce conflict for $end resolved using rule 2 (program -> STRING .)
    $end            reduce using rule 2 (program -> STRING .)
    LSPAREN         reduce using rule 134 (literal -> STRING .)
    LPAREN          reduce using rule 134 (literal -> STRING .)
    DOT             reduce using rule 134 (literal -> STRING .)
    ARROW           reduce using rule 134 (literal -> STRING .)
    DPLUSOP         reduce using rule 134 (literal -> STRING .)
    DMINUSOP        reduce using rule 134 (literal -> STRING .)
    EQUAL           reduce using rule 134 (literal -> STRING .)
    MULTEQOP        reduce using rule 134 (literal -> STRING .)
    DIVEQOP         reduce using rule 134 (literal -> STRING .)
    MODEQOP         reduce using rule 134 (literal -> STRING .)
    PLUSEQOP        reduce using rule 134 (literal -> STRING .)
    MINUSEQOP       reduce using rule 134 (literal -> STRING .)
    LSHIFTEQOP      reduce using rule 134 (literal -> STRING .)
    RSHIFTEQOP      reduce using rule 134 (literal -> STRING .)
    BANDEQOP        reduce using rule 134 (literal -> STRING .)
    B_E_OR          reduce using rule 134 (literal -> STRING .)
    BOREQOP         reduce using rule 134 (literal -> STRING .)
    DOTSTAR         reduce using rule 134 (literal -> STRING .)
    ARROWSTAR       reduce using rule 134 (literal -> STRING .)
    MULTOP          reduce using rule 134 (literal -> STRING .)
    DIVOP           reduce using rule 134 (literal -> STRING .)
    MODOP           reduce using rule 134 (literal -> STRING .)
    PLUSOP          reduce using rule 134 (literal -> STRING .)
    MINUSOP         reduce using rule 134 (literal -> STRING .)
    LSHIFT          reduce using rule 134 (literal -> STRING .)
    RSHIFT          reduce using rule 134 (literal -> STRING .)
    LTCOMP          reduce using rule 134 (literal -> STRING .)
    GTCOMP          reduce using rule 134 (literal -> STRING .)
    LTECOMP         reduce using rule 134 (literal -> STRING .)
    GTECOMP         reduce using rule 134 (literal -> STRING .)
    EQCOMP          reduce using rule 134 (literal -> STRING .)
    NEQCOMP         reduce using rule 134 (literal -> STRING .)
    BANDOP          reduce using rule 134 (literal -> STRING .)
    XOROP           reduce using rule 134 (literal -> STRING .)
    OROP            reduce using rule 134 (literal -> STRING .)
    ANDOP           reduce using rule 134 (literal -> STRING .)
    QUESMARK        reduce using rule 134 (literal -> STRING .)
    COMMA           reduce using rule 134 (literal -> STRING .)
    SEMICOLON       reduce using rule 134 (literal -> STRING .)

  ! $end            [ reduce using rule 134 (literal -> STRING .) ]


state 4

    (3) program -> expression .
    (9) expression -> expression . COMMA assignment_expression
    (358) expression_statement -> expression . SEMICOLON

    $end            reduce using rule 3 (program -> expression .)
    COMMA           shift and go to state 118
    SEMICOLON       shift and go to state 119


state 5

    (4) program -> statement .

    $end            reduce using rule 4 (program -> statement .)


state 6

    (8) expression -> assignment_expression .

    COMMA           reduce using rule 8 (expression -> assignment_expression .)
    SEMICOLON       reduce using rule 8 (expression -> assignment_expression .)
    $end            reduce using rule 8 (expression -> assignment_expression .)
    RPAREN          reduce using rule 8 (expression -> assignment_expression .)
    COLON           reduce using rule 8 (expression -> assignment_expression .)
    RSPAREN         reduce using rule 8 (expression -> assignment_expression .)
    GTCOMP          reduce using rule 8 (expression -> assignment_expression .)


state 7

    (347) statement -> labeled_statement .

    $end            reduce using rule 347 (statement -> labeled_statement .)
    RCPAREN         reduce using rule 347 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 347 (statement -> labeled_statement .)
    CASE            reduce using rule 347 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 347 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 347 (statement -> labeled_statement .)
    LCPAREN         reduce using rule 347 (statement -> labeled_statement .)
    IF              reduce using rule 347 (statement -> labeled_statement .)
    SWITCH          reduce using rule 347 (statement -> labeled_statement .)
    WHILE           reduce using rule 347 (statement -> labeled_statement .)
    DO              reduce using rule 347 (statement -> labeled_statement .)
    FOR             reduce using rule 347 (statement -> labeled_statement .)
    BREAK           reduce using rule 347 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 347 (statement -> labeled_statement .)
    RETURN          reduce using rule 347 (statement -> labeled_statement .)
    GOTO            reduce using rule 347 (statement -> labeled_statement .)
    TRY             reduce using rule 347 (statement -> labeled_statement .)
    ASM             reduce using rule 347 (statement -> labeled_statement .)
    TEMPLATE        reduce using rule 347 (statement -> labeled_statement .)
    EXTERN          reduce using rule 347 (statement -> labeled_statement .)
    DPLUSOP         reduce using rule 347 (statement -> labeled_statement .)
    DMINUSOP        reduce using rule 347 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 347 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 347 (statement -> labeled_statement .)
    LPAREN          reduce using rule 347 (statement -> labeled_statement .)
    MULTOP          reduce using rule 347 (statement -> labeled_statement .)
    BANDOP          reduce using rule 347 (statement -> labeled_statement .)
    PLUSOP          reduce using rule 347 (statement -> labeled_statement .)
    MINUSOP         reduce using rule 347 (statement -> labeled_statement .)
    NOTSYM          reduce using rule 347 (statement -> labeled_statement .)
    BNOP            reduce using rule 347 (statement -> labeled_statement .)
    DOUBLECOLON     reduce using rule 347 (statement -> labeled_statement .)
    NEW             reduce using rule 347 (statement -> labeled_statement .)
    DELETE          reduce using rule 347 (statement -> labeled_statement .)
    AUTO            reduce using rule 347 (statement -> labeled_statement .)
    STATIC          reduce using rule 347 (statement -> labeled_statement .)
    CONST           reduce using rule 347 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 347 (statement -> labeled_statement .)
    INLINE          reduce using rule 347 (statement -> labeled_statement .)
    VIRTUAL         reduce using rule 347 (statement -> labeled_statement .)
    THIS            reduce using rule 347 (statement -> labeled_statement .)
    CHAR            reduce using rule 347 (statement -> labeled_statement .)
    SHORT           reduce using rule 347 (statement -> labeled_statement .)
    INT             reduce using rule 347 (statement -> labeled_statement .)
    LONG            reduce using rule 347 (statement -> labeled_statement .)
    SIGNED          reduce using rule 347 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 347 (statement -> labeled_statement .)
    FLOAT           reduce using rule 347 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 347 (statement -> labeled_statement .)
    VOID            reduce using rule 347 (statement -> labeled_statement .)
    ENUM            reduce using rule 347 (statement -> labeled_statement .)
    NUMBER          reduce using rule 347 (statement -> labeled_statement .)
    STRING          reduce using rule 347 (statement -> labeled_statement .)
    CLASS           reduce using rule 347 (statement -> labeled_statement .)
    STRUCT          reduce using rule 347 (statement -> labeled_statement .)
    UNION           reduce using rule 347 (statement -> labeled_statement .)
    OPERATOR        reduce using rule 347 (statement -> labeled_statement .)
    ELSE            reduce using rule 347 (statement -> labeled_statement .)


state 8

    (348) statement -> expression_statement .

    $end            reduce using rule 348 (statement -> expression_statement .)
    RCPAREN         reduce using rule 348 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 348 (statement -> expression_statement .)
    CASE            reduce using rule 348 (statement -> expression_statement .)
    DEFAULT         reduce using rule 348 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 348 (statement -> expression_statement .)
    LCPAREN         reduce using rule 348 (statement -> expression_statement .)
    IF              reduce using rule 348 (statement -> expression_statement .)
    SWITCH          reduce using rule 348 (statement -> expression_statement .)
    WHILE           reduce using rule 348 (statement -> expression_statement .)
    DO              reduce using rule 348 (statement -> expression_statement .)
    FOR             reduce using rule 348 (statement -> expression_statement .)
    BREAK           reduce using rule 348 (statement -> expression_statement .)
    CONTINUE        reduce using rule 348 (statement -> expression_statement .)
    RETURN          reduce using rule 348 (statement -> expression_statement .)
    GOTO            reduce using rule 348 (statement -> expression_statement .)
    TRY             reduce using rule 348 (statement -> expression_statement .)
    ASM             reduce using rule 348 (statement -> expression_statement .)
    TEMPLATE        reduce using rule 348 (statement -> expression_statement .)
    EXTERN          reduce using rule 348 (statement -> expression_statement .)
    DPLUSOP         reduce using rule 348 (statement -> expression_statement .)
    DMINUSOP        reduce using rule 348 (statement -> expression_statement .)
    SIZEOF          reduce using rule 348 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 348 (statement -> expression_statement .)
    LPAREN          reduce using rule 348 (statement -> expression_statement .)
    MULTOP          reduce using rule 348 (statement -> expression_statement .)
    BANDOP          reduce using rule 348 (statement -> expression_statement .)
    PLUSOP          reduce using rule 348 (statement -> expression_statement .)
    MINUSOP         reduce using rule 348 (statement -> expression_statement .)
    NOTSYM          reduce using rule 348 (statement -> expression_statement .)
    BNOP            reduce using rule 348 (statement -> expression_statement .)
    DOUBLECOLON     reduce using rule 348 (statement -> expression_statement .)
    NEW             reduce using rule 348 (statement -> expression_statement .)
    DELETE          reduce using rule 348 (statement -> expression_statement .)
    AUTO            reduce using rule 348 (statement -> expression_statement .)
    STATIC          reduce using rule 348 (statement -> expression_statement .)
    CONST           reduce using rule 348 (statement -> expression_statement .)
    VOLATILE        reduce using rule 348 (statement -> expression_statement .)
    INLINE          reduce using rule 348 (statement -> expression_statement .)
    VIRTUAL         reduce using rule 348 (statement -> expression_statement .)
    THIS            reduce using rule 348 (statement -> expression_statement .)
    CHAR            reduce using rule 348 (statement -> expression_statement .)
    SHORT           reduce using rule 348 (statement -> expression_statement .)
    INT             reduce using rule 348 (statement -> expression_statement .)
    LONG            reduce using rule 348 (statement -> expression_statement .)
    SIGNED          reduce using rule 348 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 348 (statement -> expression_statement .)
    FLOAT           reduce using rule 348 (statement -> expression_statement .)
    DOUBLE          reduce using rule 348 (statement -> expression_statement .)
    VOID            reduce using rule 348 (statement -> expression_statement .)
    ENUM            reduce using rule 348 (statement -> expression_statement .)
    NUMBER          reduce using rule 348 (statement -> expression_statement .)
    STRING          reduce using rule 348 (statement -> expression_statement .)
    CLASS           reduce using rule 348 (statement -> expression_statement .)
    STRUCT          reduce using rule 348 (statement -> expression_statement .)
    UNION           reduce using rule 348 (statement -> expression_statement .)
    OPERATOR        reduce using rule 348 (statement -> expression_statement .)
    ELSE            reduce using rule 348 (statement -> expression_statement .)


state 9

    (349) statement -> compound_statement .

    $end            reduce using rule 349 (statement -> compound_statement .)
    RCPAREN         reduce using rule 349 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 349 (statement -> compound_statement .)
    CASE            reduce using rule 349 (statement -> compound_statement .)
    DEFAULT         reduce using rule 349 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 349 (statement -> compound_statement .)
    LCPAREN         reduce using rule 349 (statement -> compound_statement .)
    IF              reduce using rule 349 (statement -> compound_statement .)
    SWITCH          reduce using rule 349 (statement -> compound_statement .)
    WHILE           reduce using rule 349 (statement -> compound_statement .)
    DO              reduce using rule 349 (statement -> compound_statement .)
    FOR             reduce using rule 349 (statement -> compound_statement .)
    BREAK           reduce using rule 349 (statement -> compound_statement .)
    CONTINUE        reduce using rule 349 (statement -> compound_statement .)
    RETURN          reduce using rule 349 (statement -> compound_statement .)
    GOTO            reduce using rule 349 (statement -> compound_statement .)
    TRY             reduce using rule 349 (statement -> compound_statement .)
    ASM             reduce using rule 349 (statement -> compound_statement .)
    TEMPLATE        reduce using rule 349 (statement -> compound_statement .)
    EXTERN          reduce using rule 349 (statement -> compound_statement .)
    DPLUSOP         reduce using rule 349 (statement -> compound_statement .)
    DMINUSOP        reduce using rule 349 (statement -> compound_statement .)
    SIZEOF          reduce using rule 349 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 349 (statement -> compound_statement .)
    LPAREN          reduce using rule 349 (statement -> compound_statement .)
    MULTOP          reduce using rule 349 (statement -> compound_statement .)
    BANDOP          reduce using rule 349 (statement -> compound_statement .)
    PLUSOP          reduce using rule 349 (statement -> compound_statement .)
    MINUSOP         reduce using rule 349 (statement -> compound_statement .)
    NOTSYM          reduce using rule 349 (statement -> compound_statement .)
    BNOP            reduce using rule 349 (statement -> compound_statement .)
    DOUBLECOLON     reduce using rule 349 (statement -> compound_statement .)
    NEW             reduce using rule 349 (statement -> compound_statement .)
    DELETE          reduce using rule 349 (statement -> compound_statement .)
    AUTO            reduce using rule 349 (statement -> compound_statement .)
    STATIC          reduce using rule 349 (statement -> compound_statement .)
    CONST           reduce using rule 349 (statement -> compound_statement .)
    VOLATILE        reduce using rule 349 (statement -> compound_statement .)
    INLINE          reduce using rule 349 (statement -> compound_statement .)
    VIRTUAL         reduce using rule 349 (statement -> compound_statement .)
    THIS            reduce using rule 349 (statement -> compound_statement .)
    CHAR            reduce using rule 349 (statement -> compound_statement .)
    SHORT           reduce using rule 349 (statement -> compound_statement .)
    INT             reduce using rule 349 (statement -> compound_statement .)
    LONG            reduce using rule 349 (statement -> compound_statement .)
    SIGNED          reduce using rule 349 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 349 (statement -> compound_statement .)
    FLOAT           reduce using rule 349 (statement -> compound_statement .)
    DOUBLE          reduce using rule 349 (statement -> compound_statement .)
    VOID            reduce using rule 349 (statement -> compound_statement .)
    ENUM            reduce using rule 349 (statement -> compound_statement .)
    NUMBER          reduce using rule 349 (statement -> compound_statement .)
    STRING          reduce using rule 349 (statement -> compound_statement .)
    CLASS           reduce using rule 349 (statement -> compound_statement .)
    STRUCT          reduce using rule 349 (statement -> compound_statement .)
    UNION           reduce using rule 349 (statement -> compound_statement .)
    OPERATOR        reduce using rule 349 (statement -> compound_statement .)
    ELSE            reduce using rule 349 (statement -> compound_statement .)


state 10

    (350) statement -> selection_statement .

    $end            reduce using rule 350 (statement -> selection_statement .)
    RCPAREN         reduce using rule 350 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 350 (statement -> selection_statement .)
    CASE            reduce using rule 350 (statement -> selection_statement .)
    DEFAULT         reduce using rule 350 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 350 (statement -> selection_statement .)
    LCPAREN         reduce using rule 350 (statement -> selection_statement .)
    IF              reduce using rule 350 (statement -> selection_statement .)
    SWITCH          reduce using rule 350 (statement -> selection_statement .)
    WHILE           reduce using rule 350 (statement -> selection_statement .)
    DO              reduce using rule 350 (statement -> selection_statement .)
    FOR             reduce using rule 350 (statement -> selection_statement .)
    BREAK           reduce using rule 350 (statement -> selection_statement .)
    CONTINUE        reduce using rule 350 (statement -> selection_statement .)
    RETURN          reduce using rule 350 (statement -> selection_statement .)
    GOTO            reduce using rule 350 (statement -> selection_statement .)
    TRY             reduce using rule 350 (statement -> selection_statement .)
    ASM             reduce using rule 350 (statement -> selection_statement .)
    TEMPLATE        reduce using rule 350 (statement -> selection_statement .)
    EXTERN          reduce using rule 350 (statement -> selection_statement .)
    DPLUSOP         reduce using rule 350 (statement -> selection_statement .)
    DMINUSOP        reduce using rule 350 (statement -> selection_statement .)
    SIZEOF          reduce using rule 350 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 350 (statement -> selection_statement .)
    LPAREN          reduce using rule 350 (statement -> selection_statement .)
    MULTOP          reduce using rule 350 (statement -> selection_statement .)
    BANDOP          reduce using rule 350 (statement -> selection_statement .)
    PLUSOP          reduce using rule 350 (statement -> selection_statement .)
    MINUSOP         reduce using rule 350 (statement -> selection_statement .)
    NOTSYM          reduce using rule 350 (statement -> selection_statement .)
    BNOP            reduce using rule 350 (statement -> selection_statement .)
    DOUBLECOLON     reduce using rule 350 (statement -> selection_statement .)
    NEW             reduce using rule 350 (statement -> selection_statement .)
    DELETE          reduce using rule 350 (statement -> selection_statement .)
    AUTO            reduce using rule 350 (statement -> selection_statement .)
    STATIC          reduce using rule 350 (statement -> selection_statement .)
    CONST           reduce using rule 350 (statement -> selection_statement .)
    VOLATILE        reduce using rule 350 (statement -> selection_statement .)
    INLINE          reduce using rule 350 (statement -> selection_statement .)
    VIRTUAL         reduce using rule 350 (statement -> selection_statement .)
    THIS            reduce using rule 350 (statement -> selection_statement .)
    CHAR            reduce using rule 350 (statement -> selection_statement .)
    SHORT           reduce using rule 350 (statement -> selection_statement .)
    INT             reduce using rule 350 (statement -> selection_statement .)
    LONG            reduce using rule 350 (statement -> selection_statement .)
    SIGNED          reduce using rule 350 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 350 (statement -> selection_statement .)
    FLOAT           reduce using rule 350 (statement -> selection_statement .)
    DOUBLE          reduce using rule 350 (statement -> selection_statement .)
    VOID            reduce using rule 350 (statement -> selection_statement .)
    ENUM            reduce using rule 350 (statement -> selection_statement .)
    NUMBER          reduce using rule 350 (statement -> selection_statement .)
    STRING          reduce using rule 350 (statement -> selection_statement .)
    CLASS           reduce using rule 350 (statement -> selection_statement .)
    STRUCT          reduce using rule 350 (statement -> selection_statement .)
    UNION           reduce using rule 350 (statement -> selection_statement .)
    OPERATOR        reduce using rule 350 (statement -> selection_statement .)
    ELSE            reduce using rule 350 (statement -> selection_statement .)


state 11

    (351) statement -> iteration_statement .

    $end            reduce using rule 351 (statement -> iteration_statement .)
    RCPAREN         reduce using rule 351 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 351 (statement -> iteration_statement .)
    CASE            reduce using rule 351 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 351 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 351 (statement -> iteration_statement .)
    LCPAREN         reduce using rule 351 (statement -> iteration_statement .)
    IF              reduce using rule 351 (statement -> iteration_statement .)
    SWITCH          reduce using rule 351 (statement -> iteration_statement .)
    WHILE           reduce using rule 351 (statement -> iteration_statement .)
    DO              reduce using rule 351 (statement -> iteration_statement .)
    FOR             reduce using rule 351 (statement -> iteration_statement .)
    BREAK           reduce using rule 351 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 351 (statement -> iteration_statement .)
    RETURN          reduce using rule 351 (statement -> iteration_statement .)
    GOTO            reduce using rule 351 (statement -> iteration_statement .)
    TRY             reduce using rule 351 (statement -> iteration_statement .)
    ASM             reduce using rule 351 (statement -> iteration_statement .)
    TEMPLATE        reduce using rule 351 (statement -> iteration_statement .)
    EXTERN          reduce using rule 351 (statement -> iteration_statement .)
    DPLUSOP         reduce using rule 351 (statement -> iteration_statement .)
    DMINUSOP        reduce using rule 351 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 351 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 351 (statement -> iteration_statement .)
    LPAREN          reduce using rule 351 (statement -> iteration_statement .)
    MULTOP          reduce using rule 351 (statement -> iteration_statement .)
    BANDOP          reduce using rule 351 (statement -> iteration_statement .)
    PLUSOP          reduce using rule 351 (statement -> iteration_statement .)
    MINUSOP         reduce using rule 351 (statement -> iteration_statement .)
    NOTSYM          reduce using rule 351 (statement -> iteration_statement .)
    BNOP            reduce using rule 351 (statement -> iteration_statement .)
    DOUBLECOLON     reduce using rule 351 (statement -> iteration_statement .)
    NEW             reduce using rule 351 (statement -> iteration_statement .)
    DELETE          reduce using rule 351 (statement -> iteration_statement .)
    AUTO            reduce using rule 351 (statement -> iteration_statement .)
    STATIC          reduce using rule 351 (statement -> iteration_statement .)
    CONST           reduce using rule 351 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 351 (statement -> iteration_statement .)
    INLINE          reduce using rule 351 (statement -> iteration_statement .)
    VIRTUAL         reduce using rule 351 (statement -> iteration_statement .)
    THIS            reduce using rule 351 (statement -> iteration_statement .)
    CHAR            reduce using rule 351 (statement -> iteration_statement .)
    SHORT           reduce using rule 351 (statement -> iteration_statement .)
    INT             reduce using rule 351 (statement -> iteration_statement .)
    LONG            reduce using rule 351 (statement -> iteration_statement .)
    SIGNED          reduce using rule 351 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 351 (statement -> iteration_statement .)
    FLOAT           reduce using rule 351 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 351 (statement -> iteration_statement .)
    VOID            reduce using rule 351 (statement -> iteration_statement .)
    ENUM            reduce using rule 351 (statement -> iteration_statement .)
    NUMBER          reduce using rule 351 (statement -> iteration_statement .)
    STRING          reduce using rule 351 (statement -> iteration_statement .)
    CLASS           reduce using rule 351 (statement -> iteration_statement .)
    STRUCT          reduce using rule 351 (statement -> iteration_statement .)
    UNION           reduce using rule 351 (statement -> iteration_statement .)
    OPERATOR        reduce using rule 351 (statement -> iteration_statement .)
    ELSE            reduce using rule 351 (statement -> iteration_statement .)


state 12

    (352) statement -> jump_statement .

    $end            reduce using rule 352 (statement -> jump_statement .)
    RCPAREN         reduce using rule 352 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 352 (statement -> jump_statement .)
    CASE            reduce using rule 352 (statement -> jump_statement .)
    DEFAULT         reduce using rule 352 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 352 (statement -> jump_statement .)
    LCPAREN         reduce using rule 352 (statement -> jump_statement .)
    IF              reduce using rule 352 (statement -> jump_statement .)
    SWITCH          reduce using rule 352 (statement -> jump_statement .)
    WHILE           reduce using rule 352 (statement -> jump_statement .)
    DO              reduce using rule 352 (statement -> jump_statement .)
    FOR             reduce using rule 352 (statement -> jump_statement .)
    BREAK           reduce using rule 352 (statement -> jump_statement .)
    CONTINUE        reduce using rule 352 (statement -> jump_statement .)
    RETURN          reduce using rule 352 (statement -> jump_statement .)
    GOTO            reduce using rule 352 (statement -> jump_statement .)
    TRY             reduce using rule 352 (statement -> jump_statement .)
    ASM             reduce using rule 352 (statement -> jump_statement .)
    TEMPLATE        reduce using rule 352 (statement -> jump_statement .)
    EXTERN          reduce using rule 352 (statement -> jump_statement .)
    DPLUSOP         reduce using rule 352 (statement -> jump_statement .)
    DMINUSOP        reduce using rule 352 (statement -> jump_statement .)
    SIZEOF          reduce using rule 352 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 352 (statement -> jump_statement .)
    LPAREN          reduce using rule 352 (statement -> jump_statement .)
    MULTOP          reduce using rule 352 (statement -> jump_statement .)
    BANDOP          reduce using rule 352 (statement -> jump_statement .)
    PLUSOP          reduce using rule 352 (statement -> jump_statement .)
    MINUSOP         reduce using rule 352 (statement -> jump_statement .)
    NOTSYM          reduce using rule 352 (statement -> jump_statement .)
    BNOP            reduce using rule 352 (statement -> jump_statement .)
    DOUBLECOLON     reduce using rule 352 (statement -> jump_statement .)
    NEW             reduce using rule 352 (statement -> jump_statement .)
    DELETE          reduce using rule 352 (statement -> jump_statement .)
    AUTO            reduce using rule 352 (statement -> jump_statement .)
    STATIC          reduce using rule 352 (statement -> jump_statement .)
    CONST           reduce using rule 352 (statement -> jump_statement .)
    VOLATILE        reduce using rule 352 (statement -> jump_statement .)
    INLINE          reduce using rule 352 (statement -> jump_statement .)
    VIRTUAL         reduce using rule 352 (statement -> jump_statement .)
    THIS            reduce using rule 352 (statement -> jump_statement .)
    CHAR            reduce using rule 352 (statement -> jump_statement .)
    SHORT           reduce using rule 352 (statement -> jump_statement .)
    INT             reduce using rule 352 (statement -> jump_statement .)
    LONG            reduce using rule 352 (statement -> jump_statement .)
    SIGNED          reduce using rule 352 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 352 (statement -> jump_statement .)
    FLOAT           reduce using rule 352 (statement -> jump_statement .)
    DOUBLE          reduce using rule 352 (statement -> jump_statement .)
    VOID            reduce using rule 352 (statement -> jump_statement .)
    ENUM            reduce using rule 352 (statement -> jump_statement .)
    NUMBER          reduce using rule 352 (statement -> jump_statement .)
    STRING          reduce using rule 352 (statement -> jump_statement .)
    CLASS           reduce using rule 352 (statement -> jump_statement .)
    STRUCT          reduce using rule 352 (statement -> jump_statement .)
    UNION           reduce using rule 352 (statement -> jump_statement .)
    OPERATOR        reduce using rule 352 (statement -> jump_statement .)
    ELSE            reduce using rule 352 (statement -> jump_statement .)


state 13

    (353) statement -> declaration_statement .

    $end            reduce using rule 353 (statement -> declaration_statement .)
    RCPAREN         reduce using rule 353 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 353 (statement -> declaration_statement .)
    CASE            reduce using rule 353 (statement -> declaration_statement .)
    DEFAULT         reduce using rule 353 (statement -> declaration_statement .)
    SEMICOLON       reduce using rule 353 (statement -> declaration_statement .)
    LCPAREN         reduce using rule 353 (statement -> declaration_statement .)
    IF              reduce using rule 353 (statement -> declaration_statement .)
    SWITCH          reduce using rule 353 (statement -> declaration_statement .)
    WHILE           reduce using rule 353 (statement -> declaration_statement .)
    DO              reduce using rule 353 (statement -> declaration_statement .)
    FOR             reduce using rule 353 (statement -> declaration_statement .)
    BREAK           reduce using rule 353 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 353 (statement -> declaration_statement .)
    RETURN          reduce using rule 353 (statement -> declaration_statement .)
    GOTO            reduce using rule 353 (statement -> declaration_statement .)
    TRY             reduce using rule 353 (statement -> declaration_statement .)
    ASM             reduce using rule 353 (statement -> declaration_statement .)
    TEMPLATE        reduce using rule 353 (statement -> declaration_statement .)
    EXTERN          reduce using rule 353 (statement -> declaration_statement .)
    DPLUSOP         reduce using rule 353 (statement -> declaration_statement .)
    DMINUSOP        reduce using rule 353 (statement -> declaration_statement .)
    SIZEOF          reduce using rule 353 (statement -> declaration_statement .)
    TYPEDEF         reduce using rule 353 (statement -> declaration_statement .)
    LPAREN          reduce using rule 353 (statement -> declaration_statement .)
    MULTOP          reduce using rule 353 (statement -> declaration_statement .)
    BANDOP          reduce using rule 353 (statement -> declaration_statement .)
    PLUSOP          reduce using rule 353 (statement -> declaration_statement .)
    MINUSOP         reduce using rule 353 (statement -> declaration_statement .)
    NOTSYM          reduce using rule 353 (statement -> declaration_statement .)
    BNOP            reduce using rule 353 (statement -> declaration_statement .)
    DOUBLECOLON     reduce using rule 353 (statement -> declaration_statement .)
    NEW             reduce using rule 353 (statement -> declaration_statement .)
    DELETE          reduce using rule 353 (statement -> declaration_statement .)
    AUTO            reduce using rule 353 (statement -> declaration_statement .)
    STATIC          reduce using rule 353 (statement -> declaration_statement .)
    CONST           reduce using rule 353 (statement -> declaration_statement .)
    VOLATILE        reduce using rule 353 (statement -> declaration_statement .)
    INLINE          reduce using rule 353 (statement -> declaration_statement .)
    VIRTUAL         reduce using rule 353 (statement -> declaration_statement .)
    THIS            reduce using rule 353 (statement -> declaration_statement .)
    CHAR            reduce using rule 353 (statement -> declaration_statement .)
    SHORT           reduce using rule 353 (statement -> declaration_statement .)
    INT             reduce using rule 353 (statement -> declaration_statement .)
    LONG            reduce using rule 353 (statement -> declaration_statement .)
    SIGNED          reduce using rule 353 (statement -> declaration_statement .)
    UNSIGNED        reduce using rule 353 (statement -> declaration_statement .)
    FLOAT           reduce using rule 353 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 353 (statement -> declaration_statement .)
    VOID            reduce using rule 353 (statement -> declaration_statement .)
    ENUM            reduce using rule 353 (statement -> declaration_statement .)
    NUMBER          reduce using rule 353 (statement -> declaration_statement .)
    STRING          reduce using rule 353 (statement -> declaration_statement .)
    CLASS           reduce using rule 353 (statement -> declaration_statement .)
    STRUCT          reduce using rule 353 (statement -> declaration_statement .)
    UNION           reduce using rule 353 (statement -> declaration_statement .)
    OPERATOR        reduce using rule 353 (statement -> declaration_statement .)
    ELSE            reduce using rule 353 (statement -> declaration_statement .)


state 14

    (354) statement -> try_block .

    $end            reduce using rule 354 (statement -> try_block .)
    RCPAREN         reduce using rule 354 (statement -> try_block .)
    IDENTIFIER      reduce using rule 354 (statement -> try_block .)
    CASE            reduce using rule 354 (statement -> try_block .)
    DEFAULT         reduce using rule 354 (statement -> try_block .)
    SEMICOLON       reduce using rule 354 (statement -> try_block .)
    LCPAREN         reduce using rule 354 (statement -> try_block .)
    IF              reduce using rule 354 (statement -> try_block .)
    SWITCH          reduce using rule 354 (statement -> try_block .)
    WHILE           reduce using rule 354 (statement -> try_block .)
    DO              reduce using rule 354 (statement -> try_block .)
    FOR             reduce using rule 354 (statement -> try_block .)
    BREAK           reduce using rule 354 (statement -> try_block .)
    CONTINUE        reduce using rule 354 (statement -> try_block .)
    RETURN          reduce using rule 354 (statement -> try_block .)
    GOTO            reduce using rule 354 (statement -> try_block .)
    TRY             reduce using rule 354 (statement -> try_block .)
    ASM             reduce using rule 354 (statement -> try_block .)
    TEMPLATE        reduce using rule 354 (statement -> try_block .)
    EXTERN          reduce using rule 354 (statement -> try_block .)
    DPLUSOP         reduce using rule 354 (statement -> try_block .)
    DMINUSOP        reduce using rule 354 (statement -> try_block .)
    SIZEOF          reduce using rule 354 (statement -> try_block .)
    TYPEDEF         reduce using rule 354 (statement -> try_block .)
    LPAREN          reduce using rule 354 (statement -> try_block .)
    MULTOP          reduce using rule 354 (statement -> try_block .)
    BANDOP          reduce using rule 354 (statement -> try_block .)
    PLUSOP          reduce using rule 354 (statement -> try_block .)
    MINUSOP         reduce using rule 354 (statement -> try_block .)
    NOTSYM          reduce using rule 354 (statement -> try_block .)
    BNOP            reduce using rule 354 (statement -> try_block .)
    DOUBLECOLON     reduce using rule 354 (statement -> try_block .)
    NEW             reduce using rule 354 (statement -> try_block .)
    DELETE          reduce using rule 354 (statement -> try_block .)
    AUTO            reduce using rule 354 (statement -> try_block .)
    STATIC          reduce using rule 354 (statement -> try_block .)
    CONST           reduce using rule 354 (statement -> try_block .)
    VOLATILE        reduce using rule 354 (statement -> try_block .)
    INLINE          reduce using rule 354 (statement -> try_block .)
    VIRTUAL         reduce using rule 354 (statement -> try_block .)
    THIS            reduce using rule 354 (statement -> try_block .)
    CHAR            reduce using rule 354 (statement -> try_block .)
    SHORT           reduce using rule 354 (statement -> try_block .)
    INT             reduce using rule 354 (statement -> try_block .)
    LONG            reduce using rule 354 (statement -> try_block .)
    SIGNED          reduce using rule 354 (statement -> try_block .)
    UNSIGNED        reduce using rule 354 (statement -> try_block .)
    FLOAT           reduce using rule 354 (statement -> try_block .)
    DOUBLE          reduce using rule 354 (statement -> try_block .)
    VOID            reduce using rule 354 (statement -> try_block .)
    ENUM            reduce using rule 354 (statement -> try_block .)
    NUMBER          reduce using rule 354 (statement -> try_block .)
    STRING          reduce using rule 354 (statement -> try_block .)
    CLASS           reduce using rule 354 (statement -> try_block .)
    STRUCT          reduce using rule 354 (statement -> try_block .)
    UNION           reduce using rule 354 (statement -> try_block .)
    OPERATOR        reduce using rule 354 (statement -> try_block .)
    ELSE            reduce using rule 354 (statement -> try_block .)


state 15

    (10) assignment_expression -> conditional_expression .

    COMMA           reduce using rule 10 (assignment_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 10 (assignment_expression -> conditional_expression .)
    $end            reduce using rule 10 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 10 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 10 (assignment_expression -> conditional_expression .)
    RSPAREN         reduce using rule 10 (assignment_expression -> conditional_expression .)
    GTCOMP          reduce using rule 10 (assignment_expression -> conditional_expression .)
    RCPAREN         reduce using rule 10 (assignment_expression -> conditional_expression .)


state 16

    (11) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (56) cast_expression -> unary_expression .
    (12) assignment_operator -> . EQUAL
    (13) assignment_operator -> . MULTEQOP
    (14) assignment_operator -> . DIVEQOP
    (15) assignment_operator -> . MODEQOP
    (16) assignment_operator -> . PLUSEQOP
    (17) assignment_operator -> . MINUSEQOP
    (18) assignment_operator -> . LSHIFTEQOP
    (19) assignment_operator -> . RSHIFTEQOP
    (20) assignment_operator -> . BANDEQOP
    (21) assignment_operator -> . B_E_OR
    (22) assignment_operator -> . BOREQOP

    DOTSTAR         reduce using rule 56 (cast_expression -> unary_expression .)
    ARROWSTAR       reduce using rule 56 (cast_expression -> unary_expression .)
    MULTOP          reduce using rule 56 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 56 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 56 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 56 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 56 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 56 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 56 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 56 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 56 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 56 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 56 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 56 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 56 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 56 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 56 (cast_expression -> unary_expression .)
    OROP            reduce using rule 56 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 56 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 56 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 56 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 56 (cast_expression -> unary_expression .)
    $end            reduce using rule 56 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 56 (cast_expression -> unary_expression .)
    COLON           reduce using rule 56 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 56 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 56 (cast_expression -> unary_expression .)
    EQUAL           shift and go to state 121
    MULTEQOP        shift and go to state 122
    DIVEQOP         shift and go to state 123
    MODEQOP         shift and go to state 124
    PLUSEQOP        shift and go to state 125
    MINUSEQOP       shift and go to state 126
    LSHIFTEQOP      shift and go to state 127
    RSHIFTEQOP      shift and go to state 128
    BANDEQOP        shift and go to state 129
    B_E_OR          shift and go to state 130
    BOREQOP         shift and go to state 131

    assignment_operator            shift and go to state 120

state 17

    (355) labeled_statement -> IDENTIFIER . COLON statement
    (126) name -> IDENTIFIER .
    (7) typedef_name -> IDENTIFIER .
    (5) class_name -> IDENTIFIER .

  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 5 (class_name -> IDENTIFIER .)
    COLON           shift and go to state 132
    DOT             reduce using rule 126 (name -> IDENTIFIER .)
    ARROW           reduce using rule 126 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 126 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 126 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 126 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 126 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 126 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 126 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 126 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    B_E_OR          reduce using rule 126 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 126 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 126 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 126 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 126 (name -> IDENTIFIER .)
    MODOP           reduce using rule 126 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 126 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 126 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 126 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 126 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 126 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 126 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 126 (name -> IDENTIFIER .)
    XOROP           reduce using rule 126 (name -> IDENTIFIER .)
    OROP            reduce using rule 126 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 126 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 126 (name -> IDENTIFIER .)
    $end            reduce using rule 126 (name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 5 (class_name -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    EQUAL           reduce using rule 5 (class_name -> IDENTIFIER .)
    LCPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 5 (class_name -> IDENTIFIER .)
    COMMA           reduce using rule 5 (class_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 5 (class_name -> IDENTIFIER .)
    AUTO            reduce using rule 5 (class_name -> IDENTIFIER .)
    STATIC          reduce using rule 5 (class_name -> IDENTIFIER .)
    EXTERN          reduce using rule 5 (class_name -> IDENTIFIER .)
    CONST           reduce using rule 5 (class_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 5 (class_name -> IDENTIFIER .)
    INLINE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 5 (class_name -> IDENTIFIER .)
    BNOP            reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 5 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 5 (class_name -> IDENTIFIER .)
    INT             reduce using rule 5 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 5 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 5 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 5 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 5 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 5 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 5 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 5 (class_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 5 (class_name -> IDENTIFIER .)

  ! LSPAREN         [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 5 (class_name -> IDENTIFIER .) ]


state 18

    (356) labeled_statement -> CASE . constant_expression COLON statement
    (190) constant_expression -> . conditional_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    constant_expression            shift and go to state 133
    conditional_expression         shift and go to state 134
    logical_OR_expression          shift and go to state 34
    logical_AND_expression         shift and go to state 49
    inclusive_OR_expression        shift and go to state 68
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 19

    (357) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 149


state 20

    (359) expression_statement -> SEMICOLON .

    $end            reduce using rule 359 (expression_statement -> SEMICOLON .)
    RCPAREN         reduce using rule 359 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 359 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 359 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 359 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 359 (expression_statement -> SEMICOLON .)
    LCPAREN         reduce using rule 359 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 359 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 359 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 359 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 359 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 359 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 359 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 359 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 359 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 359 (expression_statement -> SEMICOLON .)
    TRY             reduce using rule 359 (expression_statement -> SEMICOLON .)
    ASM             reduce using rule 359 (expression_statement -> SEMICOLON .)
    TEMPLATE        reduce using rule 359 (expression_statement -> SEMICOLON .)
    EXTERN          reduce using rule 359 (expression_statement -> SEMICOLON .)
    DPLUSOP         reduce using rule 359 (expression_statement -> SEMICOLON .)
    DMINUSOP        reduce using rule 359 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 359 (expression_statement -> SEMICOLON .)
    TYPEDEF         reduce using rule 359 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 359 (expression_statement -> SEMICOLON .)
    MULTOP          reduce using rule 359 (expression_statement -> SEMICOLON .)
    BANDOP          reduce using rule 359 (expression_statement -> SEMICOLON .)
    PLUSOP          reduce using rule 359 (expression_statement -> SEMICOLON .)
    MINUSOP         reduce using rule 359 (expression_statement -> SEMICOLON .)
    NOTSYM          reduce using rule 359 (expression_statement -> SEMICOLON .)
    BNOP            reduce using rule 359 (expression_statement -> SEMICOLON .)
    DOUBLECOLON     reduce using rule 359 (expression_statement -> SEMICOLON .)
    NEW             reduce using rule 359 (expression_statement -> SEMICOLON .)
    DELETE          reduce using rule 359 (expression_statement -> SEMICOLON .)
    AUTO            reduce using rule 359 (expression_statement -> SEMICOLON .)
    STATIC          reduce using rule 359 (expression_statement -> SEMICOLON .)
    CONST           reduce using rule 359 (expression_statement -> SEMICOLON .)
    VOLATILE        reduce using rule 359 (expression_statement -> SEMICOLON .)
    INLINE          reduce using rule 359 (expression_statement -> SEMICOLON .)
    VIRTUAL         reduce using rule 359 (expression_statement -> SEMICOLON .)
    THIS            reduce using rule 359 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 359 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 359 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 359 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 359 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 359 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 359 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 359 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 359 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 359 (expression_statement -> SEMICOLON .)
    ENUM            reduce using rule 359 (expression_statement -> SEMICOLON .)
    NUMBER          reduce using rule 359 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 359 (expression_statement -> SEMICOLON .)
    CLASS           reduce using rule 359 (expression_statement -> SEMICOLON .)
    STRUCT          reduce using rule 359 (expression_statement -> SEMICOLON .)
    UNION           reduce using rule 359 (expression_statement -> SEMICOLON .)
    OPERATOR        reduce using rule 359 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 359 (expression_statement -> SEMICOLON .)


state 21

    (360) compound_statement -> LCPAREN . statement_list RCPAREN
    (361) compound_statement -> LCPAREN . RCPAREN
    (362) statement_list -> . statement
    (363) statement_list -> . statement_list statement
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 151
    IDENTIFIER      shift and go to state 153
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    statement_list                 shift and go to state 150
    statement                      shift and go to state 152
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    expression                     shift and go to state 154
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 22

    (364) selection_statement -> IF . LPAREN expression RPAREN statement
    (365) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 162


state 23

    (124) primary_expression -> LPAREN . expression RPAREN
    (207) declarator -> LPAREN . declarator RPAREN
    (57) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (223) type_name -> . type_specifier_list abstract_declarator
    (224) type_name -> . type_specifier_list
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LPAREN          shift and go to state 155
    BNOP            shift and go to state 167
    MULTOP          shift and go to state 168
    BANDOP          shift and go to state 169
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    IDENTIFIER      shift and go to state 172
    DOUBLECOLON     shift and go to state 170
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    OPERATOR        shift and go to state 105
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    THIS            shift and go to state 70
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146

    expression                     shift and go to state 163
    declarator                     shift and go to state 164
    type_name                      shift and go to state 165
    cast_expression                shift and go to state 39
    assignment_expression          shift and go to state 6
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    type_specifier_list            shift and go to state 166
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    name                           shift and go to state 156
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    type_specifier                 shift and go to state 171
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93
    simple_type_name               shift and go to state 173
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 24

    (366) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 174


state 25

    (367) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 175


state 26

    (368) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 153
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    statement                      shift and go to state 176
    expression                     shift and go to state 154
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 27

    (369) iteration_statement -> FOR . LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> FOR . LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON RPAREN statement

    LPAREN          shift and go to state 177


state 28

    (375) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 178


state 29

    (376) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 179


state 30

    (377) jump_statement -> RETURN . expression SEMICOLON
    (378) jump_statement -> RETURN . SEMICOLON
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 181
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 180
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 31

    (379) jump_statement -> GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 183


state 32

    (380) declaration_statement -> declaration .

    $end            reduce using rule 380 (declaration_statement -> declaration .)
    RCPAREN         reduce using rule 380 (declaration_statement -> declaration .)
    IDENTIFIER      reduce using rule 380 (declaration_statement -> declaration .)
    CASE            reduce using rule 380 (declaration_statement -> declaration .)
    DEFAULT         reduce using rule 380 (declaration_statement -> declaration .)
    SEMICOLON       reduce using rule 380 (declaration_statement -> declaration .)
    LCPAREN         reduce using rule 380 (declaration_statement -> declaration .)
    IF              reduce using rule 380 (declaration_statement -> declaration .)
    SWITCH          reduce using rule 380 (declaration_statement -> declaration .)
    WHILE           reduce using rule 380 (declaration_statement -> declaration .)
    DO              reduce using rule 380 (declaration_statement -> declaration .)
    FOR             reduce using rule 380 (declaration_statement -> declaration .)
    BREAK           reduce using rule 380 (declaration_statement -> declaration .)
    CONTINUE        reduce using rule 380 (declaration_statement -> declaration .)
    RETURN          reduce using rule 380 (declaration_statement -> declaration .)
    GOTO            reduce using rule 380 (declaration_statement -> declaration .)
    TRY             reduce using rule 380 (declaration_statement -> declaration .)
    ASM             reduce using rule 380 (declaration_statement -> declaration .)
    TEMPLATE        reduce using rule 380 (declaration_statement -> declaration .)
    EXTERN          reduce using rule 380 (declaration_statement -> declaration .)
    DPLUSOP         reduce using rule 380 (declaration_statement -> declaration .)
    DMINUSOP        reduce using rule 380 (declaration_statement -> declaration .)
    SIZEOF          reduce using rule 380 (declaration_statement -> declaration .)
    TYPEDEF         reduce using rule 380 (declaration_statement -> declaration .)
    LPAREN          reduce using rule 380 (declaration_statement -> declaration .)
    MULTOP          reduce using rule 380 (declaration_statement -> declaration .)
    BANDOP          reduce using rule 380 (declaration_statement -> declaration .)
    PLUSOP          reduce using rule 380 (declaration_statement -> declaration .)
    MINUSOP         reduce using rule 380 (declaration_statement -> declaration .)
    NOTSYM          reduce using rule 380 (declaration_statement -> declaration .)
    BNOP            reduce using rule 380 (declaration_statement -> declaration .)
    DOUBLECOLON     reduce using rule 380 (declaration_statement -> declaration .)
    NEW             reduce using rule 380 (declaration_statement -> declaration .)
    DELETE          reduce using rule 380 (declaration_statement -> declaration .)
    AUTO            reduce using rule 380 (declaration_statement -> declaration .)
    STATIC          reduce using rule 380 (declaration_statement -> declaration .)
    CONST           reduce using rule 380 (declaration_statement -> declaration .)
    VOLATILE        reduce using rule 380 (declaration_statement -> declaration .)
    INLINE          reduce using rule 380 (declaration_statement -> declaration .)
    VIRTUAL         reduce using rule 380 (declaration_statement -> declaration .)
    THIS            reduce using rule 380 (declaration_statement -> declaration .)
    CHAR            reduce using rule 380 (declaration_statement -> declaration .)
    SHORT           reduce using rule 380 (declaration_statement -> declaration .)
    INT             reduce using rule 380 (declaration_statement -> declaration .)
    LONG            reduce using rule 380 (declaration_statement -> declaration .)
    SIGNED          reduce using rule 380 (declaration_statement -> declaration .)
    UNSIGNED        reduce using rule 380 (declaration_statement -> declaration .)
    FLOAT           reduce using rule 380 (declaration_statement -> declaration .)
    DOUBLE          reduce using rule 380 (declaration_statement -> declaration .)
    VOID            reduce using rule 380 (declaration_statement -> declaration .)
    ENUM            reduce using rule 380 (declaration_statement -> declaration .)
    NUMBER          reduce using rule 380 (declaration_statement -> declaration .)
    STRING          reduce using rule 380 (declaration_statement -> declaration .)
    CLASS           reduce using rule 380 (declaration_statement -> declaration .)
    STRUCT          reduce using rule 380 (declaration_statement -> declaration .)
    UNION           reduce using rule 380 (declaration_statement -> declaration .)
    OPERATOR        reduce using rule 380 (declaration_statement -> declaration .)
    ELSE            reduce using rule 380 (declaration_statement -> declaration .)


state 33

    (393) try_block -> TRY . compound_statement handler_list
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 21

    compound_statement             shift and go to state 184

state 34

    (23) conditional_expression -> logical_OR_expression .
    (24) conditional_expression -> logical_OR_expression . QUESMARK expression COLON conditional_expression
    (26) logical_OR_expression -> logical_OR_expression . OROP logical_AND_expression

    COMMA           reduce using rule 23 (conditional_expression -> logical_OR_expression .)
    SEMICOLON       reduce using rule 23 (conditional_expression -> logical_OR_expression .)
    $end            reduce using rule 23 (conditional_expression -> logical_OR_expression .)
    COLON           reduce using rule 23 (conditional_expression -> logical_OR_expression .)
    RPAREN          reduce using rule 23 (conditional_expression -> logical_OR_expression .)
    RSPAREN         reduce using rule 23 (conditional_expression -> logical_OR_expression .)
    GTCOMP          reduce using rule 23 (conditional_expression -> logical_OR_expression .)
    RCPAREN         reduce using rule 23 (conditional_expression -> logical_OR_expression .)
    QUESMARK        shift and go to state 185
    OROP            shift and go to state 186


state 35

    (58) unary_expression -> postfix_expression .
    (108) postfix_expression -> postfix_expression . LSPAREN expression RSPAREN
    (109) postfix_expression -> postfix_expression . LPAREN expression_list RPAREN
    (110) postfix_expression -> postfix_expression . LPAREN RPAREN
    (113) postfix_expression -> postfix_expression . DOT name
    (114) postfix_expression -> postfix_expression . ARROW name
    (115) postfix_expression -> postfix_expression . DPLUSOP
    (116) postfix_expression -> postfix_expression . DMINUSOP

    EQUAL           reduce using rule 58 (unary_expression -> postfix_expression .)
    MULTEQOP        reduce using rule 58 (unary_expression -> postfix_expression .)
    DIVEQOP         reduce using rule 58 (unary_expression -> postfix_expression .)
    MODEQOP         reduce using rule 58 (unary_expression -> postfix_expression .)
    PLUSEQOP        reduce using rule 58 (unary_expression -> postfix_expression .)
    MINUSEQOP       reduce using rule 58 (unary_expression -> postfix_expression .)
    LSHIFTEQOP      reduce using rule 58 (unary_expression -> postfix_expression .)
    RSHIFTEQOP      reduce using rule 58 (unary_expression -> postfix_expression .)
    BANDEQOP        reduce using rule 58 (unary_expression -> postfix_expression .)
    B_E_OR          reduce using rule 58 (unary_expression -> postfix_expression .)
    BOREQOP         reduce using rule 58 (unary_expression -> postfix_expression .)
    DOTSTAR         reduce using rule 58 (unary_expression -> postfix_expression .)
    ARROWSTAR       reduce using rule 58 (unary_expression -> postfix_expression .)
    MULTOP          reduce using rule 58 (unary_expression -> postfix_expression .)
    DIVOP           reduce using rule 58 (unary_expression -> postfix_expression .)
    MODOP           reduce using rule 58 (unary_expression -> postfix_expression .)
    PLUSOP          reduce using rule 58 (unary_expression -> postfix_expression .)
    MINUSOP         reduce using rule 58 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 58 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 58 (unary_expression -> postfix_expression .)
    LTCOMP          reduce using rule 58 (unary_expression -> postfix_expression .)
    GTCOMP          reduce using rule 58 (unary_expression -> postfix_expression .)
    LTECOMP         reduce using rule 58 (unary_expression -> postfix_expression .)
    GTECOMP         reduce using rule 58 (unary_expression -> postfix_expression .)
    EQCOMP          reduce using rule 58 (unary_expression -> postfix_expression .)
    NEQCOMP         reduce using rule 58 (unary_expression -> postfix_expression .)
    BANDOP          reduce using rule 58 (unary_expression -> postfix_expression .)
    XOROP           reduce using rule 58 (unary_expression -> postfix_expression .)
    OROP            reduce using rule 58 (unary_expression -> postfix_expression .)
    ANDOP           reduce using rule 58 (unary_expression -> postfix_expression .)
    QUESMARK        reduce using rule 58 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 58 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 58 (unary_expression -> postfix_expression .)
    $end            reduce using rule 58 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 58 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 58 (unary_expression -> postfix_expression .)
    RSPAREN         reduce using rule 58 (unary_expression -> postfix_expression .)
    RCPAREN         reduce using rule 58 (unary_expression -> postfix_expression .)
    LSPAREN         shift and go to state 187
    LPAREN          shift and go to state 188
    DOT             shift and go to state 189
    ARROW           shift and go to state 190
    DPLUSOP         shift and go to state 191
    DMINUSOP        shift and go to state 192


state 36

    (59) unary_expression -> DPLUSOP . unary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 194
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    unary_expression               shift and go to state 193
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 37

    (60) unary_expression -> DMINUSOP . unary_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 194
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    unary_expression               shift and go to state 195
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 38

    (61) unary_expression -> unary_operator . cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 196
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 39

    (53) pm_expression -> cast_expression .

    DOTSTAR         reduce using rule 53 (pm_expression -> cast_expression .)
    ARROWSTAR       reduce using rule 53 (pm_expression -> cast_expression .)
    MULTOP          reduce using rule 53 (pm_expression -> cast_expression .)
    DIVOP           reduce using rule 53 (pm_expression -> cast_expression .)
    MODOP           reduce using rule 53 (pm_expression -> cast_expression .)
    PLUSOP          reduce using rule 53 (pm_expression -> cast_expression .)
    MINUSOP         reduce using rule 53 (pm_expression -> cast_expression .)
    LSHIFT          reduce using rule 53 (pm_expression -> cast_expression .)
    RSHIFT          reduce using rule 53 (pm_expression -> cast_expression .)
    LTCOMP          reduce using rule 53 (pm_expression -> cast_expression .)
    GTCOMP          reduce using rule 53 (pm_expression -> cast_expression .)
    LTECOMP         reduce using rule 53 (pm_expression -> cast_expression .)
    GTECOMP         reduce using rule 53 (pm_expression -> cast_expression .)
    EQCOMP          reduce using rule 53 (pm_expression -> cast_expression .)
    NEQCOMP         reduce using rule 53 (pm_expression -> cast_expression .)
    BANDOP          reduce using rule 53 (pm_expression -> cast_expression .)
    XOROP           reduce using rule 53 (pm_expression -> cast_expression .)
    OROP            reduce using rule 53 (pm_expression -> cast_expression .)
    ANDOP           reduce using rule 53 (pm_expression -> cast_expression .)
    QUESMARK        reduce using rule 53 (pm_expression -> cast_expression .)
    COMMA           reduce using rule 53 (pm_expression -> cast_expression .)
    SEMICOLON       reduce using rule 53 (pm_expression -> cast_expression .)
    $end            reduce using rule 53 (pm_expression -> cast_expression .)
    COLON           reduce using rule 53 (pm_expression -> cast_expression .)
    RPAREN          reduce using rule 53 (pm_expression -> cast_expression .)
    RSPAREN         reduce using rule 53 (pm_expression -> cast_expression .)
    RCPAREN         reduce using rule 53 (pm_expression -> cast_expression .)


state 40

    (62) unary_expression -> SIZEOF . unary_expression
    (63) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 198
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    unary_expression               shift and go to state 197
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 41

    (64) unary_expression -> allocation_expression .

    EQUAL           reduce using rule 64 (unary_expression -> allocation_expression .)
    MULTEQOP        reduce using rule 64 (unary_expression -> allocation_expression .)
    DIVEQOP         reduce using rule 64 (unary_expression -> allocation_expression .)
    MODEQOP         reduce using rule 64 (unary_expression -> allocation_expression .)
    PLUSEQOP        reduce using rule 64 (unary_expression -> allocation_expression .)
    MINUSEQOP       reduce using rule 64 (unary_expression -> allocation_expression .)
    LSHIFTEQOP      reduce using rule 64 (unary_expression -> allocation_expression .)
    RSHIFTEQOP      reduce using rule 64 (unary_expression -> allocation_expression .)
    BANDEQOP        reduce using rule 64 (unary_expression -> allocation_expression .)
    B_E_OR          reduce using rule 64 (unary_expression -> allocation_expression .)
    BOREQOP         reduce using rule 64 (unary_expression -> allocation_expression .)
    DOTSTAR         reduce using rule 64 (unary_expression -> allocation_expression .)
    ARROWSTAR       reduce using rule 64 (unary_expression -> allocation_expression .)
    MULTOP          reduce using rule 64 (unary_expression -> allocation_expression .)
    DIVOP           reduce using rule 64 (unary_expression -> allocation_expression .)
    MODOP           reduce using rule 64 (unary_expression -> allocation_expression .)
    PLUSOP          reduce using rule 64 (unary_expression -> allocation_expression .)
    MINUSOP         reduce using rule 64 (unary_expression -> allocation_expression .)
    LSHIFT          reduce using rule 64 (unary_expression -> allocation_expression .)
    RSHIFT          reduce using rule 64 (unary_expression -> allocation_expression .)
    LTCOMP          reduce using rule 64 (unary_expression -> allocation_expression .)
    GTCOMP          reduce using rule 64 (unary_expression -> allocation_expression .)
    LTECOMP         reduce using rule 64 (unary_expression -> allocation_expression .)
    GTECOMP         reduce using rule 64 (unary_expression -> allocation_expression .)
    EQCOMP          reduce using rule 64 (unary_expression -> allocation_expression .)
    NEQCOMP         reduce using rule 64 (unary_expression -> allocation_expression .)
    BANDOP          reduce using rule 64 (unary_expression -> allocation_expression .)
    XOROP           reduce using rule 64 (unary_expression -> allocation_expression .)
    OROP            reduce using rule 64 (unary_expression -> allocation_expression .)
    ANDOP           reduce using rule 64 (unary_expression -> allocation_expression .)
    QUESMARK        reduce using rule 64 (unary_expression -> allocation_expression .)
    COMMA           reduce using rule 64 (unary_expression -> allocation_expression .)
    SEMICOLON       reduce using rule 64 (unary_expression -> allocation_expression .)
    $end            reduce using rule 64 (unary_expression -> allocation_expression .)
    COLON           reduce using rule 64 (unary_expression -> allocation_expression .)
    RPAREN          reduce using rule 64 (unary_expression -> allocation_expression .)
    RSPAREN         reduce using rule 64 (unary_expression -> allocation_expression .)
    RCPAREN         reduce using rule 64 (unary_expression -> allocation_expression .)


state 42

    (65) unary_expression -> deallocation_expression .

    EQUAL           reduce using rule 65 (unary_expression -> deallocation_expression .)
    MULTEQOP        reduce using rule 65 (unary_expression -> deallocation_expression .)
    DIVEQOP         reduce using rule 65 (unary_expression -> deallocation_expression .)
    MODEQOP         reduce using rule 65 (unary_expression -> deallocation_expression .)
    PLUSEQOP        reduce using rule 65 (unary_expression -> deallocation_expression .)
    MINUSEQOP       reduce using rule 65 (unary_expression -> deallocation_expression .)
    LSHIFTEQOP      reduce using rule 65 (unary_expression -> deallocation_expression .)
    RSHIFTEQOP      reduce using rule 65 (unary_expression -> deallocation_expression .)
    BANDEQOP        reduce using rule 65 (unary_expression -> deallocation_expression .)
    B_E_OR          reduce using rule 65 (unary_expression -> deallocation_expression .)
    BOREQOP         reduce using rule 65 (unary_expression -> deallocation_expression .)
    DOTSTAR         reduce using rule 65 (unary_expression -> deallocation_expression .)
    ARROWSTAR       reduce using rule 65 (unary_expression -> deallocation_expression .)
    MULTOP          reduce using rule 65 (unary_expression -> deallocation_expression .)
    DIVOP           reduce using rule 65 (unary_expression -> deallocation_expression .)
    MODOP           reduce using rule 65 (unary_expression -> deallocation_expression .)
    PLUSOP          reduce using rule 65 (unary_expression -> deallocation_expression .)
    MINUSOP         reduce using rule 65 (unary_expression -> deallocation_expression .)
    LSHIFT          reduce using rule 65 (unary_expression -> deallocation_expression .)
    RSHIFT          reduce using rule 65 (unary_expression -> deallocation_expression .)
    LTCOMP          reduce using rule 65 (unary_expression -> deallocation_expression .)
    GTCOMP          reduce using rule 65 (unary_expression -> deallocation_expression .)
    LTECOMP         reduce using rule 65 (unary_expression -> deallocation_expression .)
    GTECOMP         reduce using rule 65 (unary_expression -> deallocation_expression .)
    EQCOMP          reduce using rule 65 (unary_expression -> deallocation_expression .)
    NEQCOMP         reduce using rule 65 (unary_expression -> deallocation_expression .)
    BANDOP          reduce using rule 65 (unary_expression -> deallocation_expression .)
    XOROP           reduce using rule 65 (unary_expression -> deallocation_expression .)
    OROP            reduce using rule 65 (unary_expression -> deallocation_expression .)
    ANDOP           reduce using rule 65 (unary_expression -> deallocation_expression .)
    QUESMARK        reduce using rule 65 (unary_expression -> deallocation_expression .)
    COMMA           reduce using rule 65 (unary_expression -> deallocation_expression .)
    SEMICOLON       reduce using rule 65 (unary_expression -> deallocation_expression .)
    $end            reduce using rule 65 (unary_expression -> deallocation_expression .)
    COLON           reduce using rule 65 (unary_expression -> deallocation_expression .)
    RPAREN          reduce using rule 65 (unary_expression -> deallocation_expression .)
    RSPAREN         reduce using rule 65 (unary_expression -> deallocation_expression .)
    RCPAREN         reduce using rule 65 (unary_expression -> deallocation_expression .)


state 43

    (135) declaration -> decl_specifiers . declarator_list SEMICOLON
    (136) declaration -> decl_specifiers . SEMICOLON
    (146) decl_specifiers -> decl_specifiers . decl_specifier
    (248) function_definition -> decl_specifiers . declarator ctor_initializer fct_body
    (250) function_definition -> decl_specifiers . declarator fct_body
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    SEMICOLON       shift and go to state 200
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 203
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    EXTERN          shift and go to state 204
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    IDENTIFIER      shift and go to state 172
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    declarator_list                shift and go to state 199
    decl_specifier                 shift and go to state 201
    declarator                     shift and go to state 202
    init_declarator                shift and go to state 63
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    name                           shift and go to state 206
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93

state 44

    (137) declaration -> declarator_list . SEMICOLON
    (198) declarator_list -> declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 212
    COMMA           shift and go to state 213


state 45

    (138) declaration -> asm_declaration .

    $end            reduce using rule 138 (declaration -> asm_declaration .)
    RCPAREN         reduce using rule 138 (declaration -> asm_declaration .)
    IDENTIFIER      reduce using rule 138 (declaration -> asm_declaration .)
    CASE            reduce using rule 138 (declaration -> asm_declaration .)
    DEFAULT         reduce using rule 138 (declaration -> asm_declaration .)
    SEMICOLON       reduce using rule 138 (declaration -> asm_declaration .)
    LCPAREN         reduce using rule 138 (declaration -> asm_declaration .)
    IF              reduce using rule 138 (declaration -> asm_declaration .)
    SWITCH          reduce using rule 138 (declaration -> asm_declaration .)
    WHILE           reduce using rule 138 (declaration -> asm_declaration .)
    DO              reduce using rule 138 (declaration -> asm_declaration .)
    FOR             reduce using rule 138 (declaration -> asm_declaration .)
    BREAK           reduce using rule 138 (declaration -> asm_declaration .)
    CONTINUE        reduce using rule 138 (declaration -> asm_declaration .)
    RETURN          reduce using rule 138 (declaration -> asm_declaration .)
    GOTO            reduce using rule 138 (declaration -> asm_declaration .)
    TRY             reduce using rule 138 (declaration -> asm_declaration .)
    ASM             reduce using rule 138 (declaration -> asm_declaration .)
    TEMPLATE        reduce using rule 138 (declaration -> asm_declaration .)
    EXTERN          reduce using rule 138 (declaration -> asm_declaration .)
    DPLUSOP         reduce using rule 138 (declaration -> asm_declaration .)
    DMINUSOP        reduce using rule 138 (declaration -> asm_declaration .)
    SIZEOF          reduce using rule 138 (declaration -> asm_declaration .)
    TYPEDEF         reduce using rule 138 (declaration -> asm_declaration .)
    LPAREN          reduce using rule 138 (declaration -> asm_declaration .)
    MULTOP          reduce using rule 138 (declaration -> asm_declaration .)
    BANDOP          reduce using rule 138 (declaration -> asm_declaration .)
    PLUSOP          reduce using rule 138 (declaration -> asm_declaration .)
    MINUSOP         reduce using rule 138 (declaration -> asm_declaration .)
    NOTSYM          reduce using rule 138 (declaration -> asm_declaration .)
    BNOP            reduce using rule 138 (declaration -> asm_declaration .)
    DOUBLECOLON     reduce using rule 138 (declaration -> asm_declaration .)
    NEW             reduce using rule 138 (declaration -> asm_declaration .)
    DELETE          reduce using rule 138 (declaration -> asm_declaration .)
    AUTO            reduce using rule 138 (declaration -> asm_declaration .)
    STATIC          reduce using rule 138 (declaration -> asm_declaration .)
    CONST           reduce using rule 138 (declaration -> asm_declaration .)
    VOLATILE        reduce using rule 138 (declaration -> asm_declaration .)
    INLINE          reduce using rule 138 (declaration -> asm_declaration .)
    VIRTUAL         reduce using rule 138 (declaration -> asm_declaration .)
    THIS            reduce using rule 138 (declaration -> asm_declaration .)
    CHAR            reduce using rule 138 (declaration -> asm_declaration .)
    SHORT           reduce using rule 138 (declaration -> asm_declaration .)
    INT             reduce using rule 138 (declaration -> asm_declaration .)
    LONG            reduce using rule 138 (declaration -> asm_declaration .)
    SIGNED          reduce using rule 138 (declaration -> asm_declaration .)
    UNSIGNED        reduce using rule 138 (declaration -> asm_declaration .)
    FLOAT           reduce using rule 138 (declaration -> asm_declaration .)
    DOUBLE          reduce using rule 138 (declaration -> asm_declaration .)
    VOID            reduce using rule 138 (declaration -> asm_declaration .)
    ENUM            reduce using rule 138 (declaration -> asm_declaration .)
    NUMBER          reduce using rule 138 (declaration -> asm_declaration .)
    STRING          reduce using rule 138 (declaration -> asm_declaration .)
    CLASS           reduce using rule 138 (declaration -> asm_declaration .)
    STRUCT          reduce using rule 138 (declaration -> asm_declaration .)
    UNION           reduce using rule 138 (declaration -> asm_declaration .)
    OPERATOR        reduce using rule 138 (declaration -> asm_declaration .)
    ELSE            reduce using rule 138 (declaration -> asm_declaration .)


state 46

    (139) declaration -> function_definition .

    $end            reduce using rule 139 (declaration -> function_definition .)
    RCPAREN         reduce using rule 139 (declaration -> function_definition .)
    IDENTIFIER      reduce using rule 139 (declaration -> function_definition .)
    CASE            reduce using rule 139 (declaration -> function_definition .)
    DEFAULT         reduce using rule 139 (declaration -> function_definition .)
    SEMICOLON       reduce using rule 139 (declaration -> function_definition .)
    LCPAREN         reduce using rule 139 (declaration -> function_definition .)
    IF              reduce using rule 139 (declaration -> function_definition .)
    SWITCH          reduce using rule 139 (declaration -> function_definition .)
    WHILE           reduce using rule 139 (declaration -> function_definition .)
    DO              reduce using rule 139 (declaration -> function_definition .)
    FOR             reduce using rule 139 (declaration -> function_definition .)
    BREAK           reduce using rule 139 (declaration -> function_definition .)
    CONTINUE        reduce using rule 139 (declaration -> function_definition .)
    RETURN          reduce using rule 139 (declaration -> function_definition .)
    GOTO            reduce using rule 139 (declaration -> function_definition .)
    TRY             reduce using rule 139 (declaration -> function_definition .)
    ASM             reduce using rule 139 (declaration -> function_definition .)
    TEMPLATE        reduce using rule 139 (declaration -> function_definition .)
    EXTERN          reduce using rule 139 (declaration -> function_definition .)
    DPLUSOP         reduce using rule 139 (declaration -> function_definition .)
    DMINUSOP        reduce using rule 139 (declaration -> function_definition .)
    SIZEOF          reduce using rule 139 (declaration -> function_definition .)
    TYPEDEF         reduce using rule 139 (declaration -> function_definition .)
    LPAREN          reduce using rule 139 (declaration -> function_definition .)
    MULTOP          reduce using rule 139 (declaration -> function_definition .)
    BANDOP          reduce using rule 139 (declaration -> function_definition .)
    PLUSOP          reduce using rule 139 (declaration -> function_definition .)
    MINUSOP         reduce using rule 139 (declaration -> function_definition .)
    NOTSYM          reduce using rule 139 (declaration -> function_definition .)
    BNOP            reduce using rule 139 (declaration -> function_definition .)
    DOUBLECOLON     reduce using rule 139 (declaration -> function_definition .)
    NEW             reduce using rule 139 (declaration -> function_definition .)
    DELETE          reduce using rule 139 (declaration -> function_definition .)
    AUTO            reduce using rule 139 (declaration -> function_definition .)
    STATIC          reduce using rule 139 (declaration -> function_definition .)
    CONST           reduce using rule 139 (declaration -> function_definition .)
    VOLATILE        reduce using rule 139 (declaration -> function_definition .)
    INLINE          reduce using rule 139 (declaration -> function_definition .)
    VIRTUAL         reduce using rule 139 (declaration -> function_definition .)
    THIS            reduce using rule 139 (declaration -> function_definition .)
    CHAR            reduce using rule 139 (declaration -> function_definition .)
    SHORT           reduce using rule 139 (declaration -> function_definition .)
    INT             reduce using rule 139 (declaration -> function_definition .)
    LONG            reduce using rule 139 (declaration -> function_definition .)
    SIGNED          reduce using rule 139 (declaration -> function_definition .)
    UNSIGNED        reduce using rule 139 (declaration -> function_definition .)
    FLOAT           reduce using rule 139 (declaration -> function_definition .)
    DOUBLE          reduce using rule 139 (declaration -> function_definition .)
    VOID            reduce using rule 139 (declaration -> function_definition .)
    ENUM            reduce using rule 139 (declaration -> function_definition .)
    NUMBER          reduce using rule 139 (declaration -> function_definition .)
    STRING          reduce using rule 139 (declaration -> function_definition .)
    CLASS           reduce using rule 139 (declaration -> function_definition .)
    STRUCT          reduce using rule 139 (declaration -> function_definition .)
    UNION           reduce using rule 139 (declaration -> function_definition .)
    OPERATOR        reduce using rule 139 (declaration -> function_definition .)
    ELSE            reduce using rule 139 (declaration -> function_definition .)


state 47

    (140) declaration -> template_declaration .

    $end            reduce using rule 140 (declaration -> template_declaration .)
    RCPAREN         reduce using rule 140 (declaration -> template_declaration .)
    IDENTIFIER      reduce using rule 140 (declaration -> template_declaration .)
    CASE            reduce using rule 140 (declaration -> template_declaration .)
    DEFAULT         reduce using rule 140 (declaration -> template_declaration .)
    SEMICOLON       reduce using rule 140 (declaration -> template_declaration .)
    LCPAREN         reduce using rule 140 (declaration -> template_declaration .)
    IF              reduce using rule 140 (declaration -> template_declaration .)
    SWITCH          reduce using rule 140 (declaration -> template_declaration .)
    WHILE           reduce using rule 140 (declaration -> template_declaration .)
    DO              reduce using rule 140 (declaration -> template_declaration .)
    FOR             reduce using rule 140 (declaration -> template_declaration .)
    BREAK           reduce using rule 140 (declaration -> template_declaration .)
    CONTINUE        reduce using rule 140 (declaration -> template_declaration .)
    RETURN          reduce using rule 140 (declaration -> template_declaration .)
    GOTO            reduce using rule 140 (declaration -> template_declaration .)
    TRY             reduce using rule 140 (declaration -> template_declaration .)
    ASM             reduce using rule 140 (declaration -> template_declaration .)
    TEMPLATE        reduce using rule 140 (declaration -> template_declaration .)
    EXTERN          reduce using rule 140 (declaration -> template_declaration .)
    DPLUSOP         reduce using rule 140 (declaration -> template_declaration .)
    DMINUSOP        reduce using rule 140 (declaration -> template_declaration .)
    SIZEOF          reduce using rule 140 (declaration -> template_declaration .)
    TYPEDEF         reduce using rule 140 (declaration -> template_declaration .)
    LPAREN          reduce using rule 140 (declaration -> template_declaration .)
    MULTOP          reduce using rule 140 (declaration -> template_declaration .)
    BANDOP          reduce using rule 140 (declaration -> template_declaration .)
    PLUSOP          reduce using rule 140 (declaration -> template_declaration .)
    MINUSOP         reduce using rule 140 (declaration -> template_declaration .)
    NOTSYM          reduce using rule 140 (declaration -> template_declaration .)
    BNOP            reduce using rule 140 (declaration -> template_declaration .)
    DOUBLECOLON     reduce using rule 140 (declaration -> template_declaration .)
    NEW             reduce using rule 140 (declaration -> template_declaration .)
    DELETE          reduce using rule 140 (declaration -> template_declaration .)
    AUTO            reduce using rule 140 (declaration -> template_declaration .)
    STATIC          reduce using rule 140 (declaration -> template_declaration .)
    CONST           reduce using rule 140 (declaration -> template_declaration .)
    VOLATILE        reduce using rule 140 (declaration -> template_declaration .)
    INLINE          reduce using rule 140 (declaration -> template_declaration .)
    VIRTUAL         reduce using rule 140 (declaration -> template_declaration .)
    THIS            reduce using rule 140 (declaration -> template_declaration .)
    CHAR            reduce using rule 140 (declaration -> template_declaration .)
    SHORT           reduce using rule 140 (declaration -> template_declaration .)
    INT             reduce using rule 140 (declaration -> template_declaration .)
    LONG            reduce using rule 140 (declaration -> template_declaration .)
    SIGNED          reduce using rule 140 (declaration -> template_declaration .)
    UNSIGNED        reduce using rule 140 (declaration -> template_declaration .)
    FLOAT           reduce using rule 140 (declaration -> template_declaration .)
    DOUBLE          reduce using rule 140 (declaration -> template_declaration .)
    VOID            reduce using rule 140 (declaration -> template_declaration .)
    ENUM            reduce using rule 140 (declaration -> template_declaration .)
    NUMBER          reduce using rule 140 (declaration -> template_declaration .)
    STRING          reduce using rule 140 (declaration -> template_declaration .)
    CLASS           reduce using rule 140 (declaration -> template_declaration .)
    STRUCT          reduce using rule 140 (declaration -> template_declaration .)
    UNION           reduce using rule 140 (declaration -> template_declaration .)
    OPERATOR        reduce using rule 140 (declaration -> template_declaration .)
    ELSE            reduce using rule 140 (declaration -> template_declaration .)


state 48

    (141) declaration -> linkage_specification .

    $end            reduce using rule 141 (declaration -> linkage_specification .)
    RCPAREN         reduce using rule 141 (declaration -> linkage_specification .)
    IDENTIFIER      reduce using rule 141 (declaration -> linkage_specification .)
    CASE            reduce using rule 141 (declaration -> linkage_specification .)
    DEFAULT         reduce using rule 141 (declaration -> linkage_specification .)
    SEMICOLON       reduce using rule 141 (declaration -> linkage_specification .)
    LCPAREN         reduce using rule 141 (declaration -> linkage_specification .)
    IF              reduce using rule 141 (declaration -> linkage_specification .)
    SWITCH          reduce using rule 141 (declaration -> linkage_specification .)
    WHILE           reduce using rule 141 (declaration -> linkage_specification .)
    DO              reduce using rule 141 (declaration -> linkage_specification .)
    FOR             reduce using rule 141 (declaration -> linkage_specification .)
    BREAK           reduce using rule 141 (declaration -> linkage_specification .)
    CONTINUE        reduce using rule 141 (declaration -> linkage_specification .)
    RETURN          reduce using rule 141 (declaration -> linkage_specification .)
    GOTO            reduce using rule 141 (declaration -> linkage_specification .)
    TRY             reduce using rule 141 (declaration -> linkage_specification .)
    ASM             reduce using rule 141 (declaration -> linkage_specification .)
    TEMPLATE        reduce using rule 141 (declaration -> linkage_specification .)
    EXTERN          reduce using rule 141 (declaration -> linkage_specification .)
    DPLUSOP         reduce using rule 141 (declaration -> linkage_specification .)
    DMINUSOP        reduce using rule 141 (declaration -> linkage_specification .)
    SIZEOF          reduce using rule 141 (declaration -> linkage_specification .)
    TYPEDEF         reduce using rule 141 (declaration -> linkage_specification .)
    LPAREN          reduce using rule 141 (declaration -> linkage_specification .)
    MULTOP          reduce using rule 141 (declaration -> linkage_specification .)
    BANDOP          reduce using rule 141 (declaration -> linkage_specification .)
    PLUSOP          reduce using rule 141 (declaration -> linkage_specification .)
    MINUSOP         reduce using rule 141 (declaration -> linkage_specification .)
    NOTSYM          reduce using rule 141 (declaration -> linkage_specification .)
    BNOP            reduce using rule 141 (declaration -> linkage_specification .)
    DOUBLECOLON     reduce using rule 141 (declaration -> linkage_specification .)
    NEW             reduce using rule 141 (declaration -> linkage_specification .)
    DELETE          reduce using rule 141 (declaration -> linkage_specification .)
    AUTO            reduce using rule 141 (declaration -> linkage_specification .)
    STATIC          reduce using rule 141 (declaration -> linkage_specification .)
    CONST           reduce using rule 141 (declaration -> linkage_specification .)
    VOLATILE        reduce using rule 141 (declaration -> linkage_specification .)
    INLINE          reduce using rule 141 (declaration -> linkage_specification .)
    VIRTUAL         reduce using rule 141 (declaration -> linkage_specification .)
    THIS            reduce using rule 141 (declaration -> linkage_specification .)
    CHAR            reduce using rule 141 (declaration -> linkage_specification .)
    SHORT           reduce using rule 141 (declaration -> linkage_specification .)
    INT             reduce using rule 141 (declaration -> linkage_specification .)
    LONG            reduce using rule 141 (declaration -> linkage_specification .)
    SIGNED          reduce using rule 141 (declaration -> linkage_specification .)
    UNSIGNED        reduce using rule 141 (declaration -> linkage_specification .)
    FLOAT           reduce using rule 141 (declaration -> linkage_specification .)
    DOUBLE          reduce using rule 141 (declaration -> linkage_specification .)
    VOID            reduce using rule 141 (declaration -> linkage_specification .)
    ENUM            reduce using rule 141 (declaration -> linkage_specification .)
    NUMBER          reduce using rule 141 (declaration -> linkage_specification .)
    STRING          reduce using rule 141 (declaration -> linkage_specification .)
    CLASS           reduce using rule 141 (declaration -> linkage_specification .)
    STRUCT          reduce using rule 141 (declaration -> linkage_specification .)
    UNION           reduce using rule 141 (declaration -> linkage_specification .)
    OPERATOR        reduce using rule 141 (declaration -> linkage_specification .)
    ELSE            reduce using rule 141 (declaration -> linkage_specification .)


state 49

    (25) logical_OR_expression -> logical_AND_expression .
    (28) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 25 (logical_OR_expression -> logical_AND_expression .)
    OROP            reduce using rule 25 (logical_OR_expression -> logical_AND_expression .)
    COMMA           reduce using rule 25 (logical_OR_expression -> logical_AND_expression .)
    SEMICOLON       reduce using rule 25 (logical_OR_expression -> logical_AND_expression .)
    $end            reduce using rule 25 (logical_OR_expression -> logical_AND_expression .)
    COLON           reduce using rule 25 (logical_OR_expression -> logical_AND_expression .)
    RPAREN          reduce using rule 25 (logical_OR_expression -> logical_AND_expression .)
    RSPAREN         reduce using rule 25 (logical_OR_expression -> logical_AND_expression .)
    GTCOMP          reduce using rule 25 (logical_OR_expression -> logical_AND_expression .)
    RCPAREN         reduce using rule 25 (logical_OR_expression -> logical_AND_expression .)
    ANDOP           shift and go to state 214


state 50

    (107) postfix_expression -> primary_expression .

    LSPAREN         reduce using rule 107 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 107 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 107 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 107 (postfix_expression -> primary_expression .)
    DPLUSOP         reduce using rule 107 (postfix_expression -> primary_expression .)
    DMINUSOP        reduce using rule 107 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 107 (postfix_expression -> primary_expression .)
    MULTEQOP        reduce using rule 107 (postfix_expression -> primary_expression .)
    DIVEQOP         reduce using rule 107 (postfix_expression -> primary_expression .)
    MODEQOP         reduce using rule 107 (postfix_expression -> primary_expression .)
    PLUSEQOP        reduce using rule 107 (postfix_expression -> primary_expression .)
    MINUSEQOP       reduce using rule 107 (postfix_expression -> primary_expression .)
    LSHIFTEQOP      reduce using rule 107 (postfix_expression -> primary_expression .)
    RSHIFTEQOP      reduce using rule 107 (postfix_expression -> primary_expression .)
    BANDEQOP        reduce using rule 107 (postfix_expression -> primary_expression .)
    B_E_OR          reduce using rule 107 (postfix_expression -> primary_expression .)
    BOREQOP         reduce using rule 107 (postfix_expression -> primary_expression .)
    DOTSTAR         reduce using rule 107 (postfix_expression -> primary_expression .)
    ARROWSTAR       reduce using rule 107 (postfix_expression -> primary_expression .)
    MULTOP          reduce using rule 107 (postfix_expression -> primary_expression .)
    DIVOP           reduce using rule 107 (postfix_expression -> primary_expression .)
    MODOP           reduce using rule 107 (postfix_expression -> primary_expression .)
    PLUSOP          reduce using rule 107 (postfix_expression -> primary_expression .)
    MINUSOP         reduce using rule 107 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 107 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 107 (postfix_expression -> primary_expression .)
    LTCOMP          reduce using rule 107 (postfix_expression -> primary_expression .)
    GTCOMP          reduce using rule 107 (postfix_expression -> primary_expression .)
    LTECOMP         reduce using rule 107 (postfix_expression -> primary_expression .)
    GTECOMP         reduce using rule 107 (postfix_expression -> primary_expression .)
    EQCOMP          reduce using rule 107 (postfix_expression -> primary_expression .)
    NEQCOMP         reduce using rule 107 (postfix_expression -> primary_expression .)
    BANDOP          reduce using rule 107 (postfix_expression -> primary_expression .)
    XOROP           reduce using rule 107 (postfix_expression -> primary_expression .)
    OROP            reduce using rule 107 (postfix_expression -> primary_expression .)
    ANDOP           reduce using rule 107 (postfix_expression -> primary_expression .)
    QUESMARK        reduce using rule 107 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 107 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 107 (postfix_expression -> primary_expression .)
    $end            reduce using rule 107 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 107 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 107 (postfix_expression -> primary_expression .)
    RSPAREN         reduce using rule 107 (postfix_expression -> primary_expression .)
    RCPAREN         reduce using rule 107 (postfix_expression -> primary_expression .)


state 51

    (111) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (112) postfix_expression -> simple_type_name . LPAREN RPAREN
    (153) type_specifier -> simple_type_name .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 215
    SEMICOLON       reduce using rule 153 (type_specifier -> simple_type_name .)
    TYPEDEF         reduce using rule 153 (type_specifier -> simple_type_name .)
    AUTO            reduce using rule 153 (type_specifier -> simple_type_name .)
    STATIC          reduce using rule 153 (type_specifier -> simple_type_name .)
    EXTERN          reduce using rule 153 (type_specifier -> simple_type_name .)
    CONST           reduce using rule 153 (type_specifier -> simple_type_name .)
    VOLATILE        reduce using rule 153 (type_specifier -> simple_type_name .)
    INLINE          reduce using rule 153 (type_specifier -> simple_type_name .)
    VIRTUAL         reduce using rule 153 (type_specifier -> simple_type_name .)
    BNOP            reduce using rule 153 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 153 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 153 (type_specifier -> simple_type_name .)
    CHAR            reduce using rule 153 (type_specifier -> simple_type_name .)
    SHORT           reduce using rule 153 (type_specifier -> simple_type_name .)
    INT             reduce using rule 153 (type_specifier -> simple_type_name .)
    LONG            reduce using rule 153 (type_specifier -> simple_type_name .)
    SIGNED          reduce using rule 153 (type_specifier -> simple_type_name .)
    UNSIGNED        reduce using rule 153 (type_specifier -> simple_type_name .)
    FLOAT           reduce using rule 153 (type_specifier -> simple_type_name .)
    DOUBLE          reduce using rule 153 (type_specifier -> simple_type_name .)
    VOID            reduce using rule 153 (type_specifier -> simple_type_name .)
    ENUM            reduce using rule 153 (type_specifier -> simple_type_name .)
    IDENTIFIER      reduce using rule 153 (type_specifier -> simple_type_name .)
    DOUBLECOLON     reduce using rule 153 (type_specifier -> simple_type_name .)
    CLASS           reduce using rule 153 (type_specifier -> simple_type_name .)
    STRUCT          reduce using rule 153 (type_specifier -> simple_type_name .)
    UNION           reduce using rule 153 (type_specifier -> simple_type_name .)
    OPERATOR        reduce using rule 153 (type_specifier -> simple_type_name .)
    EQUAL           reduce using rule 153 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 153 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 153 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 153 (type_specifier -> simple_type_name .)

  ! LPAREN          [ reduce using rule 153 (type_specifier -> simple_type_name .) ]


state 52

    (125) primary_expression -> name .
    (218) dname -> name .

  ! reduce/reduce conflict for LPAREN resolved using rule 125 (primary_expression -> name .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 125 (primary_expression -> name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 125 (primary_expression -> name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 125 (primary_expression -> name .)
  ! reduce/reduce conflict for COMMA resolved using rule 125 (primary_expression -> name .)
    LSPAREN         reduce using rule 125 (primary_expression -> name .)
    LPAREN          reduce using rule 125 (primary_expression -> name .)
    DOT             reduce using rule 125 (primary_expression -> name .)
    ARROW           reduce using rule 125 (primary_expression -> name .)
    DPLUSOP         reduce using rule 125 (primary_expression -> name .)
    DMINUSOP        reduce using rule 125 (primary_expression -> name .)
    EQUAL           reduce using rule 125 (primary_expression -> name .)
    MULTEQOP        reduce using rule 125 (primary_expression -> name .)
    DIVEQOP         reduce using rule 125 (primary_expression -> name .)
    MODEQOP         reduce using rule 125 (primary_expression -> name .)
    PLUSEQOP        reduce using rule 125 (primary_expression -> name .)
    MINUSEQOP       reduce using rule 125 (primary_expression -> name .)
    LSHIFTEQOP      reduce using rule 125 (primary_expression -> name .)
    RSHIFTEQOP      reduce using rule 125 (primary_expression -> name .)
    BANDEQOP        reduce using rule 125 (primary_expression -> name .)
    B_E_OR          reduce using rule 125 (primary_expression -> name .)
    BOREQOP         reduce using rule 125 (primary_expression -> name .)
    DOTSTAR         reduce using rule 125 (primary_expression -> name .)
    ARROWSTAR       reduce using rule 125 (primary_expression -> name .)
    MULTOP          reduce using rule 125 (primary_expression -> name .)
    DIVOP           reduce using rule 125 (primary_expression -> name .)
    MODOP           reduce using rule 125 (primary_expression -> name .)
    PLUSOP          reduce using rule 125 (primary_expression -> name .)
    MINUSOP         reduce using rule 125 (primary_expression -> name .)
    LSHIFT          reduce using rule 125 (primary_expression -> name .)
    RSHIFT          reduce using rule 125 (primary_expression -> name .)
    LTCOMP          reduce using rule 125 (primary_expression -> name .)
    GTCOMP          reduce using rule 125 (primary_expression -> name .)
    LTECOMP         reduce using rule 125 (primary_expression -> name .)
    GTECOMP         reduce using rule 125 (primary_expression -> name .)
    EQCOMP          reduce using rule 125 (primary_expression -> name .)
    NEQCOMP         reduce using rule 125 (primary_expression -> name .)
    BANDOP          reduce using rule 125 (primary_expression -> name .)
    XOROP           reduce using rule 125 (primary_expression -> name .)
    OROP            reduce using rule 125 (primary_expression -> name .)
    ANDOP           reduce using rule 125 (primary_expression -> name .)
    QUESMARK        reduce using rule 125 (primary_expression -> name .)
    COMMA           reduce using rule 125 (primary_expression -> name .)
    SEMICOLON       reduce using rule 125 (primary_expression -> name .)
    $end            reduce using rule 125 (primary_expression -> name .)
    COLON           reduce using rule 218 (dname -> name .)
    LCPAREN         reduce using rule 218 (dname -> name .)

  ! LPAREN          [ reduce using rule 218 (dname -> name .) ]
  ! LSPAREN         [ reduce using rule 218 (dname -> name .) ]
  ! EQUAL           [ reduce using rule 218 (dname -> name .) ]
  ! SEMICOLON       [ reduce using rule 218 (dname -> name .) ]
  ! COMMA           [ reduce using rule 218 (dname -> name .) ]


state 53

    (66) unary_operator -> MULTOP .
    (208) ptr_operator -> MULTOP . cv_qualifier_list
    (209) ptr_operator -> MULTOP .
    (214) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (215) cv_qualifier_list -> . cv_qualifier
    (216) cv_qualifier -> . CONST
    (217) cv_qualifier -> . VOLATILE

  ! reduce/reduce conflict for LPAREN resolved using rule 66 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for BNOP resolved using rule 66 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for MULTOP resolved using rule 66 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for BANDOP resolved using rule 66 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 66 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 66 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 66 (unary_operator -> MULTOP .)
    LPAREN          reduce using rule 66 (unary_operator -> MULTOP .)
    DPLUSOP         reduce using rule 66 (unary_operator -> MULTOP .)
    DMINUSOP        reduce using rule 66 (unary_operator -> MULTOP .)
    SIZEOF          reduce using rule 66 (unary_operator -> MULTOP .)
    MULTOP          reduce using rule 66 (unary_operator -> MULTOP .)
    BANDOP          reduce using rule 66 (unary_operator -> MULTOP .)
    PLUSOP          reduce using rule 66 (unary_operator -> MULTOP .)
    MINUSOP         reduce using rule 66 (unary_operator -> MULTOP .)
    NOTSYM          reduce using rule 66 (unary_operator -> MULTOP .)
    BNOP            reduce using rule 66 (unary_operator -> MULTOP .)
    DOUBLECOLON     reduce using rule 66 (unary_operator -> MULTOP .)
    NEW             reduce using rule 66 (unary_operator -> MULTOP .)
    DELETE          reduce using rule 66 (unary_operator -> MULTOP .)
    THIS            reduce using rule 66 (unary_operator -> MULTOP .)
    CHAR            reduce using rule 66 (unary_operator -> MULTOP .)
    SHORT           reduce using rule 66 (unary_operator -> MULTOP .)
    INT             reduce using rule 66 (unary_operator -> MULTOP .)
    LONG            reduce using rule 66 (unary_operator -> MULTOP .)
    SIGNED          reduce using rule 66 (unary_operator -> MULTOP .)
    UNSIGNED        reduce using rule 66 (unary_operator -> MULTOP .)
    FLOAT           reduce using rule 66 (unary_operator -> MULTOP .)
    DOUBLE          reduce using rule 66 (unary_operator -> MULTOP .)
    VOID            reduce using rule 66 (unary_operator -> MULTOP .)
    NUMBER          reduce using rule 66 (unary_operator -> MULTOP .)
    STRING          reduce using rule 66 (unary_operator -> MULTOP .)
    IDENTIFIER      reduce using rule 66 (unary_operator -> MULTOP .)
    OPERATOR        reduce using rule 66 (unary_operator -> MULTOP .)
    CONST           shift and go to state 218
    VOLATILE        shift and go to state 219

  ! LPAREN          [ reduce using rule 209 (ptr_operator -> MULTOP .) ]
  ! BNOP            [ reduce using rule 209 (ptr_operator -> MULTOP .) ]
  ! MULTOP          [ reduce using rule 209 (ptr_operator -> MULTOP .) ]
  ! BANDOP          [ reduce using rule 209 (ptr_operator -> MULTOP .) ]
  ! IDENTIFIER      [ reduce using rule 209 (ptr_operator -> MULTOP .) ]
  ! DOUBLECOLON     [ reduce using rule 209 (ptr_operator -> MULTOP .) ]
  ! OPERATOR        [ reduce using rule 209 (ptr_operator -> MULTOP .) ]

    cv_qualifier_list              shift and go to state 216
    cv_qualifier                   shift and go to state 217

state 54

    (67) unary_operator -> BANDOP .
    (210) ptr_operator -> BANDOP . cv_qualifier_list
    (211) ptr_operator -> BANDOP .
    (214) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (215) cv_qualifier_list -> . cv_qualifier
    (216) cv_qualifier -> . CONST
    (217) cv_qualifier -> . VOLATILE

  ! reduce/reduce conflict for LPAREN resolved using rule 67 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for BNOP resolved using rule 67 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for MULTOP resolved using rule 67 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for BANDOP resolved using rule 67 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 67 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 67 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 67 (unary_operator -> BANDOP .)
    LPAREN          reduce using rule 67 (unary_operator -> BANDOP .)
    DPLUSOP         reduce using rule 67 (unary_operator -> BANDOP .)
    DMINUSOP        reduce using rule 67 (unary_operator -> BANDOP .)
    SIZEOF          reduce using rule 67 (unary_operator -> BANDOP .)
    MULTOP          reduce using rule 67 (unary_operator -> BANDOP .)
    BANDOP          reduce using rule 67 (unary_operator -> BANDOP .)
    PLUSOP          reduce using rule 67 (unary_operator -> BANDOP .)
    MINUSOP         reduce using rule 67 (unary_operator -> BANDOP .)
    NOTSYM          reduce using rule 67 (unary_operator -> BANDOP .)
    BNOP            reduce using rule 67 (unary_operator -> BANDOP .)
    DOUBLECOLON     reduce using rule 67 (unary_operator -> BANDOP .)
    NEW             reduce using rule 67 (unary_operator -> BANDOP .)
    DELETE          reduce using rule 67 (unary_operator -> BANDOP .)
    THIS            reduce using rule 67 (unary_operator -> BANDOP .)
    CHAR            reduce using rule 67 (unary_operator -> BANDOP .)
    SHORT           reduce using rule 67 (unary_operator -> BANDOP .)
    INT             reduce using rule 67 (unary_operator -> BANDOP .)
    LONG            reduce using rule 67 (unary_operator -> BANDOP .)
    SIGNED          reduce using rule 67 (unary_operator -> BANDOP .)
    UNSIGNED        reduce using rule 67 (unary_operator -> BANDOP .)
    FLOAT           reduce using rule 67 (unary_operator -> BANDOP .)
    DOUBLE          reduce using rule 67 (unary_operator -> BANDOP .)
    VOID            reduce using rule 67 (unary_operator -> BANDOP .)
    NUMBER          reduce using rule 67 (unary_operator -> BANDOP .)
    STRING          reduce using rule 67 (unary_operator -> BANDOP .)
    IDENTIFIER      reduce using rule 67 (unary_operator -> BANDOP .)
    OPERATOR        reduce using rule 67 (unary_operator -> BANDOP .)
    CONST           shift and go to state 218
    VOLATILE        shift and go to state 219

  ! LPAREN          [ reduce using rule 211 (ptr_operator -> BANDOP .) ]
  ! BNOP            [ reduce using rule 211 (ptr_operator -> BANDOP .) ]
  ! MULTOP          [ reduce using rule 211 (ptr_operator -> BANDOP .) ]
  ! BANDOP          [ reduce using rule 211 (ptr_operator -> BANDOP .) ]
  ! IDENTIFIER      [ reduce using rule 211 (ptr_operator -> BANDOP .) ]
  ! DOUBLECOLON     [ reduce using rule 211 (ptr_operator -> BANDOP .) ]
  ! OPERATOR        [ reduce using rule 211 (ptr_operator -> BANDOP .) ]

    cv_qualifier_list              shift and go to state 220
    cv_qualifier                   shift and go to state 217

state 55

    (68) unary_operator -> PLUSOP .

    LPAREN          reduce using rule 68 (unary_operator -> PLUSOP .)
    DPLUSOP         reduce using rule 68 (unary_operator -> PLUSOP .)
    DMINUSOP        reduce using rule 68 (unary_operator -> PLUSOP .)
    SIZEOF          reduce using rule 68 (unary_operator -> PLUSOP .)
    MULTOP          reduce using rule 68 (unary_operator -> PLUSOP .)
    BANDOP          reduce using rule 68 (unary_operator -> PLUSOP .)
    PLUSOP          reduce using rule 68 (unary_operator -> PLUSOP .)
    MINUSOP         reduce using rule 68 (unary_operator -> PLUSOP .)
    NOTSYM          reduce using rule 68 (unary_operator -> PLUSOP .)
    BNOP            reduce using rule 68 (unary_operator -> PLUSOP .)
    DOUBLECOLON     reduce using rule 68 (unary_operator -> PLUSOP .)
    NEW             reduce using rule 68 (unary_operator -> PLUSOP .)
    DELETE          reduce using rule 68 (unary_operator -> PLUSOP .)
    THIS            reduce using rule 68 (unary_operator -> PLUSOP .)
    CHAR            reduce using rule 68 (unary_operator -> PLUSOP .)
    SHORT           reduce using rule 68 (unary_operator -> PLUSOP .)
    INT             reduce using rule 68 (unary_operator -> PLUSOP .)
    LONG            reduce using rule 68 (unary_operator -> PLUSOP .)
    SIGNED          reduce using rule 68 (unary_operator -> PLUSOP .)
    UNSIGNED        reduce using rule 68 (unary_operator -> PLUSOP .)
    FLOAT           reduce using rule 68 (unary_operator -> PLUSOP .)
    DOUBLE          reduce using rule 68 (unary_operator -> PLUSOP .)
    VOID            reduce using rule 68 (unary_operator -> PLUSOP .)
    NUMBER          reduce using rule 68 (unary_operator -> PLUSOP .)
    STRING          reduce using rule 68 (unary_operator -> PLUSOP .)
    IDENTIFIER      reduce using rule 68 (unary_operator -> PLUSOP .)
    OPERATOR        reduce using rule 68 (unary_operator -> PLUSOP .)


state 56

    (69) unary_operator -> MINUSOP .

    LPAREN          reduce using rule 69 (unary_operator -> MINUSOP .)
    DPLUSOP         reduce using rule 69 (unary_operator -> MINUSOP .)
    DMINUSOP        reduce using rule 69 (unary_operator -> MINUSOP .)
    SIZEOF          reduce using rule 69 (unary_operator -> MINUSOP .)
    MULTOP          reduce using rule 69 (unary_operator -> MINUSOP .)
    BANDOP          reduce using rule 69 (unary_operator -> MINUSOP .)
    PLUSOP          reduce using rule 69 (unary_operator -> MINUSOP .)
    MINUSOP         reduce using rule 69 (unary_operator -> MINUSOP .)
    NOTSYM          reduce using rule 69 (unary_operator -> MINUSOP .)
    BNOP            reduce using rule 69 (unary_operator -> MINUSOP .)
    DOUBLECOLON     reduce using rule 69 (unary_operator -> MINUSOP .)
    NEW             reduce using rule 69 (unary_operator -> MINUSOP .)
    DELETE          reduce using rule 69 (unary_operator -> MINUSOP .)
    THIS            reduce using rule 69 (unary_operator -> MINUSOP .)
    CHAR            reduce using rule 69 (unary_operator -> MINUSOP .)
    SHORT           reduce using rule 69 (unary_operator -> MINUSOP .)
    INT             reduce using rule 69 (unary_operator -> MINUSOP .)
    LONG            reduce using rule 69 (unary_operator -> MINUSOP .)
    SIGNED          reduce using rule 69 (unary_operator -> MINUSOP .)
    UNSIGNED        reduce using rule 69 (unary_operator -> MINUSOP .)
    FLOAT           reduce using rule 69 (unary_operator -> MINUSOP .)
    DOUBLE          reduce using rule 69 (unary_operator -> MINUSOP .)
    VOID            reduce using rule 69 (unary_operator -> MINUSOP .)
    NUMBER          reduce using rule 69 (unary_operator -> MINUSOP .)
    STRING          reduce using rule 69 (unary_operator -> MINUSOP .)
    IDENTIFIER      reduce using rule 69 (unary_operator -> MINUSOP .)
    OPERATOR        reduce using rule 69 (unary_operator -> MINUSOP .)


state 57

    (70) unary_operator -> NOTSYM .

    LPAREN          reduce using rule 70 (unary_operator -> NOTSYM .)
    DPLUSOP         reduce using rule 70 (unary_operator -> NOTSYM .)
    DMINUSOP        reduce using rule 70 (unary_operator -> NOTSYM .)
    SIZEOF          reduce using rule 70 (unary_operator -> NOTSYM .)
    MULTOP          reduce using rule 70 (unary_operator -> NOTSYM .)
    BANDOP          reduce using rule 70 (unary_operator -> NOTSYM .)
    PLUSOP          reduce using rule 70 (unary_operator -> NOTSYM .)
    MINUSOP         reduce using rule 70 (unary_operator -> NOTSYM .)
    NOTSYM          reduce using rule 70 (unary_operator -> NOTSYM .)
    BNOP            reduce using rule 70 (unary_operator -> NOTSYM .)
    DOUBLECOLON     reduce using rule 70 (unary_operator -> NOTSYM .)
    NEW             reduce using rule 70 (unary_operator -> NOTSYM .)
    DELETE          reduce using rule 70 (unary_operator -> NOTSYM .)
    THIS            reduce using rule 70 (unary_operator -> NOTSYM .)
    CHAR            reduce using rule 70 (unary_operator -> NOTSYM .)
    SHORT           reduce using rule 70 (unary_operator -> NOTSYM .)
    INT             reduce using rule 70 (unary_operator -> NOTSYM .)
    LONG            reduce using rule 70 (unary_operator -> NOTSYM .)
    SIGNED          reduce using rule 70 (unary_operator -> NOTSYM .)
    UNSIGNED        reduce using rule 70 (unary_operator -> NOTSYM .)
    FLOAT           reduce using rule 70 (unary_operator -> NOTSYM .)
    DOUBLE          reduce using rule 70 (unary_operator -> NOTSYM .)
    VOID            reduce using rule 70 (unary_operator -> NOTSYM .)
    NUMBER          reduce using rule 70 (unary_operator -> NOTSYM .)
    STRING          reduce using rule 70 (unary_operator -> NOTSYM .)
    IDENTIFIER      reduce using rule 70 (unary_operator -> NOTSYM .)
    OPERATOR        reduce using rule 70 (unary_operator -> NOTSYM .)


state 58

    (71) unary_operator -> BNOP .
    (129) name -> BNOP . class_name
    (220) dname -> BNOP . class_name
    (5) class_name -> . IDENTIFIER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LPAREN          reduce using rule 71 (unary_operator -> BNOP .)
    DPLUSOP         reduce using rule 71 (unary_operator -> BNOP .)
    DMINUSOP        reduce using rule 71 (unary_operator -> BNOP .)
    SIZEOF          reduce using rule 71 (unary_operator -> BNOP .)
    MULTOP          reduce using rule 71 (unary_operator -> BNOP .)
    BANDOP          reduce using rule 71 (unary_operator -> BNOP .)
    PLUSOP          reduce using rule 71 (unary_operator -> BNOP .)
    MINUSOP         reduce using rule 71 (unary_operator -> BNOP .)
    NOTSYM          reduce using rule 71 (unary_operator -> BNOP .)
    BNOP            reduce using rule 71 (unary_operator -> BNOP .)
    DOUBLECOLON     reduce using rule 71 (unary_operator -> BNOP .)
    NEW             reduce using rule 71 (unary_operator -> BNOP .)
    DELETE          reduce using rule 71 (unary_operator -> BNOP .)
    THIS            reduce using rule 71 (unary_operator -> BNOP .)
    CHAR            reduce using rule 71 (unary_operator -> BNOP .)
    SHORT           reduce using rule 71 (unary_operator -> BNOP .)
    INT             reduce using rule 71 (unary_operator -> BNOP .)
    LONG            reduce using rule 71 (unary_operator -> BNOP .)
    SIGNED          reduce using rule 71 (unary_operator -> BNOP .)
    UNSIGNED        reduce using rule 71 (unary_operator -> BNOP .)
    FLOAT           reduce using rule 71 (unary_operator -> BNOP .)
    DOUBLE          reduce using rule 71 (unary_operator -> BNOP .)
    VOID            reduce using rule 71 (unary_operator -> BNOP .)
    NUMBER          reduce using rule 71 (unary_operator -> BNOP .)
    STRING          reduce using rule 71 (unary_operator -> BNOP .)
    OPERATOR        reduce using rule 71 (unary_operator -> BNOP .)
    IDENTIFIER      shift and go to state 222

  ! IDENTIFIER      [ reduce using rule 71 (unary_operator -> BNOP .) ]

    class_name                     shift and go to state 221

state 59

    (72) allocation_expression -> DOUBLECOLON . NEW placement new_type_name new_initializer
    (74) allocation_expression -> DOUBLECOLON . NEW new_type_name new_initializer
    (76) allocation_expression -> DOUBLECOLON . NEW placement new_type_name
    (78) allocation_expression -> DOUBLECOLON . NEW new_type_name
    (80) allocation_expression -> DOUBLECOLON . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> DOUBLECOLON . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> DOUBLECOLON . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> DOUBLECOLON . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> DOUBLECOLON . DELETE cast_expression
    (105) deallocation_expression -> DOUBLECOLON . DELETE LSPAREN RSPAREN cast_expression
    (121) primary_expression -> DOUBLECOLON . IDENTIFIER
    (122) primary_expression -> DOUBLECOLON . operator_function_name
    (123) primary_expression -> DOUBLECOLON . qualified_name
    (179) complete_class_name -> DOUBLECOLON . qualified_class_name
    (308) operator_function_name -> . OPERATOR operator_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    NEW             shift and go to state 223
    DELETE          shift and go to state 224
    IDENTIFIER      shift and go to state 225
    OPERATOR        shift and go to state 229

    operator_function_name         shift and go to state 226
    qualified_name                 shift and go to state 227
    qualified_class_name           shift and go to state 228
    class_name                     shift and go to state 230

state 60

    (73) allocation_expression -> NEW . placement new_type_name new_initializer
    (75) allocation_expression -> NEW . new_type_name new_initializer
    (77) allocation_expression -> NEW . placement new_type_name
    (79) allocation_expression -> NEW . new_type_name
    (81) allocation_expression -> NEW . placement LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> NEW . LPAREN type_name RPAREN new_initializer
    (85) allocation_expression -> NEW . placement LPAREN type_name RPAREN
    (87) allocation_expression -> NEW . LPAREN type_name RPAREN
    (88) placement -> . LPAREN expression_list RPAREN
    (89) new_type_name -> . type_specifier_list new_declarator
    (90) new_type_name -> . type_specifier_list
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 233
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    IDENTIFIER      shift and go to state 235

    placement                      shift and go to state 231
    new_type_name                  shift and go to state 232
    type_specifier_list            shift and go to state 234
    type_specifier                 shift and go to state 171
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 236
    typedef_name                   shift and go to state 148

state 61

    (104) deallocation_expression -> DELETE . cast_expression
    (106) deallocation_expression -> DELETE . LSPAREN RSPAREN cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LSPAREN         shift and go to state 238
    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    cast_expression                shift and go to state 237
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 62

    (147) decl_specifiers -> decl_specifier .

    SEMICOLON       reduce using rule 147 (decl_specifiers -> decl_specifier .)
    TYPEDEF         reduce using rule 147 (decl_specifiers -> decl_specifier .)
    LPAREN          reduce using rule 147 (decl_specifiers -> decl_specifier .)
    AUTO            reduce using rule 147 (decl_specifiers -> decl_specifier .)
    STATIC          reduce using rule 147 (decl_specifiers -> decl_specifier .)
    EXTERN          reduce using rule 147 (decl_specifiers -> decl_specifier .)
    CONST           reduce using rule 147 (decl_specifiers -> decl_specifier .)
    VOLATILE        reduce using rule 147 (decl_specifiers -> decl_specifier .)
    INLINE          reduce using rule 147 (decl_specifiers -> decl_specifier .)
    VIRTUAL         reduce using rule 147 (decl_specifiers -> decl_specifier .)
    BNOP            reduce using rule 147 (decl_specifiers -> decl_specifier .)
    MULTOP          reduce using rule 147 (decl_specifiers -> decl_specifier .)
    BANDOP          reduce using rule 147 (decl_specifiers -> decl_specifier .)
    CHAR            reduce using rule 147 (decl_specifiers -> decl_specifier .)
    SHORT           reduce using rule 147 (decl_specifiers -> decl_specifier .)
    INT             reduce using rule 147 (decl_specifiers -> decl_specifier .)
    LONG            reduce using rule 147 (decl_specifiers -> decl_specifier .)
    SIGNED          reduce using rule 147 (decl_specifiers -> decl_specifier .)
    UNSIGNED        reduce using rule 147 (decl_specifiers -> decl_specifier .)
    FLOAT           reduce using rule 147 (decl_specifiers -> decl_specifier .)
    DOUBLE          reduce using rule 147 (decl_specifiers -> decl_specifier .)
    VOID            reduce using rule 147 (decl_specifiers -> decl_specifier .)
    ENUM            reduce using rule 147 (decl_specifiers -> decl_specifier .)
    IDENTIFIER      reduce using rule 147 (decl_specifiers -> decl_specifier .)
    DOUBLECOLON     reduce using rule 147 (decl_specifiers -> decl_specifier .)
    CLASS           reduce using rule 147 (decl_specifiers -> decl_specifier .)
    STRUCT          reduce using rule 147 (decl_specifiers -> decl_specifier .)
    UNION           reduce using rule 147 (decl_specifiers -> decl_specifier .)
    OPERATOR        reduce using rule 147 (decl_specifiers -> decl_specifier .)
    EQUAL           reduce using rule 147 (decl_specifiers -> decl_specifier .)
    LSPAREN         reduce using rule 147 (decl_specifiers -> decl_specifier .)
    COMMA           reduce using rule 147 (decl_specifiers -> decl_specifier .)
    RPAREN          reduce using rule 147 (decl_specifiers -> decl_specifier .)
    GTCOMP          reduce using rule 147 (decl_specifiers -> decl_specifier .)
    COLON           reduce using rule 147 (decl_specifiers -> decl_specifier .)


state 63

    (197) declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 197 (declarator_list -> init_declarator .)
    COMMA           reduce using rule 197 (declarator_list -> init_declarator .)


state 64

    (196) asm_declaration -> ASM . LPAREN STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 239


state 65

    (249) function_definition -> declarator . ctor_initializer fct_body
    (251) function_definition -> declarator . fct_body
    (199) init_declarator -> declarator . initializer
    (200) init_declarator -> declarator .
    (203) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (205) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (206) declarator -> declarator . LSPAREN RSPAREN
    (301) ctor_initializer -> . COLON mem_initializer_list
    (252) fct_body -> . compound_statement
    (253) initializer -> . EQUAL assignment_expression
    (254) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (255) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (256) initializer -> . LPAREN expression_list RPAREN
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN

    SEMICOLON       reduce using rule 200 (init_declarator -> declarator .)
    COMMA           reduce using rule 200 (init_declarator -> declarator .)
    LPAREN          shift and go to state 243
    LSPAREN         shift and go to state 244
    COLON           shift and go to state 245
    EQUAL           shift and go to state 247
    LCPAREN         shift and go to state 21

    ctor_initializer               shift and go to state 240
    fct_body                       shift and go to state 241
    initializer                    shift and go to state 242
    compound_statement             shift and go to state 246

state 66

    (381) template_declaration -> TEMPLATE . LTCOMP template_argument_list GTCOMP declaration

    LTCOMP          shift and go to state 248


state 67

    (191) linkage_specification -> EXTERN . STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> EXTERN . STRING LCPAREN RCPAREN
    (193) linkage_specification -> EXTERN . STRING declaration
    (150) storage_class_specifier -> EXTERN .

    STRING          shift and go to state 249
    SEMICOLON       reduce using rule 150 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 150 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 150 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 150 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 150 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    VIRTUAL         reduce using rule 150 (storage_class_specifier -> EXTERN .)
    BNOP            reduce using rule 150 (storage_class_specifier -> EXTERN .)
    MULTOP          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    BANDOP          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 150 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 150 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 150 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 150 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 150 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 150 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 150 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 150 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 150 (storage_class_specifier -> EXTERN .)
    DOUBLECOLON     reduce using rule 150 (storage_class_specifier -> EXTERN .)
    CLASS           reduce using rule 150 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 150 (storage_class_specifier -> EXTERN .)
    OPERATOR        reduce using rule 150 (storage_class_specifier -> EXTERN .)


state 68

    (27) logical_AND_expression -> inclusive_OR_expression .
    (30) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

  ! shift/reduce conflict for OROP resolved as shift
    ANDOP           reduce using rule 27 (logical_AND_expression -> inclusive_OR_expression .)
    QUESMARK        reduce using rule 27 (logical_AND_expression -> inclusive_OR_expression .)
    COMMA           reduce using rule 27 (logical_AND_expression -> inclusive_OR_expression .)
    SEMICOLON       reduce using rule 27 (logical_AND_expression -> inclusive_OR_expression .)
    $end            reduce using rule 27 (logical_AND_expression -> inclusive_OR_expression .)
    COLON           reduce using rule 27 (logical_AND_expression -> inclusive_OR_expression .)
    RPAREN          reduce using rule 27 (logical_AND_expression -> inclusive_OR_expression .)
    RSPAREN         reduce using rule 27 (logical_AND_expression -> inclusive_OR_expression .)
    GTCOMP          reduce using rule 27 (logical_AND_expression -> inclusive_OR_expression .)
    RCPAREN         reduce using rule 27 (logical_AND_expression -> inclusive_OR_expression .)
    OROP            shift and go to state 250

  ! OROP            [ reduce using rule 27 (logical_AND_expression -> inclusive_OR_expression .) ]


state 69

    (119) primary_expression -> literal .

    LSPAREN         reduce using rule 119 (primary_expression -> literal .)
    LPAREN          reduce using rule 119 (primary_expression -> literal .)
    DOT             reduce using rule 119 (primary_expression -> literal .)
    ARROW           reduce using rule 119 (primary_expression -> literal .)
    DPLUSOP         reduce using rule 119 (primary_expression -> literal .)
    DMINUSOP        reduce using rule 119 (primary_expression -> literal .)
    EQUAL           reduce using rule 119 (primary_expression -> literal .)
    MULTEQOP        reduce using rule 119 (primary_expression -> literal .)
    DIVEQOP         reduce using rule 119 (primary_expression -> literal .)
    MODEQOP         reduce using rule 119 (primary_expression -> literal .)
    PLUSEQOP        reduce using rule 119 (primary_expression -> literal .)
    MINUSEQOP       reduce using rule 119 (primary_expression -> literal .)
    LSHIFTEQOP      reduce using rule 119 (primary_expression -> literal .)
    RSHIFTEQOP      reduce using rule 119 (primary_expression -> literal .)
    BANDEQOP        reduce using rule 119 (primary_expression -> literal .)
    B_E_OR          reduce using rule 119 (primary_expression -> literal .)
    BOREQOP         reduce using rule 119 (primary_expression -> literal .)
    DOTSTAR         reduce using rule 119 (primary_expression -> literal .)
    ARROWSTAR       reduce using rule 119 (primary_expression -> literal .)
    MULTOP          reduce using rule 119 (primary_expression -> literal .)
    DIVOP           reduce using rule 119 (primary_expression -> literal .)
    MODOP           reduce using rule 119 (primary_expression -> literal .)
    PLUSOP          reduce using rule 119 (primary_expression -> literal .)
    MINUSOP         reduce using rule 119 (primary_expression -> literal .)
    LSHIFT          reduce using rule 119 (primary_expression -> literal .)
    RSHIFT          reduce using rule 119 (primary_expression -> literal .)
    LTCOMP          reduce using rule 119 (primary_expression -> literal .)
    GTCOMP          reduce using rule 119 (primary_expression -> literal .)
    LTECOMP         reduce using rule 119 (primary_expression -> literal .)
    GTECOMP         reduce using rule 119 (primary_expression -> literal .)
    EQCOMP          reduce using rule 119 (primary_expression -> literal .)
    NEQCOMP         reduce using rule 119 (primary_expression -> literal .)
    BANDOP          reduce using rule 119 (primary_expression -> literal .)
    XOROP           reduce using rule 119 (primary_expression -> literal .)
    OROP            reduce using rule 119 (primary_expression -> literal .)
    ANDOP           reduce using rule 119 (primary_expression -> literal .)
    QUESMARK        reduce using rule 119 (primary_expression -> literal .)
    COMMA           reduce using rule 119 (primary_expression -> literal .)
    SEMICOLON       reduce using rule 119 (primary_expression -> literal .)
    $end            reduce using rule 119 (primary_expression -> literal .)
    COLON           reduce using rule 119 (primary_expression -> literal .)
    RPAREN          reduce using rule 119 (primary_expression -> literal .)
    RSPAREN         reduce using rule 119 (primary_expression -> literal .)
    RCPAREN         reduce using rule 119 (primary_expression -> literal .)


state 70

    (120) primary_expression -> THIS .

    LSPAREN         reduce using rule 120 (primary_expression -> THIS .)
    LPAREN          reduce using rule 120 (primary_expression -> THIS .)
    DOT             reduce using rule 120 (primary_expression -> THIS .)
    ARROW           reduce using rule 120 (primary_expression -> THIS .)
    DPLUSOP         reduce using rule 120 (primary_expression -> THIS .)
    DMINUSOP        reduce using rule 120 (primary_expression -> THIS .)
    EQUAL           reduce using rule 120 (primary_expression -> THIS .)
    MULTEQOP        reduce using rule 120 (primary_expression -> THIS .)
    DIVEQOP         reduce using rule 120 (primary_expression -> THIS .)
    MODEQOP         reduce using rule 120 (primary_expression -> THIS .)
    PLUSEQOP        reduce using rule 120 (primary_expression -> THIS .)
    MINUSEQOP       reduce using rule 120 (primary_expression -> THIS .)
    LSHIFTEQOP      reduce using rule 120 (primary_expression -> THIS .)
    RSHIFTEQOP      reduce using rule 120 (primary_expression -> THIS .)
    BANDEQOP        reduce using rule 120 (primary_expression -> THIS .)
    B_E_OR          reduce using rule 120 (primary_expression -> THIS .)
    BOREQOP         reduce using rule 120 (primary_expression -> THIS .)
    DOTSTAR         reduce using rule 120 (primary_expression -> THIS .)
    ARROWSTAR       reduce using rule 120 (primary_expression -> THIS .)
    MULTOP          reduce using rule 120 (primary_expression -> THIS .)
    DIVOP           reduce using rule 120 (primary_expression -> THIS .)
    MODOP           reduce using rule 120 (primary_expression -> THIS .)
    PLUSOP          reduce using rule 120 (primary_expression -> THIS .)
    MINUSOP         reduce using rule 120 (primary_expression -> THIS .)
    LSHIFT          reduce using rule 120 (primary_expression -> THIS .)
    RSHIFT          reduce using rule 120 (primary_expression -> THIS .)
    LTCOMP          reduce using rule 120 (primary_expression -> THIS .)
    GTCOMP          reduce using rule 120 (primary_expression -> THIS .)
    LTECOMP         reduce using rule 120 (primary_expression -> THIS .)
    GTECOMP         reduce using rule 120 (primary_expression -> THIS .)
    EQCOMP          reduce using rule 120 (primary_expression -> THIS .)
    NEQCOMP         reduce using rule 120 (primary_expression -> THIS .)
    BANDOP          reduce using rule 120 (primary_expression -> THIS .)
    XOROP           reduce using rule 120 (primary_expression -> THIS .)
    OROP            reduce using rule 120 (primary_expression -> THIS .)
    ANDOP           reduce using rule 120 (primary_expression -> THIS .)
    QUESMARK        reduce using rule 120 (primary_expression -> THIS .)
    COMMA           reduce using rule 120 (primary_expression -> THIS .)
    SEMICOLON       reduce using rule 120 (primary_expression -> THIS .)
    $end            reduce using rule 120 (primary_expression -> THIS .)
    COLON           reduce using rule 120 (primary_expression -> THIS .)
    RPAREN          reduce using rule 120 (primary_expression -> THIS .)
    RSPAREN         reduce using rule 120 (primary_expression -> THIS .)
    RCPAREN         reduce using rule 120 (primary_expression -> THIS .)


state 71

    (127) name -> operator_function_name .

    LSPAREN         reduce using rule 127 (name -> operator_function_name .)
    LPAREN          reduce using rule 127 (name -> operator_function_name .)
    DOT             reduce using rule 127 (name -> operator_function_name .)
    ARROW           reduce using rule 127 (name -> operator_function_name .)
    DPLUSOP         reduce using rule 127 (name -> operator_function_name .)
    DMINUSOP        reduce using rule 127 (name -> operator_function_name .)
    EQUAL           reduce using rule 127 (name -> operator_function_name .)
    MULTEQOP        reduce using rule 127 (name -> operator_function_name .)
    DIVEQOP         reduce using rule 127 (name -> operator_function_name .)
    MODEQOP         reduce using rule 127 (name -> operator_function_name .)
    PLUSEQOP        reduce using rule 127 (name -> operator_function_name .)
    MINUSEQOP       reduce using rule 127 (name -> operator_function_name .)
    LSHIFTEQOP      reduce using rule 127 (name -> operator_function_name .)
    RSHIFTEQOP      reduce using rule 127 (name -> operator_function_name .)
    BANDEQOP        reduce using rule 127 (name -> operator_function_name .)
    B_E_OR          reduce using rule 127 (name -> operator_function_name .)
    BOREQOP         reduce using rule 127 (name -> operator_function_name .)
    DOTSTAR         reduce using rule 127 (name -> operator_function_name .)
    ARROWSTAR       reduce using rule 127 (name -> operator_function_name .)
    MULTOP          reduce using rule 127 (name -> operator_function_name .)
    DIVOP           reduce using rule 127 (name -> operator_function_name .)
    MODOP           reduce using rule 127 (name -> operator_function_name .)
    PLUSOP          reduce using rule 127 (name -> operator_function_name .)
    MINUSOP         reduce using rule 127 (name -> operator_function_name .)
    LSHIFT          reduce using rule 127 (name -> operator_function_name .)
    RSHIFT          reduce using rule 127 (name -> operator_function_name .)
    LTCOMP          reduce using rule 127 (name -> operator_function_name .)
    GTCOMP          reduce using rule 127 (name -> operator_function_name .)
    LTECOMP         reduce using rule 127 (name -> operator_function_name .)
    GTECOMP         reduce using rule 127 (name -> operator_function_name .)
    EQCOMP          reduce using rule 127 (name -> operator_function_name .)
    NEQCOMP         reduce using rule 127 (name -> operator_function_name .)
    BANDOP          reduce using rule 127 (name -> operator_function_name .)
    XOROP           reduce using rule 127 (name -> operator_function_name .)
    OROP            reduce using rule 127 (name -> operator_function_name .)
    ANDOP           reduce using rule 127 (name -> operator_function_name .)
    QUESMARK        reduce using rule 127 (name -> operator_function_name .)
    COMMA           reduce using rule 127 (name -> operator_function_name .)
    SEMICOLON       reduce using rule 127 (name -> operator_function_name .)
    $end            reduce using rule 127 (name -> operator_function_name .)
    COLON           reduce using rule 127 (name -> operator_function_name .)
    LCPAREN         reduce using rule 127 (name -> operator_function_name .)
    RPAREN          reduce using rule 127 (name -> operator_function_name .)
    RSPAREN         reduce using rule 127 (name -> operator_function_name .)
    RCPAREN         reduce using rule 127 (name -> operator_function_name .)


state 72

    (130) name -> qualified_name .

    LSPAREN         reduce using rule 130 (name -> qualified_name .)
    LPAREN          reduce using rule 130 (name -> qualified_name .)
    DOT             reduce using rule 130 (name -> qualified_name .)
    ARROW           reduce using rule 130 (name -> qualified_name .)
    DPLUSOP         reduce using rule 130 (name -> qualified_name .)
    DMINUSOP        reduce using rule 130 (name -> qualified_name .)
    EQUAL           reduce using rule 130 (name -> qualified_name .)
    MULTEQOP        reduce using rule 130 (name -> qualified_name .)
    DIVEQOP         reduce using rule 130 (name -> qualified_name .)
    MODEQOP         reduce using rule 130 (name -> qualified_name .)
    PLUSEQOP        reduce using rule 130 (name -> qualified_name .)
    MINUSEQOP       reduce using rule 130 (name -> qualified_name .)
    LSHIFTEQOP      reduce using rule 130 (name -> qualified_name .)
    RSHIFTEQOP      reduce using rule 130 (name -> qualified_name .)
    BANDEQOP        reduce using rule 130 (name -> qualified_name .)
    B_E_OR          reduce using rule 130 (name -> qualified_name .)
    BOREQOP         reduce using rule 130 (name -> qualified_name .)
    DOTSTAR         reduce using rule 130 (name -> qualified_name .)
    ARROWSTAR       reduce using rule 130 (name -> qualified_name .)
    MULTOP          reduce using rule 130 (name -> qualified_name .)
    DIVOP           reduce using rule 130 (name -> qualified_name .)
    MODOP           reduce using rule 130 (name -> qualified_name .)
    PLUSOP          reduce using rule 130 (name -> qualified_name .)
    MINUSOP         reduce using rule 130 (name -> qualified_name .)
    LSHIFT          reduce using rule 130 (name -> qualified_name .)
    RSHIFT          reduce using rule 130 (name -> qualified_name .)
    LTCOMP          reduce using rule 130 (name -> qualified_name .)
    GTCOMP          reduce using rule 130 (name -> qualified_name .)
    LTECOMP         reduce using rule 130 (name -> qualified_name .)
    GTECOMP         reduce using rule 130 (name -> qualified_name .)
    EQCOMP          reduce using rule 130 (name -> qualified_name .)
    NEQCOMP         reduce using rule 130 (name -> qualified_name .)
    BANDOP          reduce using rule 130 (name -> qualified_name .)
    XOROP           reduce using rule 130 (name -> qualified_name .)
    OROP            reduce using rule 130 (name -> qualified_name .)
    ANDOP           reduce using rule 130 (name -> qualified_name .)
    QUESMARK        reduce using rule 130 (name -> qualified_name .)
    COMMA           reduce using rule 130 (name -> qualified_name .)
    SEMICOLON       reduce using rule 130 (name -> qualified_name .)
    $end            reduce using rule 130 (name -> qualified_name .)
    COLON           reduce using rule 130 (name -> qualified_name .)
    LCPAREN         reduce using rule 130 (name -> qualified_name .)
    RPAREN          reduce using rule 130 (name -> qualified_name .)
    RSPAREN         reduce using rule 130 (name -> qualified_name .)
    RCPAREN         reduce using rule 130 (name -> qualified_name .)


state 73

    (159) simple_type_name -> complete_class_name .
    (212) ptr_operator -> complete_class_name . DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> complete_class_name . DOUBLECOLON MULTOP

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    LPAREN          reduce using rule 159 (simple_type_name -> complete_class_name .)
    SEMICOLON       reduce using rule 159 (simple_type_name -> complete_class_name .)
    TYPEDEF         reduce using rule 159 (simple_type_name -> complete_class_name .)
    AUTO            reduce using rule 159 (simple_type_name -> complete_class_name .)
    STATIC          reduce using rule 159 (simple_type_name -> complete_class_name .)
    EXTERN          reduce using rule 159 (simple_type_name -> complete_class_name .)
    CONST           reduce using rule 159 (simple_type_name -> complete_class_name .)
    VOLATILE        reduce using rule 159 (simple_type_name -> complete_class_name .)
    INLINE          reduce using rule 159 (simple_type_name -> complete_class_name .)
    VIRTUAL         reduce using rule 159 (simple_type_name -> complete_class_name .)
    BNOP            reduce using rule 159 (simple_type_name -> complete_class_name .)
    MULTOP          reduce using rule 159 (simple_type_name -> complete_class_name .)
    BANDOP          reduce using rule 159 (simple_type_name -> complete_class_name .)
    CHAR            reduce using rule 159 (simple_type_name -> complete_class_name .)
    SHORT           reduce using rule 159 (simple_type_name -> complete_class_name .)
    INT             reduce using rule 159 (simple_type_name -> complete_class_name .)
    LONG            reduce using rule 159 (simple_type_name -> complete_class_name .)
    SIGNED          reduce using rule 159 (simple_type_name -> complete_class_name .)
    UNSIGNED        reduce using rule 159 (simple_type_name -> complete_class_name .)
    FLOAT           reduce using rule 159 (simple_type_name -> complete_class_name .)
    DOUBLE          reduce using rule 159 (simple_type_name -> complete_class_name .)
    VOID            reduce using rule 159 (simple_type_name -> complete_class_name .)
    ENUM            reduce using rule 159 (simple_type_name -> complete_class_name .)
    IDENTIFIER      reduce using rule 159 (simple_type_name -> complete_class_name .)
    CLASS           reduce using rule 159 (simple_type_name -> complete_class_name .)
    STRUCT          reduce using rule 159 (simple_type_name -> complete_class_name .)
    UNION           reduce using rule 159 (simple_type_name -> complete_class_name .)
    OPERATOR        reduce using rule 159 (simple_type_name -> complete_class_name .)
    DOUBLECOLON     shift and go to state 251

  ! DOUBLECOLON     [ reduce using rule 159 (simple_type_name -> complete_class_name .) ]


state 74

    (160) simple_type_name -> qualified_type_name .
    (222) dname -> qualified_type_name .

  ! reduce/reduce conflict for LPAREN resolved using rule 160 (simple_type_name -> qualified_type_name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 160 (simple_type_name -> qualified_type_name .)
    LPAREN          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    SEMICOLON       reduce using rule 160 (simple_type_name -> qualified_type_name .)
    TYPEDEF         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    AUTO            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    STATIC          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    EXTERN          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    CONST           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    VOLATILE        reduce using rule 160 (simple_type_name -> qualified_type_name .)
    INLINE          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    VIRTUAL         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    BNOP            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    MULTOP          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    BANDOP          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    CHAR            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    SHORT           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    INT             reduce using rule 160 (simple_type_name -> qualified_type_name .)
    LONG            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    SIGNED          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    UNSIGNED        reduce using rule 160 (simple_type_name -> qualified_type_name .)
    FLOAT           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    DOUBLE          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    VOID            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    ENUM            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    IDENTIFIER      reduce using rule 160 (simple_type_name -> qualified_type_name .)
    DOUBLECOLON     reduce using rule 160 (simple_type_name -> qualified_type_name .)
    CLASS           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    STRUCT          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    UNION           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    OPERATOR        reduce using rule 160 (simple_type_name -> qualified_type_name .)
    LSPAREN         reduce using rule 222 (dname -> qualified_type_name .)
    COLON           reduce using rule 222 (dname -> qualified_type_name .)
    EQUAL           reduce using rule 222 (dname -> qualified_type_name .)
    LCPAREN         reduce using rule 222 (dname -> qualified_type_name .)
    COMMA           reduce using rule 222 (dname -> qualified_type_name .)

  ! LPAREN          [ reduce using rule 222 (dname -> qualified_type_name .) ]
  ! SEMICOLON       [ reduce using rule 222 (dname -> qualified_type_name .) ]


state 75

    (161) simple_type_name -> CHAR .
    (133) literal -> CHAR .

  ! reduce/reduce conflict for LSPAREN resolved using rule 133 (literal -> CHAR .)
  ! reduce/reduce conflict for LPAREN resolved using rule 133 (literal -> CHAR .)
  ! reduce/reduce conflict for EQUAL resolved using rule 133 (literal -> CHAR .)
  ! reduce/reduce conflict for MULTOP resolved using rule 133 (literal -> CHAR .)
  ! reduce/reduce conflict for BANDOP resolved using rule 133 (literal -> CHAR .)
  ! reduce/reduce conflict for COMMA resolved using rule 133 (literal -> CHAR .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 133 (literal -> CHAR .)
  ! reduce/reduce conflict for RPAREN resolved using rule 133 (literal -> CHAR .)
    TYPEDEF         reduce using rule 161 (simple_type_name -> CHAR .)
    AUTO            reduce using rule 161 (simple_type_name -> CHAR .)
    STATIC          reduce using rule 161 (simple_type_name -> CHAR .)
    EXTERN          reduce using rule 161 (simple_type_name -> CHAR .)
    CONST           reduce using rule 161 (simple_type_name -> CHAR .)
    VOLATILE        reduce using rule 161 (simple_type_name -> CHAR .)
    INLINE          reduce using rule 161 (simple_type_name -> CHAR .)
    VIRTUAL         reduce using rule 161 (simple_type_name -> CHAR .)
    BNOP            reduce using rule 161 (simple_type_name -> CHAR .)
    CHAR            reduce using rule 161 (simple_type_name -> CHAR .)
    SHORT           reduce using rule 161 (simple_type_name -> CHAR .)
    INT             reduce using rule 161 (simple_type_name -> CHAR .)
    LONG            reduce using rule 161 (simple_type_name -> CHAR .)
    SIGNED          reduce using rule 161 (simple_type_name -> CHAR .)
    UNSIGNED        reduce using rule 161 (simple_type_name -> CHAR .)
    FLOAT           reduce using rule 161 (simple_type_name -> CHAR .)
    DOUBLE          reduce using rule 161 (simple_type_name -> CHAR .)
    VOID            reduce using rule 161 (simple_type_name -> CHAR .)
    ENUM            reduce using rule 161 (simple_type_name -> CHAR .)
    IDENTIFIER      reduce using rule 161 (simple_type_name -> CHAR .)
    DOUBLECOLON     reduce using rule 161 (simple_type_name -> CHAR .)
    CLASS           reduce using rule 161 (simple_type_name -> CHAR .)
    STRUCT          reduce using rule 161 (simple_type_name -> CHAR .)
    UNION           reduce using rule 161 (simple_type_name -> CHAR .)
    OPERATOR        reduce using rule 161 (simple_type_name -> CHAR .)
    LSPAREN         reduce using rule 133 (literal -> CHAR .)
    LPAREN          reduce using rule 133 (literal -> CHAR .)
    DOT             reduce using rule 133 (literal -> CHAR .)
    ARROW           reduce using rule 133 (literal -> CHAR .)
    DPLUSOP         reduce using rule 133 (literal -> CHAR .)
    DMINUSOP        reduce using rule 133 (literal -> CHAR .)
    EQUAL           reduce using rule 133 (literal -> CHAR .)
    MULTEQOP        reduce using rule 133 (literal -> CHAR .)
    DIVEQOP         reduce using rule 133 (literal -> CHAR .)
    MODEQOP         reduce using rule 133 (literal -> CHAR .)
    PLUSEQOP        reduce using rule 133 (literal -> CHAR .)
    MINUSEQOP       reduce using rule 133 (literal -> CHAR .)
    LSHIFTEQOP      reduce using rule 133 (literal -> CHAR .)
    RSHIFTEQOP      reduce using rule 133 (literal -> CHAR .)
    BANDEQOP        reduce using rule 133 (literal -> CHAR .)
    B_E_OR          reduce using rule 133 (literal -> CHAR .)
    BOREQOP         reduce using rule 133 (literal -> CHAR .)
    DOTSTAR         reduce using rule 133 (literal -> CHAR .)
    ARROWSTAR       reduce using rule 133 (literal -> CHAR .)
    MULTOP          reduce using rule 133 (literal -> CHAR .)
    DIVOP           reduce using rule 133 (literal -> CHAR .)
    MODOP           reduce using rule 133 (literal -> CHAR .)
    PLUSOP          reduce using rule 133 (literal -> CHAR .)
    MINUSOP         reduce using rule 133 (literal -> CHAR .)
    LSHIFT          reduce using rule 133 (literal -> CHAR .)
    RSHIFT          reduce using rule 133 (literal -> CHAR .)
    LTCOMP          reduce using rule 133 (literal -> CHAR .)
    GTCOMP          reduce using rule 133 (literal -> CHAR .)
    LTECOMP         reduce using rule 133 (literal -> CHAR .)
    GTECOMP         reduce using rule 133 (literal -> CHAR .)
    EQCOMP          reduce using rule 133 (literal -> CHAR .)
    NEQCOMP         reduce using rule 133 (literal -> CHAR .)
    BANDOP          reduce using rule 133 (literal -> CHAR .)
    XOROP           reduce using rule 133 (literal -> CHAR .)
    OROP            reduce using rule 133 (literal -> CHAR .)
    ANDOP           reduce using rule 133 (literal -> CHAR .)
    QUESMARK        reduce using rule 133 (literal -> CHAR .)
    COMMA           reduce using rule 133 (literal -> CHAR .)
    SEMICOLON       reduce using rule 133 (literal -> CHAR .)
    $end            reduce using rule 133 (literal -> CHAR .)
    COLON           reduce using rule 133 (literal -> CHAR .)
    RPAREN          reduce using rule 133 (literal -> CHAR .)
    RSPAREN         reduce using rule 133 (literal -> CHAR .)
    RCPAREN         reduce using rule 133 (literal -> CHAR .)

  ! LPAREN          [ reduce using rule 161 (simple_type_name -> CHAR .) ]
  ! SEMICOLON       [ reduce using rule 161 (simple_type_name -> CHAR .) ]
  ! MULTOP          [ reduce using rule 161 (simple_type_name -> CHAR .) ]
  ! BANDOP          [ reduce using rule 161 (simple_type_name -> CHAR .) ]
  ! LSPAREN         [ reduce using rule 161 (simple_type_name -> CHAR .) ]
  ! RPAREN          [ reduce using rule 161 (simple_type_name -> CHAR .) ]
  ! EQUAL           [ reduce using rule 161 (simple_type_name -> CHAR .) ]
  ! COMMA           [ reduce using rule 161 (simple_type_name -> CHAR .) ]


state 76

    (162) simple_type_name -> SHORT .

    LPAREN          reduce using rule 162 (simple_type_name -> SHORT .)
    SEMICOLON       reduce using rule 162 (simple_type_name -> SHORT .)
    TYPEDEF         reduce using rule 162 (simple_type_name -> SHORT .)
    AUTO            reduce using rule 162 (simple_type_name -> SHORT .)
    STATIC          reduce using rule 162 (simple_type_name -> SHORT .)
    EXTERN          reduce using rule 162 (simple_type_name -> SHORT .)
    CONST           reduce using rule 162 (simple_type_name -> SHORT .)
    VOLATILE        reduce using rule 162 (simple_type_name -> SHORT .)
    INLINE          reduce using rule 162 (simple_type_name -> SHORT .)
    VIRTUAL         reduce using rule 162 (simple_type_name -> SHORT .)
    BNOP            reduce using rule 162 (simple_type_name -> SHORT .)
    MULTOP          reduce using rule 162 (simple_type_name -> SHORT .)
    BANDOP          reduce using rule 162 (simple_type_name -> SHORT .)
    CHAR            reduce using rule 162 (simple_type_name -> SHORT .)
    SHORT           reduce using rule 162 (simple_type_name -> SHORT .)
    INT             reduce using rule 162 (simple_type_name -> SHORT .)
    LONG            reduce using rule 162 (simple_type_name -> SHORT .)
    SIGNED          reduce using rule 162 (simple_type_name -> SHORT .)
    UNSIGNED        reduce using rule 162 (simple_type_name -> SHORT .)
    FLOAT           reduce using rule 162 (simple_type_name -> SHORT .)
    DOUBLE          reduce using rule 162 (simple_type_name -> SHORT .)
    VOID            reduce using rule 162 (simple_type_name -> SHORT .)
    ENUM            reduce using rule 162 (simple_type_name -> SHORT .)
    IDENTIFIER      reduce using rule 162 (simple_type_name -> SHORT .)
    DOUBLECOLON     reduce using rule 162 (simple_type_name -> SHORT .)
    CLASS           reduce using rule 162 (simple_type_name -> SHORT .)
    STRUCT          reduce using rule 162 (simple_type_name -> SHORT .)
    UNION           reduce using rule 162 (simple_type_name -> SHORT .)
    OPERATOR        reduce using rule 162 (simple_type_name -> SHORT .)
    LSPAREN         reduce using rule 162 (simple_type_name -> SHORT .)
    RPAREN          reduce using rule 162 (simple_type_name -> SHORT .)
    EQUAL           reduce using rule 162 (simple_type_name -> SHORT .)
    MULTEQOP        reduce using rule 162 (simple_type_name -> SHORT .)
    DIVEQOP         reduce using rule 162 (simple_type_name -> SHORT .)
    MODEQOP         reduce using rule 162 (simple_type_name -> SHORT .)
    PLUSEQOP        reduce using rule 162 (simple_type_name -> SHORT .)
    MINUSEQOP       reduce using rule 162 (simple_type_name -> SHORT .)
    LSHIFTEQOP      reduce using rule 162 (simple_type_name -> SHORT .)
    RSHIFTEQOP      reduce using rule 162 (simple_type_name -> SHORT .)
    BANDEQOP        reduce using rule 162 (simple_type_name -> SHORT .)
    B_E_OR          reduce using rule 162 (simple_type_name -> SHORT .)
    BOREQOP         reduce using rule 162 (simple_type_name -> SHORT .)
    DOTSTAR         reduce using rule 162 (simple_type_name -> SHORT .)
    ARROWSTAR       reduce using rule 162 (simple_type_name -> SHORT .)
    DIVOP           reduce using rule 162 (simple_type_name -> SHORT .)
    MODOP           reduce using rule 162 (simple_type_name -> SHORT .)
    PLUSOP          reduce using rule 162 (simple_type_name -> SHORT .)
    MINUSOP         reduce using rule 162 (simple_type_name -> SHORT .)
    LSHIFT          reduce using rule 162 (simple_type_name -> SHORT .)
    RSHIFT          reduce using rule 162 (simple_type_name -> SHORT .)
    LTCOMP          reduce using rule 162 (simple_type_name -> SHORT .)
    GTCOMP          reduce using rule 162 (simple_type_name -> SHORT .)
    LTECOMP         reduce using rule 162 (simple_type_name -> SHORT .)
    GTECOMP         reduce using rule 162 (simple_type_name -> SHORT .)
    EQCOMP          reduce using rule 162 (simple_type_name -> SHORT .)
    NEQCOMP         reduce using rule 162 (simple_type_name -> SHORT .)
    XOROP           reduce using rule 162 (simple_type_name -> SHORT .)
    OROP            reduce using rule 162 (simple_type_name -> SHORT .)
    ANDOP           reduce using rule 162 (simple_type_name -> SHORT .)
    QUESMARK        reduce using rule 162 (simple_type_name -> SHORT .)
    COMMA           reduce using rule 162 (simple_type_name -> SHORT .)
    $end            reduce using rule 162 (simple_type_name -> SHORT .)
    COLON           reduce using rule 162 (simple_type_name -> SHORT .)
    RSPAREN         reduce using rule 162 (simple_type_name -> SHORT .)
    RCPAREN         reduce using rule 162 (simple_type_name -> SHORT .)
    DOT             reduce using rule 162 (simple_type_name -> SHORT .)
    ARROW           reduce using rule 162 (simple_type_name -> SHORT .)
    DPLUSOP         reduce using rule 162 (simple_type_name -> SHORT .)
    DMINUSOP        reduce using rule 162 (simple_type_name -> SHORT .)
    LCPAREN         reduce using rule 162 (simple_type_name -> SHORT .)


state 77

    (163) simple_type_name -> INT .

    LPAREN          reduce using rule 163 (simple_type_name -> INT .)
    SEMICOLON       reduce using rule 163 (simple_type_name -> INT .)
    TYPEDEF         reduce using rule 163 (simple_type_name -> INT .)
    AUTO            reduce using rule 163 (simple_type_name -> INT .)
    STATIC          reduce using rule 163 (simple_type_name -> INT .)
    EXTERN          reduce using rule 163 (simple_type_name -> INT .)
    CONST           reduce using rule 163 (simple_type_name -> INT .)
    VOLATILE        reduce using rule 163 (simple_type_name -> INT .)
    INLINE          reduce using rule 163 (simple_type_name -> INT .)
    VIRTUAL         reduce using rule 163 (simple_type_name -> INT .)
    BNOP            reduce using rule 163 (simple_type_name -> INT .)
    MULTOP          reduce using rule 163 (simple_type_name -> INT .)
    BANDOP          reduce using rule 163 (simple_type_name -> INT .)
    CHAR            reduce using rule 163 (simple_type_name -> INT .)
    SHORT           reduce using rule 163 (simple_type_name -> INT .)
    INT             reduce using rule 163 (simple_type_name -> INT .)
    LONG            reduce using rule 163 (simple_type_name -> INT .)
    SIGNED          reduce using rule 163 (simple_type_name -> INT .)
    UNSIGNED        reduce using rule 163 (simple_type_name -> INT .)
    FLOAT           reduce using rule 163 (simple_type_name -> INT .)
    DOUBLE          reduce using rule 163 (simple_type_name -> INT .)
    VOID            reduce using rule 163 (simple_type_name -> INT .)
    ENUM            reduce using rule 163 (simple_type_name -> INT .)
    IDENTIFIER      reduce using rule 163 (simple_type_name -> INT .)
    DOUBLECOLON     reduce using rule 163 (simple_type_name -> INT .)
    CLASS           reduce using rule 163 (simple_type_name -> INT .)
    STRUCT          reduce using rule 163 (simple_type_name -> INT .)
    UNION           reduce using rule 163 (simple_type_name -> INT .)
    OPERATOR        reduce using rule 163 (simple_type_name -> INT .)
    LSPAREN         reduce using rule 163 (simple_type_name -> INT .)
    RPAREN          reduce using rule 163 (simple_type_name -> INT .)
    EQUAL           reduce using rule 163 (simple_type_name -> INT .)
    MULTEQOP        reduce using rule 163 (simple_type_name -> INT .)
    DIVEQOP         reduce using rule 163 (simple_type_name -> INT .)
    MODEQOP         reduce using rule 163 (simple_type_name -> INT .)
    PLUSEQOP        reduce using rule 163 (simple_type_name -> INT .)
    MINUSEQOP       reduce using rule 163 (simple_type_name -> INT .)
    LSHIFTEQOP      reduce using rule 163 (simple_type_name -> INT .)
    RSHIFTEQOP      reduce using rule 163 (simple_type_name -> INT .)
    BANDEQOP        reduce using rule 163 (simple_type_name -> INT .)
    B_E_OR          reduce using rule 163 (simple_type_name -> INT .)
    BOREQOP         reduce using rule 163 (simple_type_name -> INT .)
    DOTSTAR         reduce using rule 163 (simple_type_name -> INT .)
    ARROWSTAR       reduce using rule 163 (simple_type_name -> INT .)
    DIVOP           reduce using rule 163 (simple_type_name -> INT .)
    MODOP           reduce using rule 163 (simple_type_name -> INT .)
    PLUSOP          reduce using rule 163 (simple_type_name -> INT .)
    MINUSOP         reduce using rule 163 (simple_type_name -> INT .)
    LSHIFT          reduce using rule 163 (simple_type_name -> INT .)
    RSHIFT          reduce using rule 163 (simple_type_name -> INT .)
    LTCOMP          reduce using rule 163 (simple_type_name -> INT .)
    GTCOMP          reduce using rule 163 (simple_type_name -> INT .)
    LTECOMP         reduce using rule 163 (simple_type_name -> INT .)
    GTECOMP         reduce using rule 163 (simple_type_name -> INT .)
    EQCOMP          reduce using rule 163 (simple_type_name -> INT .)
    NEQCOMP         reduce using rule 163 (simple_type_name -> INT .)
    XOROP           reduce using rule 163 (simple_type_name -> INT .)
    OROP            reduce using rule 163 (simple_type_name -> INT .)
    ANDOP           reduce using rule 163 (simple_type_name -> INT .)
    QUESMARK        reduce using rule 163 (simple_type_name -> INT .)
    COMMA           reduce using rule 163 (simple_type_name -> INT .)
    $end            reduce using rule 163 (simple_type_name -> INT .)
    COLON           reduce using rule 163 (simple_type_name -> INT .)
    RSPAREN         reduce using rule 163 (simple_type_name -> INT .)
    RCPAREN         reduce using rule 163 (simple_type_name -> INT .)
    DOT             reduce using rule 163 (simple_type_name -> INT .)
    ARROW           reduce using rule 163 (simple_type_name -> INT .)
    DPLUSOP         reduce using rule 163 (simple_type_name -> INT .)
    DMINUSOP        reduce using rule 163 (simple_type_name -> INT .)
    LCPAREN         reduce using rule 163 (simple_type_name -> INT .)


state 78

    (164) simple_type_name -> LONG .

    LPAREN          reduce using rule 164 (simple_type_name -> LONG .)
    SEMICOLON       reduce using rule 164 (simple_type_name -> LONG .)
    TYPEDEF         reduce using rule 164 (simple_type_name -> LONG .)
    AUTO            reduce using rule 164 (simple_type_name -> LONG .)
    STATIC          reduce using rule 164 (simple_type_name -> LONG .)
    EXTERN          reduce using rule 164 (simple_type_name -> LONG .)
    CONST           reduce using rule 164 (simple_type_name -> LONG .)
    VOLATILE        reduce using rule 164 (simple_type_name -> LONG .)
    INLINE          reduce using rule 164 (simple_type_name -> LONG .)
    VIRTUAL         reduce using rule 164 (simple_type_name -> LONG .)
    BNOP            reduce using rule 164 (simple_type_name -> LONG .)
    MULTOP          reduce using rule 164 (simple_type_name -> LONG .)
    BANDOP          reduce using rule 164 (simple_type_name -> LONG .)
    CHAR            reduce using rule 164 (simple_type_name -> LONG .)
    SHORT           reduce using rule 164 (simple_type_name -> LONG .)
    INT             reduce using rule 164 (simple_type_name -> LONG .)
    LONG            reduce using rule 164 (simple_type_name -> LONG .)
    SIGNED          reduce using rule 164 (simple_type_name -> LONG .)
    UNSIGNED        reduce using rule 164 (simple_type_name -> LONG .)
    FLOAT           reduce using rule 164 (simple_type_name -> LONG .)
    DOUBLE          reduce using rule 164 (simple_type_name -> LONG .)
    VOID            reduce using rule 164 (simple_type_name -> LONG .)
    ENUM            reduce using rule 164 (simple_type_name -> LONG .)
    IDENTIFIER      reduce using rule 164 (simple_type_name -> LONG .)
    DOUBLECOLON     reduce using rule 164 (simple_type_name -> LONG .)
    CLASS           reduce using rule 164 (simple_type_name -> LONG .)
    STRUCT          reduce using rule 164 (simple_type_name -> LONG .)
    UNION           reduce using rule 164 (simple_type_name -> LONG .)
    OPERATOR        reduce using rule 164 (simple_type_name -> LONG .)
    LSPAREN         reduce using rule 164 (simple_type_name -> LONG .)
    RPAREN          reduce using rule 164 (simple_type_name -> LONG .)
    EQUAL           reduce using rule 164 (simple_type_name -> LONG .)
    MULTEQOP        reduce using rule 164 (simple_type_name -> LONG .)
    DIVEQOP         reduce using rule 164 (simple_type_name -> LONG .)
    MODEQOP         reduce using rule 164 (simple_type_name -> LONG .)
    PLUSEQOP        reduce using rule 164 (simple_type_name -> LONG .)
    MINUSEQOP       reduce using rule 164 (simple_type_name -> LONG .)
    LSHIFTEQOP      reduce using rule 164 (simple_type_name -> LONG .)
    RSHIFTEQOP      reduce using rule 164 (simple_type_name -> LONG .)
    BANDEQOP        reduce using rule 164 (simple_type_name -> LONG .)
    B_E_OR          reduce using rule 164 (simple_type_name -> LONG .)
    BOREQOP         reduce using rule 164 (simple_type_name -> LONG .)
    DOTSTAR         reduce using rule 164 (simple_type_name -> LONG .)
    ARROWSTAR       reduce using rule 164 (simple_type_name -> LONG .)
    DIVOP           reduce using rule 164 (simple_type_name -> LONG .)
    MODOP           reduce using rule 164 (simple_type_name -> LONG .)
    PLUSOP          reduce using rule 164 (simple_type_name -> LONG .)
    MINUSOP         reduce using rule 164 (simple_type_name -> LONG .)
    LSHIFT          reduce using rule 164 (simple_type_name -> LONG .)
    RSHIFT          reduce using rule 164 (simple_type_name -> LONG .)
    LTCOMP          reduce using rule 164 (simple_type_name -> LONG .)
    GTCOMP          reduce using rule 164 (simple_type_name -> LONG .)
    LTECOMP         reduce using rule 164 (simple_type_name -> LONG .)
    GTECOMP         reduce using rule 164 (simple_type_name -> LONG .)
    EQCOMP          reduce using rule 164 (simple_type_name -> LONG .)
    NEQCOMP         reduce using rule 164 (simple_type_name -> LONG .)
    XOROP           reduce using rule 164 (simple_type_name -> LONG .)
    OROP            reduce using rule 164 (simple_type_name -> LONG .)
    ANDOP           reduce using rule 164 (simple_type_name -> LONG .)
    QUESMARK        reduce using rule 164 (simple_type_name -> LONG .)
    COMMA           reduce using rule 164 (simple_type_name -> LONG .)
    $end            reduce using rule 164 (simple_type_name -> LONG .)
    COLON           reduce using rule 164 (simple_type_name -> LONG .)
    RSPAREN         reduce using rule 164 (simple_type_name -> LONG .)
    RCPAREN         reduce using rule 164 (simple_type_name -> LONG .)
    DOT             reduce using rule 164 (simple_type_name -> LONG .)
    ARROW           reduce using rule 164 (simple_type_name -> LONG .)
    DPLUSOP         reduce using rule 164 (simple_type_name -> LONG .)
    DMINUSOP        reduce using rule 164 (simple_type_name -> LONG .)
    LCPAREN         reduce using rule 164 (simple_type_name -> LONG .)


state 79

    (165) simple_type_name -> SIGNED .

    LPAREN          reduce using rule 165 (simple_type_name -> SIGNED .)
    SEMICOLON       reduce using rule 165 (simple_type_name -> SIGNED .)
    TYPEDEF         reduce using rule 165 (simple_type_name -> SIGNED .)
    AUTO            reduce using rule 165 (simple_type_name -> SIGNED .)
    STATIC          reduce using rule 165 (simple_type_name -> SIGNED .)
    EXTERN          reduce using rule 165 (simple_type_name -> SIGNED .)
    CONST           reduce using rule 165 (simple_type_name -> SIGNED .)
    VOLATILE        reduce using rule 165 (simple_type_name -> SIGNED .)
    INLINE          reduce using rule 165 (simple_type_name -> SIGNED .)
    VIRTUAL         reduce using rule 165 (simple_type_name -> SIGNED .)
    BNOP            reduce using rule 165 (simple_type_name -> SIGNED .)
    MULTOP          reduce using rule 165 (simple_type_name -> SIGNED .)
    BANDOP          reduce using rule 165 (simple_type_name -> SIGNED .)
    CHAR            reduce using rule 165 (simple_type_name -> SIGNED .)
    SHORT           reduce using rule 165 (simple_type_name -> SIGNED .)
    INT             reduce using rule 165 (simple_type_name -> SIGNED .)
    LONG            reduce using rule 165 (simple_type_name -> SIGNED .)
    SIGNED          reduce using rule 165 (simple_type_name -> SIGNED .)
    UNSIGNED        reduce using rule 165 (simple_type_name -> SIGNED .)
    FLOAT           reduce using rule 165 (simple_type_name -> SIGNED .)
    DOUBLE          reduce using rule 165 (simple_type_name -> SIGNED .)
    VOID            reduce using rule 165 (simple_type_name -> SIGNED .)
    ENUM            reduce using rule 165 (simple_type_name -> SIGNED .)
    IDENTIFIER      reduce using rule 165 (simple_type_name -> SIGNED .)
    DOUBLECOLON     reduce using rule 165 (simple_type_name -> SIGNED .)
    CLASS           reduce using rule 165 (simple_type_name -> SIGNED .)
    STRUCT          reduce using rule 165 (simple_type_name -> SIGNED .)
    UNION           reduce using rule 165 (simple_type_name -> SIGNED .)
    OPERATOR        reduce using rule 165 (simple_type_name -> SIGNED .)
    LSPAREN         reduce using rule 165 (simple_type_name -> SIGNED .)
    RPAREN          reduce using rule 165 (simple_type_name -> SIGNED .)
    EQUAL           reduce using rule 165 (simple_type_name -> SIGNED .)
    MULTEQOP        reduce using rule 165 (simple_type_name -> SIGNED .)
    DIVEQOP         reduce using rule 165 (simple_type_name -> SIGNED .)
    MODEQOP         reduce using rule 165 (simple_type_name -> SIGNED .)
    PLUSEQOP        reduce using rule 165 (simple_type_name -> SIGNED .)
    MINUSEQOP       reduce using rule 165 (simple_type_name -> SIGNED .)
    LSHIFTEQOP      reduce using rule 165 (simple_type_name -> SIGNED .)
    RSHIFTEQOP      reduce using rule 165 (simple_type_name -> SIGNED .)
    BANDEQOP        reduce using rule 165 (simple_type_name -> SIGNED .)
    B_E_OR          reduce using rule 165 (simple_type_name -> SIGNED .)
    BOREQOP         reduce using rule 165 (simple_type_name -> SIGNED .)
    DOTSTAR         reduce using rule 165 (simple_type_name -> SIGNED .)
    ARROWSTAR       reduce using rule 165 (simple_type_name -> SIGNED .)
    DIVOP           reduce using rule 165 (simple_type_name -> SIGNED .)
    MODOP           reduce using rule 165 (simple_type_name -> SIGNED .)
    PLUSOP          reduce using rule 165 (simple_type_name -> SIGNED .)
    MINUSOP         reduce using rule 165 (simple_type_name -> SIGNED .)
    LSHIFT          reduce using rule 165 (simple_type_name -> SIGNED .)
    RSHIFT          reduce using rule 165 (simple_type_name -> SIGNED .)
    LTCOMP          reduce using rule 165 (simple_type_name -> SIGNED .)
    GTCOMP          reduce using rule 165 (simple_type_name -> SIGNED .)
    LTECOMP         reduce using rule 165 (simple_type_name -> SIGNED .)
    GTECOMP         reduce using rule 165 (simple_type_name -> SIGNED .)
    EQCOMP          reduce using rule 165 (simple_type_name -> SIGNED .)
    NEQCOMP         reduce using rule 165 (simple_type_name -> SIGNED .)
    XOROP           reduce using rule 165 (simple_type_name -> SIGNED .)
    OROP            reduce using rule 165 (simple_type_name -> SIGNED .)
    ANDOP           reduce using rule 165 (simple_type_name -> SIGNED .)
    QUESMARK        reduce using rule 165 (simple_type_name -> SIGNED .)
    COMMA           reduce using rule 165 (simple_type_name -> SIGNED .)
    $end            reduce using rule 165 (simple_type_name -> SIGNED .)
    COLON           reduce using rule 165 (simple_type_name -> SIGNED .)
    RSPAREN         reduce using rule 165 (simple_type_name -> SIGNED .)
    RCPAREN         reduce using rule 165 (simple_type_name -> SIGNED .)
    DOT             reduce using rule 165 (simple_type_name -> SIGNED .)
    ARROW           reduce using rule 165 (simple_type_name -> SIGNED .)
    DPLUSOP         reduce using rule 165 (simple_type_name -> SIGNED .)
    DMINUSOP        reduce using rule 165 (simple_type_name -> SIGNED .)
    LCPAREN         reduce using rule 165 (simple_type_name -> SIGNED .)


state 80

    (166) simple_type_name -> UNSIGNED .

    LPAREN          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    SEMICOLON       reduce using rule 166 (simple_type_name -> UNSIGNED .)
    TYPEDEF         reduce using rule 166 (simple_type_name -> UNSIGNED .)
    AUTO            reduce using rule 166 (simple_type_name -> UNSIGNED .)
    STATIC          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    EXTERN          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    CONST           reduce using rule 166 (simple_type_name -> UNSIGNED .)
    VOLATILE        reduce using rule 166 (simple_type_name -> UNSIGNED .)
    INLINE          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    VIRTUAL         reduce using rule 166 (simple_type_name -> UNSIGNED .)
    BNOP            reduce using rule 166 (simple_type_name -> UNSIGNED .)
    MULTOP          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    BANDOP          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    CHAR            reduce using rule 166 (simple_type_name -> UNSIGNED .)
    SHORT           reduce using rule 166 (simple_type_name -> UNSIGNED .)
    INT             reduce using rule 166 (simple_type_name -> UNSIGNED .)
    LONG            reduce using rule 166 (simple_type_name -> UNSIGNED .)
    SIGNED          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    UNSIGNED        reduce using rule 166 (simple_type_name -> UNSIGNED .)
    FLOAT           reduce using rule 166 (simple_type_name -> UNSIGNED .)
    DOUBLE          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    VOID            reduce using rule 166 (simple_type_name -> UNSIGNED .)
    ENUM            reduce using rule 166 (simple_type_name -> UNSIGNED .)
    IDENTIFIER      reduce using rule 166 (simple_type_name -> UNSIGNED .)
    DOUBLECOLON     reduce using rule 166 (simple_type_name -> UNSIGNED .)
    CLASS           reduce using rule 166 (simple_type_name -> UNSIGNED .)
    STRUCT          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    UNION           reduce using rule 166 (simple_type_name -> UNSIGNED .)
    OPERATOR        reduce using rule 166 (simple_type_name -> UNSIGNED .)
    LSPAREN         reduce using rule 166 (simple_type_name -> UNSIGNED .)
    RPAREN          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    EQUAL           reduce using rule 166 (simple_type_name -> UNSIGNED .)
    MULTEQOP        reduce using rule 166 (simple_type_name -> UNSIGNED .)
    DIVEQOP         reduce using rule 166 (simple_type_name -> UNSIGNED .)
    MODEQOP         reduce using rule 166 (simple_type_name -> UNSIGNED .)
    PLUSEQOP        reduce using rule 166 (simple_type_name -> UNSIGNED .)
    MINUSEQOP       reduce using rule 166 (simple_type_name -> UNSIGNED .)
    LSHIFTEQOP      reduce using rule 166 (simple_type_name -> UNSIGNED .)
    RSHIFTEQOP      reduce using rule 166 (simple_type_name -> UNSIGNED .)
    BANDEQOP        reduce using rule 166 (simple_type_name -> UNSIGNED .)
    B_E_OR          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    BOREQOP         reduce using rule 166 (simple_type_name -> UNSIGNED .)
    DOTSTAR         reduce using rule 166 (simple_type_name -> UNSIGNED .)
    ARROWSTAR       reduce using rule 166 (simple_type_name -> UNSIGNED .)
    DIVOP           reduce using rule 166 (simple_type_name -> UNSIGNED .)
    MODOP           reduce using rule 166 (simple_type_name -> UNSIGNED .)
    PLUSOP          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    MINUSOP         reduce using rule 166 (simple_type_name -> UNSIGNED .)
    LSHIFT          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    RSHIFT          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    LTCOMP          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    GTCOMP          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    LTECOMP         reduce using rule 166 (simple_type_name -> UNSIGNED .)
    GTECOMP         reduce using rule 166 (simple_type_name -> UNSIGNED .)
    EQCOMP          reduce using rule 166 (simple_type_name -> UNSIGNED .)
    NEQCOMP         reduce using rule 166 (simple_type_name -> UNSIGNED .)
    XOROP           reduce using rule 166 (simple_type_name -> UNSIGNED .)
    OROP            reduce using rule 166 (simple_type_name -> UNSIGNED .)
    ANDOP           reduce using rule 166 (simple_type_name -> UNSIGNED .)
    QUESMARK        reduce using rule 166 (simple_type_name -> UNSIGNED .)
    COMMA           reduce using rule 166 (simple_type_name -> UNSIGNED .)
    $end            reduce using rule 166 (simple_type_name -> UNSIGNED .)
    COLON           reduce using rule 166 (simple_type_name -> UNSIGNED .)
    RSPAREN         reduce using rule 166 (simple_type_name -> UNSIGNED .)
    RCPAREN         reduce using rule 166 (simple_type_name -> UNSIGNED .)
    DOT             reduce using rule 166 (simple_type_name -> UNSIGNED .)
    ARROW           reduce using rule 166 (simple_type_name -> UNSIGNED .)
    DPLUSOP         reduce using rule 166 (simple_type_name -> UNSIGNED .)
    DMINUSOP        reduce using rule 166 (simple_type_name -> UNSIGNED .)
    LCPAREN         reduce using rule 166 (simple_type_name -> UNSIGNED .)


state 81

    (167) simple_type_name -> FLOAT .

    LPAREN          reduce using rule 167 (simple_type_name -> FLOAT .)
    SEMICOLON       reduce using rule 167 (simple_type_name -> FLOAT .)
    TYPEDEF         reduce using rule 167 (simple_type_name -> FLOAT .)
    AUTO            reduce using rule 167 (simple_type_name -> FLOAT .)
    STATIC          reduce using rule 167 (simple_type_name -> FLOAT .)
    EXTERN          reduce using rule 167 (simple_type_name -> FLOAT .)
    CONST           reduce using rule 167 (simple_type_name -> FLOAT .)
    VOLATILE        reduce using rule 167 (simple_type_name -> FLOAT .)
    INLINE          reduce using rule 167 (simple_type_name -> FLOAT .)
    VIRTUAL         reduce using rule 167 (simple_type_name -> FLOAT .)
    BNOP            reduce using rule 167 (simple_type_name -> FLOAT .)
    MULTOP          reduce using rule 167 (simple_type_name -> FLOAT .)
    BANDOP          reduce using rule 167 (simple_type_name -> FLOAT .)
    CHAR            reduce using rule 167 (simple_type_name -> FLOAT .)
    SHORT           reduce using rule 167 (simple_type_name -> FLOAT .)
    INT             reduce using rule 167 (simple_type_name -> FLOAT .)
    LONG            reduce using rule 167 (simple_type_name -> FLOAT .)
    SIGNED          reduce using rule 167 (simple_type_name -> FLOAT .)
    UNSIGNED        reduce using rule 167 (simple_type_name -> FLOAT .)
    FLOAT           reduce using rule 167 (simple_type_name -> FLOAT .)
    DOUBLE          reduce using rule 167 (simple_type_name -> FLOAT .)
    VOID            reduce using rule 167 (simple_type_name -> FLOAT .)
    ENUM            reduce using rule 167 (simple_type_name -> FLOAT .)
    IDENTIFIER      reduce using rule 167 (simple_type_name -> FLOAT .)
    DOUBLECOLON     reduce using rule 167 (simple_type_name -> FLOAT .)
    CLASS           reduce using rule 167 (simple_type_name -> FLOAT .)
    STRUCT          reduce using rule 167 (simple_type_name -> FLOAT .)
    UNION           reduce using rule 167 (simple_type_name -> FLOAT .)
    OPERATOR        reduce using rule 167 (simple_type_name -> FLOAT .)
    LSPAREN         reduce using rule 167 (simple_type_name -> FLOAT .)
    RPAREN          reduce using rule 167 (simple_type_name -> FLOAT .)
    EQUAL           reduce using rule 167 (simple_type_name -> FLOAT .)
    MULTEQOP        reduce using rule 167 (simple_type_name -> FLOAT .)
    DIVEQOP         reduce using rule 167 (simple_type_name -> FLOAT .)
    MODEQOP         reduce using rule 167 (simple_type_name -> FLOAT .)
    PLUSEQOP        reduce using rule 167 (simple_type_name -> FLOAT .)
    MINUSEQOP       reduce using rule 167 (simple_type_name -> FLOAT .)
    LSHIFTEQOP      reduce using rule 167 (simple_type_name -> FLOAT .)
    RSHIFTEQOP      reduce using rule 167 (simple_type_name -> FLOAT .)
    BANDEQOP        reduce using rule 167 (simple_type_name -> FLOAT .)
    B_E_OR          reduce using rule 167 (simple_type_name -> FLOAT .)
    BOREQOP         reduce using rule 167 (simple_type_name -> FLOAT .)
    DOTSTAR         reduce using rule 167 (simple_type_name -> FLOAT .)
    ARROWSTAR       reduce using rule 167 (simple_type_name -> FLOAT .)
    DIVOP           reduce using rule 167 (simple_type_name -> FLOAT .)
    MODOP           reduce using rule 167 (simple_type_name -> FLOAT .)
    PLUSOP          reduce using rule 167 (simple_type_name -> FLOAT .)
    MINUSOP         reduce using rule 167 (simple_type_name -> FLOAT .)
    LSHIFT          reduce using rule 167 (simple_type_name -> FLOAT .)
    RSHIFT          reduce using rule 167 (simple_type_name -> FLOAT .)
    LTCOMP          reduce using rule 167 (simple_type_name -> FLOAT .)
    GTCOMP          reduce using rule 167 (simple_type_name -> FLOAT .)
    LTECOMP         reduce using rule 167 (simple_type_name -> FLOAT .)
    GTECOMP         reduce using rule 167 (simple_type_name -> FLOAT .)
    EQCOMP          reduce using rule 167 (simple_type_name -> FLOAT .)
    NEQCOMP         reduce using rule 167 (simple_type_name -> FLOAT .)
    XOROP           reduce using rule 167 (simple_type_name -> FLOAT .)
    OROP            reduce using rule 167 (simple_type_name -> FLOAT .)
    ANDOP           reduce using rule 167 (simple_type_name -> FLOAT .)
    QUESMARK        reduce using rule 167 (simple_type_name -> FLOAT .)
    COMMA           reduce using rule 167 (simple_type_name -> FLOAT .)
    $end            reduce using rule 167 (simple_type_name -> FLOAT .)
    COLON           reduce using rule 167 (simple_type_name -> FLOAT .)
    RSPAREN         reduce using rule 167 (simple_type_name -> FLOAT .)
    RCPAREN         reduce using rule 167 (simple_type_name -> FLOAT .)
    DOT             reduce using rule 167 (simple_type_name -> FLOAT .)
    ARROW           reduce using rule 167 (simple_type_name -> FLOAT .)
    DPLUSOP         reduce using rule 167 (simple_type_name -> FLOAT .)
    DMINUSOP        reduce using rule 167 (simple_type_name -> FLOAT .)
    LCPAREN         reduce using rule 167 (simple_type_name -> FLOAT .)


state 82

    (168) simple_type_name -> DOUBLE .

    LPAREN          reduce using rule 168 (simple_type_name -> DOUBLE .)
    SEMICOLON       reduce using rule 168 (simple_type_name -> DOUBLE .)
    TYPEDEF         reduce using rule 168 (simple_type_name -> DOUBLE .)
    AUTO            reduce using rule 168 (simple_type_name -> DOUBLE .)
    STATIC          reduce using rule 168 (simple_type_name -> DOUBLE .)
    EXTERN          reduce using rule 168 (simple_type_name -> DOUBLE .)
    CONST           reduce using rule 168 (simple_type_name -> DOUBLE .)
    VOLATILE        reduce using rule 168 (simple_type_name -> DOUBLE .)
    INLINE          reduce using rule 168 (simple_type_name -> DOUBLE .)
    VIRTUAL         reduce using rule 168 (simple_type_name -> DOUBLE .)
    BNOP            reduce using rule 168 (simple_type_name -> DOUBLE .)
    MULTOP          reduce using rule 168 (simple_type_name -> DOUBLE .)
    BANDOP          reduce using rule 168 (simple_type_name -> DOUBLE .)
    CHAR            reduce using rule 168 (simple_type_name -> DOUBLE .)
    SHORT           reduce using rule 168 (simple_type_name -> DOUBLE .)
    INT             reduce using rule 168 (simple_type_name -> DOUBLE .)
    LONG            reduce using rule 168 (simple_type_name -> DOUBLE .)
    SIGNED          reduce using rule 168 (simple_type_name -> DOUBLE .)
    UNSIGNED        reduce using rule 168 (simple_type_name -> DOUBLE .)
    FLOAT           reduce using rule 168 (simple_type_name -> DOUBLE .)
    DOUBLE          reduce using rule 168 (simple_type_name -> DOUBLE .)
    VOID            reduce using rule 168 (simple_type_name -> DOUBLE .)
    ENUM            reduce using rule 168 (simple_type_name -> DOUBLE .)
    IDENTIFIER      reduce using rule 168 (simple_type_name -> DOUBLE .)
    DOUBLECOLON     reduce using rule 168 (simple_type_name -> DOUBLE .)
    CLASS           reduce using rule 168 (simple_type_name -> DOUBLE .)
    STRUCT          reduce using rule 168 (simple_type_name -> DOUBLE .)
    UNION           reduce using rule 168 (simple_type_name -> DOUBLE .)
    OPERATOR        reduce using rule 168 (simple_type_name -> DOUBLE .)
    LSPAREN         reduce using rule 168 (simple_type_name -> DOUBLE .)
    RPAREN          reduce using rule 168 (simple_type_name -> DOUBLE .)
    EQUAL           reduce using rule 168 (simple_type_name -> DOUBLE .)
    MULTEQOP        reduce using rule 168 (simple_type_name -> DOUBLE .)
    DIVEQOP         reduce using rule 168 (simple_type_name -> DOUBLE .)
    MODEQOP         reduce using rule 168 (simple_type_name -> DOUBLE .)
    PLUSEQOP        reduce using rule 168 (simple_type_name -> DOUBLE .)
    MINUSEQOP       reduce using rule 168 (simple_type_name -> DOUBLE .)
    LSHIFTEQOP      reduce using rule 168 (simple_type_name -> DOUBLE .)
    RSHIFTEQOP      reduce using rule 168 (simple_type_name -> DOUBLE .)
    BANDEQOP        reduce using rule 168 (simple_type_name -> DOUBLE .)
    B_E_OR          reduce using rule 168 (simple_type_name -> DOUBLE .)
    BOREQOP         reduce using rule 168 (simple_type_name -> DOUBLE .)
    DOTSTAR         reduce using rule 168 (simple_type_name -> DOUBLE .)
    ARROWSTAR       reduce using rule 168 (simple_type_name -> DOUBLE .)
    DIVOP           reduce using rule 168 (simple_type_name -> DOUBLE .)
    MODOP           reduce using rule 168 (simple_type_name -> DOUBLE .)
    PLUSOP          reduce using rule 168 (simple_type_name -> DOUBLE .)
    MINUSOP         reduce using rule 168 (simple_type_name -> DOUBLE .)
    LSHIFT          reduce using rule 168 (simple_type_name -> DOUBLE .)
    RSHIFT          reduce using rule 168 (simple_type_name -> DOUBLE .)
    LTCOMP          reduce using rule 168 (simple_type_name -> DOUBLE .)
    GTCOMP          reduce using rule 168 (simple_type_name -> DOUBLE .)
    LTECOMP         reduce using rule 168 (simple_type_name -> DOUBLE .)
    GTECOMP         reduce using rule 168 (simple_type_name -> DOUBLE .)
    EQCOMP          reduce using rule 168 (simple_type_name -> DOUBLE .)
    NEQCOMP         reduce using rule 168 (simple_type_name -> DOUBLE .)
    XOROP           reduce using rule 168 (simple_type_name -> DOUBLE .)
    OROP            reduce using rule 168 (simple_type_name -> DOUBLE .)
    ANDOP           reduce using rule 168 (simple_type_name -> DOUBLE .)
    QUESMARK        reduce using rule 168 (simple_type_name -> DOUBLE .)
    COMMA           reduce using rule 168 (simple_type_name -> DOUBLE .)
    $end            reduce using rule 168 (simple_type_name -> DOUBLE .)
    COLON           reduce using rule 168 (simple_type_name -> DOUBLE .)
    RSPAREN         reduce using rule 168 (simple_type_name -> DOUBLE .)
    RCPAREN         reduce using rule 168 (simple_type_name -> DOUBLE .)
    DOT             reduce using rule 168 (simple_type_name -> DOUBLE .)
    ARROW           reduce using rule 168 (simple_type_name -> DOUBLE .)
    DPLUSOP         reduce using rule 168 (simple_type_name -> DOUBLE .)
    DMINUSOP        reduce using rule 168 (simple_type_name -> DOUBLE .)
    LCPAREN         reduce using rule 168 (simple_type_name -> DOUBLE .)


state 83

    (169) simple_type_name -> VOID .

    LPAREN          reduce using rule 169 (simple_type_name -> VOID .)
    SEMICOLON       reduce using rule 169 (simple_type_name -> VOID .)
    TYPEDEF         reduce using rule 169 (simple_type_name -> VOID .)
    AUTO            reduce using rule 169 (simple_type_name -> VOID .)
    STATIC          reduce using rule 169 (simple_type_name -> VOID .)
    EXTERN          reduce using rule 169 (simple_type_name -> VOID .)
    CONST           reduce using rule 169 (simple_type_name -> VOID .)
    VOLATILE        reduce using rule 169 (simple_type_name -> VOID .)
    INLINE          reduce using rule 169 (simple_type_name -> VOID .)
    VIRTUAL         reduce using rule 169 (simple_type_name -> VOID .)
    BNOP            reduce using rule 169 (simple_type_name -> VOID .)
    MULTOP          reduce using rule 169 (simple_type_name -> VOID .)
    BANDOP          reduce using rule 169 (simple_type_name -> VOID .)
    CHAR            reduce using rule 169 (simple_type_name -> VOID .)
    SHORT           reduce using rule 169 (simple_type_name -> VOID .)
    INT             reduce using rule 169 (simple_type_name -> VOID .)
    LONG            reduce using rule 169 (simple_type_name -> VOID .)
    SIGNED          reduce using rule 169 (simple_type_name -> VOID .)
    UNSIGNED        reduce using rule 169 (simple_type_name -> VOID .)
    FLOAT           reduce using rule 169 (simple_type_name -> VOID .)
    DOUBLE          reduce using rule 169 (simple_type_name -> VOID .)
    VOID            reduce using rule 169 (simple_type_name -> VOID .)
    ENUM            reduce using rule 169 (simple_type_name -> VOID .)
    IDENTIFIER      reduce using rule 169 (simple_type_name -> VOID .)
    DOUBLECOLON     reduce using rule 169 (simple_type_name -> VOID .)
    CLASS           reduce using rule 169 (simple_type_name -> VOID .)
    STRUCT          reduce using rule 169 (simple_type_name -> VOID .)
    UNION           reduce using rule 169 (simple_type_name -> VOID .)
    OPERATOR        reduce using rule 169 (simple_type_name -> VOID .)
    LSPAREN         reduce using rule 169 (simple_type_name -> VOID .)
    RPAREN          reduce using rule 169 (simple_type_name -> VOID .)
    EQUAL           reduce using rule 169 (simple_type_name -> VOID .)
    MULTEQOP        reduce using rule 169 (simple_type_name -> VOID .)
    DIVEQOP         reduce using rule 169 (simple_type_name -> VOID .)
    MODEQOP         reduce using rule 169 (simple_type_name -> VOID .)
    PLUSEQOP        reduce using rule 169 (simple_type_name -> VOID .)
    MINUSEQOP       reduce using rule 169 (simple_type_name -> VOID .)
    LSHIFTEQOP      reduce using rule 169 (simple_type_name -> VOID .)
    RSHIFTEQOP      reduce using rule 169 (simple_type_name -> VOID .)
    BANDEQOP        reduce using rule 169 (simple_type_name -> VOID .)
    B_E_OR          reduce using rule 169 (simple_type_name -> VOID .)
    BOREQOP         reduce using rule 169 (simple_type_name -> VOID .)
    DOTSTAR         reduce using rule 169 (simple_type_name -> VOID .)
    ARROWSTAR       reduce using rule 169 (simple_type_name -> VOID .)
    DIVOP           reduce using rule 169 (simple_type_name -> VOID .)
    MODOP           reduce using rule 169 (simple_type_name -> VOID .)
    PLUSOP          reduce using rule 169 (simple_type_name -> VOID .)
    MINUSOP         reduce using rule 169 (simple_type_name -> VOID .)
    LSHIFT          reduce using rule 169 (simple_type_name -> VOID .)
    RSHIFT          reduce using rule 169 (simple_type_name -> VOID .)
    LTCOMP          reduce using rule 169 (simple_type_name -> VOID .)
    GTCOMP          reduce using rule 169 (simple_type_name -> VOID .)
    LTECOMP         reduce using rule 169 (simple_type_name -> VOID .)
    GTECOMP         reduce using rule 169 (simple_type_name -> VOID .)
    EQCOMP          reduce using rule 169 (simple_type_name -> VOID .)
    NEQCOMP         reduce using rule 169 (simple_type_name -> VOID .)
    XOROP           reduce using rule 169 (simple_type_name -> VOID .)
    OROP            reduce using rule 169 (simple_type_name -> VOID .)
    ANDOP           reduce using rule 169 (simple_type_name -> VOID .)
    QUESMARK        reduce using rule 169 (simple_type_name -> VOID .)
    COMMA           reduce using rule 169 (simple_type_name -> VOID .)
    $end            reduce using rule 169 (simple_type_name -> VOID .)
    COLON           reduce using rule 169 (simple_type_name -> VOID .)
    RSPAREN         reduce using rule 169 (simple_type_name -> VOID .)
    RCPAREN         reduce using rule 169 (simple_type_name -> VOID .)
    DOT             reduce using rule 169 (simple_type_name -> VOID .)
    ARROW           reduce using rule 169 (simple_type_name -> VOID .)
    DPLUSOP         reduce using rule 169 (simple_type_name -> VOID .)
    DMINUSOP        reduce using rule 169 (simple_type_name -> VOID .)
    LCPAREN         reduce using rule 169 (simple_type_name -> VOID .)


state 84

    (142) decl_specifier -> storage_class_specifier .

    SEMICOLON       reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    TYPEDEF         reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    LPAREN          reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    AUTO            reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    STATIC          reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    EXTERN          reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    CONST           reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    VOLATILE        reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    INLINE          reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    VIRTUAL         reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    BNOP            reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    MULTOP          reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    BANDOP          reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    CHAR            reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    SHORT           reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    INT             reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    LONG            reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    SIGNED          reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    UNSIGNED        reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    FLOAT           reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    DOUBLE          reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    VOID            reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    ENUM            reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    DOUBLECOLON     reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    CLASS           reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    STRUCT          reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    UNION           reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    OPERATOR        reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    EQUAL           reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    LSPAREN         reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    COMMA           reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    RPAREN          reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    GTCOMP          reduce using rule 142 (decl_specifier -> storage_class_specifier .)
    COLON           reduce using rule 142 (decl_specifier -> storage_class_specifier .)


state 85

    (143) decl_specifier -> type_specifier .

    SEMICOLON       reduce using rule 143 (decl_specifier -> type_specifier .)
    TYPEDEF         reduce using rule 143 (decl_specifier -> type_specifier .)
    LPAREN          reduce using rule 143 (decl_specifier -> type_specifier .)
    AUTO            reduce using rule 143 (decl_specifier -> type_specifier .)
    STATIC          reduce using rule 143 (decl_specifier -> type_specifier .)
    EXTERN          reduce using rule 143 (decl_specifier -> type_specifier .)
    CONST           reduce using rule 143 (decl_specifier -> type_specifier .)
    VOLATILE        reduce using rule 143 (decl_specifier -> type_specifier .)
    INLINE          reduce using rule 143 (decl_specifier -> type_specifier .)
    VIRTUAL         reduce using rule 143 (decl_specifier -> type_specifier .)
    BNOP            reduce using rule 143 (decl_specifier -> type_specifier .)
    MULTOP          reduce using rule 143 (decl_specifier -> type_specifier .)
    BANDOP          reduce using rule 143 (decl_specifier -> type_specifier .)
    CHAR            reduce using rule 143 (decl_specifier -> type_specifier .)
    SHORT           reduce using rule 143 (decl_specifier -> type_specifier .)
    INT             reduce using rule 143 (decl_specifier -> type_specifier .)
    LONG            reduce using rule 143 (decl_specifier -> type_specifier .)
    SIGNED          reduce using rule 143 (decl_specifier -> type_specifier .)
    UNSIGNED        reduce using rule 143 (decl_specifier -> type_specifier .)
    FLOAT           reduce using rule 143 (decl_specifier -> type_specifier .)
    DOUBLE          reduce using rule 143 (decl_specifier -> type_specifier .)
    VOID            reduce using rule 143 (decl_specifier -> type_specifier .)
    ENUM            reduce using rule 143 (decl_specifier -> type_specifier .)
    IDENTIFIER      reduce using rule 143 (decl_specifier -> type_specifier .)
    DOUBLECOLON     reduce using rule 143 (decl_specifier -> type_specifier .)
    CLASS           reduce using rule 143 (decl_specifier -> type_specifier .)
    STRUCT          reduce using rule 143 (decl_specifier -> type_specifier .)
    UNION           reduce using rule 143 (decl_specifier -> type_specifier .)
    OPERATOR        reduce using rule 143 (decl_specifier -> type_specifier .)
    EQUAL           reduce using rule 143 (decl_specifier -> type_specifier .)
    LSPAREN         reduce using rule 143 (decl_specifier -> type_specifier .)
    COMMA           reduce using rule 143 (decl_specifier -> type_specifier .)
    RPAREN          reduce using rule 143 (decl_specifier -> type_specifier .)
    GTCOMP          reduce using rule 143 (decl_specifier -> type_specifier .)
    COLON           reduce using rule 143 (decl_specifier -> type_specifier .)


state 86

    (144) decl_specifier -> fct_specifier .

    SEMICOLON       reduce using rule 144 (decl_specifier -> fct_specifier .)
    TYPEDEF         reduce using rule 144 (decl_specifier -> fct_specifier .)
    LPAREN          reduce using rule 144 (decl_specifier -> fct_specifier .)
    AUTO            reduce using rule 144 (decl_specifier -> fct_specifier .)
    STATIC          reduce using rule 144 (decl_specifier -> fct_specifier .)
    EXTERN          reduce using rule 144 (decl_specifier -> fct_specifier .)
    CONST           reduce using rule 144 (decl_specifier -> fct_specifier .)
    VOLATILE        reduce using rule 144 (decl_specifier -> fct_specifier .)
    INLINE          reduce using rule 144 (decl_specifier -> fct_specifier .)
    VIRTUAL         reduce using rule 144 (decl_specifier -> fct_specifier .)
    BNOP            reduce using rule 144 (decl_specifier -> fct_specifier .)
    MULTOP          reduce using rule 144 (decl_specifier -> fct_specifier .)
    BANDOP          reduce using rule 144 (decl_specifier -> fct_specifier .)
    CHAR            reduce using rule 144 (decl_specifier -> fct_specifier .)
    SHORT           reduce using rule 144 (decl_specifier -> fct_specifier .)
    INT             reduce using rule 144 (decl_specifier -> fct_specifier .)
    LONG            reduce using rule 144 (decl_specifier -> fct_specifier .)
    SIGNED          reduce using rule 144 (decl_specifier -> fct_specifier .)
    UNSIGNED        reduce using rule 144 (decl_specifier -> fct_specifier .)
    FLOAT           reduce using rule 144 (decl_specifier -> fct_specifier .)
    DOUBLE          reduce using rule 144 (decl_specifier -> fct_specifier .)
    VOID            reduce using rule 144 (decl_specifier -> fct_specifier .)
    ENUM            reduce using rule 144 (decl_specifier -> fct_specifier .)
    IDENTIFIER      reduce using rule 144 (decl_specifier -> fct_specifier .)
    DOUBLECOLON     reduce using rule 144 (decl_specifier -> fct_specifier .)
    CLASS           reduce using rule 144 (decl_specifier -> fct_specifier .)
    STRUCT          reduce using rule 144 (decl_specifier -> fct_specifier .)
    UNION           reduce using rule 144 (decl_specifier -> fct_specifier .)
    OPERATOR        reduce using rule 144 (decl_specifier -> fct_specifier .)
    EQUAL           reduce using rule 144 (decl_specifier -> fct_specifier .)
    LSPAREN         reduce using rule 144 (decl_specifier -> fct_specifier .)
    COMMA           reduce using rule 144 (decl_specifier -> fct_specifier .)
    RPAREN          reduce using rule 144 (decl_specifier -> fct_specifier .)
    GTCOMP          reduce using rule 144 (decl_specifier -> fct_specifier .)
    COLON           reduce using rule 144 (decl_specifier -> fct_specifier .)


state 87

    (145) decl_specifier -> TYPEDEF .

    SEMICOLON       reduce using rule 145 (decl_specifier -> TYPEDEF .)
    TYPEDEF         reduce using rule 145 (decl_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 145 (decl_specifier -> TYPEDEF .)
    AUTO            reduce using rule 145 (decl_specifier -> TYPEDEF .)
    STATIC          reduce using rule 145 (decl_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 145 (decl_specifier -> TYPEDEF .)
    CONST           reduce using rule 145 (decl_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 145 (decl_specifier -> TYPEDEF .)
    INLINE          reduce using rule 145 (decl_specifier -> TYPEDEF .)
    VIRTUAL         reduce using rule 145 (decl_specifier -> TYPEDEF .)
    BNOP            reduce using rule 145 (decl_specifier -> TYPEDEF .)
    MULTOP          reduce using rule 145 (decl_specifier -> TYPEDEF .)
    BANDOP          reduce using rule 145 (decl_specifier -> TYPEDEF .)
    CHAR            reduce using rule 145 (decl_specifier -> TYPEDEF .)
    SHORT           reduce using rule 145 (decl_specifier -> TYPEDEF .)
    INT             reduce using rule 145 (decl_specifier -> TYPEDEF .)
    LONG            reduce using rule 145 (decl_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 145 (decl_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 145 (decl_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 145 (decl_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 145 (decl_specifier -> TYPEDEF .)
    VOID            reduce using rule 145 (decl_specifier -> TYPEDEF .)
    ENUM            reduce using rule 145 (decl_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 145 (decl_specifier -> TYPEDEF .)
    DOUBLECOLON     reduce using rule 145 (decl_specifier -> TYPEDEF .)
    CLASS           reduce using rule 145 (decl_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 145 (decl_specifier -> TYPEDEF .)
    UNION           reduce using rule 145 (decl_specifier -> TYPEDEF .)
    OPERATOR        reduce using rule 145 (decl_specifier -> TYPEDEF .)
    EQUAL           reduce using rule 145 (decl_specifier -> TYPEDEF .)
    LSPAREN         reduce using rule 145 (decl_specifier -> TYPEDEF .)
    COMMA           reduce using rule 145 (decl_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 145 (decl_specifier -> TYPEDEF .)
    GTCOMP          reduce using rule 145 (decl_specifier -> TYPEDEF .)
    COLON           reduce using rule 145 (decl_specifier -> TYPEDEF .)


state 88

    (201) declarator -> dname .

    LPAREN          reduce using rule 201 (declarator -> dname .)
    LSPAREN         reduce using rule 201 (declarator -> dname .)
    COLON           reduce using rule 201 (declarator -> dname .)
    EQUAL           reduce using rule 201 (declarator -> dname .)
    LCPAREN         reduce using rule 201 (declarator -> dname .)
    SEMICOLON       reduce using rule 201 (declarator -> dname .)
    COMMA           reduce using rule 201 (declarator -> dname .)
    RPAREN          reduce using rule 201 (declarator -> dname .)
    GTCOMP          reduce using rule 201 (declarator -> dname .)


state 89

    (202) declarator -> ptr_operator . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    LPAREN          shift and go to state 203
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    IDENTIFIER      shift and go to state 172
    DOUBLECOLON     shift and go to state 210
    OPERATOR        shift and go to state 105

    ptr_operator                   shift and go to state 89
    declarator                     shift and go to state 252
    dname                          shift and go to state 88
    name                           shift and go to state 206
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 253
    complete_class_name            shift and go to state 254
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93

state 90

    (29) inclusive_OR_expression -> exclusive_OR_expression .
    (32) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 29 (inclusive_OR_expression -> exclusive_OR_expression .)
    ANDOP           reduce using rule 29 (inclusive_OR_expression -> exclusive_OR_expression .)
    QUESMARK        reduce using rule 29 (inclusive_OR_expression -> exclusive_OR_expression .)
    COMMA           reduce using rule 29 (inclusive_OR_expression -> exclusive_OR_expression .)
    SEMICOLON       reduce using rule 29 (inclusive_OR_expression -> exclusive_OR_expression .)
    $end            reduce using rule 29 (inclusive_OR_expression -> exclusive_OR_expression .)
    COLON           reduce using rule 29 (inclusive_OR_expression -> exclusive_OR_expression .)
    RPAREN          reduce using rule 29 (inclusive_OR_expression -> exclusive_OR_expression .)
    RSPAREN         reduce using rule 29 (inclusive_OR_expression -> exclusive_OR_expression .)
    GTCOMP          reduce using rule 29 (inclusive_OR_expression -> exclusive_OR_expression .)
    RCPAREN         reduce using rule 29 (inclusive_OR_expression -> exclusive_OR_expression .)
    XOROP           shift and go to state 255


state 91

    (128) name -> conversion_function_name .

    LSPAREN         reduce using rule 128 (name -> conversion_function_name .)
    LPAREN          reduce using rule 128 (name -> conversion_function_name .)
    DOT             reduce using rule 128 (name -> conversion_function_name .)
    ARROW           reduce using rule 128 (name -> conversion_function_name .)
    DPLUSOP         reduce using rule 128 (name -> conversion_function_name .)
    DMINUSOP        reduce using rule 128 (name -> conversion_function_name .)
    EQUAL           reduce using rule 128 (name -> conversion_function_name .)
    MULTEQOP        reduce using rule 128 (name -> conversion_function_name .)
    DIVEQOP         reduce using rule 128 (name -> conversion_function_name .)
    MODEQOP         reduce using rule 128 (name -> conversion_function_name .)
    PLUSEQOP        reduce using rule 128 (name -> conversion_function_name .)
    MINUSEQOP       reduce using rule 128 (name -> conversion_function_name .)
    LSHIFTEQOP      reduce using rule 128 (name -> conversion_function_name .)
    RSHIFTEQOP      reduce using rule 128 (name -> conversion_function_name .)
    BANDEQOP        reduce using rule 128 (name -> conversion_function_name .)
    B_E_OR          reduce using rule 128 (name -> conversion_function_name .)
    BOREQOP         reduce using rule 128 (name -> conversion_function_name .)
    DOTSTAR         reduce using rule 128 (name -> conversion_function_name .)
    ARROWSTAR       reduce using rule 128 (name -> conversion_function_name .)
    MULTOP          reduce using rule 128 (name -> conversion_function_name .)
    DIVOP           reduce using rule 128 (name -> conversion_function_name .)
    MODOP           reduce using rule 128 (name -> conversion_function_name .)
    PLUSOP          reduce using rule 128 (name -> conversion_function_name .)
    MINUSOP         reduce using rule 128 (name -> conversion_function_name .)
    LSHIFT          reduce using rule 128 (name -> conversion_function_name .)
    RSHIFT          reduce using rule 128 (name -> conversion_function_name .)
    LTCOMP          reduce using rule 128 (name -> conversion_function_name .)
    GTCOMP          reduce using rule 128 (name -> conversion_function_name .)
    LTECOMP         reduce using rule 128 (name -> conversion_function_name .)
    GTECOMP         reduce using rule 128 (name -> conversion_function_name .)
    EQCOMP          reduce using rule 128 (name -> conversion_function_name .)
    NEQCOMP         reduce using rule 128 (name -> conversion_function_name .)
    BANDOP          reduce using rule 128 (name -> conversion_function_name .)
    XOROP           reduce using rule 128 (name -> conversion_function_name .)
    OROP            reduce using rule 128 (name -> conversion_function_name .)
    ANDOP           reduce using rule 128 (name -> conversion_function_name .)
    QUESMARK        reduce using rule 128 (name -> conversion_function_name .)
    COMMA           reduce using rule 128 (name -> conversion_function_name .)
    SEMICOLON       reduce using rule 128 (name -> conversion_function_name .)
    $end            reduce using rule 128 (name -> conversion_function_name .)
    COLON           reduce using rule 128 (name -> conversion_function_name .)
    LCPAREN         reduce using rule 128 (name -> conversion_function_name .)
    RPAREN          reduce using rule 128 (name -> conversion_function_name .)
    RSPAREN         reduce using rule 128 (name -> conversion_function_name .)
    RCPAREN         reduce using rule 128 (name -> conversion_function_name .)


state 92

    (177) qualified_type_name -> class_name . DOUBLECOLON qualified_type_name
    (219) dname -> class_name .
    (180) qualified_class_name -> class_name .
    (181) qualified_class_name -> class_name . DOUBLECOLON qualified_class_name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 180 (qualified_class_name -> class_name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 180 (qualified_class_name -> class_name .)
    DOUBLECOLON     shift and go to state 256
    LSPAREN         reduce using rule 219 (dname -> class_name .)
    COLON           reduce using rule 219 (dname -> class_name .)
    EQUAL           reduce using rule 219 (dname -> class_name .)
    LCPAREN         reduce using rule 219 (dname -> class_name .)
    COMMA           reduce using rule 219 (dname -> class_name .)
    LPAREN          reduce using rule 180 (qualified_class_name -> class_name .)
    SEMICOLON       reduce using rule 180 (qualified_class_name -> class_name .)
    TYPEDEF         reduce using rule 180 (qualified_class_name -> class_name .)
    AUTO            reduce using rule 180 (qualified_class_name -> class_name .)
    STATIC          reduce using rule 180 (qualified_class_name -> class_name .)
    EXTERN          reduce using rule 180 (qualified_class_name -> class_name .)
    CONST           reduce using rule 180 (qualified_class_name -> class_name .)
    VOLATILE        reduce using rule 180 (qualified_class_name -> class_name .)
    INLINE          reduce using rule 180 (qualified_class_name -> class_name .)
    VIRTUAL         reduce using rule 180 (qualified_class_name -> class_name .)
    BNOP            reduce using rule 180 (qualified_class_name -> class_name .)
    MULTOP          reduce using rule 180 (qualified_class_name -> class_name .)
    BANDOP          reduce using rule 180 (qualified_class_name -> class_name .)
    CHAR            reduce using rule 180 (qualified_class_name -> class_name .)
    SHORT           reduce using rule 180 (qualified_class_name -> class_name .)
    INT             reduce using rule 180 (qualified_class_name -> class_name .)
    LONG            reduce using rule 180 (qualified_class_name -> class_name .)
    SIGNED          reduce using rule 180 (qualified_class_name -> class_name .)
    UNSIGNED        reduce using rule 180 (qualified_class_name -> class_name .)
    FLOAT           reduce using rule 180 (qualified_class_name -> class_name .)
    DOUBLE          reduce using rule 180 (qualified_class_name -> class_name .)
    VOID            reduce using rule 180 (qualified_class_name -> class_name .)
    ENUM            reduce using rule 180 (qualified_class_name -> class_name .)
    IDENTIFIER      reduce using rule 180 (qualified_class_name -> class_name .)
    CLASS           reduce using rule 180 (qualified_class_name -> class_name .)
    STRUCT          reduce using rule 180 (qualified_class_name -> class_name .)
    UNION           reduce using rule 180 (qualified_class_name -> class_name .)
    OPERATOR        reduce using rule 180 (qualified_class_name -> class_name .)

  ! LPAREN          [ reduce using rule 219 (dname -> class_name .) ]
  ! SEMICOLON       [ reduce using rule 219 (dname -> class_name .) ]
  ! DOUBLECOLON     [ reduce using rule 180 (qualified_class_name -> class_name .) ]


state 93

    (178) complete_class_name -> qualified_class_name .
    (131) qualified_name -> qualified_class_name . DOUBLECOLON name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    LPAREN          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    SEMICOLON       reduce using rule 178 (complete_class_name -> qualified_class_name .)
    TYPEDEF         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    AUTO            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    STATIC          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    EXTERN          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    CONST           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    VOLATILE        reduce using rule 178 (complete_class_name -> qualified_class_name .)
    INLINE          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    VIRTUAL         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    BNOP            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    MULTOP          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    BANDOP          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    CHAR            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    SHORT           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    INT             reduce using rule 178 (complete_class_name -> qualified_class_name .)
    LONG            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    SIGNED          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    UNSIGNED        reduce using rule 178 (complete_class_name -> qualified_class_name .)
    FLOAT           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    DOUBLE          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    VOID            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    ENUM            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    IDENTIFIER      reduce using rule 178 (complete_class_name -> qualified_class_name .)
    CLASS           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    STRUCT          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    UNION           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    OPERATOR        reduce using rule 178 (complete_class_name -> qualified_class_name .)
    LSPAREN         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    RPAREN          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    EQUAL           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    COMMA           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    GTCOMP          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    COLON           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    DOUBLECOLON     shift and go to state 257

  ! DOUBLECOLON     [ reduce using rule 178 (complete_class_name -> qualified_class_name .) ]


state 94

    (176) qualified_type_name -> typedef_name .
    (221) dname -> typedef_name .

  ! reduce/reduce conflict for LPAREN resolved using rule 176 (qualified_type_name -> typedef_name .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 176 (qualified_type_name -> typedef_name .)
  ! reduce/reduce conflict for COLON resolved using rule 176 (qualified_type_name -> typedef_name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 176 (qualified_type_name -> typedef_name .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 176 (qualified_type_name -> typedef_name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 176 (qualified_type_name -> typedef_name .)
  ! reduce/reduce conflict for COMMA resolved using rule 176 (qualified_type_name -> typedef_name .)
    LPAREN          reduce using rule 176 (qualified_type_name -> typedef_name .)
    SEMICOLON       reduce using rule 176 (qualified_type_name -> typedef_name .)
    TYPEDEF         reduce using rule 176 (qualified_type_name -> typedef_name .)
    AUTO            reduce using rule 176 (qualified_type_name -> typedef_name .)
    STATIC          reduce using rule 176 (qualified_type_name -> typedef_name .)
    EXTERN          reduce using rule 176 (qualified_type_name -> typedef_name .)
    CONST           reduce using rule 176 (qualified_type_name -> typedef_name .)
    VOLATILE        reduce using rule 176 (qualified_type_name -> typedef_name .)
    INLINE          reduce using rule 176 (qualified_type_name -> typedef_name .)
    VIRTUAL         reduce using rule 176 (qualified_type_name -> typedef_name .)
    BNOP            reduce using rule 176 (qualified_type_name -> typedef_name .)
    MULTOP          reduce using rule 176 (qualified_type_name -> typedef_name .)
    BANDOP          reduce using rule 176 (qualified_type_name -> typedef_name .)
    CHAR            reduce using rule 176 (qualified_type_name -> typedef_name .)
    SHORT           reduce using rule 176 (qualified_type_name -> typedef_name .)
    INT             reduce using rule 176 (qualified_type_name -> typedef_name .)
    LONG            reduce using rule 176 (qualified_type_name -> typedef_name .)
    SIGNED          reduce using rule 176 (qualified_type_name -> typedef_name .)
    UNSIGNED        reduce using rule 176 (qualified_type_name -> typedef_name .)
    FLOAT           reduce using rule 176 (qualified_type_name -> typedef_name .)
    DOUBLE          reduce using rule 176 (qualified_type_name -> typedef_name .)
    VOID            reduce using rule 176 (qualified_type_name -> typedef_name .)
    ENUM            reduce using rule 176 (qualified_type_name -> typedef_name .)
    IDENTIFIER      reduce using rule 176 (qualified_type_name -> typedef_name .)
    DOUBLECOLON     reduce using rule 176 (qualified_type_name -> typedef_name .)
    CLASS           reduce using rule 176 (qualified_type_name -> typedef_name .)
    STRUCT          reduce using rule 176 (qualified_type_name -> typedef_name .)
    UNION           reduce using rule 176 (qualified_type_name -> typedef_name .)
    OPERATOR        reduce using rule 176 (qualified_type_name -> typedef_name .)
    LSPAREN         reduce using rule 176 (qualified_type_name -> typedef_name .)
    COLON           reduce using rule 176 (qualified_type_name -> typedef_name .)
    EQUAL           reduce using rule 176 (qualified_type_name -> typedef_name .)
    LCPAREN         reduce using rule 176 (qualified_type_name -> typedef_name .)
    COMMA           reduce using rule 176 (qualified_type_name -> typedef_name .)

  ! LPAREN          [ reduce using rule 221 (dname -> typedef_name .) ]
  ! LSPAREN         [ reduce using rule 221 (dname -> typedef_name .) ]
  ! COLON           [ reduce using rule 221 (dname -> typedef_name .) ]
  ! EQUAL           [ reduce using rule 221 (dname -> typedef_name .) ]
  ! LCPAREN         [ reduce using rule 221 (dname -> typedef_name .) ]
  ! SEMICOLON       [ reduce using rule 221 (dname -> typedef_name .) ]
  ! COMMA           [ reduce using rule 221 (dname -> typedef_name .) ]


state 95

    (148) storage_class_specifier -> AUTO .

    SEMICOLON       reduce using rule 148 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 148 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 148 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 148 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 148 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 148 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 148 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 148 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 148 (storage_class_specifier -> AUTO .)
    VIRTUAL         reduce using rule 148 (storage_class_specifier -> AUTO .)
    BNOP            reduce using rule 148 (storage_class_specifier -> AUTO .)
    MULTOP          reduce using rule 148 (storage_class_specifier -> AUTO .)
    BANDOP          reduce using rule 148 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 148 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 148 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 148 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 148 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 148 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 148 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 148 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 148 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 148 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 148 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 148 (storage_class_specifier -> AUTO .)
    DOUBLECOLON     reduce using rule 148 (storage_class_specifier -> AUTO .)
    CLASS           reduce using rule 148 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 148 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 148 (storage_class_specifier -> AUTO .)
    OPERATOR        reduce using rule 148 (storage_class_specifier -> AUTO .)
    EQUAL           reduce using rule 148 (storage_class_specifier -> AUTO .)
    LSPAREN         reduce using rule 148 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 148 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 148 (storage_class_specifier -> AUTO .)
    GTCOMP          reduce using rule 148 (storage_class_specifier -> AUTO .)
    COLON           reduce using rule 148 (storage_class_specifier -> AUTO .)


state 96

    (149) storage_class_specifier -> STATIC .

    SEMICOLON       reduce using rule 149 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 149 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 149 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 149 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 149 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 149 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 149 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 149 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 149 (storage_class_specifier -> STATIC .)
    VIRTUAL         reduce using rule 149 (storage_class_specifier -> STATIC .)
    BNOP            reduce using rule 149 (storage_class_specifier -> STATIC .)
    MULTOP          reduce using rule 149 (storage_class_specifier -> STATIC .)
    BANDOP          reduce using rule 149 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 149 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 149 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 149 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 149 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 149 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 149 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 149 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 149 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 149 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 149 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 149 (storage_class_specifier -> STATIC .)
    DOUBLECOLON     reduce using rule 149 (storage_class_specifier -> STATIC .)
    CLASS           reduce using rule 149 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 149 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 149 (storage_class_specifier -> STATIC .)
    OPERATOR        reduce using rule 149 (storage_class_specifier -> STATIC .)
    EQUAL           reduce using rule 149 (storage_class_specifier -> STATIC .)
    LSPAREN         reduce using rule 149 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 149 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 149 (storage_class_specifier -> STATIC .)
    GTCOMP          reduce using rule 149 (storage_class_specifier -> STATIC .)
    COLON           reduce using rule 149 (storage_class_specifier -> STATIC .)


state 97

    (154) type_specifier -> class_specifier .

    SEMICOLON       reduce using rule 154 (type_specifier -> class_specifier .)
    TYPEDEF         reduce using rule 154 (type_specifier -> class_specifier .)
    LPAREN          reduce using rule 154 (type_specifier -> class_specifier .)
    AUTO            reduce using rule 154 (type_specifier -> class_specifier .)
    STATIC          reduce using rule 154 (type_specifier -> class_specifier .)
    EXTERN          reduce using rule 154 (type_specifier -> class_specifier .)
    CONST           reduce using rule 154 (type_specifier -> class_specifier .)
    VOLATILE        reduce using rule 154 (type_specifier -> class_specifier .)
    INLINE          reduce using rule 154 (type_specifier -> class_specifier .)
    VIRTUAL         reduce using rule 154 (type_specifier -> class_specifier .)
    BNOP            reduce using rule 154 (type_specifier -> class_specifier .)
    MULTOP          reduce using rule 154 (type_specifier -> class_specifier .)
    BANDOP          reduce using rule 154 (type_specifier -> class_specifier .)
    CHAR            reduce using rule 154 (type_specifier -> class_specifier .)
    SHORT           reduce using rule 154 (type_specifier -> class_specifier .)
    INT             reduce using rule 154 (type_specifier -> class_specifier .)
    LONG            reduce using rule 154 (type_specifier -> class_specifier .)
    SIGNED          reduce using rule 154 (type_specifier -> class_specifier .)
    UNSIGNED        reduce using rule 154 (type_specifier -> class_specifier .)
    FLOAT           reduce using rule 154 (type_specifier -> class_specifier .)
    DOUBLE          reduce using rule 154 (type_specifier -> class_specifier .)
    VOID            reduce using rule 154 (type_specifier -> class_specifier .)
    ENUM            reduce using rule 154 (type_specifier -> class_specifier .)
    IDENTIFIER      reduce using rule 154 (type_specifier -> class_specifier .)
    DOUBLECOLON     reduce using rule 154 (type_specifier -> class_specifier .)
    CLASS           reduce using rule 154 (type_specifier -> class_specifier .)
    STRUCT          reduce using rule 154 (type_specifier -> class_specifier .)
    UNION           reduce using rule 154 (type_specifier -> class_specifier .)
    OPERATOR        reduce using rule 154 (type_specifier -> class_specifier .)
    LSPAREN         reduce using rule 154 (type_specifier -> class_specifier .)
    RPAREN          reduce using rule 154 (type_specifier -> class_specifier .)
    EQUAL           reduce using rule 154 (type_specifier -> class_specifier .)
    MULTEQOP        reduce using rule 154 (type_specifier -> class_specifier .)
    DIVEQOP         reduce using rule 154 (type_specifier -> class_specifier .)
    MODEQOP         reduce using rule 154 (type_specifier -> class_specifier .)
    PLUSEQOP        reduce using rule 154 (type_specifier -> class_specifier .)
    MINUSEQOP       reduce using rule 154 (type_specifier -> class_specifier .)
    LSHIFTEQOP      reduce using rule 154 (type_specifier -> class_specifier .)
    RSHIFTEQOP      reduce using rule 154 (type_specifier -> class_specifier .)
    BANDEQOP        reduce using rule 154 (type_specifier -> class_specifier .)
    B_E_OR          reduce using rule 154 (type_specifier -> class_specifier .)
    BOREQOP         reduce using rule 154 (type_specifier -> class_specifier .)
    DOTSTAR         reduce using rule 154 (type_specifier -> class_specifier .)
    ARROWSTAR       reduce using rule 154 (type_specifier -> class_specifier .)
    DIVOP           reduce using rule 154 (type_specifier -> class_specifier .)
    MODOP           reduce using rule 154 (type_specifier -> class_specifier .)
    PLUSOP          reduce using rule 154 (type_specifier -> class_specifier .)
    MINUSOP         reduce using rule 154 (type_specifier -> class_specifier .)
    LSHIFT          reduce using rule 154 (type_specifier -> class_specifier .)
    RSHIFT          reduce using rule 154 (type_specifier -> class_specifier .)
    LTCOMP          reduce using rule 154 (type_specifier -> class_specifier .)
    GTCOMP          reduce using rule 154 (type_specifier -> class_specifier .)
    LTECOMP         reduce using rule 154 (type_specifier -> class_specifier .)
    GTECOMP         reduce using rule 154 (type_specifier -> class_specifier .)
    EQCOMP          reduce using rule 154 (type_specifier -> class_specifier .)
    NEQCOMP         reduce using rule 154 (type_specifier -> class_specifier .)
    XOROP           reduce using rule 154 (type_specifier -> class_specifier .)
    OROP            reduce using rule 154 (type_specifier -> class_specifier .)
    ANDOP           reduce using rule 154 (type_specifier -> class_specifier .)
    QUESMARK        reduce using rule 154 (type_specifier -> class_specifier .)
    COMMA           reduce using rule 154 (type_specifier -> class_specifier .)
    $end            reduce using rule 154 (type_specifier -> class_specifier .)
    COLON           reduce using rule 154 (type_specifier -> class_specifier .)
    RSPAREN         reduce using rule 154 (type_specifier -> class_specifier .)
    RCPAREN         reduce using rule 154 (type_specifier -> class_specifier .)
    DOT             reduce using rule 154 (type_specifier -> class_specifier .)
    ARROW           reduce using rule 154 (type_specifier -> class_specifier .)
    DPLUSOP         reduce using rule 154 (type_specifier -> class_specifier .)
    DMINUSOP        reduce using rule 154 (type_specifier -> class_specifier .)
    LCPAREN         reduce using rule 154 (type_specifier -> class_specifier .)


state 98

    (155) type_specifier -> enum_specifier .

    SEMICOLON       reduce using rule 155 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 155 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 155 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 155 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 155 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 155 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 155 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 155 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 155 (type_specifier -> enum_specifier .)
    VIRTUAL         reduce using rule 155 (type_specifier -> enum_specifier .)
    BNOP            reduce using rule 155 (type_specifier -> enum_specifier .)
    MULTOP          reduce using rule 155 (type_specifier -> enum_specifier .)
    BANDOP          reduce using rule 155 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 155 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 155 (type_specifier -> enum_specifier .)
    INT             reduce using rule 155 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 155 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 155 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 155 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 155 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 155 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 155 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 155 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 155 (type_specifier -> enum_specifier .)
    DOUBLECOLON     reduce using rule 155 (type_specifier -> enum_specifier .)
    CLASS           reduce using rule 155 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 155 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 155 (type_specifier -> enum_specifier .)
    OPERATOR        reduce using rule 155 (type_specifier -> enum_specifier .)
    LSPAREN         reduce using rule 155 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 155 (type_specifier -> enum_specifier .)
    EQUAL           reduce using rule 155 (type_specifier -> enum_specifier .)
    MULTEQOP        reduce using rule 155 (type_specifier -> enum_specifier .)
    DIVEQOP         reduce using rule 155 (type_specifier -> enum_specifier .)
    MODEQOP         reduce using rule 155 (type_specifier -> enum_specifier .)
    PLUSEQOP        reduce using rule 155 (type_specifier -> enum_specifier .)
    MINUSEQOP       reduce using rule 155 (type_specifier -> enum_specifier .)
    LSHIFTEQOP      reduce using rule 155 (type_specifier -> enum_specifier .)
    RSHIFTEQOP      reduce using rule 155 (type_specifier -> enum_specifier .)
    BANDEQOP        reduce using rule 155 (type_specifier -> enum_specifier .)
    B_E_OR          reduce using rule 155 (type_specifier -> enum_specifier .)
    BOREQOP         reduce using rule 155 (type_specifier -> enum_specifier .)
    DOTSTAR         reduce using rule 155 (type_specifier -> enum_specifier .)
    ARROWSTAR       reduce using rule 155 (type_specifier -> enum_specifier .)
    DIVOP           reduce using rule 155 (type_specifier -> enum_specifier .)
    MODOP           reduce using rule 155 (type_specifier -> enum_specifier .)
    PLUSOP          reduce using rule 155 (type_specifier -> enum_specifier .)
    MINUSOP         reduce using rule 155 (type_specifier -> enum_specifier .)
    LSHIFT          reduce using rule 155 (type_specifier -> enum_specifier .)
    RSHIFT          reduce using rule 155 (type_specifier -> enum_specifier .)
    LTCOMP          reduce using rule 155 (type_specifier -> enum_specifier .)
    GTCOMP          reduce using rule 155 (type_specifier -> enum_specifier .)
    LTECOMP         reduce using rule 155 (type_specifier -> enum_specifier .)
    GTECOMP         reduce using rule 155 (type_specifier -> enum_specifier .)
    EQCOMP          reduce using rule 155 (type_specifier -> enum_specifier .)
    NEQCOMP         reduce using rule 155 (type_specifier -> enum_specifier .)
    XOROP           reduce using rule 155 (type_specifier -> enum_specifier .)
    OROP            reduce using rule 155 (type_specifier -> enum_specifier .)
    ANDOP           reduce using rule 155 (type_specifier -> enum_specifier .)
    QUESMARK        reduce using rule 155 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 155 (type_specifier -> enum_specifier .)
    $end            reduce using rule 155 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 155 (type_specifier -> enum_specifier .)
    RSPAREN         reduce using rule 155 (type_specifier -> enum_specifier .)
    RCPAREN         reduce using rule 155 (type_specifier -> enum_specifier .)
    DOT             reduce using rule 155 (type_specifier -> enum_specifier .)
    ARROW           reduce using rule 155 (type_specifier -> enum_specifier .)
    DPLUSOP         reduce using rule 155 (type_specifier -> enum_specifier .)
    DMINUSOP        reduce using rule 155 (type_specifier -> enum_specifier .)
    LCPAREN         reduce using rule 155 (type_specifier -> enum_specifier .)


state 99

    (156) type_specifier -> elaborated_type_specifier .

    SEMICOLON       reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    TYPEDEF         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    LPAREN          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    AUTO            reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    STATIC          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    EXTERN          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    CONST           reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    VOLATILE        reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    INLINE          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    VIRTUAL         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    BNOP            reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    MULTOP          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    BANDOP          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    CHAR            reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    SHORT           reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    INT             reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    LONG            reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    SIGNED          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    UNSIGNED        reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    FLOAT           reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    DOUBLE          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    VOID            reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    ENUM            reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    IDENTIFIER      reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    DOUBLECOLON     reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    CLASS           reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    STRUCT          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    UNION           reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    OPERATOR        reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    LSPAREN         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    RPAREN          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    EQUAL           reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    MULTEQOP        reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    DIVEQOP         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    MODEQOP         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    PLUSEQOP        reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    MINUSEQOP       reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    LSHIFTEQOP      reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    RSHIFTEQOP      reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    BANDEQOP        reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    B_E_OR          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    BOREQOP         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    DOTSTAR         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    ARROWSTAR       reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    DIVOP           reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    MODOP           reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    PLUSOP          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    MINUSOP         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    LSHIFT          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    RSHIFT          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    LTCOMP          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    GTCOMP          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    LTECOMP         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    GTECOMP         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    EQCOMP          reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    NEQCOMP         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    XOROP           reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    OROP            reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    ANDOP           reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    QUESMARK        reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    COMMA           reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    $end            reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    COLON           reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    RSPAREN         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    RCPAREN         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    DOT             reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    ARROW           reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    DPLUSOP         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    DMINUSOP        reduce using rule 156 (type_specifier -> elaborated_type_specifier .)
    LCPAREN         reduce using rule 156 (type_specifier -> elaborated_type_specifier .)


state 100

    (157) type_specifier -> CONST .

    SEMICOLON       reduce using rule 157 (type_specifier -> CONST .)
    TYPEDEF         reduce using rule 157 (type_specifier -> CONST .)
    LPAREN          reduce using rule 157 (type_specifier -> CONST .)
    AUTO            reduce using rule 157 (type_specifier -> CONST .)
    STATIC          reduce using rule 157 (type_specifier -> CONST .)
    EXTERN          reduce using rule 157 (type_specifier -> CONST .)
    CONST           reduce using rule 157 (type_specifier -> CONST .)
    VOLATILE        reduce using rule 157 (type_specifier -> CONST .)
    INLINE          reduce using rule 157 (type_specifier -> CONST .)
    VIRTUAL         reduce using rule 157 (type_specifier -> CONST .)
    BNOP            reduce using rule 157 (type_specifier -> CONST .)
    MULTOP          reduce using rule 157 (type_specifier -> CONST .)
    BANDOP          reduce using rule 157 (type_specifier -> CONST .)
    CHAR            reduce using rule 157 (type_specifier -> CONST .)
    SHORT           reduce using rule 157 (type_specifier -> CONST .)
    INT             reduce using rule 157 (type_specifier -> CONST .)
    LONG            reduce using rule 157 (type_specifier -> CONST .)
    SIGNED          reduce using rule 157 (type_specifier -> CONST .)
    UNSIGNED        reduce using rule 157 (type_specifier -> CONST .)
    FLOAT           reduce using rule 157 (type_specifier -> CONST .)
    DOUBLE          reduce using rule 157 (type_specifier -> CONST .)
    VOID            reduce using rule 157 (type_specifier -> CONST .)
    ENUM            reduce using rule 157 (type_specifier -> CONST .)
    IDENTIFIER      reduce using rule 157 (type_specifier -> CONST .)
    DOUBLECOLON     reduce using rule 157 (type_specifier -> CONST .)
    CLASS           reduce using rule 157 (type_specifier -> CONST .)
    STRUCT          reduce using rule 157 (type_specifier -> CONST .)
    UNION           reduce using rule 157 (type_specifier -> CONST .)
    OPERATOR        reduce using rule 157 (type_specifier -> CONST .)
    LSPAREN         reduce using rule 157 (type_specifier -> CONST .)
    RPAREN          reduce using rule 157 (type_specifier -> CONST .)
    EQUAL           reduce using rule 157 (type_specifier -> CONST .)
    MULTEQOP        reduce using rule 157 (type_specifier -> CONST .)
    DIVEQOP         reduce using rule 157 (type_specifier -> CONST .)
    MODEQOP         reduce using rule 157 (type_specifier -> CONST .)
    PLUSEQOP        reduce using rule 157 (type_specifier -> CONST .)
    MINUSEQOP       reduce using rule 157 (type_specifier -> CONST .)
    LSHIFTEQOP      reduce using rule 157 (type_specifier -> CONST .)
    RSHIFTEQOP      reduce using rule 157 (type_specifier -> CONST .)
    BANDEQOP        reduce using rule 157 (type_specifier -> CONST .)
    B_E_OR          reduce using rule 157 (type_specifier -> CONST .)
    BOREQOP         reduce using rule 157 (type_specifier -> CONST .)
    DOTSTAR         reduce using rule 157 (type_specifier -> CONST .)
    ARROWSTAR       reduce using rule 157 (type_specifier -> CONST .)
    DIVOP           reduce using rule 157 (type_specifier -> CONST .)
    MODOP           reduce using rule 157 (type_specifier -> CONST .)
    PLUSOP          reduce using rule 157 (type_specifier -> CONST .)
    MINUSOP         reduce using rule 157 (type_specifier -> CONST .)
    LSHIFT          reduce using rule 157 (type_specifier -> CONST .)
    RSHIFT          reduce using rule 157 (type_specifier -> CONST .)
    LTCOMP          reduce using rule 157 (type_specifier -> CONST .)
    GTCOMP          reduce using rule 157 (type_specifier -> CONST .)
    LTECOMP         reduce using rule 157 (type_specifier -> CONST .)
    GTECOMP         reduce using rule 157 (type_specifier -> CONST .)
    EQCOMP          reduce using rule 157 (type_specifier -> CONST .)
    NEQCOMP         reduce using rule 157 (type_specifier -> CONST .)
    XOROP           reduce using rule 157 (type_specifier -> CONST .)
    OROP            reduce using rule 157 (type_specifier -> CONST .)
    ANDOP           reduce using rule 157 (type_specifier -> CONST .)
    QUESMARK        reduce using rule 157 (type_specifier -> CONST .)
    COMMA           reduce using rule 157 (type_specifier -> CONST .)
    $end            reduce using rule 157 (type_specifier -> CONST .)
    COLON           reduce using rule 157 (type_specifier -> CONST .)
    RSPAREN         reduce using rule 157 (type_specifier -> CONST .)
    RCPAREN         reduce using rule 157 (type_specifier -> CONST .)
    DOT             reduce using rule 157 (type_specifier -> CONST .)
    ARROW           reduce using rule 157 (type_specifier -> CONST .)
    DPLUSOP         reduce using rule 157 (type_specifier -> CONST .)
    DMINUSOP        reduce using rule 157 (type_specifier -> CONST .)
    LCPAREN         reduce using rule 157 (type_specifier -> CONST .)


state 101

    (158) type_specifier -> VOLATILE .

    SEMICOLON       reduce using rule 158 (type_specifier -> VOLATILE .)
    TYPEDEF         reduce using rule 158 (type_specifier -> VOLATILE .)
    LPAREN          reduce using rule 158 (type_specifier -> VOLATILE .)
    AUTO            reduce using rule 158 (type_specifier -> VOLATILE .)
    STATIC          reduce using rule 158 (type_specifier -> VOLATILE .)
    EXTERN          reduce using rule 158 (type_specifier -> VOLATILE .)
    CONST           reduce using rule 158 (type_specifier -> VOLATILE .)
    VOLATILE        reduce using rule 158 (type_specifier -> VOLATILE .)
    INLINE          reduce using rule 158 (type_specifier -> VOLATILE .)
    VIRTUAL         reduce using rule 158 (type_specifier -> VOLATILE .)
    BNOP            reduce using rule 158 (type_specifier -> VOLATILE .)
    MULTOP          reduce using rule 158 (type_specifier -> VOLATILE .)
    BANDOP          reduce using rule 158 (type_specifier -> VOLATILE .)
    CHAR            reduce using rule 158 (type_specifier -> VOLATILE .)
    SHORT           reduce using rule 158 (type_specifier -> VOLATILE .)
    INT             reduce using rule 158 (type_specifier -> VOLATILE .)
    LONG            reduce using rule 158 (type_specifier -> VOLATILE .)
    SIGNED          reduce using rule 158 (type_specifier -> VOLATILE .)
    UNSIGNED        reduce using rule 158 (type_specifier -> VOLATILE .)
    FLOAT           reduce using rule 158 (type_specifier -> VOLATILE .)
    DOUBLE          reduce using rule 158 (type_specifier -> VOLATILE .)
    VOID            reduce using rule 158 (type_specifier -> VOLATILE .)
    ENUM            reduce using rule 158 (type_specifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 158 (type_specifier -> VOLATILE .)
    DOUBLECOLON     reduce using rule 158 (type_specifier -> VOLATILE .)
    CLASS           reduce using rule 158 (type_specifier -> VOLATILE .)
    STRUCT          reduce using rule 158 (type_specifier -> VOLATILE .)
    UNION           reduce using rule 158 (type_specifier -> VOLATILE .)
    OPERATOR        reduce using rule 158 (type_specifier -> VOLATILE .)
    LSPAREN         reduce using rule 158 (type_specifier -> VOLATILE .)
    RPAREN          reduce using rule 158 (type_specifier -> VOLATILE .)
    EQUAL           reduce using rule 158 (type_specifier -> VOLATILE .)
    MULTEQOP        reduce using rule 158 (type_specifier -> VOLATILE .)
    DIVEQOP         reduce using rule 158 (type_specifier -> VOLATILE .)
    MODEQOP         reduce using rule 158 (type_specifier -> VOLATILE .)
    PLUSEQOP        reduce using rule 158 (type_specifier -> VOLATILE .)
    MINUSEQOP       reduce using rule 158 (type_specifier -> VOLATILE .)
    LSHIFTEQOP      reduce using rule 158 (type_specifier -> VOLATILE .)
    RSHIFTEQOP      reduce using rule 158 (type_specifier -> VOLATILE .)
    BANDEQOP        reduce using rule 158 (type_specifier -> VOLATILE .)
    B_E_OR          reduce using rule 158 (type_specifier -> VOLATILE .)
    BOREQOP         reduce using rule 158 (type_specifier -> VOLATILE .)
    DOTSTAR         reduce using rule 158 (type_specifier -> VOLATILE .)
    ARROWSTAR       reduce using rule 158 (type_specifier -> VOLATILE .)
    DIVOP           reduce using rule 158 (type_specifier -> VOLATILE .)
    MODOP           reduce using rule 158 (type_specifier -> VOLATILE .)
    PLUSOP          reduce using rule 158 (type_specifier -> VOLATILE .)
    MINUSOP         reduce using rule 158 (type_specifier -> VOLATILE .)
    LSHIFT          reduce using rule 158 (type_specifier -> VOLATILE .)
    RSHIFT          reduce using rule 158 (type_specifier -> VOLATILE .)
    LTCOMP          reduce using rule 158 (type_specifier -> VOLATILE .)
    GTCOMP          reduce using rule 158 (type_specifier -> VOLATILE .)
    LTECOMP         reduce using rule 158 (type_specifier -> VOLATILE .)
    GTECOMP         reduce using rule 158 (type_specifier -> VOLATILE .)
    EQCOMP          reduce using rule 158 (type_specifier -> VOLATILE .)
    NEQCOMP         reduce using rule 158 (type_specifier -> VOLATILE .)
    XOROP           reduce using rule 158 (type_specifier -> VOLATILE .)
    OROP            reduce using rule 158 (type_specifier -> VOLATILE .)
    ANDOP           reduce using rule 158 (type_specifier -> VOLATILE .)
    QUESMARK        reduce using rule 158 (type_specifier -> VOLATILE .)
    COMMA           reduce using rule 158 (type_specifier -> VOLATILE .)
    $end            reduce using rule 158 (type_specifier -> VOLATILE .)
    COLON           reduce using rule 158 (type_specifier -> VOLATILE .)
    RSPAREN         reduce using rule 158 (type_specifier -> VOLATILE .)
    RCPAREN         reduce using rule 158 (type_specifier -> VOLATILE .)
    DOT             reduce using rule 158 (type_specifier -> VOLATILE .)
    ARROW           reduce using rule 158 (type_specifier -> VOLATILE .)
    DPLUSOP         reduce using rule 158 (type_specifier -> VOLATILE .)
    DMINUSOP        reduce using rule 158 (type_specifier -> VOLATILE .)
    LCPAREN         reduce using rule 158 (type_specifier -> VOLATILE .)


state 102

    (151) fct_specifier -> INLINE .

    SEMICOLON       reduce using rule 151 (fct_specifier -> INLINE .)
    TYPEDEF         reduce using rule 151 (fct_specifier -> INLINE .)
    LPAREN          reduce using rule 151 (fct_specifier -> INLINE .)
    AUTO            reduce using rule 151 (fct_specifier -> INLINE .)
    STATIC          reduce using rule 151 (fct_specifier -> INLINE .)
    EXTERN          reduce using rule 151 (fct_specifier -> INLINE .)
    CONST           reduce using rule 151 (fct_specifier -> INLINE .)
    VOLATILE        reduce using rule 151 (fct_specifier -> INLINE .)
    INLINE          reduce using rule 151 (fct_specifier -> INLINE .)
    VIRTUAL         reduce using rule 151 (fct_specifier -> INLINE .)
    BNOP            reduce using rule 151 (fct_specifier -> INLINE .)
    MULTOP          reduce using rule 151 (fct_specifier -> INLINE .)
    BANDOP          reduce using rule 151 (fct_specifier -> INLINE .)
    CHAR            reduce using rule 151 (fct_specifier -> INLINE .)
    SHORT           reduce using rule 151 (fct_specifier -> INLINE .)
    INT             reduce using rule 151 (fct_specifier -> INLINE .)
    LONG            reduce using rule 151 (fct_specifier -> INLINE .)
    SIGNED          reduce using rule 151 (fct_specifier -> INLINE .)
    UNSIGNED        reduce using rule 151 (fct_specifier -> INLINE .)
    FLOAT           reduce using rule 151 (fct_specifier -> INLINE .)
    DOUBLE          reduce using rule 151 (fct_specifier -> INLINE .)
    VOID            reduce using rule 151 (fct_specifier -> INLINE .)
    ENUM            reduce using rule 151 (fct_specifier -> INLINE .)
    IDENTIFIER      reduce using rule 151 (fct_specifier -> INLINE .)
    DOUBLECOLON     reduce using rule 151 (fct_specifier -> INLINE .)
    CLASS           reduce using rule 151 (fct_specifier -> INLINE .)
    STRUCT          reduce using rule 151 (fct_specifier -> INLINE .)
    UNION           reduce using rule 151 (fct_specifier -> INLINE .)
    OPERATOR        reduce using rule 151 (fct_specifier -> INLINE .)
    EQUAL           reduce using rule 151 (fct_specifier -> INLINE .)
    LSPAREN         reduce using rule 151 (fct_specifier -> INLINE .)
    COMMA           reduce using rule 151 (fct_specifier -> INLINE .)
    RPAREN          reduce using rule 151 (fct_specifier -> INLINE .)
    GTCOMP          reduce using rule 151 (fct_specifier -> INLINE .)
    COLON           reduce using rule 151 (fct_specifier -> INLINE .)


state 103

    (152) fct_specifier -> VIRTUAL .

    SEMICOLON       reduce using rule 152 (fct_specifier -> VIRTUAL .)
    TYPEDEF         reduce using rule 152 (fct_specifier -> VIRTUAL .)
    LPAREN          reduce using rule 152 (fct_specifier -> VIRTUAL .)
    AUTO            reduce using rule 152 (fct_specifier -> VIRTUAL .)
    STATIC          reduce using rule 152 (fct_specifier -> VIRTUAL .)
    EXTERN          reduce using rule 152 (fct_specifier -> VIRTUAL .)
    CONST           reduce using rule 152 (fct_specifier -> VIRTUAL .)
    VOLATILE        reduce using rule 152 (fct_specifier -> VIRTUAL .)
    INLINE          reduce using rule 152 (fct_specifier -> VIRTUAL .)
    VIRTUAL         reduce using rule 152 (fct_specifier -> VIRTUAL .)
    BNOP            reduce using rule 152 (fct_specifier -> VIRTUAL .)
    MULTOP          reduce using rule 152 (fct_specifier -> VIRTUAL .)
    BANDOP          reduce using rule 152 (fct_specifier -> VIRTUAL .)
    CHAR            reduce using rule 152 (fct_specifier -> VIRTUAL .)
    SHORT           reduce using rule 152 (fct_specifier -> VIRTUAL .)
    INT             reduce using rule 152 (fct_specifier -> VIRTUAL .)
    LONG            reduce using rule 152 (fct_specifier -> VIRTUAL .)
    SIGNED          reduce using rule 152 (fct_specifier -> VIRTUAL .)
    UNSIGNED        reduce using rule 152 (fct_specifier -> VIRTUAL .)
    FLOAT           reduce using rule 152 (fct_specifier -> VIRTUAL .)
    DOUBLE          reduce using rule 152 (fct_specifier -> VIRTUAL .)
    VOID            reduce using rule 152 (fct_specifier -> VIRTUAL .)
    ENUM            reduce using rule 152 (fct_specifier -> VIRTUAL .)
    IDENTIFIER      reduce using rule 152 (fct_specifier -> VIRTUAL .)
    DOUBLECOLON     reduce using rule 152 (fct_specifier -> VIRTUAL .)
    CLASS           reduce using rule 152 (fct_specifier -> VIRTUAL .)
    STRUCT          reduce using rule 152 (fct_specifier -> VIRTUAL .)
    UNION           reduce using rule 152 (fct_specifier -> VIRTUAL .)
    OPERATOR        reduce using rule 152 (fct_specifier -> VIRTUAL .)
    EQUAL           reduce using rule 152 (fct_specifier -> VIRTUAL .)
    LSPAREN         reduce using rule 152 (fct_specifier -> VIRTUAL .)
    COMMA           reduce using rule 152 (fct_specifier -> VIRTUAL .)
    RPAREN          reduce using rule 152 (fct_specifier -> VIRTUAL .)
    GTCOMP          reduce using rule 152 (fct_specifier -> VIRTUAL .)
    COLON           reduce using rule 152 (fct_specifier -> VIRTUAL .)


state 104

    (31) exclusive_OR_expression -> AND_expression .
    (34) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 31 (exclusive_OR_expression -> AND_expression .)
    OROP            reduce using rule 31 (exclusive_OR_expression -> AND_expression .)
    ANDOP           reduce using rule 31 (exclusive_OR_expression -> AND_expression .)
    QUESMARK        reduce using rule 31 (exclusive_OR_expression -> AND_expression .)
    COMMA           reduce using rule 31 (exclusive_OR_expression -> AND_expression .)
    SEMICOLON       reduce using rule 31 (exclusive_OR_expression -> AND_expression .)
    $end            reduce using rule 31 (exclusive_OR_expression -> AND_expression .)
    COLON           reduce using rule 31 (exclusive_OR_expression -> AND_expression .)
    RPAREN          reduce using rule 31 (exclusive_OR_expression -> AND_expression .)
    RSPAREN         reduce using rule 31 (exclusive_OR_expression -> AND_expression .)
    GTCOMP          reduce using rule 31 (exclusive_OR_expression -> AND_expression .)
    RCPAREN         reduce using rule 31 (exclusive_OR_expression -> AND_expression .)
    BANDOP          shift and go to state 258


state 105

    (308) operator_function_name -> OPERATOR . operator_name
    (298) conversion_function_name -> OPERATOR . conversion_type_name
    (309) operator_name -> . NEW
    (310) operator_name -> . DELETE
    (311) operator_name -> . PLUSOP
    (312) operator_name -> . MINUSOP
    (313) operator_name -> . MULTOP
    (314) operator_name -> . DIVOP
    (315) operator_name -> . MODOP
    (316) operator_name -> . XOROP
    (317) operator_name -> . BANDOP
    (318) operator_name -> . BNOP
    (319) operator_name -> . NOTSYM
    (320) operator_name -> . EQUAL
    (321) operator_name -> . LTCOMP
    (322) operator_name -> . GTCOMP
    (323) operator_name -> . PLUSEQOP
    (324) operator_name -> . MINUSEQOP
    (325) operator_name -> . MULTEQOP
    (326) operator_name -> . DIVEQOP
    (327) operator_name -> . MODEQOP
    (328) operator_name -> . B_E_OR
    (329) operator_name -> . BANDEQOP
    (330) operator_name -> . LSHIFT
    (331) operator_name -> . RSHIFT
    (332) operator_name -> . RSHIFTEQOP
    (333) operator_name -> . LSHIFTEQOP
    (334) operator_name -> . EQCOMP
    (335) operator_name -> . NEQCOMP
    (336) operator_name -> . LTECOMP
    (337) operator_name -> . GTECOMP
    (338) operator_name -> . ANDOP
    (339) operator_name -> . OROP
    (340) operator_name -> . DPLUSOP
    (341) operator_name -> . DMINUSOP
    (342) operator_name -> . COMMA
    (343) operator_name -> . ARROWSTAR
    (344) operator_name -> . ARROW
    (345) operator_name -> . LPAREN RPAREN
    (346) operator_name -> . LSPAREN RSPAREN
    (299) conversion_type_name -> . type_specifier_list ptr_operator
    (300) conversion_type_name -> . type_specifier_list
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    NEW             shift and go to state 261
    DELETE          shift and go to state 262
    PLUSOP          shift and go to state 263
    MINUSOP         shift and go to state 264
    MULTOP          shift and go to state 265
    DIVOP           shift and go to state 266
    MODOP           shift and go to state 267
    XOROP           shift and go to state 268
    BANDOP          shift and go to state 269
    BNOP            shift and go to state 270
    NOTSYM          shift and go to state 271
    EQUAL           shift and go to state 272
    LTCOMP          shift and go to state 273
    GTCOMP          shift and go to state 274
    PLUSEQOP        shift and go to state 275
    MINUSEQOP       shift and go to state 276
    MULTEQOP        shift and go to state 277
    DIVEQOP         shift and go to state 278
    MODEQOP         shift and go to state 279
    B_E_OR          shift and go to state 280
    BANDEQOP        shift and go to state 281
    LSHIFT          shift and go to state 282
    RSHIFT          shift and go to state 283
    RSHIFTEQOP      shift and go to state 284
    LSHIFTEQOP      shift and go to state 285
    EQCOMP          shift and go to state 286
    NEQCOMP         shift and go to state 287
    LTECOMP         shift and go to state 288
    GTECOMP         shift and go to state 289
    ANDOP           shift and go to state 290
    OROP            shift and go to state 291
    DPLUSOP         shift and go to state 292
    DMINUSOP        shift and go to state 293
    COMMA           shift and go to state 294
    ARROWSTAR       shift and go to state 295
    ARROW           shift and go to state 296
    LPAREN          shift and go to state 297
    LSPAREN         shift and go to state 298
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    IDENTIFIER      shift and go to state 235

    operator_name                  shift and go to state 259
    conversion_type_name           shift and go to state 260
    type_specifier_list            shift and go to state 299
    type_specifier                 shift and go to state 171
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 236
    typedef_name                   shift and go to state 148

state 106

    (261) class_specifier -> class_head . LCPAREN member_list RCPAREN
    (262) class_specifier -> class_head . LCPAREN RCPAREN

    LCPAREN         shift and go to state 300


state 107

    (182) enum_specifier -> ENUM . IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> ENUM . LCPAREN enum_list RCPAREN
    (184) enum_specifier -> ENUM . IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> ENUM . LCPAREN RCPAREN
    (172) elaborated_type_specifier -> ENUM . enum_name
    (6) enum_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 301
    LCPAREN         shift and go to state 302

    enum_name                      shift and go to state 303

state 108

    (170) elaborated_type_specifier -> class_key . IDENTIFIER
    (171) elaborated_type_specifier -> class_key . class_name
    (263) class_head -> class_key . IDENTIFIER base_spec
    (264) class_head -> class_key . base_spec
    (265) class_head -> class_key . IDENTIFIER
    (266) class_head -> class_key .
    (267) class_head -> class_key . class_name base_spec
    (268) class_head -> class_key . class_name
    (5) class_name -> . IDENTIFIER
    (287) base_spec -> . COLON base_list

    IDENTIFIER      shift and go to state 304
    LCPAREN         reduce using rule 266 (class_head -> class_key .)
    COLON           shift and go to state 307

    class_name                     shift and go to state 305
    base_spec                      shift and go to state 306

state 109

    (33) AND_expression -> equality_expression .
    (36) equality_expression -> equality_expression . EQCOMP relational_expression
    (37) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 33 (AND_expression -> equality_expression .)
    XOROP           reduce using rule 33 (AND_expression -> equality_expression .)
    OROP            reduce using rule 33 (AND_expression -> equality_expression .)
    ANDOP           reduce using rule 33 (AND_expression -> equality_expression .)
    QUESMARK        reduce using rule 33 (AND_expression -> equality_expression .)
    COMMA           reduce using rule 33 (AND_expression -> equality_expression .)
    SEMICOLON       reduce using rule 33 (AND_expression -> equality_expression .)
    $end            reduce using rule 33 (AND_expression -> equality_expression .)
    COLON           reduce using rule 33 (AND_expression -> equality_expression .)
    RPAREN          reduce using rule 33 (AND_expression -> equality_expression .)
    RSPAREN         reduce using rule 33 (AND_expression -> equality_expression .)
    GTCOMP          reduce using rule 33 (AND_expression -> equality_expression .)
    RCPAREN         reduce using rule 33 (AND_expression -> equality_expression .)
    EQCOMP          shift and go to state 308
    NEQCOMP         shift and go to state 309


state 110

    (173) class_key -> CLASS .

    IDENTIFIER      reduce using rule 173 (class_key -> CLASS .)
    COLON           reduce using rule 173 (class_key -> CLASS .)
    LCPAREN         reduce using rule 173 (class_key -> CLASS .)


state 111

    (174) class_key -> STRUCT .

    IDENTIFIER      reduce using rule 174 (class_key -> STRUCT .)
    COLON           reduce using rule 174 (class_key -> STRUCT .)
    LCPAREN         reduce using rule 174 (class_key -> STRUCT .)


state 112

    (175) class_key -> UNION .

    IDENTIFIER      reduce using rule 175 (class_key -> UNION .)
    COLON           reduce using rule 175 (class_key -> UNION .)
    LCPAREN         reduce using rule 175 (class_key -> UNION .)


state 113

    (35) equality_expression -> relational_expression .
    (39) relational_expression -> relational_expression . LTCOMP shift_expression
    (40) relational_expression -> relational_expression . GTCOMP shift_expression
    (41) relational_expression -> relational_expression . LTECOMP shift_expression
    (42) relational_expression -> relational_expression . GTECOMP shift_expression

  ! shift/reduce conflict for GTCOMP resolved as shift
    EQCOMP          reduce using rule 35 (equality_expression -> relational_expression .)
    NEQCOMP         reduce using rule 35 (equality_expression -> relational_expression .)
    BANDOP          reduce using rule 35 (equality_expression -> relational_expression .)
    XOROP           reduce using rule 35 (equality_expression -> relational_expression .)
    OROP            reduce using rule 35 (equality_expression -> relational_expression .)
    ANDOP           reduce using rule 35 (equality_expression -> relational_expression .)
    QUESMARK        reduce using rule 35 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 35 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 35 (equality_expression -> relational_expression .)
    $end            reduce using rule 35 (equality_expression -> relational_expression .)
    COLON           reduce using rule 35 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 35 (equality_expression -> relational_expression .)
    RSPAREN         reduce using rule 35 (equality_expression -> relational_expression .)
    RCPAREN         reduce using rule 35 (equality_expression -> relational_expression .)
    LTCOMP          shift and go to state 310
    GTCOMP          shift and go to state 311
    LTECOMP         shift and go to state 312
    GTECOMP         shift and go to state 313

  ! GTCOMP          [ reduce using rule 35 (equality_expression -> relational_expression .) ]


state 114

    (38) relational_expression -> shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 38 (relational_expression -> shift_expression .)
    GTCOMP          reduce using rule 38 (relational_expression -> shift_expression .)
    LTECOMP         reduce using rule 38 (relational_expression -> shift_expression .)
    GTECOMP         reduce using rule 38 (relational_expression -> shift_expression .)
    EQCOMP          reduce using rule 38 (relational_expression -> shift_expression .)
    NEQCOMP         reduce using rule 38 (relational_expression -> shift_expression .)
    BANDOP          reduce using rule 38 (relational_expression -> shift_expression .)
    XOROP           reduce using rule 38 (relational_expression -> shift_expression .)
    OROP            reduce using rule 38 (relational_expression -> shift_expression .)
    ANDOP           reduce using rule 38 (relational_expression -> shift_expression .)
    QUESMARK        reduce using rule 38 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 38 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 38 (relational_expression -> shift_expression .)
    $end            reduce using rule 38 (relational_expression -> shift_expression .)
    COLON           reduce using rule 38 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 38 (relational_expression -> shift_expression .)
    RSPAREN         reduce using rule 38 (relational_expression -> shift_expression .)
    RCPAREN         reduce using rule 38 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 314
    RSHIFT          shift and go to state 315


state 115

    (43) shift_expression -> additive_expression .
    (47) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (48) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 43 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 43 (shift_expression -> additive_expression .)
    LTCOMP          reduce using rule 43 (shift_expression -> additive_expression .)
    GTCOMP          reduce using rule 43 (shift_expression -> additive_expression .)
    LTECOMP         reduce using rule 43 (shift_expression -> additive_expression .)
    GTECOMP         reduce using rule 43 (shift_expression -> additive_expression .)
    EQCOMP          reduce using rule 43 (shift_expression -> additive_expression .)
    NEQCOMP         reduce using rule 43 (shift_expression -> additive_expression .)
    BANDOP          reduce using rule 43 (shift_expression -> additive_expression .)
    XOROP           reduce using rule 43 (shift_expression -> additive_expression .)
    OROP            reduce using rule 43 (shift_expression -> additive_expression .)
    ANDOP           reduce using rule 43 (shift_expression -> additive_expression .)
    QUESMARK        reduce using rule 43 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 43 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 43 (shift_expression -> additive_expression .)
    $end            reduce using rule 43 (shift_expression -> additive_expression .)
    COLON           reduce using rule 43 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 43 (shift_expression -> additive_expression .)
    RSPAREN         reduce using rule 43 (shift_expression -> additive_expression .)
    RCPAREN         reduce using rule 43 (shift_expression -> additive_expression .)
    PLUSOP          shift and go to state 316
    MINUSOP         shift and go to state 317


state 116

    (46) additive_expression -> multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (51) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (52) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    MINUSOP         reduce using rule 46 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    LTCOMP          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    GTCOMP          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    LTECOMP         reduce using rule 46 (additive_expression -> multiplicative_expression .)
    GTECOMP         reduce using rule 46 (additive_expression -> multiplicative_expression .)
    EQCOMP          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    NEQCOMP         reduce using rule 46 (additive_expression -> multiplicative_expression .)
    BANDOP          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    XOROP           reduce using rule 46 (additive_expression -> multiplicative_expression .)
    OROP            reduce using rule 46 (additive_expression -> multiplicative_expression .)
    ANDOP           reduce using rule 46 (additive_expression -> multiplicative_expression .)
    QUESMARK        reduce using rule 46 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 46 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 46 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 46 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 46 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 46 (additive_expression -> multiplicative_expression .)
    RSPAREN         reduce using rule 46 (additive_expression -> multiplicative_expression .)
    RCPAREN         reduce using rule 46 (additive_expression -> multiplicative_expression .)
    MULTOP          shift and go to state 318
    DIVOP           shift and go to state 319
    MODOP           shift and go to state 320


state 117

    (49) multiplicative_expression -> pm_expression .
    (54) pm_expression -> pm_expression . DOTSTAR cast_expression
    (55) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 49 (multiplicative_expression -> pm_expression .)
    DIVOP           reduce using rule 49 (multiplicative_expression -> pm_expression .)
    MODOP           reduce using rule 49 (multiplicative_expression -> pm_expression .)
    PLUSOP          reduce using rule 49 (multiplicative_expression -> pm_expression .)
    MINUSOP         reduce using rule 49 (multiplicative_expression -> pm_expression .)
    LSHIFT          reduce using rule 49 (multiplicative_expression -> pm_expression .)
    RSHIFT          reduce using rule 49 (multiplicative_expression -> pm_expression .)
    LTCOMP          reduce using rule 49 (multiplicative_expression -> pm_expression .)
    GTCOMP          reduce using rule 49 (multiplicative_expression -> pm_expression .)
    LTECOMP         reduce using rule 49 (multiplicative_expression -> pm_expression .)
    GTECOMP         reduce using rule 49 (multiplicative_expression -> pm_expression .)
    EQCOMP          reduce using rule 49 (multiplicative_expression -> pm_expression .)
    NEQCOMP         reduce using rule 49 (multiplicative_expression -> pm_expression .)
    BANDOP          reduce using rule 49 (multiplicative_expression -> pm_expression .)
    XOROP           reduce using rule 49 (multiplicative_expression -> pm_expression .)
    OROP            reduce using rule 49 (multiplicative_expression -> pm_expression .)
    ANDOP           reduce using rule 49 (multiplicative_expression -> pm_expression .)
    QUESMARK        reduce using rule 49 (multiplicative_expression -> pm_expression .)
    COMMA           reduce using rule 49 (multiplicative_expression -> pm_expression .)
    SEMICOLON       reduce using rule 49 (multiplicative_expression -> pm_expression .)
    $end            reduce using rule 49 (multiplicative_expression -> pm_expression .)
    COLON           reduce using rule 49 (multiplicative_expression -> pm_expression .)
    RPAREN          reduce using rule 49 (multiplicative_expression -> pm_expression .)
    RSPAREN         reduce using rule 49 (multiplicative_expression -> pm_expression .)
    RCPAREN         reduce using rule 49 (multiplicative_expression -> pm_expression .)
    DOTSTAR         shift and go to state 321
    ARROWSTAR       shift and go to state 322


state 118

    (9) expression -> expression COMMA . assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    assignment_expression          shift and go to state 323
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 119

    (358) expression_statement -> expression SEMICOLON .

    $end            reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    RCPAREN         reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    LCPAREN         reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    TRY             reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    ASM             reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    TEMPLATE        reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    EXTERN          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    DPLUSOP         reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    DMINUSOP        reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    TYPEDEF         reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    MULTOP          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    BANDOP          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    PLUSOP          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    MINUSOP         reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    NOTSYM          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    BNOP            reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    DOUBLECOLON     reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    NEW             reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    DELETE          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    AUTO            reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    STATIC          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    CONST           reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    VOLATILE        reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    INLINE          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    VIRTUAL         reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    THIS            reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    ENUM            reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    CLASS           reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    STRUCT          reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    UNION           reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    OPERATOR        reduce using rule 358 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 358 (expression_statement -> expression SEMICOLON .)


state 120

    (11) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    unary_expression               shift and go to state 16
    assignment_expression          shift and go to state 324
    conditional_expression         shift and go to state 15
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 121

    (12) assignment_operator -> EQUAL .

    DPLUSOP         reduce using rule 12 (assignment_operator -> EQUAL .)
    DMINUSOP        reduce using rule 12 (assignment_operator -> EQUAL .)
    SIZEOF          reduce using rule 12 (assignment_operator -> EQUAL .)
    MULTOP          reduce using rule 12 (assignment_operator -> EQUAL .)
    BANDOP          reduce using rule 12 (assignment_operator -> EQUAL .)
    PLUSOP          reduce using rule 12 (assignment_operator -> EQUAL .)
    MINUSOP         reduce using rule 12 (assignment_operator -> EQUAL .)
    NOTSYM          reduce using rule 12 (assignment_operator -> EQUAL .)
    BNOP            reduce using rule 12 (assignment_operator -> EQUAL .)
    DOUBLECOLON     reduce using rule 12 (assignment_operator -> EQUAL .)
    NEW             reduce using rule 12 (assignment_operator -> EQUAL .)
    DELETE          reduce using rule 12 (assignment_operator -> EQUAL .)
    THIS            reduce using rule 12 (assignment_operator -> EQUAL .)
    LPAREN          reduce using rule 12 (assignment_operator -> EQUAL .)
    CHAR            reduce using rule 12 (assignment_operator -> EQUAL .)
    SHORT           reduce using rule 12 (assignment_operator -> EQUAL .)
    INT             reduce using rule 12 (assignment_operator -> EQUAL .)
    LONG            reduce using rule 12 (assignment_operator -> EQUAL .)
    SIGNED          reduce using rule 12 (assignment_operator -> EQUAL .)
    UNSIGNED        reduce using rule 12 (assignment_operator -> EQUAL .)
    FLOAT           reduce using rule 12 (assignment_operator -> EQUAL .)
    DOUBLE          reduce using rule 12 (assignment_operator -> EQUAL .)
    VOID            reduce using rule 12 (assignment_operator -> EQUAL .)
    NUMBER          reduce using rule 12 (assignment_operator -> EQUAL .)
    STRING          reduce using rule 12 (assignment_operator -> EQUAL .)
    IDENTIFIER      reduce using rule 12 (assignment_operator -> EQUAL .)
    OPERATOR        reduce using rule 12 (assignment_operator -> EQUAL .)


state 122

    (13) assignment_operator -> MULTEQOP .

    DPLUSOP         reduce using rule 13 (assignment_operator -> MULTEQOP .)
    DMINUSOP        reduce using rule 13 (assignment_operator -> MULTEQOP .)
    SIZEOF          reduce using rule 13 (assignment_operator -> MULTEQOP .)
    MULTOP          reduce using rule 13 (assignment_operator -> MULTEQOP .)
    BANDOP          reduce using rule 13 (assignment_operator -> MULTEQOP .)
    PLUSOP          reduce using rule 13 (assignment_operator -> MULTEQOP .)
    MINUSOP         reduce using rule 13 (assignment_operator -> MULTEQOP .)
    NOTSYM          reduce using rule 13 (assignment_operator -> MULTEQOP .)
    BNOP            reduce using rule 13 (assignment_operator -> MULTEQOP .)
    DOUBLECOLON     reduce using rule 13 (assignment_operator -> MULTEQOP .)
    NEW             reduce using rule 13 (assignment_operator -> MULTEQOP .)
    DELETE          reduce using rule 13 (assignment_operator -> MULTEQOP .)
    THIS            reduce using rule 13 (assignment_operator -> MULTEQOP .)
    LPAREN          reduce using rule 13 (assignment_operator -> MULTEQOP .)
    CHAR            reduce using rule 13 (assignment_operator -> MULTEQOP .)
    SHORT           reduce using rule 13 (assignment_operator -> MULTEQOP .)
    INT             reduce using rule 13 (assignment_operator -> MULTEQOP .)
    LONG            reduce using rule 13 (assignment_operator -> MULTEQOP .)
    SIGNED          reduce using rule 13 (assignment_operator -> MULTEQOP .)
    UNSIGNED        reduce using rule 13 (assignment_operator -> MULTEQOP .)
    FLOAT           reduce using rule 13 (assignment_operator -> MULTEQOP .)
    DOUBLE          reduce using rule 13 (assignment_operator -> MULTEQOP .)
    VOID            reduce using rule 13 (assignment_operator -> MULTEQOP .)
    NUMBER          reduce using rule 13 (assignment_operator -> MULTEQOP .)
    STRING          reduce using rule 13 (assignment_operator -> MULTEQOP .)
    IDENTIFIER      reduce using rule 13 (assignment_operator -> MULTEQOP .)
    OPERATOR        reduce using rule 13 (assignment_operator -> MULTEQOP .)


state 123

    (14) assignment_operator -> DIVEQOP .

    DPLUSOP         reduce using rule 14 (assignment_operator -> DIVEQOP .)
    DMINUSOP        reduce using rule 14 (assignment_operator -> DIVEQOP .)
    SIZEOF          reduce using rule 14 (assignment_operator -> DIVEQOP .)
    MULTOP          reduce using rule 14 (assignment_operator -> DIVEQOP .)
    BANDOP          reduce using rule 14 (assignment_operator -> DIVEQOP .)
    PLUSOP          reduce using rule 14 (assignment_operator -> DIVEQOP .)
    MINUSOP         reduce using rule 14 (assignment_operator -> DIVEQOP .)
    NOTSYM          reduce using rule 14 (assignment_operator -> DIVEQOP .)
    BNOP            reduce using rule 14 (assignment_operator -> DIVEQOP .)
    DOUBLECOLON     reduce using rule 14 (assignment_operator -> DIVEQOP .)
    NEW             reduce using rule 14 (assignment_operator -> DIVEQOP .)
    DELETE          reduce using rule 14 (assignment_operator -> DIVEQOP .)
    THIS            reduce using rule 14 (assignment_operator -> DIVEQOP .)
    LPAREN          reduce using rule 14 (assignment_operator -> DIVEQOP .)
    CHAR            reduce using rule 14 (assignment_operator -> DIVEQOP .)
    SHORT           reduce using rule 14 (assignment_operator -> DIVEQOP .)
    INT             reduce using rule 14 (assignment_operator -> DIVEQOP .)
    LONG            reduce using rule 14 (assignment_operator -> DIVEQOP .)
    SIGNED          reduce using rule 14 (assignment_operator -> DIVEQOP .)
    UNSIGNED        reduce using rule 14 (assignment_operator -> DIVEQOP .)
    FLOAT           reduce using rule 14 (assignment_operator -> DIVEQOP .)
    DOUBLE          reduce using rule 14 (assignment_operator -> DIVEQOP .)
    VOID            reduce using rule 14 (assignment_operator -> DIVEQOP .)
    NUMBER          reduce using rule 14 (assignment_operator -> DIVEQOP .)
    STRING          reduce using rule 14 (assignment_operator -> DIVEQOP .)
    IDENTIFIER      reduce using rule 14 (assignment_operator -> DIVEQOP .)
    OPERATOR        reduce using rule 14 (assignment_operator -> DIVEQOP .)


state 124

    (15) assignment_operator -> MODEQOP .

    DPLUSOP         reduce using rule 15 (assignment_operator -> MODEQOP .)
    DMINUSOP        reduce using rule 15 (assignment_operator -> MODEQOP .)
    SIZEOF          reduce using rule 15 (assignment_operator -> MODEQOP .)
    MULTOP          reduce using rule 15 (assignment_operator -> MODEQOP .)
    BANDOP          reduce using rule 15 (assignment_operator -> MODEQOP .)
    PLUSOP          reduce using rule 15 (assignment_operator -> MODEQOP .)
    MINUSOP         reduce using rule 15 (assignment_operator -> MODEQOP .)
    NOTSYM          reduce using rule 15 (assignment_operator -> MODEQOP .)
    BNOP            reduce using rule 15 (assignment_operator -> MODEQOP .)
    DOUBLECOLON     reduce using rule 15 (assignment_operator -> MODEQOP .)
    NEW             reduce using rule 15 (assignment_operator -> MODEQOP .)
    DELETE          reduce using rule 15 (assignment_operator -> MODEQOP .)
    THIS            reduce using rule 15 (assignment_operator -> MODEQOP .)
    LPAREN          reduce using rule 15 (assignment_operator -> MODEQOP .)
    CHAR            reduce using rule 15 (assignment_operator -> MODEQOP .)
    SHORT           reduce using rule 15 (assignment_operator -> MODEQOP .)
    INT             reduce using rule 15 (assignment_operator -> MODEQOP .)
    LONG            reduce using rule 15 (assignment_operator -> MODEQOP .)
    SIGNED          reduce using rule 15 (assignment_operator -> MODEQOP .)
    UNSIGNED        reduce using rule 15 (assignment_operator -> MODEQOP .)
    FLOAT           reduce using rule 15 (assignment_operator -> MODEQOP .)
    DOUBLE          reduce using rule 15 (assignment_operator -> MODEQOP .)
    VOID            reduce using rule 15 (assignment_operator -> MODEQOP .)
    NUMBER          reduce using rule 15 (assignment_operator -> MODEQOP .)
    STRING          reduce using rule 15 (assignment_operator -> MODEQOP .)
    IDENTIFIER      reduce using rule 15 (assignment_operator -> MODEQOP .)
    OPERATOR        reduce using rule 15 (assignment_operator -> MODEQOP .)


state 125

    (16) assignment_operator -> PLUSEQOP .

    DPLUSOP         reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    DMINUSOP        reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    SIZEOF          reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    MULTOP          reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    BANDOP          reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    PLUSOP          reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    MINUSOP         reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    NOTSYM          reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    BNOP            reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    DOUBLECOLON     reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    NEW             reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    DELETE          reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    THIS            reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    LPAREN          reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    CHAR            reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    SHORT           reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    INT             reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    LONG            reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    SIGNED          reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    UNSIGNED        reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    FLOAT           reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    DOUBLE          reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    VOID            reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    NUMBER          reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    STRING          reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    IDENTIFIER      reduce using rule 16 (assignment_operator -> PLUSEQOP .)
    OPERATOR        reduce using rule 16 (assignment_operator -> PLUSEQOP .)


state 126

    (17) assignment_operator -> MINUSEQOP .

    DPLUSOP         reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    DMINUSOP        reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    SIZEOF          reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    MULTOP          reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    BANDOP          reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    PLUSOP          reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    MINUSOP         reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    NOTSYM          reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    BNOP            reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    DOUBLECOLON     reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    NEW             reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    DELETE          reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    THIS            reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    LPAREN          reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    CHAR            reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    SHORT           reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    INT             reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    LONG            reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    SIGNED          reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    UNSIGNED        reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    FLOAT           reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    DOUBLE          reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    VOID            reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    NUMBER          reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    STRING          reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    IDENTIFIER      reduce using rule 17 (assignment_operator -> MINUSEQOP .)
    OPERATOR        reduce using rule 17 (assignment_operator -> MINUSEQOP .)


state 127

    (18) assignment_operator -> LSHIFTEQOP .

    DPLUSOP         reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    DMINUSOP        reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    SIZEOF          reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    MULTOP          reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    BANDOP          reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    PLUSOP          reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    MINUSOP         reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    NOTSYM          reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    BNOP            reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    DOUBLECOLON     reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    NEW             reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    DELETE          reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    THIS            reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    LPAREN          reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    CHAR            reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    SHORT           reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    INT             reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    LONG            reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    SIGNED          reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    UNSIGNED        reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    FLOAT           reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    DOUBLE          reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    VOID            reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    NUMBER          reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    STRING          reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    IDENTIFIER      reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)
    OPERATOR        reduce using rule 18 (assignment_operator -> LSHIFTEQOP .)


state 128

    (19) assignment_operator -> RSHIFTEQOP .

    DPLUSOP         reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    DMINUSOP        reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    SIZEOF          reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    MULTOP          reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    BANDOP          reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    PLUSOP          reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    MINUSOP         reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    NOTSYM          reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    BNOP            reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    DOUBLECOLON     reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    NEW             reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    DELETE          reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    THIS            reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    LPAREN          reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    CHAR            reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    SHORT           reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    INT             reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    LONG            reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    SIGNED          reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    UNSIGNED        reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    FLOAT           reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    DOUBLE          reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    VOID            reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    NUMBER          reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    STRING          reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    IDENTIFIER      reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)
    OPERATOR        reduce using rule 19 (assignment_operator -> RSHIFTEQOP .)


state 129

    (20) assignment_operator -> BANDEQOP .

    DPLUSOP         reduce using rule 20 (assignment_operator -> BANDEQOP .)
    DMINUSOP        reduce using rule 20 (assignment_operator -> BANDEQOP .)
    SIZEOF          reduce using rule 20 (assignment_operator -> BANDEQOP .)
    MULTOP          reduce using rule 20 (assignment_operator -> BANDEQOP .)
    BANDOP          reduce using rule 20 (assignment_operator -> BANDEQOP .)
    PLUSOP          reduce using rule 20 (assignment_operator -> BANDEQOP .)
    MINUSOP         reduce using rule 20 (assignment_operator -> BANDEQOP .)
    NOTSYM          reduce using rule 20 (assignment_operator -> BANDEQOP .)
    BNOP            reduce using rule 20 (assignment_operator -> BANDEQOP .)
    DOUBLECOLON     reduce using rule 20 (assignment_operator -> BANDEQOP .)
    NEW             reduce using rule 20 (assignment_operator -> BANDEQOP .)
    DELETE          reduce using rule 20 (assignment_operator -> BANDEQOP .)
    THIS            reduce using rule 20 (assignment_operator -> BANDEQOP .)
    LPAREN          reduce using rule 20 (assignment_operator -> BANDEQOP .)
    CHAR            reduce using rule 20 (assignment_operator -> BANDEQOP .)
    SHORT           reduce using rule 20 (assignment_operator -> BANDEQOP .)
    INT             reduce using rule 20 (assignment_operator -> BANDEQOP .)
    LONG            reduce using rule 20 (assignment_operator -> BANDEQOP .)
    SIGNED          reduce using rule 20 (assignment_operator -> BANDEQOP .)
    UNSIGNED        reduce using rule 20 (assignment_operator -> BANDEQOP .)
    FLOAT           reduce using rule 20 (assignment_operator -> BANDEQOP .)
    DOUBLE          reduce using rule 20 (assignment_operator -> BANDEQOP .)
    VOID            reduce using rule 20 (assignment_operator -> BANDEQOP .)
    NUMBER          reduce using rule 20 (assignment_operator -> BANDEQOP .)
    STRING          reduce using rule 20 (assignment_operator -> BANDEQOP .)
    IDENTIFIER      reduce using rule 20 (assignment_operator -> BANDEQOP .)
    OPERATOR        reduce using rule 20 (assignment_operator -> BANDEQOP .)


state 130

    (21) assignment_operator -> B_E_OR .

    DPLUSOP         reduce using rule 21 (assignment_operator -> B_E_OR .)
    DMINUSOP        reduce using rule 21 (assignment_operator -> B_E_OR .)
    SIZEOF          reduce using rule 21 (assignment_operator -> B_E_OR .)
    MULTOP          reduce using rule 21 (assignment_operator -> B_E_OR .)
    BANDOP          reduce using rule 21 (assignment_operator -> B_E_OR .)
    PLUSOP          reduce using rule 21 (assignment_operator -> B_E_OR .)
    MINUSOP         reduce using rule 21 (assignment_operator -> B_E_OR .)
    NOTSYM          reduce using rule 21 (assignment_operator -> B_E_OR .)
    BNOP            reduce using rule 21 (assignment_operator -> B_E_OR .)
    DOUBLECOLON     reduce using rule 21 (assignment_operator -> B_E_OR .)
    NEW             reduce using rule 21 (assignment_operator -> B_E_OR .)
    DELETE          reduce using rule 21 (assignment_operator -> B_E_OR .)
    THIS            reduce using rule 21 (assignment_operator -> B_E_OR .)
    LPAREN          reduce using rule 21 (assignment_operator -> B_E_OR .)
    CHAR            reduce using rule 21 (assignment_operator -> B_E_OR .)
    SHORT           reduce using rule 21 (assignment_operator -> B_E_OR .)
    INT             reduce using rule 21 (assignment_operator -> B_E_OR .)
    LONG            reduce using rule 21 (assignment_operator -> B_E_OR .)
    SIGNED          reduce using rule 21 (assignment_operator -> B_E_OR .)
    UNSIGNED        reduce using rule 21 (assignment_operator -> B_E_OR .)
    FLOAT           reduce using rule 21 (assignment_operator -> B_E_OR .)
    DOUBLE          reduce using rule 21 (assignment_operator -> B_E_OR .)
    VOID            reduce using rule 21 (assignment_operator -> B_E_OR .)
    NUMBER          reduce using rule 21 (assignment_operator -> B_E_OR .)
    STRING          reduce using rule 21 (assignment_operator -> B_E_OR .)
    IDENTIFIER      reduce using rule 21 (assignment_operator -> B_E_OR .)
    OPERATOR        reduce using rule 21 (assignment_operator -> B_E_OR .)


state 131

    (22) assignment_operator -> BOREQOP .

    DPLUSOP         reduce using rule 22 (assignment_operator -> BOREQOP .)
    DMINUSOP        reduce using rule 22 (assignment_operator -> BOREQOP .)
    SIZEOF          reduce using rule 22 (assignment_operator -> BOREQOP .)
    MULTOP          reduce using rule 22 (assignment_operator -> BOREQOP .)
    BANDOP          reduce using rule 22 (assignment_operator -> BOREQOP .)
    PLUSOP          reduce using rule 22 (assignment_operator -> BOREQOP .)
    MINUSOP         reduce using rule 22 (assignment_operator -> BOREQOP .)
    NOTSYM          reduce using rule 22 (assignment_operator -> BOREQOP .)
    BNOP            reduce using rule 22 (assignment_operator -> BOREQOP .)
    DOUBLECOLON     reduce using rule 22 (assignment_operator -> BOREQOP .)
    NEW             reduce using rule 22 (assignment_operator -> BOREQOP .)
    DELETE          reduce using rule 22 (assignment_operator -> BOREQOP .)
    THIS            reduce using rule 22 (assignment_operator -> BOREQOP .)
    LPAREN          reduce using rule 22 (assignment_operator -> BOREQOP .)
    CHAR            reduce using rule 22 (assignment_operator -> BOREQOP .)
    SHORT           reduce using rule 22 (assignment_operator -> BOREQOP .)
    INT             reduce using rule 22 (assignment_operator -> BOREQOP .)
    LONG            reduce using rule 22 (assignment_operator -> BOREQOP .)
    SIGNED          reduce using rule 22 (assignment_operator -> BOREQOP .)
    UNSIGNED        reduce using rule 22 (assignment_operator -> BOREQOP .)
    FLOAT           reduce using rule 22 (assignment_operator -> BOREQOP .)
    DOUBLE          reduce using rule 22 (assignment_operator -> BOREQOP .)
    VOID            reduce using rule 22 (assignment_operator -> BOREQOP .)
    NUMBER          reduce using rule 22 (assignment_operator -> BOREQOP .)
    STRING          reduce using rule 22 (assignment_operator -> BOREQOP .)
    IDENTIFIER      reduce using rule 22 (assignment_operator -> BOREQOP .)
    OPERATOR        reduce using rule 22 (assignment_operator -> BOREQOP .)


state 132

    (355) labeled_statement -> IDENTIFIER COLON . statement
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 153
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    statement                      shift and go to state 325
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    expression                     shift and go to state 154
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 133

    (356) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 326


state 134

    (190) constant_expression -> conditional_expression .

    COLON           reduce using rule 190 (constant_expression -> conditional_expression .)
    RSPAREN         reduce using rule 190 (constant_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 190 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 190 (constant_expression -> conditional_expression .)
    RCPAREN         reduce using rule 190 (constant_expression -> conditional_expression .)


state 135

    (67) unary_operator -> BANDOP .

    LPAREN          reduce using rule 67 (unary_operator -> BANDOP .)
    DPLUSOP         reduce using rule 67 (unary_operator -> BANDOP .)
    DMINUSOP        reduce using rule 67 (unary_operator -> BANDOP .)
    SIZEOF          reduce using rule 67 (unary_operator -> BANDOP .)
    MULTOP          reduce using rule 67 (unary_operator -> BANDOP .)
    BANDOP          reduce using rule 67 (unary_operator -> BANDOP .)
    PLUSOP          reduce using rule 67 (unary_operator -> BANDOP .)
    MINUSOP         reduce using rule 67 (unary_operator -> BANDOP .)
    NOTSYM          reduce using rule 67 (unary_operator -> BANDOP .)
    BNOP            reduce using rule 67 (unary_operator -> BANDOP .)
    DOUBLECOLON     reduce using rule 67 (unary_operator -> BANDOP .)
    NEW             reduce using rule 67 (unary_operator -> BANDOP .)
    DELETE          reduce using rule 67 (unary_operator -> BANDOP .)
    THIS            reduce using rule 67 (unary_operator -> BANDOP .)
    CHAR            reduce using rule 67 (unary_operator -> BANDOP .)
    SHORT           reduce using rule 67 (unary_operator -> BANDOP .)
    INT             reduce using rule 67 (unary_operator -> BANDOP .)
    LONG            reduce using rule 67 (unary_operator -> BANDOP .)
    SIGNED          reduce using rule 67 (unary_operator -> BANDOP .)
    UNSIGNED        reduce using rule 67 (unary_operator -> BANDOP .)
    FLOAT           reduce using rule 67 (unary_operator -> BANDOP .)
    DOUBLE          reduce using rule 67 (unary_operator -> BANDOP .)
    VOID            reduce using rule 67 (unary_operator -> BANDOP .)
    NUMBER          reduce using rule 67 (unary_operator -> BANDOP .)
    STRING          reduce using rule 67 (unary_operator -> BANDOP .)
    IDENTIFIER      reduce using rule 67 (unary_operator -> BANDOP .)
    OPERATOR        reduce using rule 67 (unary_operator -> BANDOP .)


state 136

    (66) unary_operator -> MULTOP .

    LPAREN          reduce using rule 66 (unary_operator -> MULTOP .)
    DPLUSOP         reduce using rule 66 (unary_operator -> MULTOP .)
    DMINUSOP        reduce using rule 66 (unary_operator -> MULTOP .)
    SIZEOF          reduce using rule 66 (unary_operator -> MULTOP .)
    MULTOP          reduce using rule 66 (unary_operator -> MULTOP .)
    BANDOP          reduce using rule 66 (unary_operator -> MULTOP .)
    PLUSOP          reduce using rule 66 (unary_operator -> MULTOP .)
    MINUSOP         reduce using rule 66 (unary_operator -> MULTOP .)
    NOTSYM          reduce using rule 66 (unary_operator -> MULTOP .)
    BNOP            reduce using rule 66 (unary_operator -> MULTOP .)
    DOUBLECOLON     reduce using rule 66 (unary_operator -> MULTOP .)
    NEW             reduce using rule 66 (unary_operator -> MULTOP .)
    DELETE          reduce using rule 66 (unary_operator -> MULTOP .)
    THIS            reduce using rule 66 (unary_operator -> MULTOP .)
    CHAR            reduce using rule 66 (unary_operator -> MULTOP .)
    SHORT           reduce using rule 66 (unary_operator -> MULTOP .)
    INT             reduce using rule 66 (unary_operator -> MULTOP .)
    LONG            reduce using rule 66 (unary_operator -> MULTOP .)
    SIGNED          reduce using rule 66 (unary_operator -> MULTOP .)
    UNSIGNED        reduce using rule 66 (unary_operator -> MULTOP .)
    FLOAT           reduce using rule 66 (unary_operator -> MULTOP .)
    DOUBLE          reduce using rule 66 (unary_operator -> MULTOP .)
    VOID            reduce using rule 66 (unary_operator -> MULTOP .)
    NUMBER          reduce using rule 66 (unary_operator -> MULTOP .)
    STRING          reduce using rule 66 (unary_operator -> MULTOP .)
    IDENTIFIER      reduce using rule 66 (unary_operator -> MULTOP .)
    OPERATOR        reduce using rule 66 (unary_operator -> MULTOP .)


state 137

    (56) cast_expression -> unary_expression .

    DOTSTAR         reduce using rule 56 (cast_expression -> unary_expression .)
    ARROWSTAR       reduce using rule 56 (cast_expression -> unary_expression .)
    MULTOP          reduce using rule 56 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 56 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 56 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 56 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 56 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 56 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 56 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 56 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 56 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 56 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 56 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 56 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 56 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 56 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 56 (cast_expression -> unary_expression .)
    OROP            reduce using rule 56 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 56 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 56 (cast_expression -> unary_expression .)
    COLON           reduce using rule 56 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 56 (cast_expression -> unary_expression .)
    MULTEQOP        reduce using rule 56 (cast_expression -> unary_expression .)
    DIVEQOP         reduce using rule 56 (cast_expression -> unary_expression .)
    MODEQOP         reduce using rule 56 (cast_expression -> unary_expression .)
    PLUSEQOP        reduce using rule 56 (cast_expression -> unary_expression .)
    MINUSEQOP       reduce using rule 56 (cast_expression -> unary_expression .)
    LSHIFTEQOP      reduce using rule 56 (cast_expression -> unary_expression .)
    RSHIFTEQOP      reduce using rule 56 (cast_expression -> unary_expression .)
    BANDEQOP        reduce using rule 56 (cast_expression -> unary_expression .)
    B_E_OR          reduce using rule 56 (cast_expression -> unary_expression .)
    BOREQOP         reduce using rule 56 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 56 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 56 (cast_expression -> unary_expression .)
    $end            reduce using rule 56 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 56 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 56 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 56 (cast_expression -> unary_expression .)


state 138

    (57) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (124) primary_expression -> LPAREN . expression RPAREN
    (223) type_name -> . type_specifier_list abstract_declarator
    (224) type_name -> . type_specifier_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 328
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    IDENTIFIER      shift and go to state 327
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    OPERATOR        shift and go to state 105

    type_name                      shift and go to state 165
    cast_expression                shift and go to state 39
    expression                     shift and go to state 163
    type_specifier_list            shift and go to state 166
    assignment_expression          shift and go to state 6
    type_specifier                 shift and go to state 171
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    simple_type_name               shift and go to state 173
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    name                           shift and go to state 140
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 139

    (111) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (112) postfix_expression -> simple_type_name . LPAREN RPAREN

    LPAREN          shift and go to state 215


state 140

    (125) primary_expression -> name .

    LSPAREN         reduce using rule 125 (primary_expression -> name .)
    LPAREN          reduce using rule 125 (primary_expression -> name .)
    DOT             reduce using rule 125 (primary_expression -> name .)
    ARROW           reduce using rule 125 (primary_expression -> name .)
    DPLUSOP         reduce using rule 125 (primary_expression -> name .)
    DMINUSOP        reduce using rule 125 (primary_expression -> name .)
    DOTSTAR         reduce using rule 125 (primary_expression -> name .)
    ARROWSTAR       reduce using rule 125 (primary_expression -> name .)
    MULTOP          reduce using rule 125 (primary_expression -> name .)
    DIVOP           reduce using rule 125 (primary_expression -> name .)
    MODOP           reduce using rule 125 (primary_expression -> name .)
    PLUSOP          reduce using rule 125 (primary_expression -> name .)
    MINUSOP         reduce using rule 125 (primary_expression -> name .)
    LSHIFT          reduce using rule 125 (primary_expression -> name .)
    RSHIFT          reduce using rule 125 (primary_expression -> name .)
    LTCOMP          reduce using rule 125 (primary_expression -> name .)
    GTCOMP          reduce using rule 125 (primary_expression -> name .)
    LTECOMP         reduce using rule 125 (primary_expression -> name .)
    GTECOMP         reduce using rule 125 (primary_expression -> name .)
    EQCOMP          reduce using rule 125 (primary_expression -> name .)
    NEQCOMP         reduce using rule 125 (primary_expression -> name .)
    BANDOP          reduce using rule 125 (primary_expression -> name .)
    XOROP           reduce using rule 125 (primary_expression -> name .)
    OROP            reduce using rule 125 (primary_expression -> name .)
    ANDOP           reduce using rule 125 (primary_expression -> name .)
    QUESMARK        reduce using rule 125 (primary_expression -> name .)
    COLON           reduce using rule 125 (primary_expression -> name .)
    EQUAL           reduce using rule 125 (primary_expression -> name .)
    MULTEQOP        reduce using rule 125 (primary_expression -> name .)
    DIVEQOP         reduce using rule 125 (primary_expression -> name .)
    MODEQOP         reduce using rule 125 (primary_expression -> name .)
    PLUSEQOP        reduce using rule 125 (primary_expression -> name .)
    MINUSEQOP       reduce using rule 125 (primary_expression -> name .)
    LSHIFTEQOP      reduce using rule 125 (primary_expression -> name .)
    RSHIFTEQOP      reduce using rule 125 (primary_expression -> name .)
    BANDEQOP        reduce using rule 125 (primary_expression -> name .)
    B_E_OR          reduce using rule 125 (primary_expression -> name .)
    BOREQOP         reduce using rule 125 (primary_expression -> name .)
    SEMICOLON       reduce using rule 125 (primary_expression -> name .)
    COMMA           reduce using rule 125 (primary_expression -> name .)
    $end            reduce using rule 125 (primary_expression -> name .)
    RPAREN          reduce using rule 125 (primary_expression -> name .)
    RSPAREN         reduce using rule 125 (primary_expression -> name .)
    RCPAREN         reduce using rule 125 (primary_expression -> name .)


state 141

    (71) unary_operator -> BNOP .
    (129) name -> BNOP . class_name
    (5) class_name -> . IDENTIFIER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LPAREN          reduce using rule 71 (unary_operator -> BNOP .)
    DPLUSOP         reduce using rule 71 (unary_operator -> BNOP .)
    DMINUSOP        reduce using rule 71 (unary_operator -> BNOP .)
    SIZEOF          reduce using rule 71 (unary_operator -> BNOP .)
    MULTOP          reduce using rule 71 (unary_operator -> BNOP .)
    BANDOP          reduce using rule 71 (unary_operator -> BNOP .)
    PLUSOP          reduce using rule 71 (unary_operator -> BNOP .)
    MINUSOP         reduce using rule 71 (unary_operator -> BNOP .)
    NOTSYM          reduce using rule 71 (unary_operator -> BNOP .)
    BNOP            reduce using rule 71 (unary_operator -> BNOP .)
    DOUBLECOLON     reduce using rule 71 (unary_operator -> BNOP .)
    NEW             reduce using rule 71 (unary_operator -> BNOP .)
    DELETE          reduce using rule 71 (unary_operator -> BNOP .)
    THIS            reduce using rule 71 (unary_operator -> BNOP .)
    CHAR            reduce using rule 71 (unary_operator -> BNOP .)
    SHORT           reduce using rule 71 (unary_operator -> BNOP .)
    INT             reduce using rule 71 (unary_operator -> BNOP .)
    LONG            reduce using rule 71 (unary_operator -> BNOP .)
    SIGNED          reduce using rule 71 (unary_operator -> BNOP .)
    UNSIGNED        reduce using rule 71 (unary_operator -> BNOP .)
    FLOAT           reduce using rule 71 (unary_operator -> BNOP .)
    DOUBLE          reduce using rule 71 (unary_operator -> BNOP .)
    VOID            reduce using rule 71 (unary_operator -> BNOP .)
    NUMBER          reduce using rule 71 (unary_operator -> BNOP .)
    STRING          reduce using rule 71 (unary_operator -> BNOP .)
    OPERATOR        reduce using rule 71 (unary_operator -> BNOP .)
    IDENTIFIER      shift and go to state 222

  ! IDENTIFIER      [ reduce using rule 71 (unary_operator -> BNOP .) ]

    class_name                     shift and go to state 329

state 142

    (126) name -> IDENTIFIER .
    (7) typedef_name -> IDENTIFIER .
    (5) class_name -> IDENTIFIER .

  ! reduce/reduce conflict for LPAREN resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 7 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (class_name -> IDENTIFIER .)
    DOT             reduce using rule 126 (name -> IDENTIFIER .)
    ARROW           reduce using rule 126 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 126 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 126 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 126 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 126 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 126 (name -> IDENTIFIER .)
    MODOP           reduce using rule 126 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 126 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 126 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 126 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 126 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 126 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 126 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 126 (name -> IDENTIFIER .)
    XOROP           reduce using rule 126 (name -> IDENTIFIER .)
    OROP            reduce using rule 126 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 126 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 126 (name -> IDENTIFIER .)
    COLON           reduce using rule 126 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 126 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 126 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 126 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 126 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 126 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    B_E_OR          reduce using rule 126 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 126 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 126 (name -> IDENTIFIER .)
    $end            reduce using rule 126 (name -> IDENTIFIER .)
    RSPAREN         reduce using rule 126 (name -> IDENTIFIER .)
    RCPAREN         reduce using rule 126 (name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 5 (class_name -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    CONST           reduce using rule 5 (class_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 5 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 5 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 5 (class_name -> IDENTIFIER .)
    INT             reduce using rule 5 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 5 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 5 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 5 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 5 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 5 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 5 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 5 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (class_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    EQUAL           reduce using rule 5 (class_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 5 (class_name -> IDENTIFIER .)
    BNOP            reduce using rule 5 (class_name -> IDENTIFIER .)
    AUTO            reduce using rule 5 (class_name -> IDENTIFIER .)
    STATIC          reduce using rule 5 (class_name -> IDENTIFIER .)
    EXTERN          reduce using rule 5 (class_name -> IDENTIFIER .)
    INLINE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 5 (class_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 5 (class_name -> IDENTIFIER .)
    COMMA           reduce using rule 5 (class_name -> IDENTIFIER .)

  ! LSPAREN         [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]


state 143

    (159) simple_type_name -> complete_class_name .

    LPAREN          reduce using rule 159 (simple_type_name -> complete_class_name .)
    CONST           reduce using rule 159 (simple_type_name -> complete_class_name .)
    VOLATILE        reduce using rule 159 (simple_type_name -> complete_class_name .)
    CHAR            reduce using rule 159 (simple_type_name -> complete_class_name .)
    SHORT           reduce using rule 159 (simple_type_name -> complete_class_name .)
    INT             reduce using rule 159 (simple_type_name -> complete_class_name .)
    LONG            reduce using rule 159 (simple_type_name -> complete_class_name .)
    SIGNED          reduce using rule 159 (simple_type_name -> complete_class_name .)
    UNSIGNED        reduce using rule 159 (simple_type_name -> complete_class_name .)
    FLOAT           reduce using rule 159 (simple_type_name -> complete_class_name .)
    DOUBLE          reduce using rule 159 (simple_type_name -> complete_class_name .)
    VOID            reduce using rule 159 (simple_type_name -> complete_class_name .)
    ENUM            reduce using rule 159 (simple_type_name -> complete_class_name .)
    DOUBLECOLON     reduce using rule 159 (simple_type_name -> complete_class_name .)
    CLASS           reduce using rule 159 (simple_type_name -> complete_class_name .)
    STRUCT          reduce using rule 159 (simple_type_name -> complete_class_name .)
    UNION           reduce using rule 159 (simple_type_name -> complete_class_name .)
    IDENTIFIER      reduce using rule 159 (simple_type_name -> complete_class_name .)
    MULTOP          reduce using rule 159 (simple_type_name -> complete_class_name .)
    LSPAREN         reduce using rule 159 (simple_type_name -> complete_class_name .)
    EQUAL           reduce using rule 159 (simple_type_name -> complete_class_name .)
    MULTEQOP        reduce using rule 159 (simple_type_name -> complete_class_name .)
    DIVEQOP         reduce using rule 159 (simple_type_name -> complete_class_name .)
    MODEQOP         reduce using rule 159 (simple_type_name -> complete_class_name .)
    PLUSEQOP        reduce using rule 159 (simple_type_name -> complete_class_name .)
    MINUSEQOP       reduce using rule 159 (simple_type_name -> complete_class_name .)
    LSHIFTEQOP      reduce using rule 159 (simple_type_name -> complete_class_name .)
    RSHIFTEQOP      reduce using rule 159 (simple_type_name -> complete_class_name .)
    BANDEQOP        reduce using rule 159 (simple_type_name -> complete_class_name .)
    B_E_OR          reduce using rule 159 (simple_type_name -> complete_class_name .)
    BOREQOP         reduce using rule 159 (simple_type_name -> complete_class_name .)
    DOTSTAR         reduce using rule 159 (simple_type_name -> complete_class_name .)
    ARROWSTAR       reduce using rule 159 (simple_type_name -> complete_class_name .)
    DIVOP           reduce using rule 159 (simple_type_name -> complete_class_name .)
    MODOP           reduce using rule 159 (simple_type_name -> complete_class_name .)
    PLUSOP          reduce using rule 159 (simple_type_name -> complete_class_name .)
    MINUSOP         reduce using rule 159 (simple_type_name -> complete_class_name .)
    LSHIFT          reduce using rule 159 (simple_type_name -> complete_class_name .)
    RSHIFT          reduce using rule 159 (simple_type_name -> complete_class_name .)
    LTCOMP          reduce using rule 159 (simple_type_name -> complete_class_name .)
    GTCOMP          reduce using rule 159 (simple_type_name -> complete_class_name .)
    LTECOMP         reduce using rule 159 (simple_type_name -> complete_class_name .)
    GTECOMP         reduce using rule 159 (simple_type_name -> complete_class_name .)
    EQCOMP          reduce using rule 159 (simple_type_name -> complete_class_name .)
    NEQCOMP         reduce using rule 159 (simple_type_name -> complete_class_name .)
    BANDOP          reduce using rule 159 (simple_type_name -> complete_class_name .)
    XOROP           reduce using rule 159 (simple_type_name -> complete_class_name .)
    OROP            reduce using rule 159 (simple_type_name -> complete_class_name .)
    ANDOP           reduce using rule 159 (simple_type_name -> complete_class_name .)
    QUESMARK        reduce using rule 159 (simple_type_name -> complete_class_name .)
    COMMA           reduce using rule 159 (simple_type_name -> complete_class_name .)
    SEMICOLON       reduce using rule 159 (simple_type_name -> complete_class_name .)
    $end            reduce using rule 159 (simple_type_name -> complete_class_name .)
    COLON           reduce using rule 159 (simple_type_name -> complete_class_name .)
    RPAREN          reduce using rule 159 (simple_type_name -> complete_class_name .)
    RSPAREN         reduce using rule 159 (simple_type_name -> complete_class_name .)
    RCPAREN         reduce using rule 159 (simple_type_name -> complete_class_name .)
    DOT             reduce using rule 159 (simple_type_name -> complete_class_name .)
    ARROW           reduce using rule 159 (simple_type_name -> complete_class_name .)
    DPLUSOP         reduce using rule 159 (simple_type_name -> complete_class_name .)
    DMINUSOP        reduce using rule 159 (simple_type_name -> complete_class_name .)
    LCPAREN         reduce using rule 159 (simple_type_name -> complete_class_name .)
    BNOP            reduce using rule 159 (simple_type_name -> complete_class_name .)
    OPERATOR        reduce using rule 159 (simple_type_name -> complete_class_name .)
    TYPEDEF         reduce using rule 159 (simple_type_name -> complete_class_name .)
    AUTO            reduce using rule 159 (simple_type_name -> complete_class_name .)
    STATIC          reduce using rule 159 (simple_type_name -> complete_class_name .)
    EXTERN          reduce using rule 159 (simple_type_name -> complete_class_name .)
    INLINE          reduce using rule 159 (simple_type_name -> complete_class_name .)
    VIRTUAL         reduce using rule 159 (simple_type_name -> complete_class_name .)


state 144

    (160) simple_type_name -> qualified_type_name .

    LPAREN          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    CONST           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    VOLATILE        reduce using rule 160 (simple_type_name -> qualified_type_name .)
    CHAR            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    SHORT           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    INT             reduce using rule 160 (simple_type_name -> qualified_type_name .)
    LONG            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    SIGNED          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    UNSIGNED        reduce using rule 160 (simple_type_name -> qualified_type_name .)
    FLOAT           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    DOUBLE          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    VOID            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    ENUM            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    DOUBLECOLON     reduce using rule 160 (simple_type_name -> qualified_type_name .)
    CLASS           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    STRUCT          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    UNION           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    IDENTIFIER      reduce using rule 160 (simple_type_name -> qualified_type_name .)
    MULTOP          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    LSPAREN         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    EQUAL           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    MULTEQOP        reduce using rule 160 (simple_type_name -> qualified_type_name .)
    DIVEQOP         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    MODEQOP         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    PLUSEQOP        reduce using rule 160 (simple_type_name -> qualified_type_name .)
    MINUSEQOP       reduce using rule 160 (simple_type_name -> qualified_type_name .)
    LSHIFTEQOP      reduce using rule 160 (simple_type_name -> qualified_type_name .)
    RSHIFTEQOP      reduce using rule 160 (simple_type_name -> qualified_type_name .)
    BANDEQOP        reduce using rule 160 (simple_type_name -> qualified_type_name .)
    B_E_OR          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    BOREQOP         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    DOTSTAR         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    ARROWSTAR       reduce using rule 160 (simple_type_name -> qualified_type_name .)
    DIVOP           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    MODOP           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    PLUSOP          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    MINUSOP         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    LSHIFT          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    RSHIFT          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    LTCOMP          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    GTCOMP          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    LTECOMP         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    GTECOMP         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    EQCOMP          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    NEQCOMP         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    BANDOP          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    XOROP           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    OROP            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    ANDOP           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    QUESMARK        reduce using rule 160 (simple_type_name -> qualified_type_name .)
    COMMA           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    SEMICOLON       reduce using rule 160 (simple_type_name -> qualified_type_name .)
    $end            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    COLON           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    RPAREN          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    RSPAREN         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    RCPAREN         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    DOT             reduce using rule 160 (simple_type_name -> qualified_type_name .)
    ARROW           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    DPLUSOP         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    DMINUSOP        reduce using rule 160 (simple_type_name -> qualified_type_name .)
    LCPAREN         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    BNOP            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    OPERATOR        reduce using rule 160 (simple_type_name -> qualified_type_name .)
    TYPEDEF         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    AUTO            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    STATIC          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    EXTERN          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    INLINE          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    VIRTUAL         reduce using rule 160 (simple_type_name -> qualified_type_name .)


state 145

    (132) literal -> NUMBER .

    LSPAREN         reduce using rule 132 (literal -> NUMBER .)
    LPAREN          reduce using rule 132 (literal -> NUMBER .)
    DOT             reduce using rule 132 (literal -> NUMBER .)
    ARROW           reduce using rule 132 (literal -> NUMBER .)
    DPLUSOP         reduce using rule 132 (literal -> NUMBER .)
    DMINUSOP        reduce using rule 132 (literal -> NUMBER .)
    DOTSTAR         reduce using rule 132 (literal -> NUMBER .)
    ARROWSTAR       reduce using rule 132 (literal -> NUMBER .)
    MULTOP          reduce using rule 132 (literal -> NUMBER .)
    DIVOP           reduce using rule 132 (literal -> NUMBER .)
    MODOP           reduce using rule 132 (literal -> NUMBER .)
    PLUSOP          reduce using rule 132 (literal -> NUMBER .)
    MINUSOP         reduce using rule 132 (literal -> NUMBER .)
    LSHIFT          reduce using rule 132 (literal -> NUMBER .)
    RSHIFT          reduce using rule 132 (literal -> NUMBER .)
    LTCOMP          reduce using rule 132 (literal -> NUMBER .)
    GTCOMP          reduce using rule 132 (literal -> NUMBER .)
    LTECOMP         reduce using rule 132 (literal -> NUMBER .)
    GTECOMP         reduce using rule 132 (literal -> NUMBER .)
    EQCOMP          reduce using rule 132 (literal -> NUMBER .)
    NEQCOMP         reduce using rule 132 (literal -> NUMBER .)
    BANDOP          reduce using rule 132 (literal -> NUMBER .)
    XOROP           reduce using rule 132 (literal -> NUMBER .)
    OROP            reduce using rule 132 (literal -> NUMBER .)
    ANDOP           reduce using rule 132 (literal -> NUMBER .)
    QUESMARK        reduce using rule 132 (literal -> NUMBER .)
    COLON           reduce using rule 132 (literal -> NUMBER .)
    EQUAL           reduce using rule 132 (literal -> NUMBER .)
    MULTEQOP        reduce using rule 132 (literal -> NUMBER .)
    DIVEQOP         reduce using rule 132 (literal -> NUMBER .)
    MODEQOP         reduce using rule 132 (literal -> NUMBER .)
    PLUSEQOP        reduce using rule 132 (literal -> NUMBER .)
    MINUSEQOP       reduce using rule 132 (literal -> NUMBER .)
    LSHIFTEQOP      reduce using rule 132 (literal -> NUMBER .)
    RSHIFTEQOP      reduce using rule 132 (literal -> NUMBER .)
    BANDEQOP        reduce using rule 132 (literal -> NUMBER .)
    B_E_OR          reduce using rule 132 (literal -> NUMBER .)
    BOREQOP         reduce using rule 132 (literal -> NUMBER .)
    SEMICOLON       reduce using rule 132 (literal -> NUMBER .)
    COMMA           reduce using rule 132 (literal -> NUMBER .)
    RPAREN          reduce using rule 132 (literal -> NUMBER .)
    $end            reduce using rule 132 (literal -> NUMBER .)
    RSPAREN         reduce using rule 132 (literal -> NUMBER .)
    RCPAREN         reduce using rule 132 (literal -> NUMBER .)


state 146

    (134) literal -> STRING .

    LSPAREN         reduce using rule 134 (literal -> STRING .)
    LPAREN          reduce using rule 134 (literal -> STRING .)
    DOT             reduce using rule 134 (literal -> STRING .)
    ARROW           reduce using rule 134 (literal -> STRING .)
    DPLUSOP         reduce using rule 134 (literal -> STRING .)
    DMINUSOP        reduce using rule 134 (literal -> STRING .)
    DOTSTAR         reduce using rule 134 (literal -> STRING .)
    ARROWSTAR       reduce using rule 134 (literal -> STRING .)
    MULTOP          reduce using rule 134 (literal -> STRING .)
    DIVOP           reduce using rule 134 (literal -> STRING .)
    MODOP           reduce using rule 134 (literal -> STRING .)
    PLUSOP          reduce using rule 134 (literal -> STRING .)
    MINUSOP         reduce using rule 134 (literal -> STRING .)
    LSHIFT          reduce using rule 134 (literal -> STRING .)
    RSHIFT          reduce using rule 134 (literal -> STRING .)
    LTCOMP          reduce using rule 134 (literal -> STRING .)
    GTCOMP          reduce using rule 134 (literal -> STRING .)
    LTECOMP         reduce using rule 134 (literal -> STRING .)
    GTECOMP         reduce using rule 134 (literal -> STRING .)
    EQCOMP          reduce using rule 134 (literal -> STRING .)
    NEQCOMP         reduce using rule 134 (literal -> STRING .)
    BANDOP          reduce using rule 134 (literal -> STRING .)
    XOROP           reduce using rule 134 (literal -> STRING .)
    OROP            reduce using rule 134 (literal -> STRING .)
    ANDOP           reduce using rule 134 (literal -> STRING .)
    QUESMARK        reduce using rule 134 (literal -> STRING .)
    COLON           reduce using rule 134 (literal -> STRING .)
    EQUAL           reduce using rule 134 (literal -> STRING .)
    MULTEQOP        reduce using rule 134 (literal -> STRING .)
    DIVEQOP         reduce using rule 134 (literal -> STRING .)
    MODEQOP         reduce using rule 134 (literal -> STRING .)
    PLUSEQOP        reduce using rule 134 (literal -> STRING .)
    MINUSEQOP       reduce using rule 134 (literal -> STRING .)
    LSHIFTEQOP      reduce using rule 134 (literal -> STRING .)
    RSHIFTEQOP      reduce using rule 134 (literal -> STRING .)
    BANDEQOP        reduce using rule 134 (literal -> STRING .)
    B_E_OR          reduce using rule 134 (literal -> STRING .)
    BOREQOP         reduce using rule 134 (literal -> STRING .)
    SEMICOLON       reduce using rule 134 (literal -> STRING .)
    COMMA           reduce using rule 134 (literal -> STRING .)
    RPAREN          reduce using rule 134 (literal -> STRING .)
    $end            reduce using rule 134 (literal -> STRING .)
    RSPAREN         reduce using rule 134 (literal -> STRING .)
    RCPAREN         reduce using rule 134 (literal -> STRING .)


state 147

    (177) qualified_type_name -> class_name . DOUBLECOLON qualified_type_name
    (180) qualified_class_name -> class_name .
    (181) qualified_class_name -> class_name . DOUBLECOLON qualified_class_name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    DOUBLECOLON     shift and go to state 256
    LPAREN          reduce using rule 180 (qualified_class_name -> class_name .)
    CONST           reduce using rule 180 (qualified_class_name -> class_name .)
    VOLATILE        reduce using rule 180 (qualified_class_name -> class_name .)
    CHAR            reduce using rule 180 (qualified_class_name -> class_name .)
    SHORT           reduce using rule 180 (qualified_class_name -> class_name .)
    INT             reduce using rule 180 (qualified_class_name -> class_name .)
    LONG            reduce using rule 180 (qualified_class_name -> class_name .)
    SIGNED          reduce using rule 180 (qualified_class_name -> class_name .)
    UNSIGNED        reduce using rule 180 (qualified_class_name -> class_name .)
    FLOAT           reduce using rule 180 (qualified_class_name -> class_name .)
    DOUBLE          reduce using rule 180 (qualified_class_name -> class_name .)
    VOID            reduce using rule 180 (qualified_class_name -> class_name .)
    ENUM            reduce using rule 180 (qualified_class_name -> class_name .)
    CLASS           reduce using rule 180 (qualified_class_name -> class_name .)
    STRUCT          reduce using rule 180 (qualified_class_name -> class_name .)
    UNION           reduce using rule 180 (qualified_class_name -> class_name .)
    IDENTIFIER      reduce using rule 180 (qualified_class_name -> class_name .)
    MULTOP          reduce using rule 180 (qualified_class_name -> class_name .)
    LSPAREN         reduce using rule 180 (qualified_class_name -> class_name .)
    EQUAL           reduce using rule 180 (qualified_class_name -> class_name .)
    MULTEQOP        reduce using rule 180 (qualified_class_name -> class_name .)
    DIVEQOP         reduce using rule 180 (qualified_class_name -> class_name .)
    MODEQOP         reduce using rule 180 (qualified_class_name -> class_name .)
    PLUSEQOP        reduce using rule 180 (qualified_class_name -> class_name .)
    MINUSEQOP       reduce using rule 180 (qualified_class_name -> class_name .)
    LSHIFTEQOP      reduce using rule 180 (qualified_class_name -> class_name .)
    RSHIFTEQOP      reduce using rule 180 (qualified_class_name -> class_name .)
    BANDEQOP        reduce using rule 180 (qualified_class_name -> class_name .)
    B_E_OR          reduce using rule 180 (qualified_class_name -> class_name .)
    BOREQOP         reduce using rule 180 (qualified_class_name -> class_name .)
    DOTSTAR         reduce using rule 180 (qualified_class_name -> class_name .)
    ARROWSTAR       reduce using rule 180 (qualified_class_name -> class_name .)
    DIVOP           reduce using rule 180 (qualified_class_name -> class_name .)
    MODOP           reduce using rule 180 (qualified_class_name -> class_name .)
    PLUSOP          reduce using rule 180 (qualified_class_name -> class_name .)
    MINUSOP         reduce using rule 180 (qualified_class_name -> class_name .)
    LSHIFT          reduce using rule 180 (qualified_class_name -> class_name .)
    RSHIFT          reduce using rule 180 (qualified_class_name -> class_name .)
    LTCOMP          reduce using rule 180 (qualified_class_name -> class_name .)
    GTCOMP          reduce using rule 180 (qualified_class_name -> class_name .)
    LTECOMP         reduce using rule 180 (qualified_class_name -> class_name .)
    GTECOMP         reduce using rule 180 (qualified_class_name -> class_name .)
    EQCOMP          reduce using rule 180 (qualified_class_name -> class_name .)
    NEQCOMP         reduce using rule 180 (qualified_class_name -> class_name .)
    BANDOP          reduce using rule 180 (qualified_class_name -> class_name .)
    XOROP           reduce using rule 180 (qualified_class_name -> class_name .)
    OROP            reduce using rule 180 (qualified_class_name -> class_name .)
    ANDOP           reduce using rule 180 (qualified_class_name -> class_name .)
    QUESMARK        reduce using rule 180 (qualified_class_name -> class_name .)
    COMMA           reduce using rule 180 (qualified_class_name -> class_name .)
    SEMICOLON       reduce using rule 180 (qualified_class_name -> class_name .)
    $end            reduce using rule 180 (qualified_class_name -> class_name .)
    COLON           reduce using rule 180 (qualified_class_name -> class_name .)
    RPAREN          reduce using rule 180 (qualified_class_name -> class_name .)
    RSPAREN         reduce using rule 180 (qualified_class_name -> class_name .)
    RCPAREN         reduce using rule 180 (qualified_class_name -> class_name .)
    DOT             reduce using rule 180 (qualified_class_name -> class_name .)
    ARROW           reduce using rule 180 (qualified_class_name -> class_name .)
    DPLUSOP         reduce using rule 180 (qualified_class_name -> class_name .)
    DMINUSOP        reduce using rule 180 (qualified_class_name -> class_name .)
    LCPAREN         reduce using rule 180 (qualified_class_name -> class_name .)
    BNOP            reduce using rule 180 (qualified_class_name -> class_name .)
    OPERATOR        reduce using rule 180 (qualified_class_name -> class_name .)
    TYPEDEF         reduce using rule 180 (qualified_class_name -> class_name .)
    AUTO            reduce using rule 180 (qualified_class_name -> class_name .)
    STATIC          reduce using rule 180 (qualified_class_name -> class_name .)
    EXTERN          reduce using rule 180 (qualified_class_name -> class_name .)
    INLINE          reduce using rule 180 (qualified_class_name -> class_name .)
    VIRTUAL         reduce using rule 180 (qualified_class_name -> class_name .)

  ! DOUBLECOLON     [ reduce using rule 180 (qualified_class_name -> class_name .) ]


state 148

    (176) qualified_type_name -> typedef_name .

    LPAREN          reduce using rule 176 (qualified_type_name -> typedef_name .)
    CONST           reduce using rule 176 (qualified_type_name -> typedef_name .)
    VOLATILE        reduce using rule 176 (qualified_type_name -> typedef_name .)
    CHAR            reduce using rule 176 (qualified_type_name -> typedef_name .)
    SHORT           reduce using rule 176 (qualified_type_name -> typedef_name .)
    INT             reduce using rule 176 (qualified_type_name -> typedef_name .)
    LONG            reduce using rule 176 (qualified_type_name -> typedef_name .)
    SIGNED          reduce using rule 176 (qualified_type_name -> typedef_name .)
    UNSIGNED        reduce using rule 176 (qualified_type_name -> typedef_name .)
    FLOAT           reduce using rule 176 (qualified_type_name -> typedef_name .)
    DOUBLE          reduce using rule 176 (qualified_type_name -> typedef_name .)
    VOID            reduce using rule 176 (qualified_type_name -> typedef_name .)
    ENUM            reduce using rule 176 (qualified_type_name -> typedef_name .)
    DOUBLECOLON     reduce using rule 176 (qualified_type_name -> typedef_name .)
    CLASS           reduce using rule 176 (qualified_type_name -> typedef_name .)
    STRUCT          reduce using rule 176 (qualified_type_name -> typedef_name .)
    UNION           reduce using rule 176 (qualified_type_name -> typedef_name .)
    IDENTIFIER      reduce using rule 176 (qualified_type_name -> typedef_name .)
    MULTOP          reduce using rule 176 (qualified_type_name -> typedef_name .)
    LSPAREN         reduce using rule 176 (qualified_type_name -> typedef_name .)
    EQUAL           reduce using rule 176 (qualified_type_name -> typedef_name .)
    MULTEQOP        reduce using rule 176 (qualified_type_name -> typedef_name .)
    DIVEQOP         reduce using rule 176 (qualified_type_name -> typedef_name .)
    MODEQOP         reduce using rule 176 (qualified_type_name -> typedef_name .)
    PLUSEQOP        reduce using rule 176 (qualified_type_name -> typedef_name .)
    MINUSEQOP       reduce using rule 176 (qualified_type_name -> typedef_name .)
    LSHIFTEQOP      reduce using rule 176 (qualified_type_name -> typedef_name .)
    RSHIFTEQOP      reduce using rule 176 (qualified_type_name -> typedef_name .)
    BANDEQOP        reduce using rule 176 (qualified_type_name -> typedef_name .)
    B_E_OR          reduce using rule 176 (qualified_type_name -> typedef_name .)
    BOREQOP         reduce using rule 176 (qualified_type_name -> typedef_name .)
    DOTSTAR         reduce using rule 176 (qualified_type_name -> typedef_name .)
    ARROWSTAR       reduce using rule 176 (qualified_type_name -> typedef_name .)
    DIVOP           reduce using rule 176 (qualified_type_name -> typedef_name .)
    MODOP           reduce using rule 176 (qualified_type_name -> typedef_name .)
    PLUSOP          reduce using rule 176 (qualified_type_name -> typedef_name .)
    MINUSOP         reduce using rule 176 (qualified_type_name -> typedef_name .)
    LSHIFT          reduce using rule 176 (qualified_type_name -> typedef_name .)
    RSHIFT          reduce using rule 176 (qualified_type_name -> typedef_name .)
    LTCOMP          reduce using rule 176 (qualified_type_name -> typedef_name .)
    GTCOMP          reduce using rule 176 (qualified_type_name -> typedef_name .)
    LTECOMP         reduce using rule 176 (qualified_type_name -> typedef_name .)
    GTECOMP         reduce using rule 176 (qualified_type_name -> typedef_name .)
    EQCOMP          reduce using rule 176 (qualified_type_name -> typedef_name .)
    NEQCOMP         reduce using rule 176 (qualified_type_name -> typedef_name .)
    BANDOP          reduce using rule 176 (qualified_type_name -> typedef_name .)
    XOROP           reduce using rule 176 (qualified_type_name -> typedef_name .)
    OROP            reduce using rule 176 (qualified_type_name -> typedef_name .)
    ANDOP           reduce using rule 176 (qualified_type_name -> typedef_name .)
    QUESMARK        reduce using rule 176 (qualified_type_name -> typedef_name .)
    COMMA           reduce using rule 176 (qualified_type_name -> typedef_name .)
    SEMICOLON       reduce using rule 176 (qualified_type_name -> typedef_name .)
    $end            reduce using rule 176 (qualified_type_name -> typedef_name .)
    COLON           reduce using rule 176 (qualified_type_name -> typedef_name .)
    RPAREN          reduce using rule 176 (qualified_type_name -> typedef_name .)
    RSPAREN         reduce using rule 176 (qualified_type_name -> typedef_name .)
    RCPAREN         reduce using rule 176 (qualified_type_name -> typedef_name .)
    DOT             reduce using rule 176 (qualified_type_name -> typedef_name .)
    ARROW           reduce using rule 176 (qualified_type_name -> typedef_name .)
    DPLUSOP         reduce using rule 176 (qualified_type_name -> typedef_name .)
    DMINUSOP        reduce using rule 176 (qualified_type_name -> typedef_name .)
    LCPAREN         reduce using rule 176 (qualified_type_name -> typedef_name .)
    BNOP            reduce using rule 176 (qualified_type_name -> typedef_name .)
    OPERATOR        reduce using rule 176 (qualified_type_name -> typedef_name .)
    TYPEDEF         reduce using rule 176 (qualified_type_name -> typedef_name .)
    AUTO            reduce using rule 176 (qualified_type_name -> typedef_name .)
    STATIC          reduce using rule 176 (qualified_type_name -> typedef_name .)
    EXTERN          reduce using rule 176 (qualified_type_name -> typedef_name .)
    INLINE          reduce using rule 176 (qualified_type_name -> typedef_name .)
    VIRTUAL         reduce using rule 176 (qualified_type_name -> typedef_name .)


state 149

    (357) labeled_statement -> DEFAULT COLON . statement
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 153
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    statement                      shift and go to state 330
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    expression                     shift and go to state 154
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 150

    (360) compound_statement -> LCPAREN statement_list . RCPAREN
    (363) statement_list -> statement_list . statement
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 331
    IDENTIFIER      shift and go to state 153
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    statement                      shift and go to state 332
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    expression                     shift and go to state 154
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 151

    (361) compound_statement -> LCPAREN RCPAREN .

    $end            reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    CASE            reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    DEFAULT         reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    SEMICOLON       reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    IF              reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    SWITCH          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    WHILE           reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    DO              reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    FOR             reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    BREAK           reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    CONTINUE        reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    RETURN          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    GOTO            reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    TRY             reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    ASM             reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    EXTERN          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    SIZEOF          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    LPAREN          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    MULTOP          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    BANDOP          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    NOTSYM          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    BNOP            reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    DOUBLECOLON     reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    NEW             reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    DELETE          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    AUTO            reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    STATIC          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    CONST           reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    INLINE          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    THIS            reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    CHAR            reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    SHORT           reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    INT             reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    LONG            reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    SIGNED          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    FLOAT           reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    VOID            reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    ENUM            reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    NUMBER          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    STRING          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    CLASS           reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    STRUCT          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    UNION           reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    CATCH           reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    ELSE            reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    PRIVATE         reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    PROTECTED       reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    PUBLIC          reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)
    COLON           reduce using rule 361 (compound_statement -> LCPAREN RCPAREN .)


state 152

    (362) statement_list -> statement .

    RCPAREN         reduce using rule 362 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 362 (statement_list -> statement .)
    CASE            reduce using rule 362 (statement_list -> statement .)
    DEFAULT         reduce using rule 362 (statement_list -> statement .)
    SEMICOLON       reduce using rule 362 (statement_list -> statement .)
    LCPAREN         reduce using rule 362 (statement_list -> statement .)
    IF              reduce using rule 362 (statement_list -> statement .)
    SWITCH          reduce using rule 362 (statement_list -> statement .)
    WHILE           reduce using rule 362 (statement_list -> statement .)
    DO              reduce using rule 362 (statement_list -> statement .)
    FOR             reduce using rule 362 (statement_list -> statement .)
    BREAK           reduce using rule 362 (statement_list -> statement .)
    CONTINUE        reduce using rule 362 (statement_list -> statement .)
    RETURN          reduce using rule 362 (statement_list -> statement .)
    GOTO            reduce using rule 362 (statement_list -> statement .)
    TRY             reduce using rule 362 (statement_list -> statement .)
    ASM             reduce using rule 362 (statement_list -> statement .)
    TEMPLATE        reduce using rule 362 (statement_list -> statement .)
    EXTERN          reduce using rule 362 (statement_list -> statement .)
    DPLUSOP         reduce using rule 362 (statement_list -> statement .)
    DMINUSOP        reduce using rule 362 (statement_list -> statement .)
    SIZEOF          reduce using rule 362 (statement_list -> statement .)
    TYPEDEF         reduce using rule 362 (statement_list -> statement .)
    LPAREN          reduce using rule 362 (statement_list -> statement .)
    MULTOP          reduce using rule 362 (statement_list -> statement .)
    BANDOP          reduce using rule 362 (statement_list -> statement .)
    PLUSOP          reduce using rule 362 (statement_list -> statement .)
    MINUSOP         reduce using rule 362 (statement_list -> statement .)
    NOTSYM          reduce using rule 362 (statement_list -> statement .)
    BNOP            reduce using rule 362 (statement_list -> statement .)
    DOUBLECOLON     reduce using rule 362 (statement_list -> statement .)
    NEW             reduce using rule 362 (statement_list -> statement .)
    DELETE          reduce using rule 362 (statement_list -> statement .)
    AUTO            reduce using rule 362 (statement_list -> statement .)
    STATIC          reduce using rule 362 (statement_list -> statement .)
    CONST           reduce using rule 362 (statement_list -> statement .)
    VOLATILE        reduce using rule 362 (statement_list -> statement .)
    INLINE          reduce using rule 362 (statement_list -> statement .)
    VIRTUAL         reduce using rule 362 (statement_list -> statement .)
    THIS            reduce using rule 362 (statement_list -> statement .)
    CHAR            reduce using rule 362 (statement_list -> statement .)
    SHORT           reduce using rule 362 (statement_list -> statement .)
    INT             reduce using rule 362 (statement_list -> statement .)
    LONG            reduce using rule 362 (statement_list -> statement .)
    SIGNED          reduce using rule 362 (statement_list -> statement .)
    UNSIGNED        reduce using rule 362 (statement_list -> statement .)
    FLOAT           reduce using rule 362 (statement_list -> statement .)
    DOUBLE          reduce using rule 362 (statement_list -> statement .)
    VOID            reduce using rule 362 (statement_list -> statement .)
    ENUM            reduce using rule 362 (statement_list -> statement .)
    NUMBER          reduce using rule 362 (statement_list -> statement .)
    STRING          reduce using rule 362 (statement_list -> statement .)
    CLASS           reduce using rule 362 (statement_list -> statement .)
    STRUCT          reduce using rule 362 (statement_list -> statement .)
    UNION           reduce using rule 362 (statement_list -> statement .)
    OPERATOR        reduce using rule 362 (statement_list -> statement .)


state 153

    (355) labeled_statement -> IDENTIFIER . COLON statement
    (126) name -> IDENTIFIER .
    (5) class_name -> IDENTIFIER .
    (7) typedef_name -> IDENTIFIER .

  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 5 (class_name -> IDENTIFIER .)
    COLON           shift and go to state 132
    DOT             reduce using rule 126 (name -> IDENTIFIER .)
    ARROW           reduce using rule 126 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 126 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 126 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 126 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 126 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 126 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 126 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 126 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    B_E_OR          reduce using rule 126 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 126 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 126 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 126 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 126 (name -> IDENTIFIER .)
    MODOP           reduce using rule 126 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 126 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 126 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 126 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 126 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 126 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 126 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 126 (name -> IDENTIFIER .)
    XOROP           reduce using rule 126 (name -> IDENTIFIER .)
    OROP            reduce using rule 126 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 126 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 126 (name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 5 (class_name -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    EQUAL           reduce using rule 5 (class_name -> IDENTIFIER .)
    LCPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 5 (class_name -> IDENTIFIER .)
    COMMA           reduce using rule 5 (class_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 5 (class_name -> IDENTIFIER .)
    AUTO            reduce using rule 5 (class_name -> IDENTIFIER .)
    STATIC          reduce using rule 5 (class_name -> IDENTIFIER .)
    EXTERN          reduce using rule 5 (class_name -> IDENTIFIER .)
    CONST           reduce using rule 5 (class_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 5 (class_name -> IDENTIFIER .)
    INLINE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 5 (class_name -> IDENTIFIER .)
    BNOP            reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 5 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 5 (class_name -> IDENTIFIER .)
    INT             reduce using rule 5 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 5 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 5 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 5 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 5 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 5 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 5 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 5 (class_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 5 (class_name -> IDENTIFIER .)

  ! LPAREN          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 5 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]


state 154

    (358) expression_statement -> expression . SEMICOLON
    (9) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 119
    COMMA           shift and go to state 118


state 155

    (207) declarator -> LPAREN . declarator RPAREN
    (124) primary_expression -> LPAREN . expression RPAREN
    (57) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (223) type_name -> . type_specifier_list abstract_declarator
    (224) type_name -> . type_specifier_list
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LPAREN          shift and go to state 155
    BNOP            shift and go to state 167
    MULTOP          shift and go to state 168
    BANDOP          shift and go to state 169
    IDENTIFIER      shift and go to state 172
    DOUBLECOLON     shift and go to state 170
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    OPERATOR        shift and go to state 105
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    THIS            shift and go to state 70
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146

    declarator                     shift and go to state 164
    expression                     shift and go to state 163
    type_name                      shift and go to state 165
    cast_expression                shift and go to state 39
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    assignment_expression          shift and go to state 6
    type_specifier_list            shift and go to state 166
    name                           shift and go to state 156
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    type_specifier                 shift and go to state 171
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    simple_type_name               shift and go to state 173
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 156

    (218) dname -> name .
    (125) primary_expression -> name .

  ! reduce/reduce conflict for LSPAREN resolved using rule 125 (primary_expression -> name .)
  ! reduce/reduce conflict for LPAREN resolved using rule 125 (primary_expression -> name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 125 (primary_expression -> name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 125 (primary_expression -> name .)
  ! reduce/reduce conflict for COMMA resolved using rule 125 (primary_expression -> name .)
  ! reduce/reduce conflict for RPAREN resolved using rule 125 (primary_expression -> name .)
    COLON           reduce using rule 218 (dname -> name .)
    LCPAREN         reduce using rule 218 (dname -> name .)
    LSPAREN         reduce using rule 125 (primary_expression -> name .)
    LPAREN          reduce using rule 125 (primary_expression -> name .)
    DOT             reduce using rule 125 (primary_expression -> name .)
    ARROW           reduce using rule 125 (primary_expression -> name .)
    DPLUSOP         reduce using rule 125 (primary_expression -> name .)
    DMINUSOP        reduce using rule 125 (primary_expression -> name .)
    EQUAL           reduce using rule 125 (primary_expression -> name .)
    MULTEQOP        reduce using rule 125 (primary_expression -> name .)
    DIVEQOP         reduce using rule 125 (primary_expression -> name .)
    MODEQOP         reduce using rule 125 (primary_expression -> name .)
    PLUSEQOP        reduce using rule 125 (primary_expression -> name .)
    MINUSEQOP       reduce using rule 125 (primary_expression -> name .)
    LSHIFTEQOP      reduce using rule 125 (primary_expression -> name .)
    RSHIFTEQOP      reduce using rule 125 (primary_expression -> name .)
    BANDEQOP        reduce using rule 125 (primary_expression -> name .)
    B_E_OR          reduce using rule 125 (primary_expression -> name .)
    BOREQOP         reduce using rule 125 (primary_expression -> name .)
    DOTSTAR         reduce using rule 125 (primary_expression -> name .)
    ARROWSTAR       reduce using rule 125 (primary_expression -> name .)
    MULTOP          reduce using rule 125 (primary_expression -> name .)
    DIVOP           reduce using rule 125 (primary_expression -> name .)
    MODOP           reduce using rule 125 (primary_expression -> name .)
    PLUSOP          reduce using rule 125 (primary_expression -> name .)
    MINUSOP         reduce using rule 125 (primary_expression -> name .)
    LSHIFT          reduce using rule 125 (primary_expression -> name .)
    RSHIFT          reduce using rule 125 (primary_expression -> name .)
    LTCOMP          reduce using rule 125 (primary_expression -> name .)
    GTCOMP          reduce using rule 125 (primary_expression -> name .)
    LTECOMP         reduce using rule 125 (primary_expression -> name .)
    GTECOMP         reduce using rule 125 (primary_expression -> name .)
    EQCOMP          reduce using rule 125 (primary_expression -> name .)
    NEQCOMP         reduce using rule 125 (primary_expression -> name .)
    BANDOP          reduce using rule 125 (primary_expression -> name .)
    XOROP           reduce using rule 125 (primary_expression -> name .)
    OROP            reduce using rule 125 (primary_expression -> name .)
    ANDOP           reduce using rule 125 (primary_expression -> name .)
    QUESMARK        reduce using rule 125 (primary_expression -> name .)
    SEMICOLON       reduce using rule 125 (primary_expression -> name .)
    COMMA           reduce using rule 125 (primary_expression -> name .)
    RPAREN          reduce using rule 125 (primary_expression -> name .)

  ! LPAREN          [ reduce using rule 218 (dname -> name .) ]
  ! LSPAREN         [ reduce using rule 218 (dname -> name .) ]
  ! EQUAL           [ reduce using rule 218 (dname -> name .) ]
  ! SEMICOLON       [ reduce using rule 218 (dname -> name .) ]
  ! COMMA           [ reduce using rule 218 (dname -> name .) ]
  ! RPAREN          [ reduce using rule 218 (dname -> name .) ]


state 157

    (71) unary_operator -> BNOP .
    (220) dname -> BNOP . class_name
    (129) name -> BNOP . class_name
    (5) class_name -> . IDENTIFIER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LPAREN          reduce using rule 71 (unary_operator -> BNOP .)
    DPLUSOP         reduce using rule 71 (unary_operator -> BNOP .)
    DMINUSOP        reduce using rule 71 (unary_operator -> BNOP .)
    SIZEOF          reduce using rule 71 (unary_operator -> BNOP .)
    MULTOP          reduce using rule 71 (unary_operator -> BNOP .)
    BANDOP          reduce using rule 71 (unary_operator -> BNOP .)
    PLUSOP          reduce using rule 71 (unary_operator -> BNOP .)
    MINUSOP         reduce using rule 71 (unary_operator -> BNOP .)
    NOTSYM          reduce using rule 71 (unary_operator -> BNOP .)
    BNOP            reduce using rule 71 (unary_operator -> BNOP .)
    DOUBLECOLON     reduce using rule 71 (unary_operator -> BNOP .)
    NEW             reduce using rule 71 (unary_operator -> BNOP .)
    DELETE          reduce using rule 71 (unary_operator -> BNOP .)
    THIS            reduce using rule 71 (unary_operator -> BNOP .)
    CHAR            reduce using rule 71 (unary_operator -> BNOP .)
    SHORT           reduce using rule 71 (unary_operator -> BNOP .)
    INT             reduce using rule 71 (unary_operator -> BNOP .)
    LONG            reduce using rule 71 (unary_operator -> BNOP .)
    SIGNED          reduce using rule 71 (unary_operator -> BNOP .)
    UNSIGNED        reduce using rule 71 (unary_operator -> BNOP .)
    FLOAT           reduce using rule 71 (unary_operator -> BNOP .)
    DOUBLE          reduce using rule 71 (unary_operator -> BNOP .)
    VOID            reduce using rule 71 (unary_operator -> BNOP .)
    NUMBER          reduce using rule 71 (unary_operator -> BNOP .)
    STRING          reduce using rule 71 (unary_operator -> BNOP .)
    OPERATOR        reduce using rule 71 (unary_operator -> BNOP .)
    IDENTIFIER      shift and go to state 222

  ! IDENTIFIER      [ reduce using rule 71 (unary_operator -> BNOP .) ]

    class_name                     shift and go to state 333

state 158

    (219) dname -> class_name .
    (177) qualified_type_name -> class_name . DOUBLECOLON qualified_type_name
    (180) qualified_class_name -> class_name .
    (181) qualified_class_name -> class_name . DOUBLECOLON qualified_class_name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 180 (qualified_class_name -> class_name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 180 (qualified_class_name -> class_name .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 180 (qualified_class_name -> class_name .)
  ! reduce/reduce conflict for RPAREN resolved using rule 180 (qualified_class_name -> class_name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 180 (qualified_class_name -> class_name .)
  ! reduce/reduce conflict for COMMA resolved using rule 180 (qualified_class_name -> class_name .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 180 (qualified_class_name -> class_name .)
  ! reduce/reduce conflict for COLON resolved using rule 180 (qualified_class_name -> class_name .)
    LCPAREN         reduce using rule 219 (dname -> class_name .)
    DOUBLECOLON     shift and go to state 256
    LPAREN          reduce using rule 180 (qualified_class_name -> class_name .)
    SEMICOLON       reduce using rule 180 (qualified_class_name -> class_name .)
    TYPEDEF         reduce using rule 180 (qualified_class_name -> class_name .)
    AUTO            reduce using rule 180 (qualified_class_name -> class_name .)
    STATIC          reduce using rule 180 (qualified_class_name -> class_name .)
    EXTERN          reduce using rule 180 (qualified_class_name -> class_name .)
    CONST           reduce using rule 180 (qualified_class_name -> class_name .)
    VOLATILE        reduce using rule 180 (qualified_class_name -> class_name .)
    INLINE          reduce using rule 180 (qualified_class_name -> class_name .)
    VIRTUAL         reduce using rule 180 (qualified_class_name -> class_name .)
    BNOP            reduce using rule 180 (qualified_class_name -> class_name .)
    MULTOP          reduce using rule 180 (qualified_class_name -> class_name .)
    BANDOP          reduce using rule 180 (qualified_class_name -> class_name .)
    CHAR            reduce using rule 180 (qualified_class_name -> class_name .)
    SHORT           reduce using rule 180 (qualified_class_name -> class_name .)
    INT             reduce using rule 180 (qualified_class_name -> class_name .)
    LONG            reduce using rule 180 (qualified_class_name -> class_name .)
    SIGNED          reduce using rule 180 (qualified_class_name -> class_name .)
    UNSIGNED        reduce using rule 180 (qualified_class_name -> class_name .)
    FLOAT           reduce using rule 180 (qualified_class_name -> class_name .)
    DOUBLE          reduce using rule 180 (qualified_class_name -> class_name .)
    VOID            reduce using rule 180 (qualified_class_name -> class_name .)
    ENUM            reduce using rule 180 (qualified_class_name -> class_name .)
    IDENTIFIER      reduce using rule 180 (qualified_class_name -> class_name .)
    CLASS           reduce using rule 180 (qualified_class_name -> class_name .)
    STRUCT          reduce using rule 180 (qualified_class_name -> class_name .)
    UNION           reduce using rule 180 (qualified_class_name -> class_name .)
    OPERATOR        reduce using rule 180 (qualified_class_name -> class_name .)
    LSPAREN         reduce using rule 180 (qualified_class_name -> class_name .)
    RPAREN          reduce using rule 180 (qualified_class_name -> class_name .)
    EQUAL           reduce using rule 180 (qualified_class_name -> class_name .)
    COMMA           reduce using rule 180 (qualified_class_name -> class_name .)
    GTCOMP          reduce using rule 180 (qualified_class_name -> class_name .)
    COLON           reduce using rule 180 (qualified_class_name -> class_name .)

  ! LPAREN          [ reduce using rule 219 (dname -> class_name .) ]
  ! LSPAREN         [ reduce using rule 219 (dname -> class_name .) ]
  ! COLON           [ reduce using rule 219 (dname -> class_name .) ]
  ! EQUAL           [ reduce using rule 219 (dname -> class_name .) ]
  ! SEMICOLON       [ reduce using rule 219 (dname -> class_name .) ]
  ! COMMA           [ reduce using rule 219 (dname -> class_name .) ]
  ! RPAREN          [ reduce using rule 219 (dname -> class_name .) ]
  ! GTCOMP          [ reduce using rule 219 (dname -> class_name .) ]
  ! DOUBLECOLON     [ reduce using rule 180 (qualified_class_name -> class_name .) ]


state 159

    (221) dname -> typedef_name .
    (176) qualified_type_name -> typedef_name .

  ! reduce/reduce conflict for LPAREN resolved using rule 176 (qualified_type_name -> typedef_name .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 176 (qualified_type_name -> typedef_name .)
  ! reduce/reduce conflict for COLON resolved using rule 176 (qualified_type_name -> typedef_name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 176 (qualified_type_name -> typedef_name .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 176 (qualified_type_name -> typedef_name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 176 (qualified_type_name -> typedef_name .)
  ! reduce/reduce conflict for COMMA resolved using rule 176 (qualified_type_name -> typedef_name .)
  ! reduce/reduce conflict for RPAREN resolved using rule 176 (qualified_type_name -> typedef_name .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 176 (qualified_type_name -> typedef_name .)
    LPAREN          reduce using rule 176 (qualified_type_name -> typedef_name .)
    LSPAREN         reduce using rule 176 (qualified_type_name -> typedef_name .)
    COLON           reduce using rule 176 (qualified_type_name -> typedef_name .)
    EQUAL           reduce using rule 176 (qualified_type_name -> typedef_name .)
    LCPAREN         reduce using rule 176 (qualified_type_name -> typedef_name .)
    SEMICOLON       reduce using rule 176 (qualified_type_name -> typedef_name .)
    COMMA           reduce using rule 176 (qualified_type_name -> typedef_name .)
    TYPEDEF         reduce using rule 176 (qualified_type_name -> typedef_name .)
    AUTO            reduce using rule 176 (qualified_type_name -> typedef_name .)
    STATIC          reduce using rule 176 (qualified_type_name -> typedef_name .)
    EXTERN          reduce using rule 176 (qualified_type_name -> typedef_name .)
    CONST           reduce using rule 176 (qualified_type_name -> typedef_name .)
    VOLATILE        reduce using rule 176 (qualified_type_name -> typedef_name .)
    INLINE          reduce using rule 176 (qualified_type_name -> typedef_name .)
    VIRTUAL         reduce using rule 176 (qualified_type_name -> typedef_name .)
    BNOP            reduce using rule 176 (qualified_type_name -> typedef_name .)
    MULTOP          reduce using rule 176 (qualified_type_name -> typedef_name .)
    BANDOP          reduce using rule 176 (qualified_type_name -> typedef_name .)
    CHAR            reduce using rule 176 (qualified_type_name -> typedef_name .)
    SHORT           reduce using rule 176 (qualified_type_name -> typedef_name .)
    INT             reduce using rule 176 (qualified_type_name -> typedef_name .)
    LONG            reduce using rule 176 (qualified_type_name -> typedef_name .)
    SIGNED          reduce using rule 176 (qualified_type_name -> typedef_name .)
    UNSIGNED        reduce using rule 176 (qualified_type_name -> typedef_name .)
    FLOAT           reduce using rule 176 (qualified_type_name -> typedef_name .)
    DOUBLE          reduce using rule 176 (qualified_type_name -> typedef_name .)
    VOID            reduce using rule 176 (qualified_type_name -> typedef_name .)
    ENUM            reduce using rule 176 (qualified_type_name -> typedef_name .)
    IDENTIFIER      reduce using rule 176 (qualified_type_name -> typedef_name .)
    DOUBLECOLON     reduce using rule 176 (qualified_type_name -> typedef_name .)
    CLASS           reduce using rule 176 (qualified_type_name -> typedef_name .)
    STRUCT          reduce using rule 176 (qualified_type_name -> typedef_name .)
    UNION           reduce using rule 176 (qualified_type_name -> typedef_name .)
    OPERATOR        reduce using rule 176 (qualified_type_name -> typedef_name .)
    RPAREN          reduce using rule 176 (qualified_type_name -> typedef_name .)
    GTCOMP          reduce using rule 176 (qualified_type_name -> typedef_name .)

  ! LPAREN          [ reduce using rule 221 (dname -> typedef_name .) ]
  ! LSPAREN         [ reduce using rule 221 (dname -> typedef_name .) ]
  ! COLON           [ reduce using rule 221 (dname -> typedef_name .) ]
  ! EQUAL           [ reduce using rule 221 (dname -> typedef_name .) ]
  ! LCPAREN         [ reduce using rule 221 (dname -> typedef_name .) ]
  ! SEMICOLON       [ reduce using rule 221 (dname -> typedef_name .) ]
  ! COMMA           [ reduce using rule 221 (dname -> typedef_name .) ]
  ! RPAREN          [ reduce using rule 221 (dname -> typedef_name .) ]
  ! GTCOMP          [ reduce using rule 221 (dname -> typedef_name .) ]


state 160

    (222) dname -> qualified_type_name .
    (160) simple_type_name -> qualified_type_name .

  ! reduce/reduce conflict for LPAREN resolved using rule 160 (simple_type_name -> qualified_type_name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 160 (simple_type_name -> qualified_type_name .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 160 (simple_type_name -> qualified_type_name .)
  ! reduce/reduce conflict for RPAREN resolved using rule 160 (simple_type_name -> qualified_type_name .)
  ! reduce/reduce conflict for COLON resolved using rule 160 (simple_type_name -> qualified_type_name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 160 (simple_type_name -> qualified_type_name .)
  ! reduce/reduce conflict for COMMA resolved using rule 160 (simple_type_name -> qualified_type_name .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 160 (simple_type_name -> qualified_type_name .)
    LCPAREN         reduce using rule 222 (dname -> qualified_type_name .)
    LPAREN          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    SEMICOLON       reduce using rule 160 (simple_type_name -> qualified_type_name .)
    TYPEDEF         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    AUTO            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    STATIC          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    EXTERN          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    CONST           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    VOLATILE        reduce using rule 160 (simple_type_name -> qualified_type_name .)
    INLINE          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    VIRTUAL         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    BNOP            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    MULTOP          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    BANDOP          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    CHAR            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    SHORT           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    INT             reduce using rule 160 (simple_type_name -> qualified_type_name .)
    LONG            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    SIGNED          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    UNSIGNED        reduce using rule 160 (simple_type_name -> qualified_type_name .)
    FLOAT           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    DOUBLE          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    VOID            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    ENUM            reduce using rule 160 (simple_type_name -> qualified_type_name .)
    IDENTIFIER      reduce using rule 160 (simple_type_name -> qualified_type_name .)
    DOUBLECOLON     reduce using rule 160 (simple_type_name -> qualified_type_name .)
    CLASS           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    STRUCT          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    UNION           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    OPERATOR        reduce using rule 160 (simple_type_name -> qualified_type_name .)
    LSPAREN         reduce using rule 160 (simple_type_name -> qualified_type_name .)
    RPAREN          reduce using rule 160 (simple_type_name -> qualified_type_name .)
    COLON           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    EQUAL           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    COMMA           reduce using rule 160 (simple_type_name -> qualified_type_name .)
    GTCOMP          reduce using rule 160 (simple_type_name -> qualified_type_name .)

  ! LPAREN          [ reduce using rule 222 (dname -> qualified_type_name .) ]
  ! LSPAREN         [ reduce using rule 222 (dname -> qualified_type_name .) ]
  ! COLON           [ reduce using rule 222 (dname -> qualified_type_name .) ]
  ! EQUAL           [ reduce using rule 222 (dname -> qualified_type_name .) ]
  ! SEMICOLON       [ reduce using rule 222 (dname -> qualified_type_name .) ]
  ! COMMA           [ reduce using rule 222 (dname -> qualified_type_name .) ]
  ! RPAREN          [ reduce using rule 222 (dname -> qualified_type_name .) ]
  ! GTCOMP          [ reduce using rule 222 (dname -> qualified_type_name .) ]


state 161

    (212) ptr_operator -> complete_class_name . DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> complete_class_name . DOUBLECOLON MULTOP
    (159) simple_type_name -> complete_class_name .

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    DOUBLECOLON     shift and go to state 251
    LPAREN          reduce using rule 159 (simple_type_name -> complete_class_name .)
    SEMICOLON       reduce using rule 159 (simple_type_name -> complete_class_name .)
    TYPEDEF         reduce using rule 159 (simple_type_name -> complete_class_name .)
    AUTO            reduce using rule 159 (simple_type_name -> complete_class_name .)
    STATIC          reduce using rule 159 (simple_type_name -> complete_class_name .)
    EXTERN          reduce using rule 159 (simple_type_name -> complete_class_name .)
    CONST           reduce using rule 159 (simple_type_name -> complete_class_name .)
    VOLATILE        reduce using rule 159 (simple_type_name -> complete_class_name .)
    INLINE          reduce using rule 159 (simple_type_name -> complete_class_name .)
    VIRTUAL         reduce using rule 159 (simple_type_name -> complete_class_name .)
    BNOP            reduce using rule 159 (simple_type_name -> complete_class_name .)
    MULTOP          reduce using rule 159 (simple_type_name -> complete_class_name .)
    BANDOP          reduce using rule 159 (simple_type_name -> complete_class_name .)
    CHAR            reduce using rule 159 (simple_type_name -> complete_class_name .)
    SHORT           reduce using rule 159 (simple_type_name -> complete_class_name .)
    INT             reduce using rule 159 (simple_type_name -> complete_class_name .)
    LONG            reduce using rule 159 (simple_type_name -> complete_class_name .)
    SIGNED          reduce using rule 159 (simple_type_name -> complete_class_name .)
    UNSIGNED        reduce using rule 159 (simple_type_name -> complete_class_name .)
    FLOAT           reduce using rule 159 (simple_type_name -> complete_class_name .)
    DOUBLE          reduce using rule 159 (simple_type_name -> complete_class_name .)
    VOID            reduce using rule 159 (simple_type_name -> complete_class_name .)
    ENUM            reduce using rule 159 (simple_type_name -> complete_class_name .)
    IDENTIFIER      reduce using rule 159 (simple_type_name -> complete_class_name .)
    CLASS           reduce using rule 159 (simple_type_name -> complete_class_name .)
    STRUCT          reduce using rule 159 (simple_type_name -> complete_class_name .)
    UNION           reduce using rule 159 (simple_type_name -> complete_class_name .)
    OPERATOR        reduce using rule 159 (simple_type_name -> complete_class_name .)
    LSPAREN         reduce using rule 159 (simple_type_name -> complete_class_name .)
    RPAREN          reduce using rule 159 (simple_type_name -> complete_class_name .)
    COLON           reduce using rule 159 (simple_type_name -> complete_class_name .)
    EQUAL           reduce using rule 159 (simple_type_name -> complete_class_name .)
    COMMA           reduce using rule 159 (simple_type_name -> complete_class_name .)
    GTCOMP          reduce using rule 159 (simple_type_name -> complete_class_name .)

  ! DOUBLECOLON     [ reduce using rule 159 (simple_type_name -> complete_class_name .) ]


state 162

    (364) selection_statement -> IF LPAREN . expression RPAREN statement
    (365) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 334
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 163

    (124) primary_expression -> LPAREN expression . RPAREN
    (9) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 335
    COMMA           shift and go to state 118


state 164

    (207) declarator -> LPAREN declarator . RPAREN
    (203) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (205) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (206) declarator -> declarator . LSPAREN RSPAREN

    RPAREN          shift and go to state 337
    LPAREN          shift and go to state 336
    LSPAREN         shift and go to state 244


state 165

    (57) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 338


state 166

    (223) type_name -> type_specifier_list . abstract_declarator
    (224) type_name -> type_specifier_list .
    (227) abstract_declarator -> . ptr_operator abstract_declarator
    (228) abstract_declarator -> . ptr_operator
    (229) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (230) abstract_declarator -> . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (231) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (232) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (233) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (234) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (235) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (236) abstract_declarator -> . LSPAREN RSPAREN
    (237) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    RPAREN          reduce using rule 224 (type_name -> type_specifier_list .)
    LPAREN          shift and go to state 341
    LSPAREN         shift and go to state 342
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    DOUBLECOLON     shift and go to state 210
    IDENTIFIER      shift and go to state 222

    abstract_declarator            shift and go to state 339
    ptr_operator                   shift and go to state 340
    complete_class_name            shift and go to state 254
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 167

    (220) dname -> BNOP . class_name
    (129) name -> BNOP . class_name
    (71) unary_operator -> BNOP .
    (5) class_name -> . IDENTIFIER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LPAREN          reduce using rule 71 (unary_operator -> BNOP .)
    DPLUSOP         reduce using rule 71 (unary_operator -> BNOP .)
    DMINUSOP        reduce using rule 71 (unary_operator -> BNOP .)
    SIZEOF          reduce using rule 71 (unary_operator -> BNOP .)
    MULTOP          reduce using rule 71 (unary_operator -> BNOP .)
    BANDOP          reduce using rule 71 (unary_operator -> BNOP .)
    PLUSOP          reduce using rule 71 (unary_operator -> BNOP .)
    MINUSOP         reduce using rule 71 (unary_operator -> BNOP .)
    NOTSYM          reduce using rule 71 (unary_operator -> BNOP .)
    BNOP            reduce using rule 71 (unary_operator -> BNOP .)
    DOUBLECOLON     reduce using rule 71 (unary_operator -> BNOP .)
    NEW             reduce using rule 71 (unary_operator -> BNOP .)
    DELETE          reduce using rule 71 (unary_operator -> BNOP .)
    THIS            reduce using rule 71 (unary_operator -> BNOP .)
    CHAR            reduce using rule 71 (unary_operator -> BNOP .)
    SHORT           reduce using rule 71 (unary_operator -> BNOP .)
    INT             reduce using rule 71 (unary_operator -> BNOP .)
    LONG            reduce using rule 71 (unary_operator -> BNOP .)
    SIGNED          reduce using rule 71 (unary_operator -> BNOP .)
    UNSIGNED        reduce using rule 71 (unary_operator -> BNOP .)
    FLOAT           reduce using rule 71 (unary_operator -> BNOP .)
    DOUBLE          reduce using rule 71 (unary_operator -> BNOP .)
    VOID            reduce using rule 71 (unary_operator -> BNOP .)
    NUMBER          reduce using rule 71 (unary_operator -> BNOP .)
    STRING          reduce using rule 71 (unary_operator -> BNOP .)
    OPERATOR        reduce using rule 71 (unary_operator -> BNOP .)
    IDENTIFIER      shift and go to state 222

  ! IDENTIFIER      [ reduce using rule 71 (unary_operator -> BNOP .) ]

    class_name                     shift and go to state 333

state 168

    (208) ptr_operator -> MULTOP . cv_qualifier_list
    (209) ptr_operator -> MULTOP .
    (66) unary_operator -> MULTOP .
    (214) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (215) cv_qualifier_list -> . cv_qualifier
    (216) cv_qualifier -> . CONST
    (217) cv_qualifier -> . VOLATILE

  ! reduce/reduce conflict for LPAREN resolved using rule 66 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for MULTOP resolved using rule 66 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for BANDOP resolved using rule 66 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for BNOP resolved using rule 66 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 66 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 66 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 66 (unary_operator -> MULTOP .)
    LPAREN          reduce using rule 66 (unary_operator -> MULTOP .)
    DPLUSOP         reduce using rule 66 (unary_operator -> MULTOP .)
    DMINUSOP        reduce using rule 66 (unary_operator -> MULTOP .)
    SIZEOF          reduce using rule 66 (unary_operator -> MULTOP .)
    MULTOP          reduce using rule 66 (unary_operator -> MULTOP .)
    BANDOP          reduce using rule 66 (unary_operator -> MULTOP .)
    PLUSOP          reduce using rule 66 (unary_operator -> MULTOP .)
    MINUSOP         reduce using rule 66 (unary_operator -> MULTOP .)
    NOTSYM          reduce using rule 66 (unary_operator -> MULTOP .)
    BNOP            reduce using rule 66 (unary_operator -> MULTOP .)
    DOUBLECOLON     reduce using rule 66 (unary_operator -> MULTOP .)
    NEW             reduce using rule 66 (unary_operator -> MULTOP .)
    DELETE          reduce using rule 66 (unary_operator -> MULTOP .)
    THIS            reduce using rule 66 (unary_operator -> MULTOP .)
    CHAR            reduce using rule 66 (unary_operator -> MULTOP .)
    SHORT           reduce using rule 66 (unary_operator -> MULTOP .)
    INT             reduce using rule 66 (unary_operator -> MULTOP .)
    LONG            reduce using rule 66 (unary_operator -> MULTOP .)
    SIGNED          reduce using rule 66 (unary_operator -> MULTOP .)
    UNSIGNED        reduce using rule 66 (unary_operator -> MULTOP .)
    FLOAT           reduce using rule 66 (unary_operator -> MULTOP .)
    DOUBLE          reduce using rule 66 (unary_operator -> MULTOP .)
    VOID            reduce using rule 66 (unary_operator -> MULTOP .)
    NUMBER          reduce using rule 66 (unary_operator -> MULTOP .)
    STRING          reduce using rule 66 (unary_operator -> MULTOP .)
    IDENTIFIER      reduce using rule 66 (unary_operator -> MULTOP .)
    OPERATOR        reduce using rule 66 (unary_operator -> MULTOP .)
    CONST           shift and go to state 218
    VOLATILE        shift and go to state 219

  ! LPAREN          [ reduce using rule 209 (ptr_operator -> MULTOP .) ]
  ! BNOP            [ reduce using rule 209 (ptr_operator -> MULTOP .) ]
  ! MULTOP          [ reduce using rule 209 (ptr_operator -> MULTOP .) ]
  ! BANDOP          [ reduce using rule 209 (ptr_operator -> MULTOP .) ]
  ! IDENTIFIER      [ reduce using rule 209 (ptr_operator -> MULTOP .) ]
  ! DOUBLECOLON     [ reduce using rule 209 (ptr_operator -> MULTOP .) ]
  ! OPERATOR        [ reduce using rule 209 (ptr_operator -> MULTOP .) ]

    cv_qualifier_list              shift and go to state 216
    cv_qualifier                   shift and go to state 217

state 169

    (210) ptr_operator -> BANDOP . cv_qualifier_list
    (211) ptr_operator -> BANDOP .
    (67) unary_operator -> BANDOP .
    (214) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (215) cv_qualifier_list -> . cv_qualifier
    (216) cv_qualifier -> . CONST
    (217) cv_qualifier -> . VOLATILE

  ! reduce/reduce conflict for LPAREN resolved using rule 67 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for MULTOP resolved using rule 67 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for BANDOP resolved using rule 67 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for BNOP resolved using rule 67 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 67 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 67 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 67 (unary_operator -> BANDOP .)
    LPAREN          reduce using rule 67 (unary_operator -> BANDOP .)
    DPLUSOP         reduce using rule 67 (unary_operator -> BANDOP .)
    DMINUSOP        reduce using rule 67 (unary_operator -> BANDOP .)
    SIZEOF          reduce using rule 67 (unary_operator -> BANDOP .)
    MULTOP          reduce using rule 67 (unary_operator -> BANDOP .)
    BANDOP          reduce using rule 67 (unary_operator -> BANDOP .)
    PLUSOP          reduce using rule 67 (unary_operator -> BANDOP .)
    MINUSOP         reduce using rule 67 (unary_operator -> BANDOP .)
    NOTSYM          reduce using rule 67 (unary_operator -> BANDOP .)
    BNOP            reduce using rule 67 (unary_operator -> BANDOP .)
    DOUBLECOLON     reduce using rule 67 (unary_operator -> BANDOP .)
    NEW             reduce using rule 67 (unary_operator -> BANDOP .)
    DELETE          reduce using rule 67 (unary_operator -> BANDOP .)
    THIS            reduce using rule 67 (unary_operator -> BANDOP .)
    CHAR            reduce using rule 67 (unary_operator -> BANDOP .)
    SHORT           reduce using rule 67 (unary_operator -> BANDOP .)
    INT             reduce using rule 67 (unary_operator -> BANDOP .)
    LONG            reduce using rule 67 (unary_operator -> BANDOP .)
    SIGNED          reduce using rule 67 (unary_operator -> BANDOP .)
    UNSIGNED        reduce using rule 67 (unary_operator -> BANDOP .)
    FLOAT           reduce using rule 67 (unary_operator -> BANDOP .)
    DOUBLE          reduce using rule 67 (unary_operator -> BANDOP .)
    VOID            reduce using rule 67 (unary_operator -> BANDOP .)
    NUMBER          reduce using rule 67 (unary_operator -> BANDOP .)
    STRING          reduce using rule 67 (unary_operator -> BANDOP .)
    IDENTIFIER      reduce using rule 67 (unary_operator -> BANDOP .)
    OPERATOR        reduce using rule 67 (unary_operator -> BANDOP .)
    CONST           shift and go to state 218
    VOLATILE        shift and go to state 219

  ! LPAREN          [ reduce using rule 211 (ptr_operator -> BANDOP .) ]
  ! BNOP            [ reduce using rule 211 (ptr_operator -> BANDOP .) ]
  ! MULTOP          [ reduce using rule 211 (ptr_operator -> BANDOP .) ]
  ! BANDOP          [ reduce using rule 211 (ptr_operator -> BANDOP .) ]
  ! IDENTIFIER      [ reduce using rule 211 (ptr_operator -> BANDOP .) ]
  ! DOUBLECOLON     [ reduce using rule 211 (ptr_operator -> BANDOP .) ]
  ! OPERATOR        [ reduce using rule 211 (ptr_operator -> BANDOP .) ]

    cv_qualifier_list              shift and go to state 220
    cv_qualifier                   shift and go to state 217

state 170

    (179) complete_class_name -> DOUBLECOLON . qualified_class_name
    (72) allocation_expression -> DOUBLECOLON . NEW placement new_type_name new_initializer
    (74) allocation_expression -> DOUBLECOLON . NEW new_type_name new_initializer
    (76) allocation_expression -> DOUBLECOLON . NEW placement new_type_name
    (78) allocation_expression -> DOUBLECOLON . NEW new_type_name
    (80) allocation_expression -> DOUBLECOLON . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> DOUBLECOLON . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> DOUBLECOLON . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> DOUBLECOLON . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> DOUBLECOLON . DELETE cast_expression
    (105) deallocation_expression -> DOUBLECOLON . DELETE LSPAREN RSPAREN cast_expression
    (121) primary_expression -> DOUBLECOLON . IDENTIFIER
    (122) primary_expression -> DOUBLECOLON . operator_function_name
    (123) primary_expression -> DOUBLECOLON . qualified_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (308) operator_function_name -> . OPERATOR operator_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (5) class_name -> . IDENTIFIER

    NEW             shift and go to state 223
    DELETE          shift and go to state 224
    IDENTIFIER      shift and go to state 225
    OPERATOR        shift and go to state 229

    qualified_class_name           shift and go to state 228
    operator_function_name         shift and go to state 226
    qualified_name                 shift and go to state 227
    class_name                     shift and go to state 230

state 171

    (225) type_specifier_list -> type_specifier . type_specifier_list
    (226) type_specifier_list -> type_specifier .
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LPAREN          reduce using rule 226 (type_specifier_list -> type_specifier .)
    LSPAREN         reduce using rule 226 (type_specifier_list -> type_specifier .)
    MULTOP          reduce using rule 226 (type_specifier_list -> type_specifier .)
    BANDOP          reduce using rule 226 (type_specifier_list -> type_specifier .)
    RPAREN          reduce using rule 226 (type_specifier_list -> type_specifier .)
    EQUAL           reduce using rule 226 (type_specifier_list -> type_specifier .)
    MULTEQOP        reduce using rule 226 (type_specifier_list -> type_specifier .)
    DIVEQOP         reduce using rule 226 (type_specifier_list -> type_specifier .)
    MODEQOP         reduce using rule 226 (type_specifier_list -> type_specifier .)
    PLUSEQOP        reduce using rule 226 (type_specifier_list -> type_specifier .)
    MINUSEQOP       reduce using rule 226 (type_specifier_list -> type_specifier .)
    LSHIFTEQOP      reduce using rule 226 (type_specifier_list -> type_specifier .)
    RSHIFTEQOP      reduce using rule 226 (type_specifier_list -> type_specifier .)
    BANDEQOP        reduce using rule 226 (type_specifier_list -> type_specifier .)
    B_E_OR          reduce using rule 226 (type_specifier_list -> type_specifier .)
    BOREQOP         reduce using rule 226 (type_specifier_list -> type_specifier .)
    DOTSTAR         reduce using rule 226 (type_specifier_list -> type_specifier .)
    ARROWSTAR       reduce using rule 226 (type_specifier_list -> type_specifier .)
    DIVOP           reduce using rule 226 (type_specifier_list -> type_specifier .)
    MODOP           reduce using rule 226 (type_specifier_list -> type_specifier .)
    PLUSOP          reduce using rule 226 (type_specifier_list -> type_specifier .)
    MINUSOP         reduce using rule 226 (type_specifier_list -> type_specifier .)
    LSHIFT          reduce using rule 226 (type_specifier_list -> type_specifier .)
    RSHIFT          reduce using rule 226 (type_specifier_list -> type_specifier .)
    LTCOMP          reduce using rule 226 (type_specifier_list -> type_specifier .)
    GTCOMP          reduce using rule 226 (type_specifier_list -> type_specifier .)
    LTECOMP         reduce using rule 226 (type_specifier_list -> type_specifier .)
    GTECOMP         reduce using rule 226 (type_specifier_list -> type_specifier .)
    EQCOMP          reduce using rule 226 (type_specifier_list -> type_specifier .)
    NEQCOMP         reduce using rule 226 (type_specifier_list -> type_specifier .)
    XOROP           reduce using rule 226 (type_specifier_list -> type_specifier .)
    OROP            reduce using rule 226 (type_specifier_list -> type_specifier .)
    ANDOP           reduce using rule 226 (type_specifier_list -> type_specifier .)
    QUESMARK        reduce using rule 226 (type_specifier_list -> type_specifier .)
    COMMA           reduce using rule 226 (type_specifier_list -> type_specifier .)
    SEMICOLON       reduce using rule 226 (type_specifier_list -> type_specifier .)
    $end            reduce using rule 226 (type_specifier_list -> type_specifier .)
    COLON           reduce using rule 226 (type_specifier_list -> type_specifier .)
    RSPAREN         reduce using rule 226 (type_specifier_list -> type_specifier .)
    RCPAREN         reduce using rule 226 (type_specifier_list -> type_specifier .)
    DOT             reduce using rule 226 (type_specifier_list -> type_specifier .)
    ARROW           reduce using rule 226 (type_specifier_list -> type_specifier .)
    DPLUSOP         reduce using rule 226 (type_specifier_list -> type_specifier .)
    DMINUSOP        reduce using rule 226 (type_specifier_list -> type_specifier .)
    LCPAREN         reduce using rule 226 (type_specifier_list -> type_specifier .)
    BNOP            reduce using rule 226 (type_specifier_list -> type_specifier .)
    OPERATOR        reduce using rule 226 (type_specifier_list -> type_specifier .)
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    IDENTIFIER      shift and go to state 235

  ! DOUBLECOLON     [ reduce using rule 226 (type_specifier_list -> type_specifier .) ]
  ! IDENTIFIER      [ reduce using rule 226 (type_specifier_list -> type_specifier .) ]

    type_specifier                 shift and go to state 171
    type_specifier_list            shift and go to state 343
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 236
    typedef_name                   shift and go to state 148

state 172

    (126) name -> IDENTIFIER .
    (5) class_name -> IDENTIFIER .
    (7) typedef_name -> IDENTIFIER .

  ! reduce/reduce conflict for RPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 5 (class_name -> IDENTIFIER .)
    DOT             reduce using rule 126 (name -> IDENTIFIER .)
    ARROW           reduce using rule 126 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 126 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 126 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 126 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 126 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 126 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 126 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 126 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    B_E_OR          reduce using rule 126 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 126 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 126 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 126 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 126 (name -> IDENTIFIER .)
    MODOP           reduce using rule 126 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 126 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 126 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 126 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 126 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 126 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 126 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 126 (name -> IDENTIFIER .)
    XOROP           reduce using rule 126 (name -> IDENTIFIER .)
    OROP            reduce using rule 126 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 126 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 126 (name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 5 (class_name -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    CONST           reduce using rule 5 (class_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 5 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 5 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 5 (class_name -> IDENTIFIER .)
    INT             reduce using rule 5 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 5 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 5 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 5 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 5 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 5 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 5 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 5 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    COLON           reduce using rule 5 (class_name -> IDENTIFIER .)
    EQUAL           reduce using rule 5 (class_name -> IDENTIFIER .)
    LCPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 5 (class_name -> IDENTIFIER .)
    COMMA           reduce using rule 5 (class_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 5 (class_name -> IDENTIFIER .)
    AUTO            reduce using rule 5 (class_name -> IDENTIFIER .)
    STATIC          reduce using rule 5 (class_name -> IDENTIFIER .)
    EXTERN          reduce using rule 5 (class_name -> IDENTIFIER .)
    INLINE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 5 (class_name -> IDENTIFIER .)
    BNOP            reduce using rule 5 (class_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 5 (class_name -> IDENTIFIER .)
    GTCOMP          reduce using rule 5 (class_name -> IDENTIFIER .)

  ! RPAREN          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! GTCOMP          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! GTCOMP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]


state 173

    (153) type_specifier -> simple_type_name .
    (111) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (112) postfix_expression -> simple_type_name . LPAREN RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    CONST           reduce using rule 153 (type_specifier -> simple_type_name .)
    VOLATILE        reduce using rule 153 (type_specifier -> simple_type_name .)
    CHAR            reduce using rule 153 (type_specifier -> simple_type_name .)
    SHORT           reduce using rule 153 (type_specifier -> simple_type_name .)
    INT             reduce using rule 153 (type_specifier -> simple_type_name .)
    LONG            reduce using rule 153 (type_specifier -> simple_type_name .)
    SIGNED          reduce using rule 153 (type_specifier -> simple_type_name .)
    UNSIGNED        reduce using rule 153 (type_specifier -> simple_type_name .)
    FLOAT           reduce using rule 153 (type_specifier -> simple_type_name .)
    DOUBLE          reduce using rule 153 (type_specifier -> simple_type_name .)
    VOID            reduce using rule 153 (type_specifier -> simple_type_name .)
    ENUM            reduce using rule 153 (type_specifier -> simple_type_name .)
    DOUBLECOLON     reduce using rule 153 (type_specifier -> simple_type_name .)
    CLASS           reduce using rule 153 (type_specifier -> simple_type_name .)
    STRUCT          reduce using rule 153 (type_specifier -> simple_type_name .)
    UNION           reduce using rule 153 (type_specifier -> simple_type_name .)
    IDENTIFIER      reduce using rule 153 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 153 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 153 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 153 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 153 (type_specifier -> simple_type_name .)
    LPAREN          shift and go to state 215

  ! LPAREN          [ reduce using rule 153 (type_specifier -> simple_type_name .) ]


state 174

    (366) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 344
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 175

    (367) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 345
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 176

    (368) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 346


state 177

    (369) iteration_statement -> FOR LPAREN . for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> FOR LPAREN . for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON RPAREN statement
    (373) for_init_statement -> . expression_statement
    (374) for_init_statement -> . declaration_statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (380) declaration_statement -> . declaration
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 20
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    IDENTIFIER      shift and go to state 172
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    for_init_statement             shift and go to state 347
    expression                     shift and go to state 154
    expression_statement           shift and go to state 348
    declaration_statement          shift and go to state 349
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 178

    (375) jump_statement -> BREAK SEMICOLON .

    $end            reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    RCPAREN         reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    LCPAREN         reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    TRY             reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    ASM             reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    TEMPLATE        reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    EXTERN          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    DPLUSOP         reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    DMINUSOP        reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    TYPEDEF         reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    MULTOP          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    BANDOP          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    PLUSOP          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    MINUSOP         reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    NOTSYM          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    BNOP            reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    DOUBLECOLON     reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    NEW             reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    DELETE          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    AUTO            reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    STATIC          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    VOLATILE        reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    INLINE          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    VIRTUAL         reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    THIS            reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    ENUM            reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    UNION           reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    OPERATOR        reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 375 (jump_statement -> BREAK SEMICOLON .)


state 179

    (376) jump_statement -> CONTINUE SEMICOLON .

    $end            reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    RCPAREN         reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    LCPAREN         reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    ASM             reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    TEMPLATE        reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    EXTERN          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    DPLUSOP         reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    DMINUSOP        reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    TYPEDEF         reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    MULTOP          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    BANDOP          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    PLUSOP          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    MINUSOP         reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    NOTSYM          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    BNOP            reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLECOLON     reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    DELETE          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    AUTO            reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    STATIC          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    VOLATILE        reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    INLINE          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    VIRTUAL         reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    ENUM            reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    UNION           reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    OPERATOR        reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 376 (jump_statement -> CONTINUE SEMICOLON .)


state 180

    (377) jump_statement -> RETURN expression . SEMICOLON
    (9) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 350
    COMMA           shift and go to state 118


state 181

    (378) jump_statement -> RETURN SEMICOLON .

    $end            reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    RCPAREN         reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    LCPAREN         reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    TRY             reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    ASM             reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    TEMPLATE        reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    EXTERN          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    DPLUSOP         reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    DMINUSOP        reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    TYPEDEF         reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    MULTOP          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    BANDOP          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    PLUSOP          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    MINUSOP         reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    NOTSYM          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    BNOP            reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    DOUBLECOLON     reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    NEW             reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    DELETE          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    AUTO            reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    STATIC          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    VOLATILE        reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    INLINE          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    VIRTUAL         reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    THIS            reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    ENUM            reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    STRUCT          reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    UNION           reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    OPERATOR        reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 378 (jump_statement -> RETURN SEMICOLON .)


state 182

    (124) primary_expression -> LPAREN . expression RPAREN
    (57) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (223) type_name -> . type_specifier_list abstract_declarator
    (224) type_name -> . type_specifier_list
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 163
    type_name                      shift and go to state 165
    cast_expression                shift and go to state 39
    assignment_expression          shift and go to state 6
    type_specifier_list            shift and go to state 166
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    type_specifier                 shift and go to state 171
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    simple_type_name               shift and go to state 173
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    name                           shift and go to state 140
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 183

    (379) jump_statement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 351


state 184

    (393) try_block -> TRY compound_statement . handler_list
    (394) handler_list -> . handler handler_list
    (395) handler_list -> . handler
    (396) handler -> . CATCH LPAREN exception_declaration RPAREN compound_statement

    CATCH           shift and go to state 354

    handler_list                   shift and go to state 352
    handler                        shift and go to state 353

state 185

    (24) conditional_expression -> logical_OR_expression QUESMARK . expression COLON conditional_expression
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    logical_OR_expression          shift and go to state 34
    expression                     shift and go to state 355
    conditional_expression         shift and go to state 15
    assignment_expression          shift and go to state 6
    unary_expression               shift and go to state 16
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 186

    (26) logical_OR_expression -> logical_OR_expression OROP . logical_AND_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    logical_AND_expression         shift and go to state 356
    inclusive_OR_expression        shift and go to state 68
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 187

    (108) postfix_expression -> postfix_expression LSPAREN . expression RSPAREN
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    postfix_expression             shift and go to state 35
    expression                     shift and go to state 357
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 188

    (109) postfix_expression -> postfix_expression LPAREN . expression_list RPAREN
    (110) postfix_expression -> postfix_expression LPAREN . RPAREN
    (117) expression_list -> . assignment_expression
    (118) expression_list -> . expression_list COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 359
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    postfix_expression             shift and go to state 35
    expression_list                shift and go to state 358
    assignment_expression          shift and go to state 360
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 189

    (113) postfix_expression -> postfix_expression DOT . name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 362
    BNOP            shift and go to state 363
    OPERATOR        shift and go to state 105

    name                           shift and go to state 361
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 230
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 364

state 190

    (114) postfix_expression -> postfix_expression ARROW . name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 362
    BNOP            shift and go to state 363
    OPERATOR        shift and go to state 105

    name                           shift and go to state 365
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 230
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 364

state 191

    (115) postfix_expression -> postfix_expression DPLUSOP .

    LSPAREN         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    LPAREN          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    DOT             reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROW           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    DPLUSOP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    DMINUSOP        reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    EQUAL           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTEQOP        reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVEQOP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    MODEQOP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSEQOP        reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSEQOP       reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFTEQOP      reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFTEQOP      reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDEQOP        reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    B_E_OR          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    BOREQOP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    DOTSTAR         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROWSTAR       reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTOP          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVOP           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    MODOP           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSOP          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSOP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFT          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFT          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    LTCOMP          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    GTCOMP          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    LTECOMP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    GTECOMP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    EQCOMP          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    NEQCOMP         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDOP          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    XOROP           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    OROP            reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    ANDOP           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    QUESMARK        reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    COMMA           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    SEMICOLON       reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    $end            reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    COLON           reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    RPAREN          reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    RSPAREN         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)
    RCPAREN         reduce using rule 115 (postfix_expression -> postfix_expression DPLUSOP .)


state 192

    (116) postfix_expression -> postfix_expression DMINUSOP .

    LSPAREN         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    LPAREN          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    DOT             reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROW           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    DPLUSOP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    DMINUSOP        reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    EQUAL           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTEQOP        reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVEQOP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    MODEQOP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSEQOP        reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSEQOP       reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFTEQOP      reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFTEQOP      reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDEQOP        reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    B_E_OR          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    BOREQOP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    DOTSTAR         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROWSTAR       reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTOP          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVOP           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    MODOP           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSOP          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSOP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFT          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFT          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    LTCOMP          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    GTCOMP          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    LTECOMP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    GTECOMP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    EQCOMP          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    NEQCOMP         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDOP          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    XOROP           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    OROP            reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    ANDOP           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    QUESMARK        reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    COMMA           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    SEMICOLON       reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    $end            reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    COLON           reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    RPAREN          reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    RSPAREN         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)
    RCPAREN         reduce using rule 116 (postfix_expression -> postfix_expression DMINUSOP .)


state 193

    (59) unary_expression -> DPLUSOP unary_expression .

    EQUAL           reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    MULTEQOP        reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    DIVEQOP         reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    MODEQOP         reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    PLUSEQOP        reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    MINUSEQOP       reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    BANDEQOP        reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    B_E_OR          reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    BOREQOP         reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    DOTSTAR         reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    ARROWSTAR       reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    MULTOP          reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    DIVOP           reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    MODOP           reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    PLUSOP          reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    MINUSOP         reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFT          reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFT          reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    LTCOMP          reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    GTCOMP          reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    LTECOMP         reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    GTECOMP         reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    EQCOMP          reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    NEQCOMP         reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    BANDOP          reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    XOROP           reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    OROP            reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    ANDOP           reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    QUESMARK        reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    COMMA           reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    SEMICOLON       reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    $end            reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    COLON           reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    RPAREN          reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    RSPAREN         reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)
    RCPAREN         reduce using rule 59 (unary_expression -> DPLUSOP unary_expression .)


state 194

    (124) primary_expression -> LPAREN . expression RPAREN
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 163
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 195

    (60) unary_expression -> DMINUSOP unary_expression .

    EQUAL           reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    MULTEQOP        reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    DIVEQOP         reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    MODEQOP         reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    PLUSEQOP        reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    MINUSEQOP       reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    BANDEQOP        reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    B_E_OR          reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    BOREQOP         reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    DOTSTAR         reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    ARROWSTAR       reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    MULTOP          reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    DIVOP           reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    MODOP           reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    PLUSOP          reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    MINUSOP         reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFT          reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFT          reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    LTCOMP          reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    GTCOMP          reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    LTECOMP         reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    GTECOMP         reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    EQCOMP          reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    NEQCOMP         reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    BANDOP          reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    XOROP           reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    OROP            reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    ANDOP           reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    QUESMARK        reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    COMMA           reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    SEMICOLON       reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    $end            reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    COLON           reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    RPAREN          reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    RSPAREN         reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)
    RCPAREN         reduce using rule 60 (unary_expression -> DMINUSOP unary_expression .)


state 196

    (61) unary_expression -> unary_operator cast_expression .

    EQUAL           reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    MULTEQOP        reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    DIVEQOP         reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    MODEQOP         reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    PLUSEQOP        reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    MINUSEQOP       reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQOP      reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQOP      reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    BANDEQOP        reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    B_E_OR          reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    BOREQOP         reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    DOTSTAR         reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    ARROWSTAR       reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    MULTOP          reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    DIVOP           reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    MODOP           reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    PLUSOP          reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    MINUSOP         reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    LTCOMP          reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    GTCOMP          reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    LTECOMP         reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    GTECOMP         reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    EQCOMP          reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    NEQCOMP         reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    BANDOP          reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    XOROP           reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    OROP            reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    ANDOP           reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    QUESMARK        reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    SEMICOLON       reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    $end            reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    RSPAREN         reduce using rule 61 (unary_expression -> unary_operator cast_expression .)
    RCPAREN         reduce using rule 61 (unary_expression -> unary_operator cast_expression .)


state 197

    (62) unary_expression -> SIZEOF unary_expression .

    EQUAL           reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    MULTEQOP        reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    DIVEQOP         reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    MODEQOP         reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQOP        reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQOP       reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQOP      reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQOP      reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    BANDEQOP        reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    B_E_OR          reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    BOREQOP         reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    DOTSTAR         reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    ARROWSTAR       reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    MULTOP          reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    DIVOP           reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    MODOP           reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    PLUSOP          reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    MINUSOP         reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    LTCOMP          reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    GTCOMP          reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    LTECOMP         reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    GTECOMP         reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    EQCOMP          reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    NEQCOMP         reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    BANDOP          reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    XOROP           reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    OROP            reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    ANDOP           reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    QUESMARK        reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    $end            reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    RSPAREN         reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)
    RCPAREN         reduce using rule 62 (unary_expression -> SIZEOF unary_expression .)


state 198

    (63) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (124) primary_expression -> LPAREN . expression RPAREN
    (223) type_name -> . type_specifier_list abstract_declarator
    (224) type_name -> . type_specifier_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 328
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    IDENTIFIER      shift and go to state 327
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    OPERATOR        shift and go to state 105

    type_name                      shift and go to state 366
    expression                     shift and go to state 163
    type_specifier_list            shift and go to state 166
    assignment_expression          shift and go to state 6
    type_specifier                 shift and go to state 171
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    simple_type_name               shift and go to state 173
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    name                           shift and go to state 140
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 199

    (135) declaration -> decl_specifiers declarator_list . SEMICOLON
    (198) declarator_list -> declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 367
    COMMA           shift and go to state 213


state 200

    (136) declaration -> decl_specifiers SEMICOLON .

    $end            reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    RCPAREN         reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    IDENTIFIER      reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    CASE            reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    DEFAULT         reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    SEMICOLON       reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    LCPAREN         reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    IF              reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    SWITCH          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    WHILE           reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    DO              reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    FOR             reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    BREAK           reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    CONTINUE        reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    RETURN          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    GOTO            reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    TRY             reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    ASM             reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    TEMPLATE        reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    EXTERN          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    DPLUSOP         reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    DMINUSOP        reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    SIZEOF          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    TYPEDEF         reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    LPAREN          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    MULTOP          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    BANDOP          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    PLUSOP          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    MINUSOP         reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    NOTSYM          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    BNOP            reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    DOUBLECOLON     reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    NEW             reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    DELETE          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    AUTO            reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    STATIC          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    CONST           reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    VOLATILE        reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    INLINE          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    VIRTUAL         reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    THIS            reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    CHAR            reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    SHORT           reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    INT             reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    LONG            reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    SIGNED          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    UNSIGNED        reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    FLOAT           reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    DOUBLE          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    VOID            reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    ENUM            reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    NUMBER          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    STRING          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    CLASS           reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    STRUCT          reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    UNION           reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    OPERATOR        reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)
    ELSE            reduce using rule 136 (declaration -> decl_specifiers SEMICOLON .)


state 201

    (146) decl_specifiers -> decl_specifiers decl_specifier .

    SEMICOLON       reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    TYPEDEF         reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    LPAREN          reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    AUTO            reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    STATIC          reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    EXTERN          reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    CONST           reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    VOLATILE        reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    INLINE          reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    VIRTUAL         reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    BNOP            reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    MULTOP          reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    BANDOP          reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    CHAR            reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    SHORT           reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    INT             reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    LONG            reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    SIGNED          reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    UNSIGNED        reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    FLOAT           reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    DOUBLE          reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    VOID            reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    ENUM            reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    IDENTIFIER      reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    DOUBLECOLON     reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    CLASS           reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    STRUCT          reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    UNION           reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    OPERATOR        reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    EQUAL           reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    LSPAREN         reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    COMMA           reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    RPAREN          reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    GTCOMP          reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)
    COLON           reduce using rule 146 (decl_specifiers -> decl_specifiers decl_specifier .)


state 202

    (248) function_definition -> decl_specifiers declarator . ctor_initializer fct_body
    (250) function_definition -> decl_specifiers declarator . fct_body
    (203) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (205) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (206) declarator -> declarator . LSPAREN RSPAREN
    (199) init_declarator -> declarator . initializer
    (200) init_declarator -> declarator .
    (301) ctor_initializer -> . COLON mem_initializer_list
    (252) fct_body -> . compound_statement
    (253) initializer -> . EQUAL assignment_expression
    (254) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (255) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (256) initializer -> . LPAREN expression_list RPAREN
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN

    LPAREN          shift and go to state 243
    LSPAREN         shift and go to state 244
    SEMICOLON       reduce using rule 200 (init_declarator -> declarator .)
    COMMA           reduce using rule 200 (init_declarator -> declarator .)
    COLON           shift and go to state 245
    EQUAL           shift and go to state 247
    LCPAREN         shift and go to state 21

    ctor_initializer               shift and go to state 368
    fct_body                       shift and go to state 369
    initializer                    shift and go to state 242
    compound_statement             shift and go to state 246

state 203

    (207) declarator -> LPAREN . declarator RPAREN
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    LPAREN          shift and go to state 203
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    IDENTIFIER      shift and go to state 172
    DOUBLECOLON     shift and go to state 210
    OPERATOR        shift and go to state 105

    declarator                     shift and go to state 164
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    name                           shift and go to state 206
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 253
    complete_class_name            shift and go to state 254
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93

state 204

    (150) storage_class_specifier -> EXTERN .

    SEMICOLON       reduce using rule 150 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 150 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 150 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 150 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 150 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    VIRTUAL         reduce using rule 150 (storage_class_specifier -> EXTERN .)
    BNOP            reduce using rule 150 (storage_class_specifier -> EXTERN .)
    MULTOP          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    BANDOP          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 150 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 150 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 150 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 150 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 150 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 150 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 150 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 150 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 150 (storage_class_specifier -> EXTERN .)
    DOUBLECOLON     reduce using rule 150 (storage_class_specifier -> EXTERN .)
    CLASS           reduce using rule 150 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 150 (storage_class_specifier -> EXTERN .)
    OPERATOR        reduce using rule 150 (storage_class_specifier -> EXTERN .)
    EQUAL           reduce using rule 150 (storage_class_specifier -> EXTERN .)
    LSPAREN         reduce using rule 150 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 150 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    GTCOMP          reduce using rule 150 (storage_class_specifier -> EXTERN .)
    COLON           reduce using rule 150 (storage_class_specifier -> EXTERN .)


state 205

    (153) type_specifier -> simple_type_name .

    SEMICOLON       reduce using rule 153 (type_specifier -> simple_type_name .)
    TYPEDEF         reduce using rule 153 (type_specifier -> simple_type_name .)
    LPAREN          reduce using rule 153 (type_specifier -> simple_type_name .)
    AUTO            reduce using rule 153 (type_specifier -> simple_type_name .)
    STATIC          reduce using rule 153 (type_specifier -> simple_type_name .)
    EXTERN          reduce using rule 153 (type_specifier -> simple_type_name .)
    CONST           reduce using rule 153 (type_specifier -> simple_type_name .)
    VOLATILE        reduce using rule 153 (type_specifier -> simple_type_name .)
    INLINE          reduce using rule 153 (type_specifier -> simple_type_name .)
    VIRTUAL         reduce using rule 153 (type_specifier -> simple_type_name .)
    BNOP            reduce using rule 153 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 153 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 153 (type_specifier -> simple_type_name .)
    CHAR            reduce using rule 153 (type_specifier -> simple_type_name .)
    SHORT           reduce using rule 153 (type_specifier -> simple_type_name .)
    INT             reduce using rule 153 (type_specifier -> simple_type_name .)
    LONG            reduce using rule 153 (type_specifier -> simple_type_name .)
    SIGNED          reduce using rule 153 (type_specifier -> simple_type_name .)
    UNSIGNED        reduce using rule 153 (type_specifier -> simple_type_name .)
    FLOAT           reduce using rule 153 (type_specifier -> simple_type_name .)
    DOUBLE          reduce using rule 153 (type_specifier -> simple_type_name .)
    VOID            reduce using rule 153 (type_specifier -> simple_type_name .)
    ENUM            reduce using rule 153 (type_specifier -> simple_type_name .)
    IDENTIFIER      reduce using rule 153 (type_specifier -> simple_type_name .)
    DOUBLECOLON     reduce using rule 153 (type_specifier -> simple_type_name .)
    CLASS           reduce using rule 153 (type_specifier -> simple_type_name .)
    STRUCT          reduce using rule 153 (type_specifier -> simple_type_name .)
    UNION           reduce using rule 153 (type_specifier -> simple_type_name .)
    OPERATOR        reduce using rule 153 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 153 (type_specifier -> simple_type_name .)
    EQUAL           reduce using rule 153 (type_specifier -> simple_type_name .)
    MULTEQOP        reduce using rule 153 (type_specifier -> simple_type_name .)
    DIVEQOP         reduce using rule 153 (type_specifier -> simple_type_name .)
    MODEQOP         reduce using rule 153 (type_specifier -> simple_type_name .)
    PLUSEQOP        reduce using rule 153 (type_specifier -> simple_type_name .)
    MINUSEQOP       reduce using rule 153 (type_specifier -> simple_type_name .)
    LSHIFTEQOP      reduce using rule 153 (type_specifier -> simple_type_name .)
    RSHIFTEQOP      reduce using rule 153 (type_specifier -> simple_type_name .)
    BANDEQOP        reduce using rule 153 (type_specifier -> simple_type_name .)
    B_E_OR          reduce using rule 153 (type_specifier -> simple_type_name .)
    BOREQOP         reduce using rule 153 (type_specifier -> simple_type_name .)
    DOTSTAR         reduce using rule 153 (type_specifier -> simple_type_name .)
    ARROWSTAR       reduce using rule 153 (type_specifier -> simple_type_name .)
    DIVOP           reduce using rule 153 (type_specifier -> simple_type_name .)
    MODOP           reduce using rule 153 (type_specifier -> simple_type_name .)
    PLUSOP          reduce using rule 153 (type_specifier -> simple_type_name .)
    MINUSOP         reduce using rule 153 (type_specifier -> simple_type_name .)
    LSHIFT          reduce using rule 153 (type_specifier -> simple_type_name .)
    RSHIFT          reduce using rule 153 (type_specifier -> simple_type_name .)
    LTCOMP          reduce using rule 153 (type_specifier -> simple_type_name .)
    GTCOMP          reduce using rule 153 (type_specifier -> simple_type_name .)
    LTECOMP         reduce using rule 153 (type_specifier -> simple_type_name .)
    GTECOMP         reduce using rule 153 (type_specifier -> simple_type_name .)
    EQCOMP          reduce using rule 153 (type_specifier -> simple_type_name .)
    NEQCOMP         reduce using rule 153 (type_specifier -> simple_type_name .)
    XOROP           reduce using rule 153 (type_specifier -> simple_type_name .)
    OROP            reduce using rule 153 (type_specifier -> simple_type_name .)
    ANDOP           reduce using rule 153 (type_specifier -> simple_type_name .)
    QUESMARK        reduce using rule 153 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 153 (type_specifier -> simple_type_name .)
    $end            reduce using rule 153 (type_specifier -> simple_type_name .)
    COLON           reduce using rule 153 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 153 (type_specifier -> simple_type_name .)
    RSPAREN         reduce using rule 153 (type_specifier -> simple_type_name .)
    RCPAREN         reduce using rule 153 (type_specifier -> simple_type_name .)
    DOT             reduce using rule 153 (type_specifier -> simple_type_name .)
    ARROW           reduce using rule 153 (type_specifier -> simple_type_name .)
    DPLUSOP         reduce using rule 153 (type_specifier -> simple_type_name .)
    DMINUSOP        reduce using rule 153 (type_specifier -> simple_type_name .)
    LCPAREN         reduce using rule 153 (type_specifier -> simple_type_name .)


state 206

    (218) dname -> name .

    LPAREN          reduce using rule 218 (dname -> name .)
    LSPAREN         reduce using rule 218 (dname -> name .)
    COLON           reduce using rule 218 (dname -> name .)
    EQUAL           reduce using rule 218 (dname -> name .)
    LCPAREN         reduce using rule 218 (dname -> name .)
    SEMICOLON       reduce using rule 218 (dname -> name .)
    COMMA           reduce using rule 218 (dname -> name .)
    RPAREN          reduce using rule 218 (dname -> name .)
    GTCOMP          reduce using rule 218 (dname -> name .)


state 207

    (220) dname -> BNOP . class_name
    (129) name -> BNOP . class_name
    (5) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 222

    class_name                     shift and go to state 333

state 208

    (208) ptr_operator -> MULTOP . cv_qualifier_list
    (209) ptr_operator -> MULTOP .
    (214) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (215) cv_qualifier_list -> . cv_qualifier
    (216) cv_qualifier -> . CONST
    (217) cv_qualifier -> . VOLATILE

    LPAREN          reduce using rule 209 (ptr_operator -> MULTOP .)
    BNOP            reduce using rule 209 (ptr_operator -> MULTOP .)
    MULTOP          reduce using rule 209 (ptr_operator -> MULTOP .)
    BANDOP          reduce using rule 209 (ptr_operator -> MULTOP .)
    IDENTIFIER      reduce using rule 209 (ptr_operator -> MULTOP .)
    DOUBLECOLON     reduce using rule 209 (ptr_operator -> MULTOP .)
    OPERATOR        reduce using rule 209 (ptr_operator -> MULTOP .)
    LSPAREN         reduce using rule 209 (ptr_operator -> MULTOP .)
    RPAREN          reduce using rule 209 (ptr_operator -> MULTOP .)
    DOT             reduce using rule 209 (ptr_operator -> MULTOP .)
    ARROW           reduce using rule 209 (ptr_operator -> MULTOP .)
    DPLUSOP         reduce using rule 209 (ptr_operator -> MULTOP .)
    DMINUSOP        reduce using rule 209 (ptr_operator -> MULTOP .)
    EQUAL           reduce using rule 209 (ptr_operator -> MULTOP .)
    MULTEQOP        reduce using rule 209 (ptr_operator -> MULTOP .)
    DIVEQOP         reduce using rule 209 (ptr_operator -> MULTOP .)
    MODEQOP         reduce using rule 209 (ptr_operator -> MULTOP .)
    PLUSEQOP        reduce using rule 209 (ptr_operator -> MULTOP .)
    MINUSEQOP       reduce using rule 209 (ptr_operator -> MULTOP .)
    LSHIFTEQOP      reduce using rule 209 (ptr_operator -> MULTOP .)
    RSHIFTEQOP      reduce using rule 209 (ptr_operator -> MULTOP .)
    BANDEQOP        reduce using rule 209 (ptr_operator -> MULTOP .)
    B_E_OR          reduce using rule 209 (ptr_operator -> MULTOP .)
    BOREQOP         reduce using rule 209 (ptr_operator -> MULTOP .)
    DOTSTAR         reduce using rule 209 (ptr_operator -> MULTOP .)
    ARROWSTAR       reduce using rule 209 (ptr_operator -> MULTOP .)
    DIVOP           reduce using rule 209 (ptr_operator -> MULTOP .)
    MODOP           reduce using rule 209 (ptr_operator -> MULTOP .)
    PLUSOP          reduce using rule 209 (ptr_operator -> MULTOP .)
    MINUSOP         reduce using rule 209 (ptr_operator -> MULTOP .)
    LSHIFT          reduce using rule 209 (ptr_operator -> MULTOP .)
    RSHIFT          reduce using rule 209 (ptr_operator -> MULTOP .)
    LTCOMP          reduce using rule 209 (ptr_operator -> MULTOP .)
    GTCOMP          reduce using rule 209 (ptr_operator -> MULTOP .)
    LTECOMP         reduce using rule 209 (ptr_operator -> MULTOP .)
    GTECOMP         reduce using rule 209 (ptr_operator -> MULTOP .)
    EQCOMP          reduce using rule 209 (ptr_operator -> MULTOP .)
    NEQCOMP         reduce using rule 209 (ptr_operator -> MULTOP .)
    XOROP           reduce using rule 209 (ptr_operator -> MULTOP .)
    OROP            reduce using rule 209 (ptr_operator -> MULTOP .)
    ANDOP           reduce using rule 209 (ptr_operator -> MULTOP .)
    QUESMARK        reduce using rule 209 (ptr_operator -> MULTOP .)
    COMMA           reduce using rule 209 (ptr_operator -> MULTOP .)
    SEMICOLON       reduce using rule 209 (ptr_operator -> MULTOP .)
    $end            reduce using rule 209 (ptr_operator -> MULTOP .)
    COLON           reduce using rule 209 (ptr_operator -> MULTOP .)
    LCPAREN         reduce using rule 209 (ptr_operator -> MULTOP .)
    RSPAREN         reduce using rule 209 (ptr_operator -> MULTOP .)
    RCPAREN         reduce using rule 209 (ptr_operator -> MULTOP .)
    CONST           shift and go to state 218
    VOLATILE        shift and go to state 219

    cv_qualifier_list              shift and go to state 216
    cv_qualifier                   shift and go to state 217

state 209

    (210) ptr_operator -> BANDOP . cv_qualifier_list
    (211) ptr_operator -> BANDOP .
    (214) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (215) cv_qualifier_list -> . cv_qualifier
    (216) cv_qualifier -> . CONST
    (217) cv_qualifier -> . VOLATILE

    LPAREN          reduce using rule 211 (ptr_operator -> BANDOP .)
    BNOP            reduce using rule 211 (ptr_operator -> BANDOP .)
    MULTOP          reduce using rule 211 (ptr_operator -> BANDOP .)
    BANDOP          reduce using rule 211 (ptr_operator -> BANDOP .)
    IDENTIFIER      reduce using rule 211 (ptr_operator -> BANDOP .)
    DOUBLECOLON     reduce using rule 211 (ptr_operator -> BANDOP .)
    OPERATOR        reduce using rule 211 (ptr_operator -> BANDOP .)
    LSPAREN         reduce using rule 211 (ptr_operator -> BANDOP .)
    RPAREN          reduce using rule 211 (ptr_operator -> BANDOP .)
    DOT             reduce using rule 211 (ptr_operator -> BANDOP .)
    ARROW           reduce using rule 211 (ptr_operator -> BANDOP .)
    DPLUSOP         reduce using rule 211 (ptr_operator -> BANDOP .)
    DMINUSOP        reduce using rule 211 (ptr_operator -> BANDOP .)
    EQUAL           reduce using rule 211 (ptr_operator -> BANDOP .)
    MULTEQOP        reduce using rule 211 (ptr_operator -> BANDOP .)
    DIVEQOP         reduce using rule 211 (ptr_operator -> BANDOP .)
    MODEQOP         reduce using rule 211 (ptr_operator -> BANDOP .)
    PLUSEQOP        reduce using rule 211 (ptr_operator -> BANDOP .)
    MINUSEQOP       reduce using rule 211 (ptr_operator -> BANDOP .)
    LSHIFTEQOP      reduce using rule 211 (ptr_operator -> BANDOP .)
    RSHIFTEQOP      reduce using rule 211 (ptr_operator -> BANDOP .)
    BANDEQOP        reduce using rule 211 (ptr_operator -> BANDOP .)
    B_E_OR          reduce using rule 211 (ptr_operator -> BANDOP .)
    BOREQOP         reduce using rule 211 (ptr_operator -> BANDOP .)
    DOTSTAR         reduce using rule 211 (ptr_operator -> BANDOP .)
    ARROWSTAR       reduce using rule 211 (ptr_operator -> BANDOP .)
    DIVOP           reduce using rule 211 (ptr_operator -> BANDOP .)
    MODOP           reduce using rule 211 (ptr_operator -> BANDOP .)
    PLUSOP          reduce using rule 211 (ptr_operator -> BANDOP .)
    MINUSOP         reduce using rule 211 (ptr_operator -> BANDOP .)
    LSHIFT          reduce using rule 211 (ptr_operator -> BANDOP .)
    RSHIFT          reduce using rule 211 (ptr_operator -> BANDOP .)
    LTCOMP          reduce using rule 211 (ptr_operator -> BANDOP .)
    GTCOMP          reduce using rule 211 (ptr_operator -> BANDOP .)
    LTECOMP         reduce using rule 211 (ptr_operator -> BANDOP .)
    GTECOMP         reduce using rule 211 (ptr_operator -> BANDOP .)
    EQCOMP          reduce using rule 211 (ptr_operator -> BANDOP .)
    NEQCOMP         reduce using rule 211 (ptr_operator -> BANDOP .)
    XOROP           reduce using rule 211 (ptr_operator -> BANDOP .)
    OROP            reduce using rule 211 (ptr_operator -> BANDOP .)
    ANDOP           reduce using rule 211 (ptr_operator -> BANDOP .)
    QUESMARK        reduce using rule 211 (ptr_operator -> BANDOP .)
    COMMA           reduce using rule 211 (ptr_operator -> BANDOP .)
    SEMICOLON       reduce using rule 211 (ptr_operator -> BANDOP .)
    $end            reduce using rule 211 (ptr_operator -> BANDOP .)
    COLON           reduce using rule 211 (ptr_operator -> BANDOP .)
    LCPAREN         reduce using rule 211 (ptr_operator -> BANDOP .)
    RSPAREN         reduce using rule 211 (ptr_operator -> BANDOP .)
    RCPAREN         reduce using rule 211 (ptr_operator -> BANDOP .)
    CONST           shift and go to state 218
    VOLATILE        shift and go to state 219

    cv_qualifier_list              shift and go to state 220
    cv_qualifier                   shift and go to state 217

state 210

    (179) complete_class_name -> DOUBLECOLON . qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 222

    qualified_class_name           shift and go to state 370
    class_name                     shift and go to state 230

state 211

    (161) simple_type_name -> CHAR .

    SEMICOLON       reduce using rule 161 (simple_type_name -> CHAR .)
    TYPEDEF         reduce using rule 161 (simple_type_name -> CHAR .)
    LPAREN          reduce using rule 161 (simple_type_name -> CHAR .)
    AUTO            reduce using rule 161 (simple_type_name -> CHAR .)
    STATIC          reduce using rule 161 (simple_type_name -> CHAR .)
    EXTERN          reduce using rule 161 (simple_type_name -> CHAR .)
    CONST           reduce using rule 161 (simple_type_name -> CHAR .)
    VOLATILE        reduce using rule 161 (simple_type_name -> CHAR .)
    INLINE          reduce using rule 161 (simple_type_name -> CHAR .)
    VIRTUAL         reduce using rule 161 (simple_type_name -> CHAR .)
    BNOP            reduce using rule 161 (simple_type_name -> CHAR .)
    MULTOP          reduce using rule 161 (simple_type_name -> CHAR .)
    BANDOP          reduce using rule 161 (simple_type_name -> CHAR .)
    CHAR            reduce using rule 161 (simple_type_name -> CHAR .)
    SHORT           reduce using rule 161 (simple_type_name -> CHAR .)
    INT             reduce using rule 161 (simple_type_name -> CHAR .)
    LONG            reduce using rule 161 (simple_type_name -> CHAR .)
    SIGNED          reduce using rule 161 (simple_type_name -> CHAR .)
    UNSIGNED        reduce using rule 161 (simple_type_name -> CHAR .)
    FLOAT           reduce using rule 161 (simple_type_name -> CHAR .)
    DOUBLE          reduce using rule 161 (simple_type_name -> CHAR .)
    VOID            reduce using rule 161 (simple_type_name -> CHAR .)
    ENUM            reduce using rule 161 (simple_type_name -> CHAR .)
    IDENTIFIER      reduce using rule 161 (simple_type_name -> CHAR .)
    DOUBLECOLON     reduce using rule 161 (simple_type_name -> CHAR .)
    CLASS           reduce using rule 161 (simple_type_name -> CHAR .)
    STRUCT          reduce using rule 161 (simple_type_name -> CHAR .)
    UNION           reduce using rule 161 (simple_type_name -> CHAR .)
    OPERATOR        reduce using rule 161 (simple_type_name -> CHAR .)
    LSPAREN         reduce using rule 161 (simple_type_name -> CHAR .)
    EQUAL           reduce using rule 161 (simple_type_name -> CHAR .)
    MULTEQOP        reduce using rule 161 (simple_type_name -> CHAR .)
    DIVEQOP         reduce using rule 161 (simple_type_name -> CHAR .)
    MODEQOP         reduce using rule 161 (simple_type_name -> CHAR .)
    PLUSEQOP        reduce using rule 161 (simple_type_name -> CHAR .)
    MINUSEQOP       reduce using rule 161 (simple_type_name -> CHAR .)
    LSHIFTEQOP      reduce using rule 161 (simple_type_name -> CHAR .)
    RSHIFTEQOP      reduce using rule 161 (simple_type_name -> CHAR .)
    BANDEQOP        reduce using rule 161 (simple_type_name -> CHAR .)
    B_E_OR          reduce using rule 161 (simple_type_name -> CHAR .)
    BOREQOP         reduce using rule 161 (simple_type_name -> CHAR .)
    DOTSTAR         reduce using rule 161 (simple_type_name -> CHAR .)
    ARROWSTAR       reduce using rule 161 (simple_type_name -> CHAR .)
    DIVOP           reduce using rule 161 (simple_type_name -> CHAR .)
    MODOP           reduce using rule 161 (simple_type_name -> CHAR .)
    PLUSOP          reduce using rule 161 (simple_type_name -> CHAR .)
    MINUSOP         reduce using rule 161 (simple_type_name -> CHAR .)
    LSHIFT          reduce using rule 161 (simple_type_name -> CHAR .)
    RSHIFT          reduce using rule 161 (simple_type_name -> CHAR .)
    LTCOMP          reduce using rule 161 (simple_type_name -> CHAR .)
    GTCOMP          reduce using rule 161 (simple_type_name -> CHAR .)
    LTECOMP         reduce using rule 161 (simple_type_name -> CHAR .)
    GTECOMP         reduce using rule 161 (simple_type_name -> CHAR .)
    EQCOMP          reduce using rule 161 (simple_type_name -> CHAR .)
    NEQCOMP         reduce using rule 161 (simple_type_name -> CHAR .)
    XOROP           reduce using rule 161 (simple_type_name -> CHAR .)
    OROP            reduce using rule 161 (simple_type_name -> CHAR .)
    ANDOP           reduce using rule 161 (simple_type_name -> CHAR .)
    QUESMARK        reduce using rule 161 (simple_type_name -> CHAR .)
    COMMA           reduce using rule 161 (simple_type_name -> CHAR .)
    $end            reduce using rule 161 (simple_type_name -> CHAR .)
    COLON           reduce using rule 161 (simple_type_name -> CHAR .)
    RPAREN          reduce using rule 161 (simple_type_name -> CHAR .)
    RSPAREN         reduce using rule 161 (simple_type_name -> CHAR .)
    RCPAREN         reduce using rule 161 (simple_type_name -> CHAR .)
    DOT             reduce using rule 161 (simple_type_name -> CHAR .)
    ARROW           reduce using rule 161 (simple_type_name -> CHAR .)
    DPLUSOP         reduce using rule 161 (simple_type_name -> CHAR .)
    DMINUSOP        reduce using rule 161 (simple_type_name -> CHAR .)
    LCPAREN         reduce using rule 161 (simple_type_name -> CHAR .)


state 212

    (137) declaration -> declarator_list SEMICOLON .

    $end            reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    CASE            reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    LCPAREN         reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    IF              reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    SWITCH          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    WHILE           reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    DO              reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    FOR             reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    BREAK           reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    RETURN          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    GOTO            reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    TRY             reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    ASM             reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    EXTERN          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    DPLUSOP         reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    DMINUSOP        reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    LPAREN          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    MULTOP          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    BANDOP          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    PLUSOP          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    MINUSOP         reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    NOTSYM          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    BNOP            reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    DOUBLECOLON     reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    NEW             reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    DELETE          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    AUTO            reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    STATIC          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    CONST           reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    INLINE          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    THIS            reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    CHAR            reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    SHORT           reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    INT             reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    LONG            reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    SIGNED          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    FLOAT           reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    VOID            reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    ENUM            reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    NUMBER          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    STRING          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    CLASS           reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    STRUCT          reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    UNION           reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 137 (declaration -> declarator_list SEMICOLON .)
    ELSE            reduce using rule 137 (declaration -> declarator_list SEMICOLON .)


state 213

    (198) declarator_list -> declarator_list COMMA . init_declarator
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    LPAREN          shift and go to state 203
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    IDENTIFIER      shift and go to state 172
    DOUBLECOLON     shift and go to state 210
    OPERATOR        shift and go to state 105

    init_declarator                shift and go to state 371
    declarator                     shift and go to state 372
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    name                           shift and go to state 206
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 253
    complete_class_name            shift and go to state 254
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93

state 214

    (28) logical_AND_expression -> logical_AND_expression ANDOP . inclusive_OR_expression
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    inclusive_OR_expression        shift and go to state 373
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 215

    (111) postfix_expression -> simple_type_name LPAREN . expression_list RPAREN
    (112) postfix_expression -> simple_type_name LPAREN . RPAREN
    (117) expression_list -> . assignment_expression
    (118) expression_list -> . expression_list COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 375
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    simple_type_name               shift and go to state 139
    expression_list                shift and go to state 374
    assignment_expression          shift and go to state 360
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 216

    (208) ptr_operator -> MULTOP cv_qualifier_list .

    LPAREN          reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    BNOP            reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    MULTOP          reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    BANDOP          reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    IDENTIFIER      reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    DOUBLECOLON     reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    OPERATOR        reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    LSPAREN         reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    RPAREN          reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    DOT             reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    ARROW           reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    DPLUSOP         reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    DMINUSOP        reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    EQUAL           reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    MULTEQOP        reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    DIVEQOP         reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    MODEQOP         reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    PLUSEQOP        reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    MINUSEQOP       reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    LSHIFTEQOP      reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    RSHIFTEQOP      reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    BANDEQOP        reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    B_E_OR          reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    BOREQOP         reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    DOTSTAR         reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    ARROWSTAR       reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    DIVOP           reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    MODOP           reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    PLUSOP          reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    MINUSOP         reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    LSHIFT          reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    RSHIFT          reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    LTCOMP          reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    GTCOMP          reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    LTECOMP         reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    GTECOMP         reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    EQCOMP          reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    NEQCOMP         reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    XOROP           reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    OROP            reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    ANDOP           reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    QUESMARK        reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    COMMA           reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    SEMICOLON       reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    $end            reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    COLON           reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    LCPAREN         reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    RSPAREN         reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)
    RCPAREN         reduce using rule 208 (ptr_operator -> MULTOP cv_qualifier_list .)


state 217

    (214) cv_qualifier_list -> cv_qualifier . cv_qualifier_list
    (215) cv_qualifier_list -> cv_qualifier .
    (214) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (215) cv_qualifier_list -> . cv_qualifier
    (216) cv_qualifier -> . CONST
    (217) cv_qualifier -> . VOLATILE

    LPAREN          reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    BNOP            reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    MULTOP          reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    BANDOP          reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    IDENTIFIER      reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    DOUBLECOLON     reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    OPERATOR        reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    LSPAREN         reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    RPAREN          reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    DOT             reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    ARROW           reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    DPLUSOP         reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    DMINUSOP        reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    EQUAL           reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    MULTEQOP        reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    DIVEQOP         reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    MODEQOP         reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    PLUSEQOP        reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    MINUSEQOP       reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    LSHIFTEQOP      reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    RSHIFTEQOP      reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    BANDEQOP        reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    B_E_OR          reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    BOREQOP         reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    DOTSTAR         reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    ARROWSTAR       reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    DIVOP           reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    MODOP           reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    PLUSOP          reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    MINUSOP         reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    LSHIFT          reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    RSHIFT          reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    LTCOMP          reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    GTCOMP          reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    LTECOMP         reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    GTECOMP         reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    EQCOMP          reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    NEQCOMP         reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    XOROP           reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    OROP            reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    ANDOP           reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    QUESMARK        reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    COMMA           reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    SEMICOLON       reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    $end            reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    COLON           reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    LCPAREN         reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    RSPAREN         reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    RCPAREN         reduce using rule 215 (cv_qualifier_list -> cv_qualifier .)
    CONST           shift and go to state 218
    VOLATILE        shift and go to state 219

    cv_qualifier                   shift and go to state 217
    cv_qualifier_list              shift and go to state 376

state 218

    (216) cv_qualifier -> CONST .

    CONST           reduce using rule 216 (cv_qualifier -> CONST .)
    VOLATILE        reduce using rule 216 (cv_qualifier -> CONST .)
    LPAREN          reduce using rule 216 (cv_qualifier -> CONST .)
    BNOP            reduce using rule 216 (cv_qualifier -> CONST .)
    MULTOP          reduce using rule 216 (cv_qualifier -> CONST .)
    BANDOP          reduce using rule 216 (cv_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 216 (cv_qualifier -> CONST .)
    DOUBLECOLON     reduce using rule 216 (cv_qualifier -> CONST .)
    OPERATOR        reduce using rule 216 (cv_qualifier -> CONST .)
    LSPAREN         reduce using rule 216 (cv_qualifier -> CONST .)
    RPAREN          reduce using rule 216 (cv_qualifier -> CONST .)
    DOT             reduce using rule 216 (cv_qualifier -> CONST .)
    ARROW           reduce using rule 216 (cv_qualifier -> CONST .)
    DPLUSOP         reduce using rule 216 (cv_qualifier -> CONST .)
    DMINUSOP        reduce using rule 216 (cv_qualifier -> CONST .)
    EQUAL           reduce using rule 216 (cv_qualifier -> CONST .)
    MULTEQOP        reduce using rule 216 (cv_qualifier -> CONST .)
    DIVEQOP         reduce using rule 216 (cv_qualifier -> CONST .)
    MODEQOP         reduce using rule 216 (cv_qualifier -> CONST .)
    PLUSEQOP        reduce using rule 216 (cv_qualifier -> CONST .)
    MINUSEQOP       reduce using rule 216 (cv_qualifier -> CONST .)
    LSHIFTEQOP      reduce using rule 216 (cv_qualifier -> CONST .)
    RSHIFTEQOP      reduce using rule 216 (cv_qualifier -> CONST .)
    BANDEQOP        reduce using rule 216 (cv_qualifier -> CONST .)
    B_E_OR          reduce using rule 216 (cv_qualifier -> CONST .)
    BOREQOP         reduce using rule 216 (cv_qualifier -> CONST .)
    DOTSTAR         reduce using rule 216 (cv_qualifier -> CONST .)
    ARROWSTAR       reduce using rule 216 (cv_qualifier -> CONST .)
    DIVOP           reduce using rule 216 (cv_qualifier -> CONST .)
    MODOP           reduce using rule 216 (cv_qualifier -> CONST .)
    PLUSOP          reduce using rule 216 (cv_qualifier -> CONST .)
    MINUSOP         reduce using rule 216 (cv_qualifier -> CONST .)
    LSHIFT          reduce using rule 216 (cv_qualifier -> CONST .)
    RSHIFT          reduce using rule 216 (cv_qualifier -> CONST .)
    LTCOMP          reduce using rule 216 (cv_qualifier -> CONST .)
    GTCOMP          reduce using rule 216 (cv_qualifier -> CONST .)
    LTECOMP         reduce using rule 216 (cv_qualifier -> CONST .)
    GTECOMP         reduce using rule 216 (cv_qualifier -> CONST .)
    EQCOMP          reduce using rule 216 (cv_qualifier -> CONST .)
    NEQCOMP         reduce using rule 216 (cv_qualifier -> CONST .)
    XOROP           reduce using rule 216 (cv_qualifier -> CONST .)
    OROP            reduce using rule 216 (cv_qualifier -> CONST .)
    ANDOP           reduce using rule 216 (cv_qualifier -> CONST .)
    QUESMARK        reduce using rule 216 (cv_qualifier -> CONST .)
    COMMA           reduce using rule 216 (cv_qualifier -> CONST .)
    SEMICOLON       reduce using rule 216 (cv_qualifier -> CONST .)
    $end            reduce using rule 216 (cv_qualifier -> CONST .)
    COLON           reduce using rule 216 (cv_qualifier -> CONST .)
    LCPAREN         reduce using rule 216 (cv_qualifier -> CONST .)
    RSPAREN         reduce using rule 216 (cv_qualifier -> CONST .)
    RCPAREN         reduce using rule 216 (cv_qualifier -> CONST .)


state 219

    (217) cv_qualifier -> VOLATILE .

    CONST           reduce using rule 217 (cv_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 217 (cv_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 217 (cv_qualifier -> VOLATILE .)
    BNOP            reduce using rule 217 (cv_qualifier -> VOLATILE .)
    MULTOP          reduce using rule 217 (cv_qualifier -> VOLATILE .)
    BANDOP          reduce using rule 217 (cv_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 217 (cv_qualifier -> VOLATILE .)
    DOUBLECOLON     reduce using rule 217 (cv_qualifier -> VOLATILE .)
    OPERATOR        reduce using rule 217 (cv_qualifier -> VOLATILE .)
    LSPAREN         reduce using rule 217 (cv_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 217 (cv_qualifier -> VOLATILE .)
    DOT             reduce using rule 217 (cv_qualifier -> VOLATILE .)
    ARROW           reduce using rule 217 (cv_qualifier -> VOLATILE .)
    DPLUSOP         reduce using rule 217 (cv_qualifier -> VOLATILE .)
    DMINUSOP        reduce using rule 217 (cv_qualifier -> VOLATILE .)
    EQUAL           reduce using rule 217 (cv_qualifier -> VOLATILE .)
    MULTEQOP        reduce using rule 217 (cv_qualifier -> VOLATILE .)
    DIVEQOP         reduce using rule 217 (cv_qualifier -> VOLATILE .)
    MODEQOP         reduce using rule 217 (cv_qualifier -> VOLATILE .)
    PLUSEQOP        reduce using rule 217 (cv_qualifier -> VOLATILE .)
    MINUSEQOP       reduce using rule 217 (cv_qualifier -> VOLATILE .)
    LSHIFTEQOP      reduce using rule 217 (cv_qualifier -> VOLATILE .)
    RSHIFTEQOP      reduce using rule 217 (cv_qualifier -> VOLATILE .)
    BANDEQOP        reduce using rule 217 (cv_qualifier -> VOLATILE .)
    B_E_OR          reduce using rule 217 (cv_qualifier -> VOLATILE .)
    BOREQOP         reduce using rule 217 (cv_qualifier -> VOLATILE .)
    DOTSTAR         reduce using rule 217 (cv_qualifier -> VOLATILE .)
    ARROWSTAR       reduce using rule 217 (cv_qualifier -> VOLATILE .)
    DIVOP           reduce using rule 217 (cv_qualifier -> VOLATILE .)
    MODOP           reduce using rule 217 (cv_qualifier -> VOLATILE .)
    PLUSOP          reduce using rule 217 (cv_qualifier -> VOLATILE .)
    MINUSOP         reduce using rule 217 (cv_qualifier -> VOLATILE .)
    LSHIFT          reduce using rule 217 (cv_qualifier -> VOLATILE .)
    RSHIFT          reduce using rule 217 (cv_qualifier -> VOLATILE .)
    LTCOMP          reduce using rule 217 (cv_qualifier -> VOLATILE .)
    GTCOMP          reduce using rule 217 (cv_qualifier -> VOLATILE .)
    LTECOMP         reduce using rule 217 (cv_qualifier -> VOLATILE .)
    GTECOMP         reduce using rule 217 (cv_qualifier -> VOLATILE .)
    EQCOMP          reduce using rule 217 (cv_qualifier -> VOLATILE .)
    NEQCOMP         reduce using rule 217 (cv_qualifier -> VOLATILE .)
    XOROP           reduce using rule 217 (cv_qualifier -> VOLATILE .)
    OROP            reduce using rule 217 (cv_qualifier -> VOLATILE .)
    ANDOP           reduce using rule 217 (cv_qualifier -> VOLATILE .)
    QUESMARK        reduce using rule 217 (cv_qualifier -> VOLATILE .)
    COMMA           reduce using rule 217 (cv_qualifier -> VOLATILE .)
    SEMICOLON       reduce using rule 217 (cv_qualifier -> VOLATILE .)
    $end            reduce using rule 217 (cv_qualifier -> VOLATILE .)
    COLON           reduce using rule 217 (cv_qualifier -> VOLATILE .)
    LCPAREN         reduce using rule 217 (cv_qualifier -> VOLATILE .)
    RSPAREN         reduce using rule 217 (cv_qualifier -> VOLATILE .)
    RCPAREN         reduce using rule 217 (cv_qualifier -> VOLATILE .)


state 220

    (210) ptr_operator -> BANDOP cv_qualifier_list .

    LPAREN          reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    BNOP            reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    MULTOP          reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    BANDOP          reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    IDENTIFIER      reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    DOUBLECOLON     reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    OPERATOR        reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    LSPAREN         reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    RPAREN          reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    DOT             reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    ARROW           reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    DPLUSOP         reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    DMINUSOP        reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    EQUAL           reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    MULTEQOP        reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    DIVEQOP         reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    MODEQOP         reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    PLUSEQOP        reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    MINUSEQOP       reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    LSHIFTEQOP      reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    RSHIFTEQOP      reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    BANDEQOP        reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    B_E_OR          reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    BOREQOP         reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    DOTSTAR         reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    ARROWSTAR       reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    DIVOP           reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    MODOP           reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    PLUSOP          reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    MINUSOP         reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    LSHIFT          reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    RSHIFT          reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    LTCOMP          reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    GTCOMP          reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    LTECOMP         reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    GTECOMP         reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    EQCOMP          reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    NEQCOMP         reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    XOROP           reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    OROP            reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    ANDOP           reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    QUESMARK        reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    COMMA           reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    SEMICOLON       reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    $end            reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    COLON           reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    LCPAREN         reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    RSPAREN         reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)
    RCPAREN         reduce using rule 210 (ptr_operator -> BANDOP cv_qualifier_list .)


state 221

    (129) name -> BNOP class_name .
    (220) dname -> BNOP class_name .

  ! reduce/reduce conflict for LPAREN resolved using rule 129 (name -> BNOP class_name .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 129 (name -> BNOP class_name .)
  ! reduce/reduce conflict for COLON resolved using rule 129 (name -> BNOP class_name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 129 (name -> BNOP class_name .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 129 (name -> BNOP class_name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 129 (name -> BNOP class_name .)
  ! reduce/reduce conflict for COMMA resolved using rule 129 (name -> BNOP class_name .)
    LSPAREN         reduce using rule 129 (name -> BNOP class_name .)
    LPAREN          reduce using rule 129 (name -> BNOP class_name .)
    DOT             reduce using rule 129 (name -> BNOP class_name .)
    ARROW           reduce using rule 129 (name -> BNOP class_name .)
    DPLUSOP         reduce using rule 129 (name -> BNOP class_name .)
    DMINUSOP        reduce using rule 129 (name -> BNOP class_name .)
    EQUAL           reduce using rule 129 (name -> BNOP class_name .)
    MULTEQOP        reduce using rule 129 (name -> BNOP class_name .)
    DIVEQOP         reduce using rule 129 (name -> BNOP class_name .)
    MODEQOP         reduce using rule 129 (name -> BNOP class_name .)
    PLUSEQOP        reduce using rule 129 (name -> BNOP class_name .)
    MINUSEQOP       reduce using rule 129 (name -> BNOP class_name .)
    LSHIFTEQOP      reduce using rule 129 (name -> BNOP class_name .)
    RSHIFTEQOP      reduce using rule 129 (name -> BNOP class_name .)
    BANDEQOP        reduce using rule 129 (name -> BNOP class_name .)
    B_E_OR          reduce using rule 129 (name -> BNOP class_name .)
    BOREQOP         reduce using rule 129 (name -> BNOP class_name .)
    DOTSTAR         reduce using rule 129 (name -> BNOP class_name .)
    ARROWSTAR       reduce using rule 129 (name -> BNOP class_name .)
    MULTOP          reduce using rule 129 (name -> BNOP class_name .)
    DIVOP           reduce using rule 129 (name -> BNOP class_name .)
    MODOP           reduce using rule 129 (name -> BNOP class_name .)
    PLUSOP          reduce using rule 129 (name -> BNOP class_name .)
    MINUSOP         reduce using rule 129 (name -> BNOP class_name .)
    LSHIFT          reduce using rule 129 (name -> BNOP class_name .)
    RSHIFT          reduce using rule 129 (name -> BNOP class_name .)
    LTCOMP          reduce using rule 129 (name -> BNOP class_name .)
    GTCOMP          reduce using rule 129 (name -> BNOP class_name .)
    LTECOMP         reduce using rule 129 (name -> BNOP class_name .)
    GTECOMP         reduce using rule 129 (name -> BNOP class_name .)
    EQCOMP          reduce using rule 129 (name -> BNOP class_name .)
    NEQCOMP         reduce using rule 129 (name -> BNOP class_name .)
    BANDOP          reduce using rule 129 (name -> BNOP class_name .)
    XOROP           reduce using rule 129 (name -> BNOP class_name .)
    OROP            reduce using rule 129 (name -> BNOP class_name .)
    ANDOP           reduce using rule 129 (name -> BNOP class_name .)
    QUESMARK        reduce using rule 129 (name -> BNOP class_name .)
    COMMA           reduce using rule 129 (name -> BNOP class_name .)
    SEMICOLON       reduce using rule 129 (name -> BNOP class_name .)
    $end            reduce using rule 129 (name -> BNOP class_name .)
    COLON           reduce using rule 129 (name -> BNOP class_name .)
    LCPAREN         reduce using rule 129 (name -> BNOP class_name .)

  ! LPAREN          [ reduce using rule 220 (dname -> BNOP class_name .) ]
  ! LSPAREN         [ reduce using rule 220 (dname -> BNOP class_name .) ]
  ! COLON           [ reduce using rule 220 (dname -> BNOP class_name .) ]
  ! EQUAL           [ reduce using rule 220 (dname -> BNOP class_name .) ]
  ! LCPAREN         [ reduce using rule 220 (dname -> BNOP class_name .) ]
  ! SEMICOLON       [ reduce using rule 220 (dname -> BNOP class_name .) ]
  ! COMMA           [ reduce using rule 220 (dname -> BNOP class_name .) ]


state 222

    (5) class_name -> IDENTIFIER .

    LSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    DOT             reduce using rule 5 (class_name -> IDENTIFIER .)
    ARROW           reduce using rule 5 (class_name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 5 (class_name -> IDENTIFIER .)
    EQUAL           reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 5 (class_name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    MODEQOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 5 (class_name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 5 (class_name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 5 (class_name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 5 (class_name -> IDENTIFIER .)
    B_E_OR          reduce using rule 5 (class_name -> IDENTIFIER .)
    BOREQOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 5 (class_name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    DIVOP           reduce using rule 5 (class_name -> IDENTIFIER .)
    MODOP           reduce using rule 5 (class_name -> IDENTIFIER .)
    PLUSOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    MINUSOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 5 (class_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 5 (class_name -> IDENTIFIER .)
    LTCOMP          reduce using rule 5 (class_name -> IDENTIFIER .)
    GTCOMP          reduce using rule 5 (class_name -> IDENTIFIER .)
    LTECOMP         reduce using rule 5 (class_name -> IDENTIFIER .)
    GTECOMP         reduce using rule 5 (class_name -> IDENTIFIER .)
    EQCOMP          reduce using rule 5 (class_name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    XOROP           reduce using rule 5 (class_name -> IDENTIFIER .)
    OROP            reduce using rule 5 (class_name -> IDENTIFIER .)
    ANDOP           reduce using rule 5 (class_name -> IDENTIFIER .)
    QUESMARK        reduce using rule 5 (class_name -> IDENTIFIER .)
    COMMA           reduce using rule 5 (class_name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 5 (class_name -> IDENTIFIER .)
    $end            reduce using rule 5 (class_name -> IDENTIFIER .)
    COLON           reduce using rule 5 (class_name -> IDENTIFIER .)
    LCPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    RSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    RCPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 5 (class_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 5 (class_name -> IDENTIFIER .)
    AUTO            reduce using rule 5 (class_name -> IDENTIFIER .)
    STATIC          reduce using rule 5 (class_name -> IDENTIFIER .)
    EXTERN          reduce using rule 5 (class_name -> IDENTIFIER .)
    CONST           reduce using rule 5 (class_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 5 (class_name -> IDENTIFIER .)
    INLINE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 5 (class_name -> IDENTIFIER .)
    BNOP            reduce using rule 5 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 5 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 5 (class_name -> IDENTIFIER .)
    INT             reduce using rule 5 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 5 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 5 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 5 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 5 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 5 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 5 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 5 (class_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 5 (class_name -> IDENTIFIER .)


state 223

    (72) allocation_expression -> DOUBLECOLON NEW . placement new_type_name new_initializer
    (74) allocation_expression -> DOUBLECOLON NEW . new_type_name new_initializer
    (76) allocation_expression -> DOUBLECOLON NEW . placement new_type_name
    (78) allocation_expression -> DOUBLECOLON NEW . new_type_name
    (80) allocation_expression -> DOUBLECOLON NEW . placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> DOUBLECOLON NEW . LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> DOUBLECOLON NEW . placement LPAREN type_name RPAREN
    (86) allocation_expression -> DOUBLECOLON NEW . LPAREN type_name RPAREN
    (88) placement -> . LPAREN expression_list RPAREN
    (89) new_type_name -> . type_specifier_list new_declarator
    (90) new_type_name -> . type_specifier_list
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 379
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    IDENTIFIER      shift and go to state 235

    placement                      shift and go to state 377
    new_type_name                  shift and go to state 378
    type_specifier_list            shift and go to state 234
    type_specifier                 shift and go to state 171
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 236
    typedef_name                   shift and go to state 148

state 224

    (103) deallocation_expression -> DOUBLECOLON DELETE . cast_expression
    (105) deallocation_expression -> DOUBLECOLON DELETE . LSPAREN RSPAREN cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LSPAREN         shift and go to state 381
    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    cast_expression                shift and go to state 380
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 225

    (121) primary_expression -> DOUBLECOLON IDENTIFIER .
    (5) class_name -> IDENTIFIER .

  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (class_name -> IDENTIFIER .)
    DOT             reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    ARROW           reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    DPLUSOP         reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    DMINUSOP        reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    MULTEQOP        reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    DIVEQOP         reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    MODEQOP         reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    PLUSEQOP        reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    MINUSEQOP       reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    BANDEQOP        reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    B_E_OR          reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    BOREQOP         reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    DOTSTAR         reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    ARROWSTAR       reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    DIVOP           reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    MODOP           reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    PLUSOP          reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    MINUSOP         reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    LSHIFT          reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    RSHIFT          reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    LTCOMP          reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    GTCOMP          reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    LTECOMP         reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    GTECOMP         reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    EQCOMP          reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    NEQCOMP         reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    XOROP           reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    OROP            reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    ANDOP           reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    QUESMARK        reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    $end            reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    COLON           reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    RSPAREN         reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    RCPAREN         reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    DOUBLECOLON     reduce using rule 5 (class_name -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 5 (class_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 5 (class_name -> IDENTIFIER .)
    AUTO            reduce using rule 5 (class_name -> IDENTIFIER .)
    STATIC          reduce using rule 5 (class_name -> IDENTIFIER .)
    EXTERN          reduce using rule 5 (class_name -> IDENTIFIER .)
    CONST           reduce using rule 5 (class_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 5 (class_name -> IDENTIFIER .)
    INLINE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 5 (class_name -> IDENTIFIER .)
    BNOP            reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 5 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 5 (class_name -> IDENTIFIER .)
    INT             reduce using rule 5 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 5 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 5 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 5 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 5 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 5 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 5 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 5 (class_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 5 (class_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    EQUAL           reduce using rule 5 (class_name -> IDENTIFIER .)
    COMMA           reduce using rule 5 (class_name -> IDENTIFIER .)

  ! LSPAREN         [ reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 121 (primary_expression -> DOUBLECOLON IDENTIFIER .) ]


state 226

    (122) primary_expression -> DOUBLECOLON operator_function_name .

    LSPAREN         reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    LPAREN          reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    DOT             reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    ARROW           reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    DPLUSOP         reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    DMINUSOP        reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    EQUAL           reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    MULTEQOP        reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    DIVEQOP         reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    MODEQOP         reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    PLUSEQOP        reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    MINUSEQOP       reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    LSHIFTEQOP      reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    RSHIFTEQOP      reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    BANDEQOP        reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    B_E_OR          reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    BOREQOP         reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    DOTSTAR         reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    ARROWSTAR       reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    MULTOP          reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    DIVOP           reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    MODOP           reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    PLUSOP          reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    MINUSOP         reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    LSHIFT          reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    RSHIFT          reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    LTCOMP          reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    GTCOMP          reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    LTECOMP         reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    GTECOMP         reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    EQCOMP          reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    NEQCOMP         reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    BANDOP          reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    XOROP           reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    OROP            reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    ANDOP           reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    QUESMARK        reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    COMMA           reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    SEMICOLON       reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    $end            reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    COLON           reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    RPAREN          reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    RSPAREN         reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)
    RCPAREN         reduce using rule 122 (primary_expression -> DOUBLECOLON operator_function_name .)


state 227

    (123) primary_expression -> DOUBLECOLON qualified_name .

    LSPAREN         reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    LPAREN          reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    DOT             reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    ARROW           reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    DPLUSOP         reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    DMINUSOP        reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    EQUAL           reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    MULTEQOP        reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    DIVEQOP         reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    MODEQOP         reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    PLUSEQOP        reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    MINUSEQOP       reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    LSHIFTEQOP      reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    RSHIFTEQOP      reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    BANDEQOP        reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    B_E_OR          reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    BOREQOP         reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    DOTSTAR         reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    ARROWSTAR       reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    MULTOP          reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    DIVOP           reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    MODOP           reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    PLUSOP          reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    MINUSOP         reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    LSHIFT          reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    RSHIFT          reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    LTCOMP          reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    GTCOMP          reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    LTECOMP         reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    GTECOMP         reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    EQCOMP          reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    NEQCOMP         reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    BANDOP          reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    XOROP           reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    OROP            reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    ANDOP           reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    QUESMARK        reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    COMMA           reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    SEMICOLON       reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    $end            reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    COLON           reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    RPAREN          reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    RSPAREN         reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)
    RCPAREN         reduce using rule 123 (primary_expression -> DOUBLECOLON qualified_name .)


state 228

    (179) complete_class_name -> DOUBLECOLON qualified_class_name .
    (131) qualified_name -> qualified_class_name . DOUBLECOLON name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    LPAREN          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    SEMICOLON       reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    TYPEDEF         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    AUTO            reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    STATIC          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    EXTERN          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    CONST           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    VOLATILE        reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    INLINE          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    VIRTUAL         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    BNOP            reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    MULTOP          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    BANDOP          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    CHAR            reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    SHORT           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    INT             reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LONG            reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    SIGNED          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    UNSIGNED        reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    FLOAT           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DOUBLE          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    VOID            reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    ENUM            reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    IDENTIFIER      reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    CLASS           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    STRUCT          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    UNION           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    OPERATOR        reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LSPAREN         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    RPAREN          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    EQUAL           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    COMMA           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DOUBLECOLON     shift and go to state 257

  ! DOUBLECOLON     [ reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .) ]


state 229

    (308) operator_function_name -> OPERATOR . operator_name
    (309) operator_name -> . NEW
    (310) operator_name -> . DELETE
    (311) operator_name -> . PLUSOP
    (312) operator_name -> . MINUSOP
    (313) operator_name -> . MULTOP
    (314) operator_name -> . DIVOP
    (315) operator_name -> . MODOP
    (316) operator_name -> . XOROP
    (317) operator_name -> . BANDOP
    (318) operator_name -> . BNOP
    (319) operator_name -> . NOTSYM
    (320) operator_name -> . EQUAL
    (321) operator_name -> . LTCOMP
    (322) operator_name -> . GTCOMP
    (323) operator_name -> . PLUSEQOP
    (324) operator_name -> . MINUSEQOP
    (325) operator_name -> . MULTEQOP
    (326) operator_name -> . DIVEQOP
    (327) operator_name -> . MODEQOP
    (328) operator_name -> . B_E_OR
    (329) operator_name -> . BANDEQOP
    (330) operator_name -> . LSHIFT
    (331) operator_name -> . RSHIFT
    (332) operator_name -> . RSHIFTEQOP
    (333) operator_name -> . LSHIFTEQOP
    (334) operator_name -> . EQCOMP
    (335) operator_name -> . NEQCOMP
    (336) operator_name -> . LTECOMP
    (337) operator_name -> . GTECOMP
    (338) operator_name -> . ANDOP
    (339) operator_name -> . OROP
    (340) operator_name -> . DPLUSOP
    (341) operator_name -> . DMINUSOP
    (342) operator_name -> . COMMA
    (343) operator_name -> . ARROWSTAR
    (344) operator_name -> . ARROW
    (345) operator_name -> . LPAREN RPAREN
    (346) operator_name -> . LSPAREN RSPAREN

    NEW             shift and go to state 261
    DELETE          shift and go to state 262
    PLUSOP          shift and go to state 263
    MINUSOP         shift and go to state 264
    MULTOP          shift and go to state 265
    DIVOP           shift and go to state 266
    MODOP           shift and go to state 267
    XOROP           shift and go to state 268
    BANDOP          shift and go to state 269
    BNOP            shift and go to state 270
    NOTSYM          shift and go to state 271
    EQUAL           shift and go to state 272
    LTCOMP          shift and go to state 273
    GTCOMP          shift and go to state 274
    PLUSEQOP        shift and go to state 275
    MINUSEQOP       shift and go to state 276
    MULTEQOP        shift and go to state 277
    DIVEQOP         shift and go to state 278
    MODEQOP         shift and go to state 279
    B_E_OR          shift and go to state 280
    BANDEQOP        shift and go to state 281
    LSHIFT          shift and go to state 282
    RSHIFT          shift and go to state 283
    RSHIFTEQOP      shift and go to state 284
    LSHIFTEQOP      shift and go to state 285
    EQCOMP          shift and go to state 286
    NEQCOMP         shift and go to state 287
    LTECOMP         shift and go to state 288
    GTECOMP         shift and go to state 289
    ANDOP           shift and go to state 290
    OROP            shift and go to state 291
    DPLUSOP         shift and go to state 292
    DMINUSOP        shift and go to state 293
    COMMA           shift and go to state 294
    ARROWSTAR       shift and go to state 295
    ARROW           shift and go to state 296
    LPAREN          shift and go to state 297
    LSPAREN         shift and go to state 298

    operator_name                  shift and go to state 259

state 230

    (180) qualified_class_name -> class_name .
    (181) qualified_class_name -> class_name . DOUBLECOLON qualified_class_name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    LPAREN          reduce using rule 180 (qualified_class_name -> class_name .)
    SEMICOLON       reduce using rule 180 (qualified_class_name -> class_name .)
    TYPEDEF         reduce using rule 180 (qualified_class_name -> class_name .)
    AUTO            reduce using rule 180 (qualified_class_name -> class_name .)
    STATIC          reduce using rule 180 (qualified_class_name -> class_name .)
    EXTERN          reduce using rule 180 (qualified_class_name -> class_name .)
    CONST           reduce using rule 180 (qualified_class_name -> class_name .)
    VOLATILE        reduce using rule 180 (qualified_class_name -> class_name .)
    INLINE          reduce using rule 180 (qualified_class_name -> class_name .)
    VIRTUAL         reduce using rule 180 (qualified_class_name -> class_name .)
    BNOP            reduce using rule 180 (qualified_class_name -> class_name .)
    MULTOP          reduce using rule 180 (qualified_class_name -> class_name .)
    BANDOP          reduce using rule 180 (qualified_class_name -> class_name .)
    CHAR            reduce using rule 180 (qualified_class_name -> class_name .)
    SHORT           reduce using rule 180 (qualified_class_name -> class_name .)
    INT             reduce using rule 180 (qualified_class_name -> class_name .)
    LONG            reduce using rule 180 (qualified_class_name -> class_name .)
    SIGNED          reduce using rule 180 (qualified_class_name -> class_name .)
    UNSIGNED        reduce using rule 180 (qualified_class_name -> class_name .)
    FLOAT           reduce using rule 180 (qualified_class_name -> class_name .)
    DOUBLE          reduce using rule 180 (qualified_class_name -> class_name .)
    VOID            reduce using rule 180 (qualified_class_name -> class_name .)
    ENUM            reduce using rule 180 (qualified_class_name -> class_name .)
    IDENTIFIER      reduce using rule 180 (qualified_class_name -> class_name .)
    CLASS           reduce using rule 180 (qualified_class_name -> class_name .)
    STRUCT          reduce using rule 180 (qualified_class_name -> class_name .)
    UNION           reduce using rule 180 (qualified_class_name -> class_name .)
    OPERATOR        reduce using rule 180 (qualified_class_name -> class_name .)
    LSPAREN         reduce using rule 180 (qualified_class_name -> class_name .)
    RPAREN          reduce using rule 180 (qualified_class_name -> class_name .)
    EQUAL           reduce using rule 180 (qualified_class_name -> class_name .)
    COMMA           reduce using rule 180 (qualified_class_name -> class_name .)
    MULTEQOP        reduce using rule 180 (qualified_class_name -> class_name .)
    DIVEQOP         reduce using rule 180 (qualified_class_name -> class_name .)
    MODEQOP         reduce using rule 180 (qualified_class_name -> class_name .)
    PLUSEQOP        reduce using rule 180 (qualified_class_name -> class_name .)
    MINUSEQOP       reduce using rule 180 (qualified_class_name -> class_name .)
    LSHIFTEQOP      reduce using rule 180 (qualified_class_name -> class_name .)
    RSHIFTEQOP      reduce using rule 180 (qualified_class_name -> class_name .)
    BANDEQOP        reduce using rule 180 (qualified_class_name -> class_name .)
    B_E_OR          reduce using rule 180 (qualified_class_name -> class_name .)
    BOREQOP         reduce using rule 180 (qualified_class_name -> class_name .)
    DOTSTAR         reduce using rule 180 (qualified_class_name -> class_name .)
    ARROWSTAR       reduce using rule 180 (qualified_class_name -> class_name .)
    DIVOP           reduce using rule 180 (qualified_class_name -> class_name .)
    MODOP           reduce using rule 180 (qualified_class_name -> class_name .)
    PLUSOP          reduce using rule 180 (qualified_class_name -> class_name .)
    MINUSOP         reduce using rule 180 (qualified_class_name -> class_name .)
    LSHIFT          reduce using rule 180 (qualified_class_name -> class_name .)
    RSHIFT          reduce using rule 180 (qualified_class_name -> class_name .)
    LTCOMP          reduce using rule 180 (qualified_class_name -> class_name .)
    GTCOMP          reduce using rule 180 (qualified_class_name -> class_name .)
    LTECOMP         reduce using rule 180 (qualified_class_name -> class_name .)
    GTECOMP         reduce using rule 180 (qualified_class_name -> class_name .)
    EQCOMP          reduce using rule 180 (qualified_class_name -> class_name .)
    NEQCOMP         reduce using rule 180 (qualified_class_name -> class_name .)
    XOROP           reduce using rule 180 (qualified_class_name -> class_name .)
    OROP            reduce using rule 180 (qualified_class_name -> class_name .)
    ANDOP           reduce using rule 180 (qualified_class_name -> class_name .)
    QUESMARK        reduce using rule 180 (qualified_class_name -> class_name .)
    $end            reduce using rule 180 (qualified_class_name -> class_name .)
    COLON           reduce using rule 180 (qualified_class_name -> class_name .)
    RSPAREN         reduce using rule 180 (qualified_class_name -> class_name .)
    RCPAREN         reduce using rule 180 (qualified_class_name -> class_name .)
    DOT             reduce using rule 180 (qualified_class_name -> class_name .)
    ARROW           reduce using rule 180 (qualified_class_name -> class_name .)
    DPLUSOP         reduce using rule 180 (qualified_class_name -> class_name .)
    DMINUSOP        reduce using rule 180 (qualified_class_name -> class_name .)
    LCPAREN         reduce using rule 180 (qualified_class_name -> class_name .)
    DOUBLECOLON     shift and go to state 382

  ! DOUBLECOLON     [ reduce using rule 180 (qualified_class_name -> class_name .) ]


state 231

    (73) allocation_expression -> NEW placement . new_type_name new_initializer
    (77) allocation_expression -> NEW placement . new_type_name
    (81) allocation_expression -> NEW placement . LPAREN type_name RPAREN new_initializer
    (85) allocation_expression -> NEW placement . LPAREN type_name RPAREN
    (89) new_type_name -> . type_specifier_list new_declarator
    (90) new_type_name -> . type_specifier_list
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 384
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    IDENTIFIER      shift and go to state 235

    new_type_name                  shift and go to state 383
    type_specifier_list            shift and go to state 234
    type_specifier                 shift and go to state 171
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 236
    typedef_name                   shift and go to state 148

state 232

    (75) allocation_expression -> NEW new_type_name . new_initializer
    (79) allocation_expression -> NEW new_type_name .
    (101) new_initializer -> . LPAREN initializer_list RPAREN
    (102) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    MULTEQOP        reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    DIVEQOP         reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    MODEQOP         reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    PLUSEQOP        reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    MINUSEQOP       reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    LSHIFTEQOP      reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    RSHIFTEQOP      reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    BANDEQOP        reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    B_E_OR          reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    BOREQOP         reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    DOTSTAR         reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    ARROWSTAR       reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    MULTOP          reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    DIVOP           reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    MODOP           reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    PLUSOP          reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    MINUSOP         reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    LSHIFT          reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    RSHIFT          reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    LTCOMP          reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    GTCOMP          reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    LTECOMP         reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    GTECOMP         reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    EQCOMP          reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    NEQCOMP         reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    BANDOP          reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    XOROP           reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    OROP            reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    ANDOP           reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    QUESMARK        reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    COMMA           reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    SEMICOLON       reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    $end            reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    COLON           reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    RPAREN          reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    RSPAREN         reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    RCPAREN         reduce using rule 79 (allocation_expression -> NEW new_type_name .)
    LPAREN          shift and go to state 386

    new_initializer                shift and go to state 385

state 233

    (83) allocation_expression -> NEW LPAREN . type_name RPAREN new_initializer
    (87) allocation_expression -> NEW LPAREN . type_name RPAREN
    (88) placement -> LPAREN . expression_list RPAREN
    (223) type_name -> . type_specifier_list abstract_declarator
    (224) type_name -> . type_specifier_list
    (117) expression_list -> . assignment_expression
    (118) expression_list -> . expression_list COMMA assignment_expression
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 328
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    IDENTIFIER      shift and go to state 327
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    OPERATOR        shift and go to state 105

    type_name                      shift and go to state 387
    expression_list                shift and go to state 388
    type_specifier_list            shift and go to state 166
    assignment_expression          shift and go to state 360
    type_specifier                 shift and go to state 171
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    simple_type_name               shift and go to state 173
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    name                           shift and go to state 140
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 234

    (89) new_type_name -> type_specifier_list . new_declarator
    (90) new_type_name -> type_specifier_list .
    (91) new_declarator -> . MULTOP cv_qualifier_list new_declarator
    (92) new_declarator -> . MULTOP new_declarator
    (93) new_declarator -> . MULTOP cv_qualifier_list
    (94) new_declarator -> . MULTOP
    (95) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator
    (96) new_declarator -> . complete_class_name DOUBLECOLON MULTOP new_declarator
    (97) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (98) new_declarator -> . complete_class_name DOUBLECOLON MULTOP
    (99) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (100) new_declarator -> . LSPAREN expression RSPAREN
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

  ! shift/reduce conflict for MULTOP resolved as shift
    LPAREN          reduce using rule 90 (new_type_name -> type_specifier_list .)
    EQUAL           reduce using rule 90 (new_type_name -> type_specifier_list .)
    MULTEQOP        reduce using rule 90 (new_type_name -> type_specifier_list .)
    DIVEQOP         reduce using rule 90 (new_type_name -> type_specifier_list .)
    MODEQOP         reduce using rule 90 (new_type_name -> type_specifier_list .)
    PLUSEQOP        reduce using rule 90 (new_type_name -> type_specifier_list .)
    MINUSEQOP       reduce using rule 90 (new_type_name -> type_specifier_list .)
    LSHIFTEQOP      reduce using rule 90 (new_type_name -> type_specifier_list .)
    RSHIFTEQOP      reduce using rule 90 (new_type_name -> type_specifier_list .)
    BANDEQOP        reduce using rule 90 (new_type_name -> type_specifier_list .)
    B_E_OR          reduce using rule 90 (new_type_name -> type_specifier_list .)
    BOREQOP         reduce using rule 90 (new_type_name -> type_specifier_list .)
    DOTSTAR         reduce using rule 90 (new_type_name -> type_specifier_list .)
    ARROWSTAR       reduce using rule 90 (new_type_name -> type_specifier_list .)
    DIVOP           reduce using rule 90 (new_type_name -> type_specifier_list .)
    MODOP           reduce using rule 90 (new_type_name -> type_specifier_list .)
    PLUSOP          reduce using rule 90 (new_type_name -> type_specifier_list .)
    MINUSOP         reduce using rule 90 (new_type_name -> type_specifier_list .)
    LSHIFT          reduce using rule 90 (new_type_name -> type_specifier_list .)
    RSHIFT          reduce using rule 90 (new_type_name -> type_specifier_list .)
    LTCOMP          reduce using rule 90 (new_type_name -> type_specifier_list .)
    GTCOMP          reduce using rule 90 (new_type_name -> type_specifier_list .)
    LTECOMP         reduce using rule 90 (new_type_name -> type_specifier_list .)
    GTECOMP         reduce using rule 90 (new_type_name -> type_specifier_list .)
    EQCOMP          reduce using rule 90 (new_type_name -> type_specifier_list .)
    NEQCOMP         reduce using rule 90 (new_type_name -> type_specifier_list .)
    BANDOP          reduce using rule 90 (new_type_name -> type_specifier_list .)
    XOROP           reduce using rule 90 (new_type_name -> type_specifier_list .)
    OROP            reduce using rule 90 (new_type_name -> type_specifier_list .)
    ANDOP           reduce using rule 90 (new_type_name -> type_specifier_list .)
    QUESMARK        reduce using rule 90 (new_type_name -> type_specifier_list .)
    COMMA           reduce using rule 90 (new_type_name -> type_specifier_list .)
    SEMICOLON       reduce using rule 90 (new_type_name -> type_specifier_list .)
    $end            reduce using rule 90 (new_type_name -> type_specifier_list .)
    COLON           reduce using rule 90 (new_type_name -> type_specifier_list .)
    RPAREN          reduce using rule 90 (new_type_name -> type_specifier_list .)
    RSPAREN         reduce using rule 90 (new_type_name -> type_specifier_list .)
    RCPAREN         reduce using rule 90 (new_type_name -> type_specifier_list .)
    MULTOP          shift and go to state 390
    LSPAREN         shift and go to state 392
    DOUBLECOLON     shift and go to state 210
    IDENTIFIER      shift and go to state 222

  ! MULTOP          [ reduce using rule 90 (new_type_name -> type_specifier_list .) ]

    new_declarator                 shift and go to state 389
    complete_class_name            shift and go to state 391
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 235

    (7) typedef_name -> IDENTIFIER .
    (5) class_name -> IDENTIFIER .

  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DIVEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MODEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUSEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUSEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSHIFTEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RSHIFTEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for B_E_OR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BOREQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOTSTAR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ARROWSTAR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DIVOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MODOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUSOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUSOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LTCOMP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LTECOMP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for GTECOMP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQCOMP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for NEQCOMP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for XOROP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OROP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for QUESMARK resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RCPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ARROW resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DPLUSOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DMINUSOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 5 (class_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 5 (class_name -> IDENTIFIER .)
    CONST           reduce using rule 5 (class_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 5 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 5 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 5 (class_name -> IDENTIFIER .)
    INT             reduce using rule 5 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 5 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 5 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 5 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 5 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 5 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 5 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 5 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    EQUAL           reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 5 (class_name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    MODEQOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 5 (class_name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 5 (class_name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 5 (class_name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 5 (class_name -> IDENTIFIER .)
    B_E_OR          reduce using rule 5 (class_name -> IDENTIFIER .)
    BOREQOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 5 (class_name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 5 (class_name -> IDENTIFIER .)
    DIVOP           reduce using rule 5 (class_name -> IDENTIFIER .)
    MODOP           reduce using rule 5 (class_name -> IDENTIFIER .)
    PLUSOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    MINUSOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 5 (class_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 5 (class_name -> IDENTIFIER .)
    LTCOMP          reduce using rule 5 (class_name -> IDENTIFIER .)
    GTCOMP          reduce using rule 5 (class_name -> IDENTIFIER .)
    LTECOMP         reduce using rule 5 (class_name -> IDENTIFIER .)
    GTECOMP         reduce using rule 5 (class_name -> IDENTIFIER .)
    EQCOMP          reduce using rule 5 (class_name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    XOROP           reduce using rule 5 (class_name -> IDENTIFIER .)
    OROP            reduce using rule 5 (class_name -> IDENTIFIER .)
    ANDOP           reduce using rule 5 (class_name -> IDENTIFIER .)
    QUESMARK        reduce using rule 5 (class_name -> IDENTIFIER .)
    COMMA           reduce using rule 5 (class_name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 5 (class_name -> IDENTIFIER .)
    $end            reduce using rule 5 (class_name -> IDENTIFIER .)
    COLON           reduce using rule 5 (class_name -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    RSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    RCPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    DOT             reduce using rule 5 (class_name -> IDENTIFIER .)
    ARROW           reduce using rule 5 (class_name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 5 (class_name -> IDENTIFIER .)
    LCPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    BNOP            reduce using rule 5 (class_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 5 (class_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 5 (class_name -> IDENTIFIER .)
    AUTO            reduce using rule 5 (class_name -> IDENTIFIER .)
    STATIC          reduce using rule 5 (class_name -> IDENTIFIER .)
    EXTERN          reduce using rule 5 (class_name -> IDENTIFIER .)
    INLINE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 5 (class_name -> IDENTIFIER .)

  ! CONST           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! MULTEQOP        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DIVEQOP         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! MODEQOP         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! PLUSEQOP        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! MINUSEQOP       [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LSHIFTEQOP      [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! RSHIFTEQOP      [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BANDEQOP        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! B_E_OR          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BOREQOP         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOTSTAR         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! ARROWSTAR       [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DIVOP           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! MODOP           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! PLUSOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! MINUSOP         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LSHIFT          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! RSHIFT          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LTCOMP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! GTCOMP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LTECOMP         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! GTECOMP         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EQCOMP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! NEQCOMP         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! XOROP           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! OROP            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! ANDOP           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! QUESMARK        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! $end            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! RSPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! RCPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! ARROW           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DPLUSOP         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DMINUSOP        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]


state 236

    (178) complete_class_name -> qualified_class_name .

    CONST           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    VOLATILE        reduce using rule 178 (complete_class_name -> qualified_class_name .)
    CHAR            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    SHORT           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    INT             reduce using rule 178 (complete_class_name -> qualified_class_name .)
    LONG            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    SIGNED          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    UNSIGNED        reduce using rule 178 (complete_class_name -> qualified_class_name .)
    FLOAT           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    DOUBLE          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    VOID            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    ENUM            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    DOUBLECOLON     reduce using rule 178 (complete_class_name -> qualified_class_name .)
    CLASS           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    STRUCT          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    UNION           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    IDENTIFIER      reduce using rule 178 (complete_class_name -> qualified_class_name .)
    MULTOP          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    LSPAREN         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    LPAREN          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    EQUAL           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    MULTEQOP        reduce using rule 178 (complete_class_name -> qualified_class_name .)
    DIVEQOP         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    MODEQOP         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    PLUSEQOP        reduce using rule 178 (complete_class_name -> qualified_class_name .)
    MINUSEQOP       reduce using rule 178 (complete_class_name -> qualified_class_name .)
    LSHIFTEQOP      reduce using rule 178 (complete_class_name -> qualified_class_name .)
    RSHIFTEQOP      reduce using rule 178 (complete_class_name -> qualified_class_name .)
    BANDEQOP        reduce using rule 178 (complete_class_name -> qualified_class_name .)
    B_E_OR          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    BOREQOP         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    DOTSTAR         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    ARROWSTAR       reduce using rule 178 (complete_class_name -> qualified_class_name .)
    DIVOP           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    MODOP           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    PLUSOP          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    MINUSOP         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    LSHIFT          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    RSHIFT          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    LTCOMP          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    GTCOMP          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    LTECOMP         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    GTECOMP         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    EQCOMP          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    NEQCOMP         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    BANDOP          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    XOROP           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    OROP            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    ANDOP           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    QUESMARK        reduce using rule 178 (complete_class_name -> qualified_class_name .)
    COMMA           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    SEMICOLON       reduce using rule 178 (complete_class_name -> qualified_class_name .)
    $end            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    COLON           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    RPAREN          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    RSPAREN         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    RCPAREN         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    DOT             reduce using rule 178 (complete_class_name -> qualified_class_name .)
    ARROW           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    DPLUSOP         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    DMINUSOP        reduce using rule 178 (complete_class_name -> qualified_class_name .)
    LCPAREN         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    BNOP            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    OPERATOR        reduce using rule 178 (complete_class_name -> qualified_class_name .)
    TYPEDEF         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    AUTO            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    STATIC          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    EXTERN          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    INLINE          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    VIRTUAL         reduce using rule 178 (complete_class_name -> qualified_class_name .)


state 237

    (104) deallocation_expression -> DELETE cast_expression .

    EQUAL           reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    MULTEQOP        reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    DIVEQOP         reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    MODEQOP         reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    PLUSEQOP        reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    MINUSEQOP       reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    LSHIFTEQOP      reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    RSHIFTEQOP      reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    BANDEQOP        reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    B_E_OR          reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    BOREQOP         reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    DOTSTAR         reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    ARROWSTAR       reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    MULTOP          reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    DIVOP           reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    MODOP           reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    PLUSOP          reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    MINUSOP         reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    LSHIFT          reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    RSHIFT          reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    LTCOMP          reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    GTCOMP          reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    LTECOMP         reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    GTECOMP         reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    EQCOMP          reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    NEQCOMP         reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    BANDOP          reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    XOROP           reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    OROP            reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    ANDOP           reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    QUESMARK        reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    COMMA           reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    SEMICOLON       reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    $end            reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    COLON           reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    RPAREN          reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    RSPAREN         reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)
    RCPAREN         reduce using rule 104 (deallocation_expression -> DELETE cast_expression .)


state 238

    (106) deallocation_expression -> DELETE LSPAREN . RSPAREN cast_expression

    RSPAREN         shift and go to state 393


state 239

    (196) asm_declaration -> ASM LPAREN . STRING RPAREN SEMICOLON

    STRING          shift and go to state 394


state 240

    (249) function_definition -> declarator ctor_initializer . fct_body
    (252) fct_body -> . compound_statement
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 21

    fct_body                       shift and go to state 395
    compound_statement             shift and go to state 246

state 241

    (251) function_definition -> declarator fct_body .

    $end            reduce using rule 251 (function_definition -> declarator fct_body .)
    RCPAREN         reduce using rule 251 (function_definition -> declarator fct_body .)
    IDENTIFIER      reduce using rule 251 (function_definition -> declarator fct_body .)
    CASE            reduce using rule 251 (function_definition -> declarator fct_body .)
    DEFAULT         reduce using rule 251 (function_definition -> declarator fct_body .)
    SEMICOLON       reduce using rule 251 (function_definition -> declarator fct_body .)
    LCPAREN         reduce using rule 251 (function_definition -> declarator fct_body .)
    IF              reduce using rule 251 (function_definition -> declarator fct_body .)
    SWITCH          reduce using rule 251 (function_definition -> declarator fct_body .)
    WHILE           reduce using rule 251 (function_definition -> declarator fct_body .)
    DO              reduce using rule 251 (function_definition -> declarator fct_body .)
    FOR             reduce using rule 251 (function_definition -> declarator fct_body .)
    BREAK           reduce using rule 251 (function_definition -> declarator fct_body .)
    CONTINUE        reduce using rule 251 (function_definition -> declarator fct_body .)
    RETURN          reduce using rule 251 (function_definition -> declarator fct_body .)
    GOTO            reduce using rule 251 (function_definition -> declarator fct_body .)
    TRY             reduce using rule 251 (function_definition -> declarator fct_body .)
    ASM             reduce using rule 251 (function_definition -> declarator fct_body .)
    TEMPLATE        reduce using rule 251 (function_definition -> declarator fct_body .)
    EXTERN          reduce using rule 251 (function_definition -> declarator fct_body .)
    DPLUSOP         reduce using rule 251 (function_definition -> declarator fct_body .)
    DMINUSOP        reduce using rule 251 (function_definition -> declarator fct_body .)
    SIZEOF          reduce using rule 251 (function_definition -> declarator fct_body .)
    TYPEDEF         reduce using rule 251 (function_definition -> declarator fct_body .)
    LPAREN          reduce using rule 251 (function_definition -> declarator fct_body .)
    MULTOP          reduce using rule 251 (function_definition -> declarator fct_body .)
    BANDOP          reduce using rule 251 (function_definition -> declarator fct_body .)
    PLUSOP          reduce using rule 251 (function_definition -> declarator fct_body .)
    MINUSOP         reduce using rule 251 (function_definition -> declarator fct_body .)
    NOTSYM          reduce using rule 251 (function_definition -> declarator fct_body .)
    BNOP            reduce using rule 251 (function_definition -> declarator fct_body .)
    DOUBLECOLON     reduce using rule 251 (function_definition -> declarator fct_body .)
    NEW             reduce using rule 251 (function_definition -> declarator fct_body .)
    DELETE          reduce using rule 251 (function_definition -> declarator fct_body .)
    AUTO            reduce using rule 251 (function_definition -> declarator fct_body .)
    STATIC          reduce using rule 251 (function_definition -> declarator fct_body .)
    CONST           reduce using rule 251 (function_definition -> declarator fct_body .)
    VOLATILE        reduce using rule 251 (function_definition -> declarator fct_body .)
    INLINE          reduce using rule 251 (function_definition -> declarator fct_body .)
    VIRTUAL         reduce using rule 251 (function_definition -> declarator fct_body .)
    THIS            reduce using rule 251 (function_definition -> declarator fct_body .)
    CHAR            reduce using rule 251 (function_definition -> declarator fct_body .)
    SHORT           reduce using rule 251 (function_definition -> declarator fct_body .)
    INT             reduce using rule 251 (function_definition -> declarator fct_body .)
    LONG            reduce using rule 251 (function_definition -> declarator fct_body .)
    SIGNED          reduce using rule 251 (function_definition -> declarator fct_body .)
    UNSIGNED        reduce using rule 251 (function_definition -> declarator fct_body .)
    FLOAT           reduce using rule 251 (function_definition -> declarator fct_body .)
    DOUBLE          reduce using rule 251 (function_definition -> declarator fct_body .)
    VOID            reduce using rule 251 (function_definition -> declarator fct_body .)
    ENUM            reduce using rule 251 (function_definition -> declarator fct_body .)
    NUMBER          reduce using rule 251 (function_definition -> declarator fct_body .)
    STRING          reduce using rule 251 (function_definition -> declarator fct_body .)
    CLASS           reduce using rule 251 (function_definition -> declarator fct_body .)
    STRUCT          reduce using rule 251 (function_definition -> declarator fct_body .)
    UNION           reduce using rule 251 (function_definition -> declarator fct_body .)
    OPERATOR        reduce using rule 251 (function_definition -> declarator fct_body .)
    ELSE            reduce using rule 251 (function_definition -> declarator fct_body .)
    PRIVATE         reduce using rule 251 (function_definition -> declarator fct_body .)
    PROTECTED       reduce using rule 251 (function_definition -> declarator fct_body .)
    PUBLIC          reduce using rule 251 (function_definition -> declarator fct_body .)
    COLON           reduce using rule 251 (function_definition -> declarator fct_body .)


state 242

    (199) init_declarator -> declarator initializer .

    SEMICOLON       reduce using rule 199 (init_declarator -> declarator initializer .)
    COMMA           reduce using rule 199 (init_declarator -> declarator initializer .)


state 243

    (203) declarator -> declarator LPAREN . argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> declarator LPAREN . argument_declaration_list RPAREN
    (256) initializer -> LPAREN . expression_list RPAREN
    (238) argument_declaration_list -> . arg_declaration_list
    (239) argument_declaration_list -> .
    (117) expression_list -> . assignment_expression
    (118) expression_list -> . expression_list COMMA assignment_expression
    (240) arg_declaration_list -> . argument_declaration
    (241) arg_declaration_list -> . arg_declaration_list COMMA argument_declaration
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (242) argument_declaration -> . decl_specifiers declarator
    (243) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (244) argument_declaration -> . decl_specifiers abstract_declarator
    (245) argument_declaration -> . decl_specifiers
    (246) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (247) argument_declaration -> . decl_specifiers EQUAL expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 239 (argument_declaration_list -> .)
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    TYPEDEF         shift and go to state 87
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    EXTERN          shift and go to state 204
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    ENUM            shift and go to state 107
    OPERATOR        shift and go to state 105
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112

    argument_declaration_list      shift and go to state 396
    expression_list                shift and go to state 397
    arg_declaration_list           shift and go to state 398
    assignment_expression          shift and go to state 360
    argument_declaration           shift and go to state 399
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifiers                shift and go to state 400
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    decl_specifier                 shift and go to state 62
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 140
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 244

    (205) declarator -> declarator LSPAREN . constant_expression RSPAREN
    (206) declarator -> declarator LSPAREN . RSPAREN
    (190) constant_expression -> . conditional_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    RSPAREN         shift and go to state 402
    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    constant_expression            shift and go to state 401
    conditional_expression         shift and go to state 134
    logical_OR_expression          shift and go to state 34
    logical_AND_expression         shift and go to state 49
    inclusive_OR_expression        shift and go to state 68
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 245

    (301) ctor_initializer -> COLON . mem_initializer_list
    (302) mem_initializer_list -> . mem_initializer
    (303) mem_initializer_list -> . mem_initializer COMMA mem_initializer_list
    (304) mem_initializer -> . complete_class_name LPAREN expression_list RPAREN
    (305) mem_initializer -> . complete_class_name LPAREN RPAREN
    (306) mem_initializer -> . IDENTIFIER LPAREN expression_list RPAREN
    (307) mem_initializer -> . IDENTIFIER LPAREN RPAREN
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 406
    DOUBLECOLON     shift and go to state 210

    mem_initializer_list           shift and go to state 403
    mem_initializer                shift and go to state 404
    complete_class_name            shift and go to state 405
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 246

    (252) fct_body -> compound_statement .

    $end            reduce using rule 252 (fct_body -> compound_statement .)
    RCPAREN         reduce using rule 252 (fct_body -> compound_statement .)
    IDENTIFIER      reduce using rule 252 (fct_body -> compound_statement .)
    CASE            reduce using rule 252 (fct_body -> compound_statement .)
    DEFAULT         reduce using rule 252 (fct_body -> compound_statement .)
    SEMICOLON       reduce using rule 252 (fct_body -> compound_statement .)
    LCPAREN         reduce using rule 252 (fct_body -> compound_statement .)
    IF              reduce using rule 252 (fct_body -> compound_statement .)
    SWITCH          reduce using rule 252 (fct_body -> compound_statement .)
    WHILE           reduce using rule 252 (fct_body -> compound_statement .)
    DO              reduce using rule 252 (fct_body -> compound_statement .)
    FOR             reduce using rule 252 (fct_body -> compound_statement .)
    BREAK           reduce using rule 252 (fct_body -> compound_statement .)
    CONTINUE        reduce using rule 252 (fct_body -> compound_statement .)
    RETURN          reduce using rule 252 (fct_body -> compound_statement .)
    GOTO            reduce using rule 252 (fct_body -> compound_statement .)
    TRY             reduce using rule 252 (fct_body -> compound_statement .)
    ASM             reduce using rule 252 (fct_body -> compound_statement .)
    TEMPLATE        reduce using rule 252 (fct_body -> compound_statement .)
    EXTERN          reduce using rule 252 (fct_body -> compound_statement .)
    DPLUSOP         reduce using rule 252 (fct_body -> compound_statement .)
    DMINUSOP        reduce using rule 252 (fct_body -> compound_statement .)
    SIZEOF          reduce using rule 252 (fct_body -> compound_statement .)
    TYPEDEF         reduce using rule 252 (fct_body -> compound_statement .)
    LPAREN          reduce using rule 252 (fct_body -> compound_statement .)
    MULTOP          reduce using rule 252 (fct_body -> compound_statement .)
    BANDOP          reduce using rule 252 (fct_body -> compound_statement .)
    PLUSOP          reduce using rule 252 (fct_body -> compound_statement .)
    MINUSOP         reduce using rule 252 (fct_body -> compound_statement .)
    NOTSYM          reduce using rule 252 (fct_body -> compound_statement .)
    BNOP            reduce using rule 252 (fct_body -> compound_statement .)
    DOUBLECOLON     reduce using rule 252 (fct_body -> compound_statement .)
    NEW             reduce using rule 252 (fct_body -> compound_statement .)
    DELETE          reduce using rule 252 (fct_body -> compound_statement .)
    AUTO            reduce using rule 252 (fct_body -> compound_statement .)
    STATIC          reduce using rule 252 (fct_body -> compound_statement .)
    CONST           reduce using rule 252 (fct_body -> compound_statement .)
    VOLATILE        reduce using rule 252 (fct_body -> compound_statement .)
    INLINE          reduce using rule 252 (fct_body -> compound_statement .)
    VIRTUAL         reduce using rule 252 (fct_body -> compound_statement .)
    THIS            reduce using rule 252 (fct_body -> compound_statement .)
    CHAR            reduce using rule 252 (fct_body -> compound_statement .)
    SHORT           reduce using rule 252 (fct_body -> compound_statement .)
    INT             reduce using rule 252 (fct_body -> compound_statement .)
    LONG            reduce using rule 252 (fct_body -> compound_statement .)
    SIGNED          reduce using rule 252 (fct_body -> compound_statement .)
    UNSIGNED        reduce using rule 252 (fct_body -> compound_statement .)
    FLOAT           reduce using rule 252 (fct_body -> compound_statement .)
    DOUBLE          reduce using rule 252 (fct_body -> compound_statement .)
    VOID            reduce using rule 252 (fct_body -> compound_statement .)
    ENUM            reduce using rule 252 (fct_body -> compound_statement .)
    NUMBER          reduce using rule 252 (fct_body -> compound_statement .)
    STRING          reduce using rule 252 (fct_body -> compound_statement .)
    CLASS           reduce using rule 252 (fct_body -> compound_statement .)
    STRUCT          reduce using rule 252 (fct_body -> compound_statement .)
    UNION           reduce using rule 252 (fct_body -> compound_statement .)
    OPERATOR        reduce using rule 252 (fct_body -> compound_statement .)
    ELSE            reduce using rule 252 (fct_body -> compound_statement .)
    PRIVATE         reduce using rule 252 (fct_body -> compound_statement .)
    PROTECTED       reduce using rule 252 (fct_body -> compound_statement .)
    PUBLIC          reduce using rule 252 (fct_body -> compound_statement .)
    COLON           reduce using rule 252 (fct_body -> compound_statement .)


state 247

    (253) initializer -> EQUAL . assignment_expression
    (254) initializer -> EQUAL . LCPAREN initializer_list RCPAREN
    (255) initializer -> EQUAL . LCPAREN initializer_list COMMA RCPAREN
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 408
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    assignment_expression          shift and go to state 407
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 248

    (381) template_declaration -> TEMPLATE LTCOMP . template_argument_list GTCOMP declaration
    (382) template_argument_list -> . template_argument
    (383) template_argument_list -> . template_argument_list COMMA template_argument
    (384) template_argument -> . type_argument
    (385) template_argument -> . argument_declaration
    (386) type_argument -> . CLASS IDENTIFIER
    (242) argument_declaration -> . decl_specifiers declarator
    (243) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (244) argument_declaration -> . decl_specifiers abstract_declarator
    (245) argument_declaration -> . decl_specifiers
    (246) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (247) argument_declaration -> . decl_specifiers EQUAL expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    CLASS           shift and go to state 413
    TYPEDEF         shift and go to state 87
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    EXTERN          shift and go to state 204
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    IDENTIFIER      shift and go to state 235

    template_argument_list         shift and go to state 409
    template_argument              shift and go to state 410
    type_argument                  shift and go to state 411
    argument_declaration           shift and go to state 412
    decl_specifiers                shift and go to state 400
    decl_specifier                 shift and go to state 62
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 236
    typedef_name                   shift and go to state 148

state 249

    (191) linkage_specification -> EXTERN STRING . LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> EXTERN STRING . LCPAREN RCPAREN
    (193) linkage_specification -> EXTERN STRING . declaration
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    LCPAREN         shift and go to state 414
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 203
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    IDENTIFIER      shift and go to state 172
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    declaration                    shift and go to state 415
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    name                           shift and go to state 206
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93

state 250

    (30) inclusive_OR_expression -> inclusive_OR_expression OROP . exclusive_OR_expression
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    exclusive_OR_expression        shift and go to state 416
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 251

    (212) ptr_operator -> complete_class_name DOUBLECOLON . MULTOP cv_qualifier_list
    (213) ptr_operator -> complete_class_name DOUBLECOLON . MULTOP

    MULTOP          shift and go to state 417


state 252

    (202) declarator -> ptr_operator declarator .
    (203) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (205) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (206) declarator -> declarator . LSPAREN RSPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    COLON           reduce using rule 202 (declarator -> ptr_operator declarator .)
    EQUAL           reduce using rule 202 (declarator -> ptr_operator declarator .)
    LCPAREN         reduce using rule 202 (declarator -> ptr_operator declarator .)
    SEMICOLON       reduce using rule 202 (declarator -> ptr_operator declarator .)
    COMMA           reduce using rule 202 (declarator -> ptr_operator declarator .)
    RPAREN          reduce using rule 202 (declarator -> ptr_operator declarator .)
    GTCOMP          reduce using rule 202 (declarator -> ptr_operator declarator .)
    LPAREN          shift and go to state 336
    LSPAREN         shift and go to state 244

  ! LPAREN          [ reduce using rule 202 (declarator -> ptr_operator declarator .) ]
  ! LSPAREN         [ reduce using rule 202 (declarator -> ptr_operator declarator .) ]


state 253

    (222) dname -> qualified_type_name .

    LPAREN          reduce using rule 222 (dname -> qualified_type_name .)
    LSPAREN         reduce using rule 222 (dname -> qualified_type_name .)
    COLON           reduce using rule 222 (dname -> qualified_type_name .)
    EQUAL           reduce using rule 222 (dname -> qualified_type_name .)
    LCPAREN         reduce using rule 222 (dname -> qualified_type_name .)
    SEMICOLON       reduce using rule 222 (dname -> qualified_type_name .)
    COMMA           reduce using rule 222 (dname -> qualified_type_name .)
    RPAREN          reduce using rule 222 (dname -> qualified_type_name .)
    GTCOMP          reduce using rule 222 (dname -> qualified_type_name .)


state 254

    (212) ptr_operator -> complete_class_name . DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> complete_class_name . DOUBLECOLON MULTOP

    DOUBLECOLON     shift and go to state 251


state 255

    (32) exclusive_OR_expression -> exclusive_OR_expression XOROP . AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    AND_expression                 shift and go to state 418
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 256

    (177) qualified_type_name -> class_name DOUBLECOLON . qualified_type_name
    (181) qualified_class_name -> class_name DOUBLECOLON . qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 235

    class_name                     shift and go to state 147
    qualified_type_name            shift and go to state 419
    qualified_class_name           shift and go to state 420
    typedef_name                   shift and go to state 148

state 257

    (131) qualified_name -> qualified_class_name DOUBLECOLON . name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 362
    BNOP            shift and go to state 363
    OPERATOR        shift and go to state 105

    qualified_class_name           shift and go to state 364
    name                           shift and go to state 421
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 230
    qualified_name                 shift and go to state 72

state 258

    (34) AND_expression -> AND_expression BANDOP . equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    equality_expression            shift and go to state 422
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 259

    (308) operator_function_name -> OPERATOR operator_name .

    LSPAREN         reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    LPAREN          reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    DOT             reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    ARROW           reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    DPLUSOP         reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    DMINUSOP        reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    EQUAL           reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    MULTEQOP        reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    DIVEQOP         reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    MODEQOP         reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    PLUSEQOP        reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    MINUSEQOP       reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    LSHIFTEQOP      reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    RSHIFTEQOP      reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    BANDEQOP        reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    B_E_OR          reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    BOREQOP         reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    DOTSTAR         reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    ARROWSTAR       reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    MULTOP          reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    DIVOP           reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    MODOP           reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    PLUSOP          reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    MINUSOP         reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    LSHIFT          reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    RSHIFT          reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    LTCOMP          reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    GTCOMP          reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    LTECOMP         reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    GTECOMP         reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    EQCOMP          reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    NEQCOMP         reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    BANDOP          reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    XOROP           reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    OROP            reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    ANDOP           reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    QUESMARK        reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    COMMA           reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    SEMICOLON       reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    $end            reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    COLON           reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    LCPAREN         reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    RPAREN          reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    RSPAREN         reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)
    RCPAREN         reduce using rule 308 (operator_function_name -> OPERATOR operator_name .)


state 260

    (298) conversion_function_name -> OPERATOR conversion_type_name .

    LSPAREN         reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    LPAREN          reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    DOT             reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    ARROW           reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    DPLUSOP         reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    DMINUSOP        reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    EQUAL           reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    MULTEQOP        reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    DIVEQOP         reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    MODEQOP         reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    PLUSEQOP        reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    MINUSEQOP       reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    LSHIFTEQOP      reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    RSHIFTEQOP      reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    BANDEQOP        reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    B_E_OR          reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    BOREQOP         reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    DOTSTAR         reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    ARROWSTAR       reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    MULTOP          reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    DIVOP           reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    MODOP           reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    PLUSOP          reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    MINUSOP         reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    LSHIFT          reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    RSHIFT          reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    LTCOMP          reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    GTCOMP          reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    LTECOMP         reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    GTECOMP         reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    EQCOMP          reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    NEQCOMP         reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    BANDOP          reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    XOROP           reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    OROP            reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    ANDOP           reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    QUESMARK        reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    COMMA           reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    SEMICOLON       reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    $end            reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    COLON           reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    LCPAREN         reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    RPAREN          reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    RSPAREN         reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)
    RCPAREN         reduce using rule 298 (conversion_function_name -> OPERATOR conversion_type_name .)


state 261

    (309) operator_name -> NEW .

    LSPAREN         reduce using rule 309 (operator_name -> NEW .)
    LPAREN          reduce using rule 309 (operator_name -> NEW .)
    DOT             reduce using rule 309 (operator_name -> NEW .)
    ARROW           reduce using rule 309 (operator_name -> NEW .)
    DPLUSOP         reduce using rule 309 (operator_name -> NEW .)
    DMINUSOP        reduce using rule 309 (operator_name -> NEW .)
    EQUAL           reduce using rule 309 (operator_name -> NEW .)
    MULTEQOP        reduce using rule 309 (operator_name -> NEW .)
    DIVEQOP         reduce using rule 309 (operator_name -> NEW .)
    MODEQOP         reduce using rule 309 (operator_name -> NEW .)
    PLUSEQOP        reduce using rule 309 (operator_name -> NEW .)
    MINUSEQOP       reduce using rule 309 (operator_name -> NEW .)
    LSHIFTEQOP      reduce using rule 309 (operator_name -> NEW .)
    RSHIFTEQOP      reduce using rule 309 (operator_name -> NEW .)
    BANDEQOP        reduce using rule 309 (operator_name -> NEW .)
    B_E_OR          reduce using rule 309 (operator_name -> NEW .)
    BOREQOP         reduce using rule 309 (operator_name -> NEW .)
    DOTSTAR         reduce using rule 309 (operator_name -> NEW .)
    ARROWSTAR       reduce using rule 309 (operator_name -> NEW .)
    MULTOP          reduce using rule 309 (operator_name -> NEW .)
    DIVOP           reduce using rule 309 (operator_name -> NEW .)
    MODOP           reduce using rule 309 (operator_name -> NEW .)
    PLUSOP          reduce using rule 309 (operator_name -> NEW .)
    MINUSOP         reduce using rule 309 (operator_name -> NEW .)
    LSHIFT          reduce using rule 309 (operator_name -> NEW .)
    RSHIFT          reduce using rule 309 (operator_name -> NEW .)
    LTCOMP          reduce using rule 309 (operator_name -> NEW .)
    GTCOMP          reduce using rule 309 (operator_name -> NEW .)
    LTECOMP         reduce using rule 309 (operator_name -> NEW .)
    GTECOMP         reduce using rule 309 (operator_name -> NEW .)
    EQCOMP          reduce using rule 309 (operator_name -> NEW .)
    NEQCOMP         reduce using rule 309 (operator_name -> NEW .)
    BANDOP          reduce using rule 309 (operator_name -> NEW .)
    XOROP           reduce using rule 309 (operator_name -> NEW .)
    OROP            reduce using rule 309 (operator_name -> NEW .)
    ANDOP           reduce using rule 309 (operator_name -> NEW .)
    QUESMARK        reduce using rule 309 (operator_name -> NEW .)
    COMMA           reduce using rule 309 (operator_name -> NEW .)
    SEMICOLON       reduce using rule 309 (operator_name -> NEW .)
    $end            reduce using rule 309 (operator_name -> NEW .)
    COLON           reduce using rule 309 (operator_name -> NEW .)
    LCPAREN         reduce using rule 309 (operator_name -> NEW .)
    RPAREN          reduce using rule 309 (operator_name -> NEW .)
    RSPAREN         reduce using rule 309 (operator_name -> NEW .)
    RCPAREN         reduce using rule 309 (operator_name -> NEW .)


state 262

    (310) operator_name -> DELETE .

    LSPAREN         reduce using rule 310 (operator_name -> DELETE .)
    LPAREN          reduce using rule 310 (operator_name -> DELETE .)
    DOT             reduce using rule 310 (operator_name -> DELETE .)
    ARROW           reduce using rule 310 (operator_name -> DELETE .)
    DPLUSOP         reduce using rule 310 (operator_name -> DELETE .)
    DMINUSOP        reduce using rule 310 (operator_name -> DELETE .)
    EQUAL           reduce using rule 310 (operator_name -> DELETE .)
    MULTEQOP        reduce using rule 310 (operator_name -> DELETE .)
    DIVEQOP         reduce using rule 310 (operator_name -> DELETE .)
    MODEQOP         reduce using rule 310 (operator_name -> DELETE .)
    PLUSEQOP        reduce using rule 310 (operator_name -> DELETE .)
    MINUSEQOP       reduce using rule 310 (operator_name -> DELETE .)
    LSHIFTEQOP      reduce using rule 310 (operator_name -> DELETE .)
    RSHIFTEQOP      reduce using rule 310 (operator_name -> DELETE .)
    BANDEQOP        reduce using rule 310 (operator_name -> DELETE .)
    B_E_OR          reduce using rule 310 (operator_name -> DELETE .)
    BOREQOP         reduce using rule 310 (operator_name -> DELETE .)
    DOTSTAR         reduce using rule 310 (operator_name -> DELETE .)
    ARROWSTAR       reduce using rule 310 (operator_name -> DELETE .)
    MULTOP          reduce using rule 310 (operator_name -> DELETE .)
    DIVOP           reduce using rule 310 (operator_name -> DELETE .)
    MODOP           reduce using rule 310 (operator_name -> DELETE .)
    PLUSOP          reduce using rule 310 (operator_name -> DELETE .)
    MINUSOP         reduce using rule 310 (operator_name -> DELETE .)
    LSHIFT          reduce using rule 310 (operator_name -> DELETE .)
    RSHIFT          reduce using rule 310 (operator_name -> DELETE .)
    LTCOMP          reduce using rule 310 (operator_name -> DELETE .)
    GTCOMP          reduce using rule 310 (operator_name -> DELETE .)
    LTECOMP         reduce using rule 310 (operator_name -> DELETE .)
    GTECOMP         reduce using rule 310 (operator_name -> DELETE .)
    EQCOMP          reduce using rule 310 (operator_name -> DELETE .)
    NEQCOMP         reduce using rule 310 (operator_name -> DELETE .)
    BANDOP          reduce using rule 310 (operator_name -> DELETE .)
    XOROP           reduce using rule 310 (operator_name -> DELETE .)
    OROP            reduce using rule 310 (operator_name -> DELETE .)
    ANDOP           reduce using rule 310 (operator_name -> DELETE .)
    QUESMARK        reduce using rule 310 (operator_name -> DELETE .)
    COMMA           reduce using rule 310 (operator_name -> DELETE .)
    SEMICOLON       reduce using rule 310 (operator_name -> DELETE .)
    $end            reduce using rule 310 (operator_name -> DELETE .)
    COLON           reduce using rule 310 (operator_name -> DELETE .)
    LCPAREN         reduce using rule 310 (operator_name -> DELETE .)
    RPAREN          reduce using rule 310 (operator_name -> DELETE .)
    RSPAREN         reduce using rule 310 (operator_name -> DELETE .)
    RCPAREN         reduce using rule 310 (operator_name -> DELETE .)


state 263

    (311) operator_name -> PLUSOP .

    LSPAREN         reduce using rule 311 (operator_name -> PLUSOP .)
    LPAREN          reduce using rule 311 (operator_name -> PLUSOP .)
    DOT             reduce using rule 311 (operator_name -> PLUSOP .)
    ARROW           reduce using rule 311 (operator_name -> PLUSOP .)
    DPLUSOP         reduce using rule 311 (operator_name -> PLUSOP .)
    DMINUSOP        reduce using rule 311 (operator_name -> PLUSOP .)
    EQUAL           reduce using rule 311 (operator_name -> PLUSOP .)
    MULTEQOP        reduce using rule 311 (operator_name -> PLUSOP .)
    DIVEQOP         reduce using rule 311 (operator_name -> PLUSOP .)
    MODEQOP         reduce using rule 311 (operator_name -> PLUSOP .)
    PLUSEQOP        reduce using rule 311 (operator_name -> PLUSOP .)
    MINUSEQOP       reduce using rule 311 (operator_name -> PLUSOP .)
    LSHIFTEQOP      reduce using rule 311 (operator_name -> PLUSOP .)
    RSHIFTEQOP      reduce using rule 311 (operator_name -> PLUSOP .)
    BANDEQOP        reduce using rule 311 (operator_name -> PLUSOP .)
    B_E_OR          reduce using rule 311 (operator_name -> PLUSOP .)
    BOREQOP         reduce using rule 311 (operator_name -> PLUSOP .)
    DOTSTAR         reduce using rule 311 (operator_name -> PLUSOP .)
    ARROWSTAR       reduce using rule 311 (operator_name -> PLUSOP .)
    MULTOP          reduce using rule 311 (operator_name -> PLUSOP .)
    DIVOP           reduce using rule 311 (operator_name -> PLUSOP .)
    MODOP           reduce using rule 311 (operator_name -> PLUSOP .)
    PLUSOP          reduce using rule 311 (operator_name -> PLUSOP .)
    MINUSOP         reduce using rule 311 (operator_name -> PLUSOP .)
    LSHIFT          reduce using rule 311 (operator_name -> PLUSOP .)
    RSHIFT          reduce using rule 311 (operator_name -> PLUSOP .)
    LTCOMP          reduce using rule 311 (operator_name -> PLUSOP .)
    GTCOMP          reduce using rule 311 (operator_name -> PLUSOP .)
    LTECOMP         reduce using rule 311 (operator_name -> PLUSOP .)
    GTECOMP         reduce using rule 311 (operator_name -> PLUSOP .)
    EQCOMP          reduce using rule 311 (operator_name -> PLUSOP .)
    NEQCOMP         reduce using rule 311 (operator_name -> PLUSOP .)
    BANDOP          reduce using rule 311 (operator_name -> PLUSOP .)
    XOROP           reduce using rule 311 (operator_name -> PLUSOP .)
    OROP            reduce using rule 311 (operator_name -> PLUSOP .)
    ANDOP           reduce using rule 311 (operator_name -> PLUSOP .)
    QUESMARK        reduce using rule 311 (operator_name -> PLUSOP .)
    COMMA           reduce using rule 311 (operator_name -> PLUSOP .)
    SEMICOLON       reduce using rule 311 (operator_name -> PLUSOP .)
    $end            reduce using rule 311 (operator_name -> PLUSOP .)
    COLON           reduce using rule 311 (operator_name -> PLUSOP .)
    LCPAREN         reduce using rule 311 (operator_name -> PLUSOP .)
    RPAREN          reduce using rule 311 (operator_name -> PLUSOP .)
    RSPAREN         reduce using rule 311 (operator_name -> PLUSOP .)
    RCPAREN         reduce using rule 311 (operator_name -> PLUSOP .)


state 264

    (312) operator_name -> MINUSOP .

    LSPAREN         reduce using rule 312 (operator_name -> MINUSOP .)
    LPAREN          reduce using rule 312 (operator_name -> MINUSOP .)
    DOT             reduce using rule 312 (operator_name -> MINUSOP .)
    ARROW           reduce using rule 312 (operator_name -> MINUSOP .)
    DPLUSOP         reduce using rule 312 (operator_name -> MINUSOP .)
    DMINUSOP        reduce using rule 312 (operator_name -> MINUSOP .)
    EQUAL           reduce using rule 312 (operator_name -> MINUSOP .)
    MULTEQOP        reduce using rule 312 (operator_name -> MINUSOP .)
    DIVEQOP         reduce using rule 312 (operator_name -> MINUSOP .)
    MODEQOP         reduce using rule 312 (operator_name -> MINUSOP .)
    PLUSEQOP        reduce using rule 312 (operator_name -> MINUSOP .)
    MINUSEQOP       reduce using rule 312 (operator_name -> MINUSOP .)
    LSHIFTEQOP      reduce using rule 312 (operator_name -> MINUSOP .)
    RSHIFTEQOP      reduce using rule 312 (operator_name -> MINUSOP .)
    BANDEQOP        reduce using rule 312 (operator_name -> MINUSOP .)
    B_E_OR          reduce using rule 312 (operator_name -> MINUSOP .)
    BOREQOP         reduce using rule 312 (operator_name -> MINUSOP .)
    DOTSTAR         reduce using rule 312 (operator_name -> MINUSOP .)
    ARROWSTAR       reduce using rule 312 (operator_name -> MINUSOP .)
    MULTOP          reduce using rule 312 (operator_name -> MINUSOP .)
    DIVOP           reduce using rule 312 (operator_name -> MINUSOP .)
    MODOP           reduce using rule 312 (operator_name -> MINUSOP .)
    PLUSOP          reduce using rule 312 (operator_name -> MINUSOP .)
    MINUSOP         reduce using rule 312 (operator_name -> MINUSOP .)
    LSHIFT          reduce using rule 312 (operator_name -> MINUSOP .)
    RSHIFT          reduce using rule 312 (operator_name -> MINUSOP .)
    LTCOMP          reduce using rule 312 (operator_name -> MINUSOP .)
    GTCOMP          reduce using rule 312 (operator_name -> MINUSOP .)
    LTECOMP         reduce using rule 312 (operator_name -> MINUSOP .)
    GTECOMP         reduce using rule 312 (operator_name -> MINUSOP .)
    EQCOMP          reduce using rule 312 (operator_name -> MINUSOP .)
    NEQCOMP         reduce using rule 312 (operator_name -> MINUSOP .)
    BANDOP          reduce using rule 312 (operator_name -> MINUSOP .)
    XOROP           reduce using rule 312 (operator_name -> MINUSOP .)
    OROP            reduce using rule 312 (operator_name -> MINUSOP .)
    ANDOP           reduce using rule 312 (operator_name -> MINUSOP .)
    QUESMARK        reduce using rule 312 (operator_name -> MINUSOP .)
    COMMA           reduce using rule 312 (operator_name -> MINUSOP .)
    SEMICOLON       reduce using rule 312 (operator_name -> MINUSOP .)
    $end            reduce using rule 312 (operator_name -> MINUSOP .)
    COLON           reduce using rule 312 (operator_name -> MINUSOP .)
    LCPAREN         reduce using rule 312 (operator_name -> MINUSOP .)
    RPAREN          reduce using rule 312 (operator_name -> MINUSOP .)
    RSPAREN         reduce using rule 312 (operator_name -> MINUSOP .)
    RCPAREN         reduce using rule 312 (operator_name -> MINUSOP .)


state 265

    (313) operator_name -> MULTOP .

    LSPAREN         reduce using rule 313 (operator_name -> MULTOP .)
    LPAREN          reduce using rule 313 (operator_name -> MULTOP .)
    DOT             reduce using rule 313 (operator_name -> MULTOP .)
    ARROW           reduce using rule 313 (operator_name -> MULTOP .)
    DPLUSOP         reduce using rule 313 (operator_name -> MULTOP .)
    DMINUSOP        reduce using rule 313 (operator_name -> MULTOP .)
    EQUAL           reduce using rule 313 (operator_name -> MULTOP .)
    MULTEQOP        reduce using rule 313 (operator_name -> MULTOP .)
    DIVEQOP         reduce using rule 313 (operator_name -> MULTOP .)
    MODEQOP         reduce using rule 313 (operator_name -> MULTOP .)
    PLUSEQOP        reduce using rule 313 (operator_name -> MULTOP .)
    MINUSEQOP       reduce using rule 313 (operator_name -> MULTOP .)
    LSHIFTEQOP      reduce using rule 313 (operator_name -> MULTOP .)
    RSHIFTEQOP      reduce using rule 313 (operator_name -> MULTOP .)
    BANDEQOP        reduce using rule 313 (operator_name -> MULTOP .)
    B_E_OR          reduce using rule 313 (operator_name -> MULTOP .)
    BOREQOP         reduce using rule 313 (operator_name -> MULTOP .)
    DOTSTAR         reduce using rule 313 (operator_name -> MULTOP .)
    ARROWSTAR       reduce using rule 313 (operator_name -> MULTOP .)
    MULTOP          reduce using rule 313 (operator_name -> MULTOP .)
    DIVOP           reduce using rule 313 (operator_name -> MULTOP .)
    MODOP           reduce using rule 313 (operator_name -> MULTOP .)
    PLUSOP          reduce using rule 313 (operator_name -> MULTOP .)
    MINUSOP         reduce using rule 313 (operator_name -> MULTOP .)
    LSHIFT          reduce using rule 313 (operator_name -> MULTOP .)
    RSHIFT          reduce using rule 313 (operator_name -> MULTOP .)
    LTCOMP          reduce using rule 313 (operator_name -> MULTOP .)
    GTCOMP          reduce using rule 313 (operator_name -> MULTOP .)
    LTECOMP         reduce using rule 313 (operator_name -> MULTOP .)
    GTECOMP         reduce using rule 313 (operator_name -> MULTOP .)
    EQCOMP          reduce using rule 313 (operator_name -> MULTOP .)
    NEQCOMP         reduce using rule 313 (operator_name -> MULTOP .)
    BANDOP          reduce using rule 313 (operator_name -> MULTOP .)
    XOROP           reduce using rule 313 (operator_name -> MULTOP .)
    OROP            reduce using rule 313 (operator_name -> MULTOP .)
    ANDOP           reduce using rule 313 (operator_name -> MULTOP .)
    QUESMARK        reduce using rule 313 (operator_name -> MULTOP .)
    COMMA           reduce using rule 313 (operator_name -> MULTOP .)
    SEMICOLON       reduce using rule 313 (operator_name -> MULTOP .)
    $end            reduce using rule 313 (operator_name -> MULTOP .)
    COLON           reduce using rule 313 (operator_name -> MULTOP .)
    LCPAREN         reduce using rule 313 (operator_name -> MULTOP .)
    RPAREN          reduce using rule 313 (operator_name -> MULTOP .)
    RSPAREN         reduce using rule 313 (operator_name -> MULTOP .)
    RCPAREN         reduce using rule 313 (operator_name -> MULTOP .)


state 266

    (314) operator_name -> DIVOP .

    LSPAREN         reduce using rule 314 (operator_name -> DIVOP .)
    LPAREN          reduce using rule 314 (operator_name -> DIVOP .)
    DOT             reduce using rule 314 (operator_name -> DIVOP .)
    ARROW           reduce using rule 314 (operator_name -> DIVOP .)
    DPLUSOP         reduce using rule 314 (operator_name -> DIVOP .)
    DMINUSOP        reduce using rule 314 (operator_name -> DIVOP .)
    EQUAL           reduce using rule 314 (operator_name -> DIVOP .)
    MULTEQOP        reduce using rule 314 (operator_name -> DIVOP .)
    DIVEQOP         reduce using rule 314 (operator_name -> DIVOP .)
    MODEQOP         reduce using rule 314 (operator_name -> DIVOP .)
    PLUSEQOP        reduce using rule 314 (operator_name -> DIVOP .)
    MINUSEQOP       reduce using rule 314 (operator_name -> DIVOP .)
    LSHIFTEQOP      reduce using rule 314 (operator_name -> DIVOP .)
    RSHIFTEQOP      reduce using rule 314 (operator_name -> DIVOP .)
    BANDEQOP        reduce using rule 314 (operator_name -> DIVOP .)
    B_E_OR          reduce using rule 314 (operator_name -> DIVOP .)
    BOREQOP         reduce using rule 314 (operator_name -> DIVOP .)
    DOTSTAR         reduce using rule 314 (operator_name -> DIVOP .)
    ARROWSTAR       reduce using rule 314 (operator_name -> DIVOP .)
    MULTOP          reduce using rule 314 (operator_name -> DIVOP .)
    DIVOP           reduce using rule 314 (operator_name -> DIVOP .)
    MODOP           reduce using rule 314 (operator_name -> DIVOP .)
    PLUSOP          reduce using rule 314 (operator_name -> DIVOP .)
    MINUSOP         reduce using rule 314 (operator_name -> DIVOP .)
    LSHIFT          reduce using rule 314 (operator_name -> DIVOP .)
    RSHIFT          reduce using rule 314 (operator_name -> DIVOP .)
    LTCOMP          reduce using rule 314 (operator_name -> DIVOP .)
    GTCOMP          reduce using rule 314 (operator_name -> DIVOP .)
    LTECOMP         reduce using rule 314 (operator_name -> DIVOP .)
    GTECOMP         reduce using rule 314 (operator_name -> DIVOP .)
    EQCOMP          reduce using rule 314 (operator_name -> DIVOP .)
    NEQCOMP         reduce using rule 314 (operator_name -> DIVOP .)
    BANDOP          reduce using rule 314 (operator_name -> DIVOP .)
    XOROP           reduce using rule 314 (operator_name -> DIVOP .)
    OROP            reduce using rule 314 (operator_name -> DIVOP .)
    ANDOP           reduce using rule 314 (operator_name -> DIVOP .)
    QUESMARK        reduce using rule 314 (operator_name -> DIVOP .)
    COMMA           reduce using rule 314 (operator_name -> DIVOP .)
    SEMICOLON       reduce using rule 314 (operator_name -> DIVOP .)
    $end            reduce using rule 314 (operator_name -> DIVOP .)
    COLON           reduce using rule 314 (operator_name -> DIVOP .)
    LCPAREN         reduce using rule 314 (operator_name -> DIVOP .)
    RPAREN          reduce using rule 314 (operator_name -> DIVOP .)
    RSPAREN         reduce using rule 314 (operator_name -> DIVOP .)
    RCPAREN         reduce using rule 314 (operator_name -> DIVOP .)


state 267

    (315) operator_name -> MODOP .

    LSPAREN         reduce using rule 315 (operator_name -> MODOP .)
    LPAREN          reduce using rule 315 (operator_name -> MODOP .)
    DOT             reduce using rule 315 (operator_name -> MODOP .)
    ARROW           reduce using rule 315 (operator_name -> MODOP .)
    DPLUSOP         reduce using rule 315 (operator_name -> MODOP .)
    DMINUSOP        reduce using rule 315 (operator_name -> MODOP .)
    EQUAL           reduce using rule 315 (operator_name -> MODOP .)
    MULTEQOP        reduce using rule 315 (operator_name -> MODOP .)
    DIVEQOP         reduce using rule 315 (operator_name -> MODOP .)
    MODEQOP         reduce using rule 315 (operator_name -> MODOP .)
    PLUSEQOP        reduce using rule 315 (operator_name -> MODOP .)
    MINUSEQOP       reduce using rule 315 (operator_name -> MODOP .)
    LSHIFTEQOP      reduce using rule 315 (operator_name -> MODOP .)
    RSHIFTEQOP      reduce using rule 315 (operator_name -> MODOP .)
    BANDEQOP        reduce using rule 315 (operator_name -> MODOP .)
    B_E_OR          reduce using rule 315 (operator_name -> MODOP .)
    BOREQOP         reduce using rule 315 (operator_name -> MODOP .)
    DOTSTAR         reduce using rule 315 (operator_name -> MODOP .)
    ARROWSTAR       reduce using rule 315 (operator_name -> MODOP .)
    MULTOP          reduce using rule 315 (operator_name -> MODOP .)
    DIVOP           reduce using rule 315 (operator_name -> MODOP .)
    MODOP           reduce using rule 315 (operator_name -> MODOP .)
    PLUSOP          reduce using rule 315 (operator_name -> MODOP .)
    MINUSOP         reduce using rule 315 (operator_name -> MODOP .)
    LSHIFT          reduce using rule 315 (operator_name -> MODOP .)
    RSHIFT          reduce using rule 315 (operator_name -> MODOP .)
    LTCOMP          reduce using rule 315 (operator_name -> MODOP .)
    GTCOMP          reduce using rule 315 (operator_name -> MODOP .)
    LTECOMP         reduce using rule 315 (operator_name -> MODOP .)
    GTECOMP         reduce using rule 315 (operator_name -> MODOP .)
    EQCOMP          reduce using rule 315 (operator_name -> MODOP .)
    NEQCOMP         reduce using rule 315 (operator_name -> MODOP .)
    BANDOP          reduce using rule 315 (operator_name -> MODOP .)
    XOROP           reduce using rule 315 (operator_name -> MODOP .)
    OROP            reduce using rule 315 (operator_name -> MODOP .)
    ANDOP           reduce using rule 315 (operator_name -> MODOP .)
    QUESMARK        reduce using rule 315 (operator_name -> MODOP .)
    COMMA           reduce using rule 315 (operator_name -> MODOP .)
    SEMICOLON       reduce using rule 315 (operator_name -> MODOP .)
    $end            reduce using rule 315 (operator_name -> MODOP .)
    COLON           reduce using rule 315 (operator_name -> MODOP .)
    LCPAREN         reduce using rule 315 (operator_name -> MODOP .)
    RPAREN          reduce using rule 315 (operator_name -> MODOP .)
    RSPAREN         reduce using rule 315 (operator_name -> MODOP .)
    RCPAREN         reduce using rule 315 (operator_name -> MODOP .)


state 268

    (316) operator_name -> XOROP .

    LSPAREN         reduce using rule 316 (operator_name -> XOROP .)
    LPAREN          reduce using rule 316 (operator_name -> XOROP .)
    DOT             reduce using rule 316 (operator_name -> XOROP .)
    ARROW           reduce using rule 316 (operator_name -> XOROP .)
    DPLUSOP         reduce using rule 316 (operator_name -> XOROP .)
    DMINUSOP        reduce using rule 316 (operator_name -> XOROP .)
    EQUAL           reduce using rule 316 (operator_name -> XOROP .)
    MULTEQOP        reduce using rule 316 (operator_name -> XOROP .)
    DIVEQOP         reduce using rule 316 (operator_name -> XOROP .)
    MODEQOP         reduce using rule 316 (operator_name -> XOROP .)
    PLUSEQOP        reduce using rule 316 (operator_name -> XOROP .)
    MINUSEQOP       reduce using rule 316 (operator_name -> XOROP .)
    LSHIFTEQOP      reduce using rule 316 (operator_name -> XOROP .)
    RSHIFTEQOP      reduce using rule 316 (operator_name -> XOROP .)
    BANDEQOP        reduce using rule 316 (operator_name -> XOROP .)
    B_E_OR          reduce using rule 316 (operator_name -> XOROP .)
    BOREQOP         reduce using rule 316 (operator_name -> XOROP .)
    DOTSTAR         reduce using rule 316 (operator_name -> XOROP .)
    ARROWSTAR       reduce using rule 316 (operator_name -> XOROP .)
    MULTOP          reduce using rule 316 (operator_name -> XOROP .)
    DIVOP           reduce using rule 316 (operator_name -> XOROP .)
    MODOP           reduce using rule 316 (operator_name -> XOROP .)
    PLUSOP          reduce using rule 316 (operator_name -> XOROP .)
    MINUSOP         reduce using rule 316 (operator_name -> XOROP .)
    LSHIFT          reduce using rule 316 (operator_name -> XOROP .)
    RSHIFT          reduce using rule 316 (operator_name -> XOROP .)
    LTCOMP          reduce using rule 316 (operator_name -> XOROP .)
    GTCOMP          reduce using rule 316 (operator_name -> XOROP .)
    LTECOMP         reduce using rule 316 (operator_name -> XOROP .)
    GTECOMP         reduce using rule 316 (operator_name -> XOROP .)
    EQCOMP          reduce using rule 316 (operator_name -> XOROP .)
    NEQCOMP         reduce using rule 316 (operator_name -> XOROP .)
    BANDOP          reduce using rule 316 (operator_name -> XOROP .)
    XOROP           reduce using rule 316 (operator_name -> XOROP .)
    OROP            reduce using rule 316 (operator_name -> XOROP .)
    ANDOP           reduce using rule 316 (operator_name -> XOROP .)
    QUESMARK        reduce using rule 316 (operator_name -> XOROP .)
    COMMA           reduce using rule 316 (operator_name -> XOROP .)
    SEMICOLON       reduce using rule 316 (operator_name -> XOROP .)
    $end            reduce using rule 316 (operator_name -> XOROP .)
    COLON           reduce using rule 316 (operator_name -> XOROP .)
    LCPAREN         reduce using rule 316 (operator_name -> XOROP .)
    RPAREN          reduce using rule 316 (operator_name -> XOROP .)
    RSPAREN         reduce using rule 316 (operator_name -> XOROP .)
    RCPAREN         reduce using rule 316 (operator_name -> XOROP .)


state 269

    (317) operator_name -> BANDOP .

    LSPAREN         reduce using rule 317 (operator_name -> BANDOP .)
    LPAREN          reduce using rule 317 (operator_name -> BANDOP .)
    DOT             reduce using rule 317 (operator_name -> BANDOP .)
    ARROW           reduce using rule 317 (operator_name -> BANDOP .)
    DPLUSOP         reduce using rule 317 (operator_name -> BANDOP .)
    DMINUSOP        reduce using rule 317 (operator_name -> BANDOP .)
    EQUAL           reduce using rule 317 (operator_name -> BANDOP .)
    MULTEQOP        reduce using rule 317 (operator_name -> BANDOP .)
    DIVEQOP         reduce using rule 317 (operator_name -> BANDOP .)
    MODEQOP         reduce using rule 317 (operator_name -> BANDOP .)
    PLUSEQOP        reduce using rule 317 (operator_name -> BANDOP .)
    MINUSEQOP       reduce using rule 317 (operator_name -> BANDOP .)
    LSHIFTEQOP      reduce using rule 317 (operator_name -> BANDOP .)
    RSHIFTEQOP      reduce using rule 317 (operator_name -> BANDOP .)
    BANDEQOP        reduce using rule 317 (operator_name -> BANDOP .)
    B_E_OR          reduce using rule 317 (operator_name -> BANDOP .)
    BOREQOP         reduce using rule 317 (operator_name -> BANDOP .)
    DOTSTAR         reduce using rule 317 (operator_name -> BANDOP .)
    ARROWSTAR       reduce using rule 317 (operator_name -> BANDOP .)
    MULTOP          reduce using rule 317 (operator_name -> BANDOP .)
    DIVOP           reduce using rule 317 (operator_name -> BANDOP .)
    MODOP           reduce using rule 317 (operator_name -> BANDOP .)
    PLUSOP          reduce using rule 317 (operator_name -> BANDOP .)
    MINUSOP         reduce using rule 317 (operator_name -> BANDOP .)
    LSHIFT          reduce using rule 317 (operator_name -> BANDOP .)
    RSHIFT          reduce using rule 317 (operator_name -> BANDOP .)
    LTCOMP          reduce using rule 317 (operator_name -> BANDOP .)
    GTCOMP          reduce using rule 317 (operator_name -> BANDOP .)
    LTECOMP         reduce using rule 317 (operator_name -> BANDOP .)
    GTECOMP         reduce using rule 317 (operator_name -> BANDOP .)
    EQCOMP          reduce using rule 317 (operator_name -> BANDOP .)
    NEQCOMP         reduce using rule 317 (operator_name -> BANDOP .)
    BANDOP          reduce using rule 317 (operator_name -> BANDOP .)
    XOROP           reduce using rule 317 (operator_name -> BANDOP .)
    OROP            reduce using rule 317 (operator_name -> BANDOP .)
    ANDOP           reduce using rule 317 (operator_name -> BANDOP .)
    QUESMARK        reduce using rule 317 (operator_name -> BANDOP .)
    COMMA           reduce using rule 317 (operator_name -> BANDOP .)
    SEMICOLON       reduce using rule 317 (operator_name -> BANDOP .)
    $end            reduce using rule 317 (operator_name -> BANDOP .)
    COLON           reduce using rule 317 (operator_name -> BANDOP .)
    LCPAREN         reduce using rule 317 (operator_name -> BANDOP .)
    RPAREN          reduce using rule 317 (operator_name -> BANDOP .)
    RSPAREN         reduce using rule 317 (operator_name -> BANDOP .)
    RCPAREN         reduce using rule 317 (operator_name -> BANDOP .)


state 270

    (318) operator_name -> BNOP .

    LSPAREN         reduce using rule 318 (operator_name -> BNOP .)
    LPAREN          reduce using rule 318 (operator_name -> BNOP .)
    DOT             reduce using rule 318 (operator_name -> BNOP .)
    ARROW           reduce using rule 318 (operator_name -> BNOP .)
    DPLUSOP         reduce using rule 318 (operator_name -> BNOP .)
    DMINUSOP        reduce using rule 318 (operator_name -> BNOP .)
    EQUAL           reduce using rule 318 (operator_name -> BNOP .)
    MULTEQOP        reduce using rule 318 (operator_name -> BNOP .)
    DIVEQOP         reduce using rule 318 (operator_name -> BNOP .)
    MODEQOP         reduce using rule 318 (operator_name -> BNOP .)
    PLUSEQOP        reduce using rule 318 (operator_name -> BNOP .)
    MINUSEQOP       reduce using rule 318 (operator_name -> BNOP .)
    LSHIFTEQOP      reduce using rule 318 (operator_name -> BNOP .)
    RSHIFTEQOP      reduce using rule 318 (operator_name -> BNOP .)
    BANDEQOP        reduce using rule 318 (operator_name -> BNOP .)
    B_E_OR          reduce using rule 318 (operator_name -> BNOP .)
    BOREQOP         reduce using rule 318 (operator_name -> BNOP .)
    DOTSTAR         reduce using rule 318 (operator_name -> BNOP .)
    ARROWSTAR       reduce using rule 318 (operator_name -> BNOP .)
    MULTOP          reduce using rule 318 (operator_name -> BNOP .)
    DIVOP           reduce using rule 318 (operator_name -> BNOP .)
    MODOP           reduce using rule 318 (operator_name -> BNOP .)
    PLUSOP          reduce using rule 318 (operator_name -> BNOP .)
    MINUSOP         reduce using rule 318 (operator_name -> BNOP .)
    LSHIFT          reduce using rule 318 (operator_name -> BNOP .)
    RSHIFT          reduce using rule 318 (operator_name -> BNOP .)
    LTCOMP          reduce using rule 318 (operator_name -> BNOP .)
    GTCOMP          reduce using rule 318 (operator_name -> BNOP .)
    LTECOMP         reduce using rule 318 (operator_name -> BNOP .)
    GTECOMP         reduce using rule 318 (operator_name -> BNOP .)
    EQCOMP          reduce using rule 318 (operator_name -> BNOP .)
    NEQCOMP         reduce using rule 318 (operator_name -> BNOP .)
    BANDOP          reduce using rule 318 (operator_name -> BNOP .)
    XOROP           reduce using rule 318 (operator_name -> BNOP .)
    OROP            reduce using rule 318 (operator_name -> BNOP .)
    ANDOP           reduce using rule 318 (operator_name -> BNOP .)
    QUESMARK        reduce using rule 318 (operator_name -> BNOP .)
    COMMA           reduce using rule 318 (operator_name -> BNOP .)
    SEMICOLON       reduce using rule 318 (operator_name -> BNOP .)
    $end            reduce using rule 318 (operator_name -> BNOP .)
    COLON           reduce using rule 318 (operator_name -> BNOP .)
    LCPAREN         reduce using rule 318 (operator_name -> BNOP .)
    RPAREN          reduce using rule 318 (operator_name -> BNOP .)
    RSPAREN         reduce using rule 318 (operator_name -> BNOP .)
    RCPAREN         reduce using rule 318 (operator_name -> BNOP .)


state 271

    (319) operator_name -> NOTSYM .

    LSPAREN         reduce using rule 319 (operator_name -> NOTSYM .)
    LPAREN          reduce using rule 319 (operator_name -> NOTSYM .)
    DOT             reduce using rule 319 (operator_name -> NOTSYM .)
    ARROW           reduce using rule 319 (operator_name -> NOTSYM .)
    DPLUSOP         reduce using rule 319 (operator_name -> NOTSYM .)
    DMINUSOP        reduce using rule 319 (operator_name -> NOTSYM .)
    EQUAL           reduce using rule 319 (operator_name -> NOTSYM .)
    MULTEQOP        reduce using rule 319 (operator_name -> NOTSYM .)
    DIVEQOP         reduce using rule 319 (operator_name -> NOTSYM .)
    MODEQOP         reduce using rule 319 (operator_name -> NOTSYM .)
    PLUSEQOP        reduce using rule 319 (operator_name -> NOTSYM .)
    MINUSEQOP       reduce using rule 319 (operator_name -> NOTSYM .)
    LSHIFTEQOP      reduce using rule 319 (operator_name -> NOTSYM .)
    RSHIFTEQOP      reduce using rule 319 (operator_name -> NOTSYM .)
    BANDEQOP        reduce using rule 319 (operator_name -> NOTSYM .)
    B_E_OR          reduce using rule 319 (operator_name -> NOTSYM .)
    BOREQOP         reduce using rule 319 (operator_name -> NOTSYM .)
    DOTSTAR         reduce using rule 319 (operator_name -> NOTSYM .)
    ARROWSTAR       reduce using rule 319 (operator_name -> NOTSYM .)
    MULTOP          reduce using rule 319 (operator_name -> NOTSYM .)
    DIVOP           reduce using rule 319 (operator_name -> NOTSYM .)
    MODOP           reduce using rule 319 (operator_name -> NOTSYM .)
    PLUSOP          reduce using rule 319 (operator_name -> NOTSYM .)
    MINUSOP         reduce using rule 319 (operator_name -> NOTSYM .)
    LSHIFT          reduce using rule 319 (operator_name -> NOTSYM .)
    RSHIFT          reduce using rule 319 (operator_name -> NOTSYM .)
    LTCOMP          reduce using rule 319 (operator_name -> NOTSYM .)
    GTCOMP          reduce using rule 319 (operator_name -> NOTSYM .)
    LTECOMP         reduce using rule 319 (operator_name -> NOTSYM .)
    GTECOMP         reduce using rule 319 (operator_name -> NOTSYM .)
    EQCOMP          reduce using rule 319 (operator_name -> NOTSYM .)
    NEQCOMP         reduce using rule 319 (operator_name -> NOTSYM .)
    BANDOP          reduce using rule 319 (operator_name -> NOTSYM .)
    XOROP           reduce using rule 319 (operator_name -> NOTSYM .)
    OROP            reduce using rule 319 (operator_name -> NOTSYM .)
    ANDOP           reduce using rule 319 (operator_name -> NOTSYM .)
    QUESMARK        reduce using rule 319 (operator_name -> NOTSYM .)
    COMMA           reduce using rule 319 (operator_name -> NOTSYM .)
    SEMICOLON       reduce using rule 319 (operator_name -> NOTSYM .)
    $end            reduce using rule 319 (operator_name -> NOTSYM .)
    COLON           reduce using rule 319 (operator_name -> NOTSYM .)
    LCPAREN         reduce using rule 319 (operator_name -> NOTSYM .)
    RPAREN          reduce using rule 319 (operator_name -> NOTSYM .)
    RSPAREN         reduce using rule 319 (operator_name -> NOTSYM .)
    RCPAREN         reduce using rule 319 (operator_name -> NOTSYM .)


state 272

    (320) operator_name -> EQUAL .

    LSPAREN         reduce using rule 320 (operator_name -> EQUAL .)
    LPAREN          reduce using rule 320 (operator_name -> EQUAL .)
    DOT             reduce using rule 320 (operator_name -> EQUAL .)
    ARROW           reduce using rule 320 (operator_name -> EQUAL .)
    DPLUSOP         reduce using rule 320 (operator_name -> EQUAL .)
    DMINUSOP        reduce using rule 320 (operator_name -> EQUAL .)
    EQUAL           reduce using rule 320 (operator_name -> EQUAL .)
    MULTEQOP        reduce using rule 320 (operator_name -> EQUAL .)
    DIVEQOP         reduce using rule 320 (operator_name -> EQUAL .)
    MODEQOP         reduce using rule 320 (operator_name -> EQUAL .)
    PLUSEQOP        reduce using rule 320 (operator_name -> EQUAL .)
    MINUSEQOP       reduce using rule 320 (operator_name -> EQUAL .)
    LSHIFTEQOP      reduce using rule 320 (operator_name -> EQUAL .)
    RSHIFTEQOP      reduce using rule 320 (operator_name -> EQUAL .)
    BANDEQOP        reduce using rule 320 (operator_name -> EQUAL .)
    B_E_OR          reduce using rule 320 (operator_name -> EQUAL .)
    BOREQOP         reduce using rule 320 (operator_name -> EQUAL .)
    DOTSTAR         reduce using rule 320 (operator_name -> EQUAL .)
    ARROWSTAR       reduce using rule 320 (operator_name -> EQUAL .)
    MULTOP          reduce using rule 320 (operator_name -> EQUAL .)
    DIVOP           reduce using rule 320 (operator_name -> EQUAL .)
    MODOP           reduce using rule 320 (operator_name -> EQUAL .)
    PLUSOP          reduce using rule 320 (operator_name -> EQUAL .)
    MINUSOP         reduce using rule 320 (operator_name -> EQUAL .)
    LSHIFT          reduce using rule 320 (operator_name -> EQUAL .)
    RSHIFT          reduce using rule 320 (operator_name -> EQUAL .)
    LTCOMP          reduce using rule 320 (operator_name -> EQUAL .)
    GTCOMP          reduce using rule 320 (operator_name -> EQUAL .)
    LTECOMP         reduce using rule 320 (operator_name -> EQUAL .)
    GTECOMP         reduce using rule 320 (operator_name -> EQUAL .)
    EQCOMP          reduce using rule 320 (operator_name -> EQUAL .)
    NEQCOMP         reduce using rule 320 (operator_name -> EQUAL .)
    BANDOP          reduce using rule 320 (operator_name -> EQUAL .)
    XOROP           reduce using rule 320 (operator_name -> EQUAL .)
    OROP            reduce using rule 320 (operator_name -> EQUAL .)
    ANDOP           reduce using rule 320 (operator_name -> EQUAL .)
    QUESMARK        reduce using rule 320 (operator_name -> EQUAL .)
    COMMA           reduce using rule 320 (operator_name -> EQUAL .)
    SEMICOLON       reduce using rule 320 (operator_name -> EQUAL .)
    $end            reduce using rule 320 (operator_name -> EQUAL .)
    COLON           reduce using rule 320 (operator_name -> EQUAL .)
    LCPAREN         reduce using rule 320 (operator_name -> EQUAL .)
    RPAREN          reduce using rule 320 (operator_name -> EQUAL .)
    RSPAREN         reduce using rule 320 (operator_name -> EQUAL .)
    RCPAREN         reduce using rule 320 (operator_name -> EQUAL .)


state 273

    (321) operator_name -> LTCOMP .

    LSPAREN         reduce using rule 321 (operator_name -> LTCOMP .)
    LPAREN          reduce using rule 321 (operator_name -> LTCOMP .)
    DOT             reduce using rule 321 (operator_name -> LTCOMP .)
    ARROW           reduce using rule 321 (operator_name -> LTCOMP .)
    DPLUSOP         reduce using rule 321 (operator_name -> LTCOMP .)
    DMINUSOP        reduce using rule 321 (operator_name -> LTCOMP .)
    EQUAL           reduce using rule 321 (operator_name -> LTCOMP .)
    MULTEQOP        reduce using rule 321 (operator_name -> LTCOMP .)
    DIVEQOP         reduce using rule 321 (operator_name -> LTCOMP .)
    MODEQOP         reduce using rule 321 (operator_name -> LTCOMP .)
    PLUSEQOP        reduce using rule 321 (operator_name -> LTCOMP .)
    MINUSEQOP       reduce using rule 321 (operator_name -> LTCOMP .)
    LSHIFTEQOP      reduce using rule 321 (operator_name -> LTCOMP .)
    RSHIFTEQOP      reduce using rule 321 (operator_name -> LTCOMP .)
    BANDEQOP        reduce using rule 321 (operator_name -> LTCOMP .)
    B_E_OR          reduce using rule 321 (operator_name -> LTCOMP .)
    BOREQOP         reduce using rule 321 (operator_name -> LTCOMP .)
    DOTSTAR         reduce using rule 321 (operator_name -> LTCOMP .)
    ARROWSTAR       reduce using rule 321 (operator_name -> LTCOMP .)
    MULTOP          reduce using rule 321 (operator_name -> LTCOMP .)
    DIVOP           reduce using rule 321 (operator_name -> LTCOMP .)
    MODOP           reduce using rule 321 (operator_name -> LTCOMP .)
    PLUSOP          reduce using rule 321 (operator_name -> LTCOMP .)
    MINUSOP         reduce using rule 321 (operator_name -> LTCOMP .)
    LSHIFT          reduce using rule 321 (operator_name -> LTCOMP .)
    RSHIFT          reduce using rule 321 (operator_name -> LTCOMP .)
    LTCOMP          reduce using rule 321 (operator_name -> LTCOMP .)
    GTCOMP          reduce using rule 321 (operator_name -> LTCOMP .)
    LTECOMP         reduce using rule 321 (operator_name -> LTCOMP .)
    GTECOMP         reduce using rule 321 (operator_name -> LTCOMP .)
    EQCOMP          reduce using rule 321 (operator_name -> LTCOMP .)
    NEQCOMP         reduce using rule 321 (operator_name -> LTCOMP .)
    BANDOP          reduce using rule 321 (operator_name -> LTCOMP .)
    XOROP           reduce using rule 321 (operator_name -> LTCOMP .)
    OROP            reduce using rule 321 (operator_name -> LTCOMP .)
    ANDOP           reduce using rule 321 (operator_name -> LTCOMP .)
    QUESMARK        reduce using rule 321 (operator_name -> LTCOMP .)
    COMMA           reduce using rule 321 (operator_name -> LTCOMP .)
    SEMICOLON       reduce using rule 321 (operator_name -> LTCOMP .)
    $end            reduce using rule 321 (operator_name -> LTCOMP .)
    COLON           reduce using rule 321 (operator_name -> LTCOMP .)
    LCPAREN         reduce using rule 321 (operator_name -> LTCOMP .)
    RPAREN          reduce using rule 321 (operator_name -> LTCOMP .)
    RSPAREN         reduce using rule 321 (operator_name -> LTCOMP .)
    RCPAREN         reduce using rule 321 (operator_name -> LTCOMP .)


state 274

    (322) operator_name -> GTCOMP .

    LSPAREN         reduce using rule 322 (operator_name -> GTCOMP .)
    LPAREN          reduce using rule 322 (operator_name -> GTCOMP .)
    DOT             reduce using rule 322 (operator_name -> GTCOMP .)
    ARROW           reduce using rule 322 (operator_name -> GTCOMP .)
    DPLUSOP         reduce using rule 322 (operator_name -> GTCOMP .)
    DMINUSOP        reduce using rule 322 (operator_name -> GTCOMP .)
    EQUAL           reduce using rule 322 (operator_name -> GTCOMP .)
    MULTEQOP        reduce using rule 322 (operator_name -> GTCOMP .)
    DIVEQOP         reduce using rule 322 (operator_name -> GTCOMP .)
    MODEQOP         reduce using rule 322 (operator_name -> GTCOMP .)
    PLUSEQOP        reduce using rule 322 (operator_name -> GTCOMP .)
    MINUSEQOP       reduce using rule 322 (operator_name -> GTCOMP .)
    LSHIFTEQOP      reduce using rule 322 (operator_name -> GTCOMP .)
    RSHIFTEQOP      reduce using rule 322 (operator_name -> GTCOMP .)
    BANDEQOP        reduce using rule 322 (operator_name -> GTCOMP .)
    B_E_OR          reduce using rule 322 (operator_name -> GTCOMP .)
    BOREQOP         reduce using rule 322 (operator_name -> GTCOMP .)
    DOTSTAR         reduce using rule 322 (operator_name -> GTCOMP .)
    ARROWSTAR       reduce using rule 322 (operator_name -> GTCOMP .)
    MULTOP          reduce using rule 322 (operator_name -> GTCOMP .)
    DIVOP           reduce using rule 322 (operator_name -> GTCOMP .)
    MODOP           reduce using rule 322 (operator_name -> GTCOMP .)
    PLUSOP          reduce using rule 322 (operator_name -> GTCOMP .)
    MINUSOP         reduce using rule 322 (operator_name -> GTCOMP .)
    LSHIFT          reduce using rule 322 (operator_name -> GTCOMP .)
    RSHIFT          reduce using rule 322 (operator_name -> GTCOMP .)
    LTCOMP          reduce using rule 322 (operator_name -> GTCOMP .)
    GTCOMP          reduce using rule 322 (operator_name -> GTCOMP .)
    LTECOMP         reduce using rule 322 (operator_name -> GTCOMP .)
    GTECOMP         reduce using rule 322 (operator_name -> GTCOMP .)
    EQCOMP          reduce using rule 322 (operator_name -> GTCOMP .)
    NEQCOMP         reduce using rule 322 (operator_name -> GTCOMP .)
    BANDOP          reduce using rule 322 (operator_name -> GTCOMP .)
    XOROP           reduce using rule 322 (operator_name -> GTCOMP .)
    OROP            reduce using rule 322 (operator_name -> GTCOMP .)
    ANDOP           reduce using rule 322 (operator_name -> GTCOMP .)
    QUESMARK        reduce using rule 322 (operator_name -> GTCOMP .)
    COMMA           reduce using rule 322 (operator_name -> GTCOMP .)
    SEMICOLON       reduce using rule 322 (operator_name -> GTCOMP .)
    $end            reduce using rule 322 (operator_name -> GTCOMP .)
    COLON           reduce using rule 322 (operator_name -> GTCOMP .)
    LCPAREN         reduce using rule 322 (operator_name -> GTCOMP .)
    RPAREN          reduce using rule 322 (operator_name -> GTCOMP .)
    RSPAREN         reduce using rule 322 (operator_name -> GTCOMP .)
    RCPAREN         reduce using rule 322 (operator_name -> GTCOMP .)


state 275

    (323) operator_name -> PLUSEQOP .

    LSPAREN         reduce using rule 323 (operator_name -> PLUSEQOP .)
    LPAREN          reduce using rule 323 (operator_name -> PLUSEQOP .)
    DOT             reduce using rule 323 (operator_name -> PLUSEQOP .)
    ARROW           reduce using rule 323 (operator_name -> PLUSEQOP .)
    DPLUSOP         reduce using rule 323 (operator_name -> PLUSEQOP .)
    DMINUSOP        reduce using rule 323 (operator_name -> PLUSEQOP .)
    EQUAL           reduce using rule 323 (operator_name -> PLUSEQOP .)
    MULTEQOP        reduce using rule 323 (operator_name -> PLUSEQOP .)
    DIVEQOP         reduce using rule 323 (operator_name -> PLUSEQOP .)
    MODEQOP         reduce using rule 323 (operator_name -> PLUSEQOP .)
    PLUSEQOP        reduce using rule 323 (operator_name -> PLUSEQOP .)
    MINUSEQOP       reduce using rule 323 (operator_name -> PLUSEQOP .)
    LSHIFTEQOP      reduce using rule 323 (operator_name -> PLUSEQOP .)
    RSHIFTEQOP      reduce using rule 323 (operator_name -> PLUSEQOP .)
    BANDEQOP        reduce using rule 323 (operator_name -> PLUSEQOP .)
    B_E_OR          reduce using rule 323 (operator_name -> PLUSEQOP .)
    BOREQOP         reduce using rule 323 (operator_name -> PLUSEQOP .)
    DOTSTAR         reduce using rule 323 (operator_name -> PLUSEQOP .)
    ARROWSTAR       reduce using rule 323 (operator_name -> PLUSEQOP .)
    MULTOP          reduce using rule 323 (operator_name -> PLUSEQOP .)
    DIVOP           reduce using rule 323 (operator_name -> PLUSEQOP .)
    MODOP           reduce using rule 323 (operator_name -> PLUSEQOP .)
    PLUSOP          reduce using rule 323 (operator_name -> PLUSEQOP .)
    MINUSOP         reduce using rule 323 (operator_name -> PLUSEQOP .)
    LSHIFT          reduce using rule 323 (operator_name -> PLUSEQOP .)
    RSHIFT          reduce using rule 323 (operator_name -> PLUSEQOP .)
    LTCOMP          reduce using rule 323 (operator_name -> PLUSEQOP .)
    GTCOMP          reduce using rule 323 (operator_name -> PLUSEQOP .)
    LTECOMP         reduce using rule 323 (operator_name -> PLUSEQOP .)
    GTECOMP         reduce using rule 323 (operator_name -> PLUSEQOP .)
    EQCOMP          reduce using rule 323 (operator_name -> PLUSEQOP .)
    NEQCOMP         reduce using rule 323 (operator_name -> PLUSEQOP .)
    BANDOP          reduce using rule 323 (operator_name -> PLUSEQOP .)
    XOROP           reduce using rule 323 (operator_name -> PLUSEQOP .)
    OROP            reduce using rule 323 (operator_name -> PLUSEQOP .)
    ANDOP           reduce using rule 323 (operator_name -> PLUSEQOP .)
    QUESMARK        reduce using rule 323 (operator_name -> PLUSEQOP .)
    COMMA           reduce using rule 323 (operator_name -> PLUSEQOP .)
    SEMICOLON       reduce using rule 323 (operator_name -> PLUSEQOP .)
    $end            reduce using rule 323 (operator_name -> PLUSEQOP .)
    COLON           reduce using rule 323 (operator_name -> PLUSEQOP .)
    LCPAREN         reduce using rule 323 (operator_name -> PLUSEQOP .)
    RPAREN          reduce using rule 323 (operator_name -> PLUSEQOP .)
    RSPAREN         reduce using rule 323 (operator_name -> PLUSEQOP .)
    RCPAREN         reduce using rule 323 (operator_name -> PLUSEQOP .)


state 276

    (324) operator_name -> MINUSEQOP .

    LSPAREN         reduce using rule 324 (operator_name -> MINUSEQOP .)
    LPAREN          reduce using rule 324 (operator_name -> MINUSEQOP .)
    DOT             reduce using rule 324 (operator_name -> MINUSEQOP .)
    ARROW           reduce using rule 324 (operator_name -> MINUSEQOP .)
    DPLUSOP         reduce using rule 324 (operator_name -> MINUSEQOP .)
    DMINUSOP        reduce using rule 324 (operator_name -> MINUSEQOP .)
    EQUAL           reduce using rule 324 (operator_name -> MINUSEQOP .)
    MULTEQOP        reduce using rule 324 (operator_name -> MINUSEQOP .)
    DIVEQOP         reduce using rule 324 (operator_name -> MINUSEQOP .)
    MODEQOP         reduce using rule 324 (operator_name -> MINUSEQOP .)
    PLUSEQOP        reduce using rule 324 (operator_name -> MINUSEQOP .)
    MINUSEQOP       reduce using rule 324 (operator_name -> MINUSEQOP .)
    LSHIFTEQOP      reduce using rule 324 (operator_name -> MINUSEQOP .)
    RSHIFTEQOP      reduce using rule 324 (operator_name -> MINUSEQOP .)
    BANDEQOP        reduce using rule 324 (operator_name -> MINUSEQOP .)
    B_E_OR          reduce using rule 324 (operator_name -> MINUSEQOP .)
    BOREQOP         reduce using rule 324 (operator_name -> MINUSEQOP .)
    DOTSTAR         reduce using rule 324 (operator_name -> MINUSEQOP .)
    ARROWSTAR       reduce using rule 324 (operator_name -> MINUSEQOP .)
    MULTOP          reduce using rule 324 (operator_name -> MINUSEQOP .)
    DIVOP           reduce using rule 324 (operator_name -> MINUSEQOP .)
    MODOP           reduce using rule 324 (operator_name -> MINUSEQOP .)
    PLUSOP          reduce using rule 324 (operator_name -> MINUSEQOP .)
    MINUSOP         reduce using rule 324 (operator_name -> MINUSEQOP .)
    LSHIFT          reduce using rule 324 (operator_name -> MINUSEQOP .)
    RSHIFT          reduce using rule 324 (operator_name -> MINUSEQOP .)
    LTCOMP          reduce using rule 324 (operator_name -> MINUSEQOP .)
    GTCOMP          reduce using rule 324 (operator_name -> MINUSEQOP .)
    LTECOMP         reduce using rule 324 (operator_name -> MINUSEQOP .)
    GTECOMP         reduce using rule 324 (operator_name -> MINUSEQOP .)
    EQCOMP          reduce using rule 324 (operator_name -> MINUSEQOP .)
    NEQCOMP         reduce using rule 324 (operator_name -> MINUSEQOP .)
    BANDOP          reduce using rule 324 (operator_name -> MINUSEQOP .)
    XOROP           reduce using rule 324 (operator_name -> MINUSEQOP .)
    OROP            reduce using rule 324 (operator_name -> MINUSEQOP .)
    ANDOP           reduce using rule 324 (operator_name -> MINUSEQOP .)
    QUESMARK        reduce using rule 324 (operator_name -> MINUSEQOP .)
    COMMA           reduce using rule 324 (operator_name -> MINUSEQOP .)
    SEMICOLON       reduce using rule 324 (operator_name -> MINUSEQOP .)
    $end            reduce using rule 324 (operator_name -> MINUSEQOP .)
    COLON           reduce using rule 324 (operator_name -> MINUSEQOP .)
    LCPAREN         reduce using rule 324 (operator_name -> MINUSEQOP .)
    RPAREN          reduce using rule 324 (operator_name -> MINUSEQOP .)
    RSPAREN         reduce using rule 324 (operator_name -> MINUSEQOP .)
    RCPAREN         reduce using rule 324 (operator_name -> MINUSEQOP .)


state 277

    (325) operator_name -> MULTEQOP .

    LSPAREN         reduce using rule 325 (operator_name -> MULTEQOP .)
    LPAREN          reduce using rule 325 (operator_name -> MULTEQOP .)
    DOT             reduce using rule 325 (operator_name -> MULTEQOP .)
    ARROW           reduce using rule 325 (operator_name -> MULTEQOP .)
    DPLUSOP         reduce using rule 325 (operator_name -> MULTEQOP .)
    DMINUSOP        reduce using rule 325 (operator_name -> MULTEQOP .)
    EQUAL           reduce using rule 325 (operator_name -> MULTEQOP .)
    MULTEQOP        reduce using rule 325 (operator_name -> MULTEQOP .)
    DIVEQOP         reduce using rule 325 (operator_name -> MULTEQOP .)
    MODEQOP         reduce using rule 325 (operator_name -> MULTEQOP .)
    PLUSEQOP        reduce using rule 325 (operator_name -> MULTEQOP .)
    MINUSEQOP       reduce using rule 325 (operator_name -> MULTEQOP .)
    LSHIFTEQOP      reduce using rule 325 (operator_name -> MULTEQOP .)
    RSHIFTEQOP      reduce using rule 325 (operator_name -> MULTEQOP .)
    BANDEQOP        reduce using rule 325 (operator_name -> MULTEQOP .)
    B_E_OR          reduce using rule 325 (operator_name -> MULTEQOP .)
    BOREQOP         reduce using rule 325 (operator_name -> MULTEQOP .)
    DOTSTAR         reduce using rule 325 (operator_name -> MULTEQOP .)
    ARROWSTAR       reduce using rule 325 (operator_name -> MULTEQOP .)
    MULTOP          reduce using rule 325 (operator_name -> MULTEQOP .)
    DIVOP           reduce using rule 325 (operator_name -> MULTEQOP .)
    MODOP           reduce using rule 325 (operator_name -> MULTEQOP .)
    PLUSOP          reduce using rule 325 (operator_name -> MULTEQOP .)
    MINUSOP         reduce using rule 325 (operator_name -> MULTEQOP .)
    LSHIFT          reduce using rule 325 (operator_name -> MULTEQOP .)
    RSHIFT          reduce using rule 325 (operator_name -> MULTEQOP .)
    LTCOMP          reduce using rule 325 (operator_name -> MULTEQOP .)
    GTCOMP          reduce using rule 325 (operator_name -> MULTEQOP .)
    LTECOMP         reduce using rule 325 (operator_name -> MULTEQOP .)
    GTECOMP         reduce using rule 325 (operator_name -> MULTEQOP .)
    EQCOMP          reduce using rule 325 (operator_name -> MULTEQOP .)
    NEQCOMP         reduce using rule 325 (operator_name -> MULTEQOP .)
    BANDOP          reduce using rule 325 (operator_name -> MULTEQOP .)
    XOROP           reduce using rule 325 (operator_name -> MULTEQOP .)
    OROP            reduce using rule 325 (operator_name -> MULTEQOP .)
    ANDOP           reduce using rule 325 (operator_name -> MULTEQOP .)
    QUESMARK        reduce using rule 325 (operator_name -> MULTEQOP .)
    COMMA           reduce using rule 325 (operator_name -> MULTEQOP .)
    SEMICOLON       reduce using rule 325 (operator_name -> MULTEQOP .)
    $end            reduce using rule 325 (operator_name -> MULTEQOP .)
    COLON           reduce using rule 325 (operator_name -> MULTEQOP .)
    LCPAREN         reduce using rule 325 (operator_name -> MULTEQOP .)
    RPAREN          reduce using rule 325 (operator_name -> MULTEQOP .)
    RSPAREN         reduce using rule 325 (operator_name -> MULTEQOP .)
    RCPAREN         reduce using rule 325 (operator_name -> MULTEQOP .)


state 278

    (326) operator_name -> DIVEQOP .

    LSPAREN         reduce using rule 326 (operator_name -> DIVEQOP .)
    LPAREN          reduce using rule 326 (operator_name -> DIVEQOP .)
    DOT             reduce using rule 326 (operator_name -> DIVEQOP .)
    ARROW           reduce using rule 326 (operator_name -> DIVEQOP .)
    DPLUSOP         reduce using rule 326 (operator_name -> DIVEQOP .)
    DMINUSOP        reduce using rule 326 (operator_name -> DIVEQOP .)
    EQUAL           reduce using rule 326 (operator_name -> DIVEQOP .)
    MULTEQOP        reduce using rule 326 (operator_name -> DIVEQOP .)
    DIVEQOP         reduce using rule 326 (operator_name -> DIVEQOP .)
    MODEQOP         reduce using rule 326 (operator_name -> DIVEQOP .)
    PLUSEQOP        reduce using rule 326 (operator_name -> DIVEQOP .)
    MINUSEQOP       reduce using rule 326 (operator_name -> DIVEQOP .)
    LSHIFTEQOP      reduce using rule 326 (operator_name -> DIVEQOP .)
    RSHIFTEQOP      reduce using rule 326 (operator_name -> DIVEQOP .)
    BANDEQOP        reduce using rule 326 (operator_name -> DIVEQOP .)
    B_E_OR          reduce using rule 326 (operator_name -> DIVEQOP .)
    BOREQOP         reduce using rule 326 (operator_name -> DIVEQOP .)
    DOTSTAR         reduce using rule 326 (operator_name -> DIVEQOP .)
    ARROWSTAR       reduce using rule 326 (operator_name -> DIVEQOP .)
    MULTOP          reduce using rule 326 (operator_name -> DIVEQOP .)
    DIVOP           reduce using rule 326 (operator_name -> DIVEQOP .)
    MODOP           reduce using rule 326 (operator_name -> DIVEQOP .)
    PLUSOP          reduce using rule 326 (operator_name -> DIVEQOP .)
    MINUSOP         reduce using rule 326 (operator_name -> DIVEQOP .)
    LSHIFT          reduce using rule 326 (operator_name -> DIVEQOP .)
    RSHIFT          reduce using rule 326 (operator_name -> DIVEQOP .)
    LTCOMP          reduce using rule 326 (operator_name -> DIVEQOP .)
    GTCOMP          reduce using rule 326 (operator_name -> DIVEQOP .)
    LTECOMP         reduce using rule 326 (operator_name -> DIVEQOP .)
    GTECOMP         reduce using rule 326 (operator_name -> DIVEQOP .)
    EQCOMP          reduce using rule 326 (operator_name -> DIVEQOP .)
    NEQCOMP         reduce using rule 326 (operator_name -> DIVEQOP .)
    BANDOP          reduce using rule 326 (operator_name -> DIVEQOP .)
    XOROP           reduce using rule 326 (operator_name -> DIVEQOP .)
    OROP            reduce using rule 326 (operator_name -> DIVEQOP .)
    ANDOP           reduce using rule 326 (operator_name -> DIVEQOP .)
    QUESMARK        reduce using rule 326 (operator_name -> DIVEQOP .)
    COMMA           reduce using rule 326 (operator_name -> DIVEQOP .)
    SEMICOLON       reduce using rule 326 (operator_name -> DIVEQOP .)
    $end            reduce using rule 326 (operator_name -> DIVEQOP .)
    COLON           reduce using rule 326 (operator_name -> DIVEQOP .)
    LCPAREN         reduce using rule 326 (operator_name -> DIVEQOP .)
    RPAREN          reduce using rule 326 (operator_name -> DIVEQOP .)
    RSPAREN         reduce using rule 326 (operator_name -> DIVEQOP .)
    RCPAREN         reduce using rule 326 (operator_name -> DIVEQOP .)


state 279

    (327) operator_name -> MODEQOP .

    LSPAREN         reduce using rule 327 (operator_name -> MODEQOP .)
    LPAREN          reduce using rule 327 (operator_name -> MODEQOP .)
    DOT             reduce using rule 327 (operator_name -> MODEQOP .)
    ARROW           reduce using rule 327 (operator_name -> MODEQOP .)
    DPLUSOP         reduce using rule 327 (operator_name -> MODEQOP .)
    DMINUSOP        reduce using rule 327 (operator_name -> MODEQOP .)
    EQUAL           reduce using rule 327 (operator_name -> MODEQOP .)
    MULTEQOP        reduce using rule 327 (operator_name -> MODEQOP .)
    DIVEQOP         reduce using rule 327 (operator_name -> MODEQOP .)
    MODEQOP         reduce using rule 327 (operator_name -> MODEQOP .)
    PLUSEQOP        reduce using rule 327 (operator_name -> MODEQOP .)
    MINUSEQOP       reduce using rule 327 (operator_name -> MODEQOP .)
    LSHIFTEQOP      reduce using rule 327 (operator_name -> MODEQOP .)
    RSHIFTEQOP      reduce using rule 327 (operator_name -> MODEQOP .)
    BANDEQOP        reduce using rule 327 (operator_name -> MODEQOP .)
    B_E_OR          reduce using rule 327 (operator_name -> MODEQOP .)
    BOREQOP         reduce using rule 327 (operator_name -> MODEQOP .)
    DOTSTAR         reduce using rule 327 (operator_name -> MODEQOP .)
    ARROWSTAR       reduce using rule 327 (operator_name -> MODEQOP .)
    MULTOP          reduce using rule 327 (operator_name -> MODEQOP .)
    DIVOP           reduce using rule 327 (operator_name -> MODEQOP .)
    MODOP           reduce using rule 327 (operator_name -> MODEQOP .)
    PLUSOP          reduce using rule 327 (operator_name -> MODEQOP .)
    MINUSOP         reduce using rule 327 (operator_name -> MODEQOP .)
    LSHIFT          reduce using rule 327 (operator_name -> MODEQOP .)
    RSHIFT          reduce using rule 327 (operator_name -> MODEQOP .)
    LTCOMP          reduce using rule 327 (operator_name -> MODEQOP .)
    GTCOMP          reduce using rule 327 (operator_name -> MODEQOP .)
    LTECOMP         reduce using rule 327 (operator_name -> MODEQOP .)
    GTECOMP         reduce using rule 327 (operator_name -> MODEQOP .)
    EQCOMP          reduce using rule 327 (operator_name -> MODEQOP .)
    NEQCOMP         reduce using rule 327 (operator_name -> MODEQOP .)
    BANDOP          reduce using rule 327 (operator_name -> MODEQOP .)
    XOROP           reduce using rule 327 (operator_name -> MODEQOP .)
    OROP            reduce using rule 327 (operator_name -> MODEQOP .)
    ANDOP           reduce using rule 327 (operator_name -> MODEQOP .)
    QUESMARK        reduce using rule 327 (operator_name -> MODEQOP .)
    COMMA           reduce using rule 327 (operator_name -> MODEQOP .)
    SEMICOLON       reduce using rule 327 (operator_name -> MODEQOP .)
    $end            reduce using rule 327 (operator_name -> MODEQOP .)
    COLON           reduce using rule 327 (operator_name -> MODEQOP .)
    LCPAREN         reduce using rule 327 (operator_name -> MODEQOP .)
    RPAREN          reduce using rule 327 (operator_name -> MODEQOP .)
    RSPAREN         reduce using rule 327 (operator_name -> MODEQOP .)
    RCPAREN         reduce using rule 327 (operator_name -> MODEQOP .)


state 280

    (328) operator_name -> B_E_OR .

    LSPAREN         reduce using rule 328 (operator_name -> B_E_OR .)
    LPAREN          reduce using rule 328 (operator_name -> B_E_OR .)
    DOT             reduce using rule 328 (operator_name -> B_E_OR .)
    ARROW           reduce using rule 328 (operator_name -> B_E_OR .)
    DPLUSOP         reduce using rule 328 (operator_name -> B_E_OR .)
    DMINUSOP        reduce using rule 328 (operator_name -> B_E_OR .)
    EQUAL           reduce using rule 328 (operator_name -> B_E_OR .)
    MULTEQOP        reduce using rule 328 (operator_name -> B_E_OR .)
    DIVEQOP         reduce using rule 328 (operator_name -> B_E_OR .)
    MODEQOP         reduce using rule 328 (operator_name -> B_E_OR .)
    PLUSEQOP        reduce using rule 328 (operator_name -> B_E_OR .)
    MINUSEQOP       reduce using rule 328 (operator_name -> B_E_OR .)
    LSHIFTEQOP      reduce using rule 328 (operator_name -> B_E_OR .)
    RSHIFTEQOP      reduce using rule 328 (operator_name -> B_E_OR .)
    BANDEQOP        reduce using rule 328 (operator_name -> B_E_OR .)
    B_E_OR          reduce using rule 328 (operator_name -> B_E_OR .)
    BOREQOP         reduce using rule 328 (operator_name -> B_E_OR .)
    DOTSTAR         reduce using rule 328 (operator_name -> B_E_OR .)
    ARROWSTAR       reduce using rule 328 (operator_name -> B_E_OR .)
    MULTOP          reduce using rule 328 (operator_name -> B_E_OR .)
    DIVOP           reduce using rule 328 (operator_name -> B_E_OR .)
    MODOP           reduce using rule 328 (operator_name -> B_E_OR .)
    PLUSOP          reduce using rule 328 (operator_name -> B_E_OR .)
    MINUSOP         reduce using rule 328 (operator_name -> B_E_OR .)
    LSHIFT          reduce using rule 328 (operator_name -> B_E_OR .)
    RSHIFT          reduce using rule 328 (operator_name -> B_E_OR .)
    LTCOMP          reduce using rule 328 (operator_name -> B_E_OR .)
    GTCOMP          reduce using rule 328 (operator_name -> B_E_OR .)
    LTECOMP         reduce using rule 328 (operator_name -> B_E_OR .)
    GTECOMP         reduce using rule 328 (operator_name -> B_E_OR .)
    EQCOMP          reduce using rule 328 (operator_name -> B_E_OR .)
    NEQCOMP         reduce using rule 328 (operator_name -> B_E_OR .)
    BANDOP          reduce using rule 328 (operator_name -> B_E_OR .)
    XOROP           reduce using rule 328 (operator_name -> B_E_OR .)
    OROP            reduce using rule 328 (operator_name -> B_E_OR .)
    ANDOP           reduce using rule 328 (operator_name -> B_E_OR .)
    QUESMARK        reduce using rule 328 (operator_name -> B_E_OR .)
    COMMA           reduce using rule 328 (operator_name -> B_E_OR .)
    SEMICOLON       reduce using rule 328 (operator_name -> B_E_OR .)
    $end            reduce using rule 328 (operator_name -> B_E_OR .)
    COLON           reduce using rule 328 (operator_name -> B_E_OR .)
    LCPAREN         reduce using rule 328 (operator_name -> B_E_OR .)
    RPAREN          reduce using rule 328 (operator_name -> B_E_OR .)
    RSPAREN         reduce using rule 328 (operator_name -> B_E_OR .)
    RCPAREN         reduce using rule 328 (operator_name -> B_E_OR .)


state 281

    (329) operator_name -> BANDEQOP .

    LSPAREN         reduce using rule 329 (operator_name -> BANDEQOP .)
    LPAREN          reduce using rule 329 (operator_name -> BANDEQOP .)
    DOT             reduce using rule 329 (operator_name -> BANDEQOP .)
    ARROW           reduce using rule 329 (operator_name -> BANDEQOP .)
    DPLUSOP         reduce using rule 329 (operator_name -> BANDEQOP .)
    DMINUSOP        reduce using rule 329 (operator_name -> BANDEQOP .)
    EQUAL           reduce using rule 329 (operator_name -> BANDEQOP .)
    MULTEQOP        reduce using rule 329 (operator_name -> BANDEQOP .)
    DIVEQOP         reduce using rule 329 (operator_name -> BANDEQOP .)
    MODEQOP         reduce using rule 329 (operator_name -> BANDEQOP .)
    PLUSEQOP        reduce using rule 329 (operator_name -> BANDEQOP .)
    MINUSEQOP       reduce using rule 329 (operator_name -> BANDEQOP .)
    LSHIFTEQOP      reduce using rule 329 (operator_name -> BANDEQOP .)
    RSHIFTEQOP      reduce using rule 329 (operator_name -> BANDEQOP .)
    BANDEQOP        reduce using rule 329 (operator_name -> BANDEQOP .)
    B_E_OR          reduce using rule 329 (operator_name -> BANDEQOP .)
    BOREQOP         reduce using rule 329 (operator_name -> BANDEQOP .)
    DOTSTAR         reduce using rule 329 (operator_name -> BANDEQOP .)
    ARROWSTAR       reduce using rule 329 (operator_name -> BANDEQOP .)
    MULTOP          reduce using rule 329 (operator_name -> BANDEQOP .)
    DIVOP           reduce using rule 329 (operator_name -> BANDEQOP .)
    MODOP           reduce using rule 329 (operator_name -> BANDEQOP .)
    PLUSOP          reduce using rule 329 (operator_name -> BANDEQOP .)
    MINUSOP         reduce using rule 329 (operator_name -> BANDEQOP .)
    LSHIFT          reduce using rule 329 (operator_name -> BANDEQOP .)
    RSHIFT          reduce using rule 329 (operator_name -> BANDEQOP .)
    LTCOMP          reduce using rule 329 (operator_name -> BANDEQOP .)
    GTCOMP          reduce using rule 329 (operator_name -> BANDEQOP .)
    LTECOMP         reduce using rule 329 (operator_name -> BANDEQOP .)
    GTECOMP         reduce using rule 329 (operator_name -> BANDEQOP .)
    EQCOMP          reduce using rule 329 (operator_name -> BANDEQOP .)
    NEQCOMP         reduce using rule 329 (operator_name -> BANDEQOP .)
    BANDOP          reduce using rule 329 (operator_name -> BANDEQOP .)
    XOROP           reduce using rule 329 (operator_name -> BANDEQOP .)
    OROP            reduce using rule 329 (operator_name -> BANDEQOP .)
    ANDOP           reduce using rule 329 (operator_name -> BANDEQOP .)
    QUESMARK        reduce using rule 329 (operator_name -> BANDEQOP .)
    COMMA           reduce using rule 329 (operator_name -> BANDEQOP .)
    SEMICOLON       reduce using rule 329 (operator_name -> BANDEQOP .)
    $end            reduce using rule 329 (operator_name -> BANDEQOP .)
    COLON           reduce using rule 329 (operator_name -> BANDEQOP .)
    LCPAREN         reduce using rule 329 (operator_name -> BANDEQOP .)
    RPAREN          reduce using rule 329 (operator_name -> BANDEQOP .)
    RSPAREN         reduce using rule 329 (operator_name -> BANDEQOP .)
    RCPAREN         reduce using rule 329 (operator_name -> BANDEQOP .)


state 282

    (330) operator_name -> LSHIFT .

    LSPAREN         reduce using rule 330 (operator_name -> LSHIFT .)
    LPAREN          reduce using rule 330 (operator_name -> LSHIFT .)
    DOT             reduce using rule 330 (operator_name -> LSHIFT .)
    ARROW           reduce using rule 330 (operator_name -> LSHIFT .)
    DPLUSOP         reduce using rule 330 (operator_name -> LSHIFT .)
    DMINUSOP        reduce using rule 330 (operator_name -> LSHIFT .)
    EQUAL           reduce using rule 330 (operator_name -> LSHIFT .)
    MULTEQOP        reduce using rule 330 (operator_name -> LSHIFT .)
    DIVEQOP         reduce using rule 330 (operator_name -> LSHIFT .)
    MODEQOP         reduce using rule 330 (operator_name -> LSHIFT .)
    PLUSEQOP        reduce using rule 330 (operator_name -> LSHIFT .)
    MINUSEQOP       reduce using rule 330 (operator_name -> LSHIFT .)
    LSHIFTEQOP      reduce using rule 330 (operator_name -> LSHIFT .)
    RSHIFTEQOP      reduce using rule 330 (operator_name -> LSHIFT .)
    BANDEQOP        reduce using rule 330 (operator_name -> LSHIFT .)
    B_E_OR          reduce using rule 330 (operator_name -> LSHIFT .)
    BOREQOP         reduce using rule 330 (operator_name -> LSHIFT .)
    DOTSTAR         reduce using rule 330 (operator_name -> LSHIFT .)
    ARROWSTAR       reduce using rule 330 (operator_name -> LSHIFT .)
    MULTOP          reduce using rule 330 (operator_name -> LSHIFT .)
    DIVOP           reduce using rule 330 (operator_name -> LSHIFT .)
    MODOP           reduce using rule 330 (operator_name -> LSHIFT .)
    PLUSOP          reduce using rule 330 (operator_name -> LSHIFT .)
    MINUSOP         reduce using rule 330 (operator_name -> LSHIFT .)
    LSHIFT          reduce using rule 330 (operator_name -> LSHIFT .)
    RSHIFT          reduce using rule 330 (operator_name -> LSHIFT .)
    LTCOMP          reduce using rule 330 (operator_name -> LSHIFT .)
    GTCOMP          reduce using rule 330 (operator_name -> LSHIFT .)
    LTECOMP         reduce using rule 330 (operator_name -> LSHIFT .)
    GTECOMP         reduce using rule 330 (operator_name -> LSHIFT .)
    EQCOMP          reduce using rule 330 (operator_name -> LSHIFT .)
    NEQCOMP         reduce using rule 330 (operator_name -> LSHIFT .)
    BANDOP          reduce using rule 330 (operator_name -> LSHIFT .)
    XOROP           reduce using rule 330 (operator_name -> LSHIFT .)
    OROP            reduce using rule 330 (operator_name -> LSHIFT .)
    ANDOP           reduce using rule 330 (operator_name -> LSHIFT .)
    QUESMARK        reduce using rule 330 (operator_name -> LSHIFT .)
    COMMA           reduce using rule 330 (operator_name -> LSHIFT .)
    SEMICOLON       reduce using rule 330 (operator_name -> LSHIFT .)
    $end            reduce using rule 330 (operator_name -> LSHIFT .)
    COLON           reduce using rule 330 (operator_name -> LSHIFT .)
    LCPAREN         reduce using rule 330 (operator_name -> LSHIFT .)
    RPAREN          reduce using rule 330 (operator_name -> LSHIFT .)
    RSPAREN         reduce using rule 330 (operator_name -> LSHIFT .)
    RCPAREN         reduce using rule 330 (operator_name -> LSHIFT .)


state 283

    (331) operator_name -> RSHIFT .

    LSPAREN         reduce using rule 331 (operator_name -> RSHIFT .)
    LPAREN          reduce using rule 331 (operator_name -> RSHIFT .)
    DOT             reduce using rule 331 (operator_name -> RSHIFT .)
    ARROW           reduce using rule 331 (operator_name -> RSHIFT .)
    DPLUSOP         reduce using rule 331 (operator_name -> RSHIFT .)
    DMINUSOP        reduce using rule 331 (operator_name -> RSHIFT .)
    EQUAL           reduce using rule 331 (operator_name -> RSHIFT .)
    MULTEQOP        reduce using rule 331 (operator_name -> RSHIFT .)
    DIVEQOP         reduce using rule 331 (operator_name -> RSHIFT .)
    MODEQOP         reduce using rule 331 (operator_name -> RSHIFT .)
    PLUSEQOP        reduce using rule 331 (operator_name -> RSHIFT .)
    MINUSEQOP       reduce using rule 331 (operator_name -> RSHIFT .)
    LSHIFTEQOP      reduce using rule 331 (operator_name -> RSHIFT .)
    RSHIFTEQOP      reduce using rule 331 (operator_name -> RSHIFT .)
    BANDEQOP        reduce using rule 331 (operator_name -> RSHIFT .)
    B_E_OR          reduce using rule 331 (operator_name -> RSHIFT .)
    BOREQOP         reduce using rule 331 (operator_name -> RSHIFT .)
    DOTSTAR         reduce using rule 331 (operator_name -> RSHIFT .)
    ARROWSTAR       reduce using rule 331 (operator_name -> RSHIFT .)
    MULTOP          reduce using rule 331 (operator_name -> RSHIFT .)
    DIVOP           reduce using rule 331 (operator_name -> RSHIFT .)
    MODOP           reduce using rule 331 (operator_name -> RSHIFT .)
    PLUSOP          reduce using rule 331 (operator_name -> RSHIFT .)
    MINUSOP         reduce using rule 331 (operator_name -> RSHIFT .)
    LSHIFT          reduce using rule 331 (operator_name -> RSHIFT .)
    RSHIFT          reduce using rule 331 (operator_name -> RSHIFT .)
    LTCOMP          reduce using rule 331 (operator_name -> RSHIFT .)
    GTCOMP          reduce using rule 331 (operator_name -> RSHIFT .)
    LTECOMP         reduce using rule 331 (operator_name -> RSHIFT .)
    GTECOMP         reduce using rule 331 (operator_name -> RSHIFT .)
    EQCOMP          reduce using rule 331 (operator_name -> RSHIFT .)
    NEQCOMP         reduce using rule 331 (operator_name -> RSHIFT .)
    BANDOP          reduce using rule 331 (operator_name -> RSHIFT .)
    XOROP           reduce using rule 331 (operator_name -> RSHIFT .)
    OROP            reduce using rule 331 (operator_name -> RSHIFT .)
    ANDOP           reduce using rule 331 (operator_name -> RSHIFT .)
    QUESMARK        reduce using rule 331 (operator_name -> RSHIFT .)
    COMMA           reduce using rule 331 (operator_name -> RSHIFT .)
    SEMICOLON       reduce using rule 331 (operator_name -> RSHIFT .)
    $end            reduce using rule 331 (operator_name -> RSHIFT .)
    COLON           reduce using rule 331 (operator_name -> RSHIFT .)
    LCPAREN         reduce using rule 331 (operator_name -> RSHIFT .)
    RPAREN          reduce using rule 331 (operator_name -> RSHIFT .)
    RSPAREN         reduce using rule 331 (operator_name -> RSHIFT .)
    RCPAREN         reduce using rule 331 (operator_name -> RSHIFT .)


state 284

    (332) operator_name -> RSHIFTEQOP .

    LSPAREN         reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    LPAREN          reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    DOT             reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    ARROW           reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    DPLUSOP         reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    DMINUSOP        reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    EQUAL           reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    MULTEQOP        reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    DIVEQOP         reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    MODEQOP         reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    PLUSEQOP        reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    MINUSEQOP       reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    LSHIFTEQOP      reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    RSHIFTEQOP      reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    BANDEQOP        reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    B_E_OR          reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    BOREQOP         reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    DOTSTAR         reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    ARROWSTAR       reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    MULTOP          reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    DIVOP           reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    MODOP           reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    PLUSOP          reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    MINUSOP         reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    LSHIFT          reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    RSHIFT          reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    LTCOMP          reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    GTCOMP          reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    LTECOMP         reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    GTECOMP         reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    EQCOMP          reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    NEQCOMP         reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    BANDOP          reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    XOROP           reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    OROP            reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    ANDOP           reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    QUESMARK        reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    COMMA           reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    SEMICOLON       reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    $end            reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    COLON           reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    LCPAREN         reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    RPAREN          reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    RSPAREN         reduce using rule 332 (operator_name -> RSHIFTEQOP .)
    RCPAREN         reduce using rule 332 (operator_name -> RSHIFTEQOP .)


state 285

    (333) operator_name -> LSHIFTEQOP .

    LSPAREN         reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    LPAREN          reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    DOT             reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    ARROW           reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    DPLUSOP         reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    DMINUSOP        reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    EQUAL           reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    MULTEQOP        reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    DIVEQOP         reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    MODEQOP         reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    PLUSEQOP        reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    MINUSEQOP       reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    LSHIFTEQOP      reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    RSHIFTEQOP      reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    BANDEQOP        reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    B_E_OR          reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    BOREQOP         reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    DOTSTAR         reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    ARROWSTAR       reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    MULTOP          reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    DIVOP           reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    MODOP           reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    PLUSOP          reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    MINUSOP         reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    LSHIFT          reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    RSHIFT          reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    LTCOMP          reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    GTCOMP          reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    LTECOMP         reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    GTECOMP         reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    EQCOMP          reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    NEQCOMP         reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    BANDOP          reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    XOROP           reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    OROP            reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    ANDOP           reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    QUESMARK        reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    COMMA           reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    SEMICOLON       reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    $end            reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    COLON           reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    LCPAREN         reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    RPAREN          reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    RSPAREN         reduce using rule 333 (operator_name -> LSHIFTEQOP .)
    RCPAREN         reduce using rule 333 (operator_name -> LSHIFTEQOP .)


state 286

    (334) operator_name -> EQCOMP .

    LSPAREN         reduce using rule 334 (operator_name -> EQCOMP .)
    LPAREN          reduce using rule 334 (operator_name -> EQCOMP .)
    DOT             reduce using rule 334 (operator_name -> EQCOMP .)
    ARROW           reduce using rule 334 (operator_name -> EQCOMP .)
    DPLUSOP         reduce using rule 334 (operator_name -> EQCOMP .)
    DMINUSOP        reduce using rule 334 (operator_name -> EQCOMP .)
    EQUAL           reduce using rule 334 (operator_name -> EQCOMP .)
    MULTEQOP        reduce using rule 334 (operator_name -> EQCOMP .)
    DIVEQOP         reduce using rule 334 (operator_name -> EQCOMP .)
    MODEQOP         reduce using rule 334 (operator_name -> EQCOMP .)
    PLUSEQOP        reduce using rule 334 (operator_name -> EQCOMP .)
    MINUSEQOP       reduce using rule 334 (operator_name -> EQCOMP .)
    LSHIFTEQOP      reduce using rule 334 (operator_name -> EQCOMP .)
    RSHIFTEQOP      reduce using rule 334 (operator_name -> EQCOMP .)
    BANDEQOP        reduce using rule 334 (operator_name -> EQCOMP .)
    B_E_OR          reduce using rule 334 (operator_name -> EQCOMP .)
    BOREQOP         reduce using rule 334 (operator_name -> EQCOMP .)
    DOTSTAR         reduce using rule 334 (operator_name -> EQCOMP .)
    ARROWSTAR       reduce using rule 334 (operator_name -> EQCOMP .)
    MULTOP          reduce using rule 334 (operator_name -> EQCOMP .)
    DIVOP           reduce using rule 334 (operator_name -> EQCOMP .)
    MODOP           reduce using rule 334 (operator_name -> EQCOMP .)
    PLUSOP          reduce using rule 334 (operator_name -> EQCOMP .)
    MINUSOP         reduce using rule 334 (operator_name -> EQCOMP .)
    LSHIFT          reduce using rule 334 (operator_name -> EQCOMP .)
    RSHIFT          reduce using rule 334 (operator_name -> EQCOMP .)
    LTCOMP          reduce using rule 334 (operator_name -> EQCOMP .)
    GTCOMP          reduce using rule 334 (operator_name -> EQCOMP .)
    LTECOMP         reduce using rule 334 (operator_name -> EQCOMP .)
    GTECOMP         reduce using rule 334 (operator_name -> EQCOMP .)
    EQCOMP          reduce using rule 334 (operator_name -> EQCOMP .)
    NEQCOMP         reduce using rule 334 (operator_name -> EQCOMP .)
    BANDOP          reduce using rule 334 (operator_name -> EQCOMP .)
    XOROP           reduce using rule 334 (operator_name -> EQCOMP .)
    OROP            reduce using rule 334 (operator_name -> EQCOMP .)
    ANDOP           reduce using rule 334 (operator_name -> EQCOMP .)
    QUESMARK        reduce using rule 334 (operator_name -> EQCOMP .)
    COMMA           reduce using rule 334 (operator_name -> EQCOMP .)
    SEMICOLON       reduce using rule 334 (operator_name -> EQCOMP .)
    $end            reduce using rule 334 (operator_name -> EQCOMP .)
    COLON           reduce using rule 334 (operator_name -> EQCOMP .)
    LCPAREN         reduce using rule 334 (operator_name -> EQCOMP .)
    RPAREN          reduce using rule 334 (operator_name -> EQCOMP .)
    RSPAREN         reduce using rule 334 (operator_name -> EQCOMP .)
    RCPAREN         reduce using rule 334 (operator_name -> EQCOMP .)


state 287

    (335) operator_name -> NEQCOMP .

    LSPAREN         reduce using rule 335 (operator_name -> NEQCOMP .)
    LPAREN          reduce using rule 335 (operator_name -> NEQCOMP .)
    DOT             reduce using rule 335 (operator_name -> NEQCOMP .)
    ARROW           reduce using rule 335 (operator_name -> NEQCOMP .)
    DPLUSOP         reduce using rule 335 (operator_name -> NEQCOMP .)
    DMINUSOP        reduce using rule 335 (operator_name -> NEQCOMP .)
    EQUAL           reduce using rule 335 (operator_name -> NEQCOMP .)
    MULTEQOP        reduce using rule 335 (operator_name -> NEQCOMP .)
    DIVEQOP         reduce using rule 335 (operator_name -> NEQCOMP .)
    MODEQOP         reduce using rule 335 (operator_name -> NEQCOMP .)
    PLUSEQOP        reduce using rule 335 (operator_name -> NEQCOMP .)
    MINUSEQOP       reduce using rule 335 (operator_name -> NEQCOMP .)
    LSHIFTEQOP      reduce using rule 335 (operator_name -> NEQCOMP .)
    RSHIFTEQOP      reduce using rule 335 (operator_name -> NEQCOMP .)
    BANDEQOP        reduce using rule 335 (operator_name -> NEQCOMP .)
    B_E_OR          reduce using rule 335 (operator_name -> NEQCOMP .)
    BOREQOP         reduce using rule 335 (operator_name -> NEQCOMP .)
    DOTSTAR         reduce using rule 335 (operator_name -> NEQCOMP .)
    ARROWSTAR       reduce using rule 335 (operator_name -> NEQCOMP .)
    MULTOP          reduce using rule 335 (operator_name -> NEQCOMP .)
    DIVOP           reduce using rule 335 (operator_name -> NEQCOMP .)
    MODOP           reduce using rule 335 (operator_name -> NEQCOMP .)
    PLUSOP          reduce using rule 335 (operator_name -> NEQCOMP .)
    MINUSOP         reduce using rule 335 (operator_name -> NEQCOMP .)
    LSHIFT          reduce using rule 335 (operator_name -> NEQCOMP .)
    RSHIFT          reduce using rule 335 (operator_name -> NEQCOMP .)
    LTCOMP          reduce using rule 335 (operator_name -> NEQCOMP .)
    GTCOMP          reduce using rule 335 (operator_name -> NEQCOMP .)
    LTECOMP         reduce using rule 335 (operator_name -> NEQCOMP .)
    GTECOMP         reduce using rule 335 (operator_name -> NEQCOMP .)
    EQCOMP          reduce using rule 335 (operator_name -> NEQCOMP .)
    NEQCOMP         reduce using rule 335 (operator_name -> NEQCOMP .)
    BANDOP          reduce using rule 335 (operator_name -> NEQCOMP .)
    XOROP           reduce using rule 335 (operator_name -> NEQCOMP .)
    OROP            reduce using rule 335 (operator_name -> NEQCOMP .)
    ANDOP           reduce using rule 335 (operator_name -> NEQCOMP .)
    QUESMARK        reduce using rule 335 (operator_name -> NEQCOMP .)
    COMMA           reduce using rule 335 (operator_name -> NEQCOMP .)
    SEMICOLON       reduce using rule 335 (operator_name -> NEQCOMP .)
    $end            reduce using rule 335 (operator_name -> NEQCOMP .)
    COLON           reduce using rule 335 (operator_name -> NEQCOMP .)
    LCPAREN         reduce using rule 335 (operator_name -> NEQCOMP .)
    RPAREN          reduce using rule 335 (operator_name -> NEQCOMP .)
    RSPAREN         reduce using rule 335 (operator_name -> NEQCOMP .)
    RCPAREN         reduce using rule 335 (operator_name -> NEQCOMP .)


state 288

    (336) operator_name -> LTECOMP .

    LSPAREN         reduce using rule 336 (operator_name -> LTECOMP .)
    LPAREN          reduce using rule 336 (operator_name -> LTECOMP .)
    DOT             reduce using rule 336 (operator_name -> LTECOMP .)
    ARROW           reduce using rule 336 (operator_name -> LTECOMP .)
    DPLUSOP         reduce using rule 336 (operator_name -> LTECOMP .)
    DMINUSOP        reduce using rule 336 (operator_name -> LTECOMP .)
    EQUAL           reduce using rule 336 (operator_name -> LTECOMP .)
    MULTEQOP        reduce using rule 336 (operator_name -> LTECOMP .)
    DIVEQOP         reduce using rule 336 (operator_name -> LTECOMP .)
    MODEQOP         reduce using rule 336 (operator_name -> LTECOMP .)
    PLUSEQOP        reduce using rule 336 (operator_name -> LTECOMP .)
    MINUSEQOP       reduce using rule 336 (operator_name -> LTECOMP .)
    LSHIFTEQOP      reduce using rule 336 (operator_name -> LTECOMP .)
    RSHIFTEQOP      reduce using rule 336 (operator_name -> LTECOMP .)
    BANDEQOP        reduce using rule 336 (operator_name -> LTECOMP .)
    B_E_OR          reduce using rule 336 (operator_name -> LTECOMP .)
    BOREQOP         reduce using rule 336 (operator_name -> LTECOMP .)
    DOTSTAR         reduce using rule 336 (operator_name -> LTECOMP .)
    ARROWSTAR       reduce using rule 336 (operator_name -> LTECOMP .)
    MULTOP          reduce using rule 336 (operator_name -> LTECOMP .)
    DIVOP           reduce using rule 336 (operator_name -> LTECOMP .)
    MODOP           reduce using rule 336 (operator_name -> LTECOMP .)
    PLUSOP          reduce using rule 336 (operator_name -> LTECOMP .)
    MINUSOP         reduce using rule 336 (operator_name -> LTECOMP .)
    LSHIFT          reduce using rule 336 (operator_name -> LTECOMP .)
    RSHIFT          reduce using rule 336 (operator_name -> LTECOMP .)
    LTCOMP          reduce using rule 336 (operator_name -> LTECOMP .)
    GTCOMP          reduce using rule 336 (operator_name -> LTECOMP .)
    LTECOMP         reduce using rule 336 (operator_name -> LTECOMP .)
    GTECOMP         reduce using rule 336 (operator_name -> LTECOMP .)
    EQCOMP          reduce using rule 336 (operator_name -> LTECOMP .)
    NEQCOMP         reduce using rule 336 (operator_name -> LTECOMP .)
    BANDOP          reduce using rule 336 (operator_name -> LTECOMP .)
    XOROP           reduce using rule 336 (operator_name -> LTECOMP .)
    OROP            reduce using rule 336 (operator_name -> LTECOMP .)
    ANDOP           reduce using rule 336 (operator_name -> LTECOMP .)
    QUESMARK        reduce using rule 336 (operator_name -> LTECOMP .)
    COMMA           reduce using rule 336 (operator_name -> LTECOMP .)
    SEMICOLON       reduce using rule 336 (operator_name -> LTECOMP .)
    $end            reduce using rule 336 (operator_name -> LTECOMP .)
    COLON           reduce using rule 336 (operator_name -> LTECOMP .)
    LCPAREN         reduce using rule 336 (operator_name -> LTECOMP .)
    RPAREN          reduce using rule 336 (operator_name -> LTECOMP .)
    RSPAREN         reduce using rule 336 (operator_name -> LTECOMP .)
    RCPAREN         reduce using rule 336 (operator_name -> LTECOMP .)


state 289

    (337) operator_name -> GTECOMP .

    LSPAREN         reduce using rule 337 (operator_name -> GTECOMP .)
    LPAREN          reduce using rule 337 (operator_name -> GTECOMP .)
    DOT             reduce using rule 337 (operator_name -> GTECOMP .)
    ARROW           reduce using rule 337 (operator_name -> GTECOMP .)
    DPLUSOP         reduce using rule 337 (operator_name -> GTECOMP .)
    DMINUSOP        reduce using rule 337 (operator_name -> GTECOMP .)
    EQUAL           reduce using rule 337 (operator_name -> GTECOMP .)
    MULTEQOP        reduce using rule 337 (operator_name -> GTECOMP .)
    DIVEQOP         reduce using rule 337 (operator_name -> GTECOMP .)
    MODEQOP         reduce using rule 337 (operator_name -> GTECOMP .)
    PLUSEQOP        reduce using rule 337 (operator_name -> GTECOMP .)
    MINUSEQOP       reduce using rule 337 (operator_name -> GTECOMP .)
    LSHIFTEQOP      reduce using rule 337 (operator_name -> GTECOMP .)
    RSHIFTEQOP      reduce using rule 337 (operator_name -> GTECOMP .)
    BANDEQOP        reduce using rule 337 (operator_name -> GTECOMP .)
    B_E_OR          reduce using rule 337 (operator_name -> GTECOMP .)
    BOREQOP         reduce using rule 337 (operator_name -> GTECOMP .)
    DOTSTAR         reduce using rule 337 (operator_name -> GTECOMP .)
    ARROWSTAR       reduce using rule 337 (operator_name -> GTECOMP .)
    MULTOP          reduce using rule 337 (operator_name -> GTECOMP .)
    DIVOP           reduce using rule 337 (operator_name -> GTECOMP .)
    MODOP           reduce using rule 337 (operator_name -> GTECOMP .)
    PLUSOP          reduce using rule 337 (operator_name -> GTECOMP .)
    MINUSOP         reduce using rule 337 (operator_name -> GTECOMP .)
    LSHIFT          reduce using rule 337 (operator_name -> GTECOMP .)
    RSHIFT          reduce using rule 337 (operator_name -> GTECOMP .)
    LTCOMP          reduce using rule 337 (operator_name -> GTECOMP .)
    GTCOMP          reduce using rule 337 (operator_name -> GTECOMP .)
    LTECOMP         reduce using rule 337 (operator_name -> GTECOMP .)
    GTECOMP         reduce using rule 337 (operator_name -> GTECOMP .)
    EQCOMP          reduce using rule 337 (operator_name -> GTECOMP .)
    NEQCOMP         reduce using rule 337 (operator_name -> GTECOMP .)
    BANDOP          reduce using rule 337 (operator_name -> GTECOMP .)
    XOROP           reduce using rule 337 (operator_name -> GTECOMP .)
    OROP            reduce using rule 337 (operator_name -> GTECOMP .)
    ANDOP           reduce using rule 337 (operator_name -> GTECOMP .)
    QUESMARK        reduce using rule 337 (operator_name -> GTECOMP .)
    COMMA           reduce using rule 337 (operator_name -> GTECOMP .)
    SEMICOLON       reduce using rule 337 (operator_name -> GTECOMP .)
    $end            reduce using rule 337 (operator_name -> GTECOMP .)
    COLON           reduce using rule 337 (operator_name -> GTECOMP .)
    LCPAREN         reduce using rule 337 (operator_name -> GTECOMP .)
    RPAREN          reduce using rule 337 (operator_name -> GTECOMP .)
    RSPAREN         reduce using rule 337 (operator_name -> GTECOMP .)
    RCPAREN         reduce using rule 337 (operator_name -> GTECOMP .)


state 290

    (338) operator_name -> ANDOP .

    LSPAREN         reduce using rule 338 (operator_name -> ANDOP .)
    LPAREN          reduce using rule 338 (operator_name -> ANDOP .)
    DOT             reduce using rule 338 (operator_name -> ANDOP .)
    ARROW           reduce using rule 338 (operator_name -> ANDOP .)
    DPLUSOP         reduce using rule 338 (operator_name -> ANDOP .)
    DMINUSOP        reduce using rule 338 (operator_name -> ANDOP .)
    EQUAL           reduce using rule 338 (operator_name -> ANDOP .)
    MULTEQOP        reduce using rule 338 (operator_name -> ANDOP .)
    DIVEQOP         reduce using rule 338 (operator_name -> ANDOP .)
    MODEQOP         reduce using rule 338 (operator_name -> ANDOP .)
    PLUSEQOP        reduce using rule 338 (operator_name -> ANDOP .)
    MINUSEQOP       reduce using rule 338 (operator_name -> ANDOP .)
    LSHIFTEQOP      reduce using rule 338 (operator_name -> ANDOP .)
    RSHIFTEQOP      reduce using rule 338 (operator_name -> ANDOP .)
    BANDEQOP        reduce using rule 338 (operator_name -> ANDOP .)
    B_E_OR          reduce using rule 338 (operator_name -> ANDOP .)
    BOREQOP         reduce using rule 338 (operator_name -> ANDOP .)
    DOTSTAR         reduce using rule 338 (operator_name -> ANDOP .)
    ARROWSTAR       reduce using rule 338 (operator_name -> ANDOP .)
    MULTOP          reduce using rule 338 (operator_name -> ANDOP .)
    DIVOP           reduce using rule 338 (operator_name -> ANDOP .)
    MODOP           reduce using rule 338 (operator_name -> ANDOP .)
    PLUSOP          reduce using rule 338 (operator_name -> ANDOP .)
    MINUSOP         reduce using rule 338 (operator_name -> ANDOP .)
    LSHIFT          reduce using rule 338 (operator_name -> ANDOP .)
    RSHIFT          reduce using rule 338 (operator_name -> ANDOP .)
    LTCOMP          reduce using rule 338 (operator_name -> ANDOP .)
    GTCOMP          reduce using rule 338 (operator_name -> ANDOP .)
    LTECOMP         reduce using rule 338 (operator_name -> ANDOP .)
    GTECOMP         reduce using rule 338 (operator_name -> ANDOP .)
    EQCOMP          reduce using rule 338 (operator_name -> ANDOP .)
    NEQCOMP         reduce using rule 338 (operator_name -> ANDOP .)
    BANDOP          reduce using rule 338 (operator_name -> ANDOP .)
    XOROP           reduce using rule 338 (operator_name -> ANDOP .)
    OROP            reduce using rule 338 (operator_name -> ANDOP .)
    ANDOP           reduce using rule 338 (operator_name -> ANDOP .)
    QUESMARK        reduce using rule 338 (operator_name -> ANDOP .)
    COMMA           reduce using rule 338 (operator_name -> ANDOP .)
    SEMICOLON       reduce using rule 338 (operator_name -> ANDOP .)
    $end            reduce using rule 338 (operator_name -> ANDOP .)
    COLON           reduce using rule 338 (operator_name -> ANDOP .)
    LCPAREN         reduce using rule 338 (operator_name -> ANDOP .)
    RPAREN          reduce using rule 338 (operator_name -> ANDOP .)
    RSPAREN         reduce using rule 338 (operator_name -> ANDOP .)
    RCPAREN         reduce using rule 338 (operator_name -> ANDOP .)


state 291

    (339) operator_name -> OROP .

    LSPAREN         reduce using rule 339 (operator_name -> OROP .)
    LPAREN          reduce using rule 339 (operator_name -> OROP .)
    DOT             reduce using rule 339 (operator_name -> OROP .)
    ARROW           reduce using rule 339 (operator_name -> OROP .)
    DPLUSOP         reduce using rule 339 (operator_name -> OROP .)
    DMINUSOP        reduce using rule 339 (operator_name -> OROP .)
    EQUAL           reduce using rule 339 (operator_name -> OROP .)
    MULTEQOP        reduce using rule 339 (operator_name -> OROP .)
    DIVEQOP         reduce using rule 339 (operator_name -> OROP .)
    MODEQOP         reduce using rule 339 (operator_name -> OROP .)
    PLUSEQOP        reduce using rule 339 (operator_name -> OROP .)
    MINUSEQOP       reduce using rule 339 (operator_name -> OROP .)
    LSHIFTEQOP      reduce using rule 339 (operator_name -> OROP .)
    RSHIFTEQOP      reduce using rule 339 (operator_name -> OROP .)
    BANDEQOP        reduce using rule 339 (operator_name -> OROP .)
    B_E_OR          reduce using rule 339 (operator_name -> OROP .)
    BOREQOP         reduce using rule 339 (operator_name -> OROP .)
    DOTSTAR         reduce using rule 339 (operator_name -> OROP .)
    ARROWSTAR       reduce using rule 339 (operator_name -> OROP .)
    MULTOP          reduce using rule 339 (operator_name -> OROP .)
    DIVOP           reduce using rule 339 (operator_name -> OROP .)
    MODOP           reduce using rule 339 (operator_name -> OROP .)
    PLUSOP          reduce using rule 339 (operator_name -> OROP .)
    MINUSOP         reduce using rule 339 (operator_name -> OROP .)
    LSHIFT          reduce using rule 339 (operator_name -> OROP .)
    RSHIFT          reduce using rule 339 (operator_name -> OROP .)
    LTCOMP          reduce using rule 339 (operator_name -> OROP .)
    GTCOMP          reduce using rule 339 (operator_name -> OROP .)
    LTECOMP         reduce using rule 339 (operator_name -> OROP .)
    GTECOMP         reduce using rule 339 (operator_name -> OROP .)
    EQCOMP          reduce using rule 339 (operator_name -> OROP .)
    NEQCOMP         reduce using rule 339 (operator_name -> OROP .)
    BANDOP          reduce using rule 339 (operator_name -> OROP .)
    XOROP           reduce using rule 339 (operator_name -> OROP .)
    OROP            reduce using rule 339 (operator_name -> OROP .)
    ANDOP           reduce using rule 339 (operator_name -> OROP .)
    QUESMARK        reduce using rule 339 (operator_name -> OROP .)
    COMMA           reduce using rule 339 (operator_name -> OROP .)
    SEMICOLON       reduce using rule 339 (operator_name -> OROP .)
    $end            reduce using rule 339 (operator_name -> OROP .)
    COLON           reduce using rule 339 (operator_name -> OROP .)
    LCPAREN         reduce using rule 339 (operator_name -> OROP .)
    RPAREN          reduce using rule 339 (operator_name -> OROP .)
    RSPAREN         reduce using rule 339 (operator_name -> OROP .)
    RCPAREN         reduce using rule 339 (operator_name -> OROP .)


state 292

    (340) operator_name -> DPLUSOP .

    LSPAREN         reduce using rule 340 (operator_name -> DPLUSOP .)
    LPAREN          reduce using rule 340 (operator_name -> DPLUSOP .)
    DOT             reduce using rule 340 (operator_name -> DPLUSOP .)
    ARROW           reduce using rule 340 (operator_name -> DPLUSOP .)
    DPLUSOP         reduce using rule 340 (operator_name -> DPLUSOP .)
    DMINUSOP        reduce using rule 340 (operator_name -> DPLUSOP .)
    EQUAL           reduce using rule 340 (operator_name -> DPLUSOP .)
    MULTEQOP        reduce using rule 340 (operator_name -> DPLUSOP .)
    DIVEQOP         reduce using rule 340 (operator_name -> DPLUSOP .)
    MODEQOP         reduce using rule 340 (operator_name -> DPLUSOP .)
    PLUSEQOP        reduce using rule 340 (operator_name -> DPLUSOP .)
    MINUSEQOP       reduce using rule 340 (operator_name -> DPLUSOP .)
    LSHIFTEQOP      reduce using rule 340 (operator_name -> DPLUSOP .)
    RSHIFTEQOP      reduce using rule 340 (operator_name -> DPLUSOP .)
    BANDEQOP        reduce using rule 340 (operator_name -> DPLUSOP .)
    B_E_OR          reduce using rule 340 (operator_name -> DPLUSOP .)
    BOREQOP         reduce using rule 340 (operator_name -> DPLUSOP .)
    DOTSTAR         reduce using rule 340 (operator_name -> DPLUSOP .)
    ARROWSTAR       reduce using rule 340 (operator_name -> DPLUSOP .)
    MULTOP          reduce using rule 340 (operator_name -> DPLUSOP .)
    DIVOP           reduce using rule 340 (operator_name -> DPLUSOP .)
    MODOP           reduce using rule 340 (operator_name -> DPLUSOP .)
    PLUSOP          reduce using rule 340 (operator_name -> DPLUSOP .)
    MINUSOP         reduce using rule 340 (operator_name -> DPLUSOP .)
    LSHIFT          reduce using rule 340 (operator_name -> DPLUSOP .)
    RSHIFT          reduce using rule 340 (operator_name -> DPLUSOP .)
    LTCOMP          reduce using rule 340 (operator_name -> DPLUSOP .)
    GTCOMP          reduce using rule 340 (operator_name -> DPLUSOP .)
    LTECOMP         reduce using rule 340 (operator_name -> DPLUSOP .)
    GTECOMP         reduce using rule 340 (operator_name -> DPLUSOP .)
    EQCOMP          reduce using rule 340 (operator_name -> DPLUSOP .)
    NEQCOMP         reduce using rule 340 (operator_name -> DPLUSOP .)
    BANDOP          reduce using rule 340 (operator_name -> DPLUSOP .)
    XOROP           reduce using rule 340 (operator_name -> DPLUSOP .)
    OROP            reduce using rule 340 (operator_name -> DPLUSOP .)
    ANDOP           reduce using rule 340 (operator_name -> DPLUSOP .)
    QUESMARK        reduce using rule 340 (operator_name -> DPLUSOP .)
    COMMA           reduce using rule 340 (operator_name -> DPLUSOP .)
    SEMICOLON       reduce using rule 340 (operator_name -> DPLUSOP .)
    $end            reduce using rule 340 (operator_name -> DPLUSOP .)
    COLON           reduce using rule 340 (operator_name -> DPLUSOP .)
    LCPAREN         reduce using rule 340 (operator_name -> DPLUSOP .)
    RPAREN          reduce using rule 340 (operator_name -> DPLUSOP .)
    RSPAREN         reduce using rule 340 (operator_name -> DPLUSOP .)
    RCPAREN         reduce using rule 340 (operator_name -> DPLUSOP .)


state 293

    (341) operator_name -> DMINUSOP .

    LSPAREN         reduce using rule 341 (operator_name -> DMINUSOP .)
    LPAREN          reduce using rule 341 (operator_name -> DMINUSOP .)
    DOT             reduce using rule 341 (operator_name -> DMINUSOP .)
    ARROW           reduce using rule 341 (operator_name -> DMINUSOP .)
    DPLUSOP         reduce using rule 341 (operator_name -> DMINUSOP .)
    DMINUSOP        reduce using rule 341 (operator_name -> DMINUSOP .)
    EQUAL           reduce using rule 341 (operator_name -> DMINUSOP .)
    MULTEQOP        reduce using rule 341 (operator_name -> DMINUSOP .)
    DIVEQOP         reduce using rule 341 (operator_name -> DMINUSOP .)
    MODEQOP         reduce using rule 341 (operator_name -> DMINUSOP .)
    PLUSEQOP        reduce using rule 341 (operator_name -> DMINUSOP .)
    MINUSEQOP       reduce using rule 341 (operator_name -> DMINUSOP .)
    LSHIFTEQOP      reduce using rule 341 (operator_name -> DMINUSOP .)
    RSHIFTEQOP      reduce using rule 341 (operator_name -> DMINUSOP .)
    BANDEQOP        reduce using rule 341 (operator_name -> DMINUSOP .)
    B_E_OR          reduce using rule 341 (operator_name -> DMINUSOP .)
    BOREQOP         reduce using rule 341 (operator_name -> DMINUSOP .)
    DOTSTAR         reduce using rule 341 (operator_name -> DMINUSOP .)
    ARROWSTAR       reduce using rule 341 (operator_name -> DMINUSOP .)
    MULTOP          reduce using rule 341 (operator_name -> DMINUSOP .)
    DIVOP           reduce using rule 341 (operator_name -> DMINUSOP .)
    MODOP           reduce using rule 341 (operator_name -> DMINUSOP .)
    PLUSOP          reduce using rule 341 (operator_name -> DMINUSOP .)
    MINUSOP         reduce using rule 341 (operator_name -> DMINUSOP .)
    LSHIFT          reduce using rule 341 (operator_name -> DMINUSOP .)
    RSHIFT          reduce using rule 341 (operator_name -> DMINUSOP .)
    LTCOMP          reduce using rule 341 (operator_name -> DMINUSOP .)
    GTCOMP          reduce using rule 341 (operator_name -> DMINUSOP .)
    LTECOMP         reduce using rule 341 (operator_name -> DMINUSOP .)
    GTECOMP         reduce using rule 341 (operator_name -> DMINUSOP .)
    EQCOMP          reduce using rule 341 (operator_name -> DMINUSOP .)
    NEQCOMP         reduce using rule 341 (operator_name -> DMINUSOP .)
    BANDOP          reduce using rule 341 (operator_name -> DMINUSOP .)
    XOROP           reduce using rule 341 (operator_name -> DMINUSOP .)
    OROP            reduce using rule 341 (operator_name -> DMINUSOP .)
    ANDOP           reduce using rule 341 (operator_name -> DMINUSOP .)
    QUESMARK        reduce using rule 341 (operator_name -> DMINUSOP .)
    COMMA           reduce using rule 341 (operator_name -> DMINUSOP .)
    SEMICOLON       reduce using rule 341 (operator_name -> DMINUSOP .)
    $end            reduce using rule 341 (operator_name -> DMINUSOP .)
    COLON           reduce using rule 341 (operator_name -> DMINUSOP .)
    LCPAREN         reduce using rule 341 (operator_name -> DMINUSOP .)
    RPAREN          reduce using rule 341 (operator_name -> DMINUSOP .)
    RSPAREN         reduce using rule 341 (operator_name -> DMINUSOP .)
    RCPAREN         reduce using rule 341 (operator_name -> DMINUSOP .)


state 294

    (342) operator_name -> COMMA .

    LSPAREN         reduce using rule 342 (operator_name -> COMMA .)
    LPAREN          reduce using rule 342 (operator_name -> COMMA .)
    DOT             reduce using rule 342 (operator_name -> COMMA .)
    ARROW           reduce using rule 342 (operator_name -> COMMA .)
    DPLUSOP         reduce using rule 342 (operator_name -> COMMA .)
    DMINUSOP        reduce using rule 342 (operator_name -> COMMA .)
    EQUAL           reduce using rule 342 (operator_name -> COMMA .)
    MULTEQOP        reduce using rule 342 (operator_name -> COMMA .)
    DIVEQOP         reduce using rule 342 (operator_name -> COMMA .)
    MODEQOP         reduce using rule 342 (operator_name -> COMMA .)
    PLUSEQOP        reduce using rule 342 (operator_name -> COMMA .)
    MINUSEQOP       reduce using rule 342 (operator_name -> COMMA .)
    LSHIFTEQOP      reduce using rule 342 (operator_name -> COMMA .)
    RSHIFTEQOP      reduce using rule 342 (operator_name -> COMMA .)
    BANDEQOP        reduce using rule 342 (operator_name -> COMMA .)
    B_E_OR          reduce using rule 342 (operator_name -> COMMA .)
    BOREQOP         reduce using rule 342 (operator_name -> COMMA .)
    DOTSTAR         reduce using rule 342 (operator_name -> COMMA .)
    ARROWSTAR       reduce using rule 342 (operator_name -> COMMA .)
    MULTOP          reduce using rule 342 (operator_name -> COMMA .)
    DIVOP           reduce using rule 342 (operator_name -> COMMA .)
    MODOP           reduce using rule 342 (operator_name -> COMMA .)
    PLUSOP          reduce using rule 342 (operator_name -> COMMA .)
    MINUSOP         reduce using rule 342 (operator_name -> COMMA .)
    LSHIFT          reduce using rule 342 (operator_name -> COMMA .)
    RSHIFT          reduce using rule 342 (operator_name -> COMMA .)
    LTCOMP          reduce using rule 342 (operator_name -> COMMA .)
    GTCOMP          reduce using rule 342 (operator_name -> COMMA .)
    LTECOMP         reduce using rule 342 (operator_name -> COMMA .)
    GTECOMP         reduce using rule 342 (operator_name -> COMMA .)
    EQCOMP          reduce using rule 342 (operator_name -> COMMA .)
    NEQCOMP         reduce using rule 342 (operator_name -> COMMA .)
    BANDOP          reduce using rule 342 (operator_name -> COMMA .)
    XOROP           reduce using rule 342 (operator_name -> COMMA .)
    OROP            reduce using rule 342 (operator_name -> COMMA .)
    ANDOP           reduce using rule 342 (operator_name -> COMMA .)
    QUESMARK        reduce using rule 342 (operator_name -> COMMA .)
    COMMA           reduce using rule 342 (operator_name -> COMMA .)
    SEMICOLON       reduce using rule 342 (operator_name -> COMMA .)
    $end            reduce using rule 342 (operator_name -> COMMA .)
    COLON           reduce using rule 342 (operator_name -> COMMA .)
    LCPAREN         reduce using rule 342 (operator_name -> COMMA .)
    RPAREN          reduce using rule 342 (operator_name -> COMMA .)
    RSPAREN         reduce using rule 342 (operator_name -> COMMA .)
    RCPAREN         reduce using rule 342 (operator_name -> COMMA .)


state 295

    (343) operator_name -> ARROWSTAR .

    LSPAREN         reduce using rule 343 (operator_name -> ARROWSTAR .)
    LPAREN          reduce using rule 343 (operator_name -> ARROWSTAR .)
    DOT             reduce using rule 343 (operator_name -> ARROWSTAR .)
    ARROW           reduce using rule 343 (operator_name -> ARROWSTAR .)
    DPLUSOP         reduce using rule 343 (operator_name -> ARROWSTAR .)
    DMINUSOP        reduce using rule 343 (operator_name -> ARROWSTAR .)
    EQUAL           reduce using rule 343 (operator_name -> ARROWSTAR .)
    MULTEQOP        reduce using rule 343 (operator_name -> ARROWSTAR .)
    DIVEQOP         reduce using rule 343 (operator_name -> ARROWSTAR .)
    MODEQOP         reduce using rule 343 (operator_name -> ARROWSTAR .)
    PLUSEQOP        reduce using rule 343 (operator_name -> ARROWSTAR .)
    MINUSEQOP       reduce using rule 343 (operator_name -> ARROWSTAR .)
    LSHIFTEQOP      reduce using rule 343 (operator_name -> ARROWSTAR .)
    RSHIFTEQOP      reduce using rule 343 (operator_name -> ARROWSTAR .)
    BANDEQOP        reduce using rule 343 (operator_name -> ARROWSTAR .)
    B_E_OR          reduce using rule 343 (operator_name -> ARROWSTAR .)
    BOREQOP         reduce using rule 343 (operator_name -> ARROWSTAR .)
    DOTSTAR         reduce using rule 343 (operator_name -> ARROWSTAR .)
    ARROWSTAR       reduce using rule 343 (operator_name -> ARROWSTAR .)
    MULTOP          reduce using rule 343 (operator_name -> ARROWSTAR .)
    DIVOP           reduce using rule 343 (operator_name -> ARROWSTAR .)
    MODOP           reduce using rule 343 (operator_name -> ARROWSTAR .)
    PLUSOP          reduce using rule 343 (operator_name -> ARROWSTAR .)
    MINUSOP         reduce using rule 343 (operator_name -> ARROWSTAR .)
    LSHIFT          reduce using rule 343 (operator_name -> ARROWSTAR .)
    RSHIFT          reduce using rule 343 (operator_name -> ARROWSTAR .)
    LTCOMP          reduce using rule 343 (operator_name -> ARROWSTAR .)
    GTCOMP          reduce using rule 343 (operator_name -> ARROWSTAR .)
    LTECOMP         reduce using rule 343 (operator_name -> ARROWSTAR .)
    GTECOMP         reduce using rule 343 (operator_name -> ARROWSTAR .)
    EQCOMP          reduce using rule 343 (operator_name -> ARROWSTAR .)
    NEQCOMP         reduce using rule 343 (operator_name -> ARROWSTAR .)
    BANDOP          reduce using rule 343 (operator_name -> ARROWSTAR .)
    XOROP           reduce using rule 343 (operator_name -> ARROWSTAR .)
    OROP            reduce using rule 343 (operator_name -> ARROWSTAR .)
    ANDOP           reduce using rule 343 (operator_name -> ARROWSTAR .)
    QUESMARK        reduce using rule 343 (operator_name -> ARROWSTAR .)
    COMMA           reduce using rule 343 (operator_name -> ARROWSTAR .)
    SEMICOLON       reduce using rule 343 (operator_name -> ARROWSTAR .)
    $end            reduce using rule 343 (operator_name -> ARROWSTAR .)
    COLON           reduce using rule 343 (operator_name -> ARROWSTAR .)
    LCPAREN         reduce using rule 343 (operator_name -> ARROWSTAR .)
    RPAREN          reduce using rule 343 (operator_name -> ARROWSTAR .)
    RSPAREN         reduce using rule 343 (operator_name -> ARROWSTAR .)
    RCPAREN         reduce using rule 343 (operator_name -> ARROWSTAR .)


state 296

    (344) operator_name -> ARROW .

    LSPAREN         reduce using rule 344 (operator_name -> ARROW .)
    LPAREN          reduce using rule 344 (operator_name -> ARROW .)
    DOT             reduce using rule 344 (operator_name -> ARROW .)
    ARROW           reduce using rule 344 (operator_name -> ARROW .)
    DPLUSOP         reduce using rule 344 (operator_name -> ARROW .)
    DMINUSOP        reduce using rule 344 (operator_name -> ARROW .)
    EQUAL           reduce using rule 344 (operator_name -> ARROW .)
    MULTEQOP        reduce using rule 344 (operator_name -> ARROW .)
    DIVEQOP         reduce using rule 344 (operator_name -> ARROW .)
    MODEQOP         reduce using rule 344 (operator_name -> ARROW .)
    PLUSEQOP        reduce using rule 344 (operator_name -> ARROW .)
    MINUSEQOP       reduce using rule 344 (operator_name -> ARROW .)
    LSHIFTEQOP      reduce using rule 344 (operator_name -> ARROW .)
    RSHIFTEQOP      reduce using rule 344 (operator_name -> ARROW .)
    BANDEQOP        reduce using rule 344 (operator_name -> ARROW .)
    B_E_OR          reduce using rule 344 (operator_name -> ARROW .)
    BOREQOP         reduce using rule 344 (operator_name -> ARROW .)
    DOTSTAR         reduce using rule 344 (operator_name -> ARROW .)
    ARROWSTAR       reduce using rule 344 (operator_name -> ARROW .)
    MULTOP          reduce using rule 344 (operator_name -> ARROW .)
    DIVOP           reduce using rule 344 (operator_name -> ARROW .)
    MODOP           reduce using rule 344 (operator_name -> ARROW .)
    PLUSOP          reduce using rule 344 (operator_name -> ARROW .)
    MINUSOP         reduce using rule 344 (operator_name -> ARROW .)
    LSHIFT          reduce using rule 344 (operator_name -> ARROW .)
    RSHIFT          reduce using rule 344 (operator_name -> ARROW .)
    LTCOMP          reduce using rule 344 (operator_name -> ARROW .)
    GTCOMP          reduce using rule 344 (operator_name -> ARROW .)
    LTECOMP         reduce using rule 344 (operator_name -> ARROW .)
    GTECOMP         reduce using rule 344 (operator_name -> ARROW .)
    EQCOMP          reduce using rule 344 (operator_name -> ARROW .)
    NEQCOMP         reduce using rule 344 (operator_name -> ARROW .)
    BANDOP          reduce using rule 344 (operator_name -> ARROW .)
    XOROP           reduce using rule 344 (operator_name -> ARROW .)
    OROP            reduce using rule 344 (operator_name -> ARROW .)
    ANDOP           reduce using rule 344 (operator_name -> ARROW .)
    QUESMARK        reduce using rule 344 (operator_name -> ARROW .)
    COMMA           reduce using rule 344 (operator_name -> ARROW .)
    SEMICOLON       reduce using rule 344 (operator_name -> ARROW .)
    $end            reduce using rule 344 (operator_name -> ARROW .)
    COLON           reduce using rule 344 (operator_name -> ARROW .)
    LCPAREN         reduce using rule 344 (operator_name -> ARROW .)
    RPAREN          reduce using rule 344 (operator_name -> ARROW .)
    RSPAREN         reduce using rule 344 (operator_name -> ARROW .)
    RCPAREN         reduce using rule 344 (operator_name -> ARROW .)


state 297

    (345) operator_name -> LPAREN . RPAREN

    RPAREN          shift and go to state 423


state 298

    (346) operator_name -> LSPAREN . RSPAREN

    RSPAREN         shift and go to state 424


state 299

    (299) conversion_type_name -> type_specifier_list . ptr_operator
    (300) conversion_type_name -> type_specifier_list .
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

  ! shift/reduce conflict for MULTOP resolved as shift
  ! shift/reduce conflict for BANDOP resolved as shift
    LSPAREN         reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    LPAREN          reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    DOT             reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    ARROW           reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    DPLUSOP         reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    DMINUSOP        reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    EQUAL           reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    MULTEQOP        reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    DIVEQOP         reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    MODEQOP         reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    PLUSEQOP        reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    MINUSEQOP       reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    LSHIFTEQOP      reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    RSHIFTEQOP      reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    BANDEQOP        reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    B_E_OR          reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    BOREQOP         reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    DOTSTAR         reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    ARROWSTAR       reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    DIVOP           reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    MODOP           reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    PLUSOP          reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    MINUSOP         reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    LSHIFT          reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    RSHIFT          reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    LTCOMP          reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    GTCOMP          reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    LTECOMP         reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    GTECOMP         reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    EQCOMP          reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    NEQCOMP         reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    XOROP           reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    OROP            reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    ANDOP           reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    QUESMARK        reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    COMMA           reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    SEMICOLON       reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    $end            reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    COLON           reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    LCPAREN         reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    RPAREN          reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    RSPAREN         reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    RCPAREN         reduce using rule 300 (conversion_type_name -> type_specifier_list .)
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    DOUBLECOLON     shift and go to state 210
    IDENTIFIER      shift and go to state 222

  ! MULTOP          [ reduce using rule 300 (conversion_type_name -> type_specifier_list .) ]
  ! BANDOP          [ reduce using rule 300 (conversion_type_name -> type_specifier_list .) ]

    ptr_operator                   shift and go to state 425
    complete_class_name            shift and go to state 254
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 300

    (261) class_specifier -> class_head LCPAREN . member_list RCPAREN
    (262) class_specifier -> class_head LCPAREN . RCPAREN
    (269) member_list -> . member_declaration member_list
    (270) member_list -> . member_declaration
    (271) member_list -> . access_specifier COLON member_list
    (272) member_list -> . access_specifier COLON
    (273) member_declaration -> . decl_specifiers member_declarator_list SEMICOLON
    (274) member_declaration -> . member_declarator_list SEMICOLON
    (275) member_declaration -> . decl_specifiers SEMICOLON
    (276) member_declaration -> . SEMICOLON
    (277) member_declaration -> . function_definition SEMICOLON
    (278) member_declaration -> . function_definition
    (279) member_declaration -> . qualified_name SEMICOLON
    (295) access_specifier -> . PRIVATE
    (296) access_specifier -> . PROTECTED
    (297) access_specifier -> . PUBLIC
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (280) member_declarator_list -> . member_declarator
    (281) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (282) member_declarator -> . declarator pure_specifier
    (283) member_declarator -> . declarator
    (284) member_declarator -> . IDENTIFIER COLON constant_expression
    (285) member_declarator -> . COLON constant_expression
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (5) class_name -> . IDENTIFIER
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name

    RCPAREN         shift and go to state 427
    SEMICOLON       shift and go to state 433
    PRIVATE         shift and go to state 436
    PROTECTED       shift and go to state 437
    PUBLIC          shift and go to state 438
    TYPEDEF         shift and go to state 87
    IDENTIFIER      shift and go to state 442
    COLON           shift and go to state 430
    LPAREN          shift and go to state 203
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    EXTERN          shift and go to state 204
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    class_head                     shift and go to state 106
    member_list                    shift and go to state 426
    member_declaration             shift and go to state 428
    access_specifier               shift and go to state 429
    decl_specifiers                shift and go to state 431
    member_declarator_list         shift and go to state 432
    function_definition            shift and go to state 434
    qualified_name                 shift and go to state 435
    decl_specifier                 shift and go to state 62
    member_declarator              shift and go to state 439
    declarator                     shift and go to state 440
    qualified_class_name           shift and go to state 441
    name                           shift and go to state 206
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    class_name                     shift and go to state 443
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    class_key                      shift and go to state 108
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91

state 301

    (182) enum_specifier -> ENUM IDENTIFIER . LCPAREN enum_list RCPAREN
    (184) enum_specifier -> ENUM IDENTIFIER . LCPAREN RCPAREN
    (6) enum_name -> IDENTIFIER .

  ! shift/reduce conflict for LCPAREN resolved as shift
    LCPAREN         shift and go to state 444
    SEMICOLON       reduce using rule 6 (enum_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 6 (enum_name -> IDENTIFIER .)
    LPAREN          reduce using rule 6 (enum_name -> IDENTIFIER .)
    AUTO            reduce using rule 6 (enum_name -> IDENTIFIER .)
    STATIC          reduce using rule 6 (enum_name -> IDENTIFIER .)
    EXTERN          reduce using rule 6 (enum_name -> IDENTIFIER .)
    CONST           reduce using rule 6 (enum_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 6 (enum_name -> IDENTIFIER .)
    INLINE          reduce using rule 6 (enum_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 6 (enum_name -> IDENTIFIER .)
    BNOP            reduce using rule 6 (enum_name -> IDENTIFIER .)
    MULTOP          reduce using rule 6 (enum_name -> IDENTIFIER .)
    BANDOP          reduce using rule 6 (enum_name -> IDENTIFIER .)
    CHAR            reduce using rule 6 (enum_name -> IDENTIFIER .)
    SHORT           reduce using rule 6 (enum_name -> IDENTIFIER .)
    INT             reduce using rule 6 (enum_name -> IDENTIFIER .)
    LONG            reduce using rule 6 (enum_name -> IDENTIFIER .)
    SIGNED          reduce using rule 6 (enum_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 6 (enum_name -> IDENTIFIER .)
    FLOAT           reduce using rule 6 (enum_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 6 (enum_name -> IDENTIFIER .)
    VOID            reduce using rule 6 (enum_name -> IDENTIFIER .)
    ENUM            reduce using rule 6 (enum_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 6 (enum_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 6 (enum_name -> IDENTIFIER .)
    CLASS           reduce using rule 6 (enum_name -> IDENTIFIER .)
    STRUCT          reduce using rule 6 (enum_name -> IDENTIFIER .)
    UNION           reduce using rule 6 (enum_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 6 (enum_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 6 (enum_name -> IDENTIFIER .)
    RPAREN          reduce using rule 6 (enum_name -> IDENTIFIER .)
    EQUAL           reduce using rule 6 (enum_name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 6 (enum_name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 6 (enum_name -> IDENTIFIER .)
    MODEQOP         reduce using rule 6 (enum_name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 6 (enum_name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 6 (enum_name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 6 (enum_name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 6 (enum_name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 6 (enum_name -> IDENTIFIER .)
    B_E_OR          reduce using rule 6 (enum_name -> IDENTIFIER .)
    BOREQOP         reduce using rule 6 (enum_name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 6 (enum_name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 6 (enum_name -> IDENTIFIER .)
    DIVOP           reduce using rule 6 (enum_name -> IDENTIFIER .)
    MODOP           reduce using rule 6 (enum_name -> IDENTIFIER .)
    PLUSOP          reduce using rule 6 (enum_name -> IDENTIFIER .)
    MINUSOP         reduce using rule 6 (enum_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 6 (enum_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 6 (enum_name -> IDENTIFIER .)
    LTCOMP          reduce using rule 6 (enum_name -> IDENTIFIER .)
    GTCOMP          reduce using rule 6 (enum_name -> IDENTIFIER .)
    LTECOMP         reduce using rule 6 (enum_name -> IDENTIFIER .)
    GTECOMP         reduce using rule 6 (enum_name -> IDENTIFIER .)
    EQCOMP          reduce using rule 6 (enum_name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 6 (enum_name -> IDENTIFIER .)
    XOROP           reduce using rule 6 (enum_name -> IDENTIFIER .)
    OROP            reduce using rule 6 (enum_name -> IDENTIFIER .)
    ANDOP           reduce using rule 6 (enum_name -> IDENTIFIER .)
    QUESMARK        reduce using rule 6 (enum_name -> IDENTIFIER .)
    COMMA           reduce using rule 6 (enum_name -> IDENTIFIER .)
    $end            reduce using rule 6 (enum_name -> IDENTIFIER .)
    COLON           reduce using rule 6 (enum_name -> IDENTIFIER .)
    RSPAREN         reduce using rule 6 (enum_name -> IDENTIFIER .)
    RCPAREN         reduce using rule 6 (enum_name -> IDENTIFIER .)
    DOT             reduce using rule 6 (enum_name -> IDENTIFIER .)
    ARROW           reduce using rule 6 (enum_name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 6 (enum_name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 6 (enum_name -> IDENTIFIER .)

  ! LCPAREN         [ reduce using rule 6 (enum_name -> IDENTIFIER .) ]


state 302

    (183) enum_specifier -> ENUM LCPAREN . enum_list RCPAREN
    (185) enum_specifier -> ENUM LCPAREN . RCPAREN
    (186) enum_list -> . enumerator
    (187) enum_list -> . enum_list COMMA enumerator
    (188) enumerator -> . IDENTIFIER
    (189) enumerator -> . IDENTIFIER EQUAL constant_expression

    RCPAREN         shift and go to state 446
    IDENTIFIER      shift and go to state 448

    enum_list                      shift and go to state 445
    enumerator                     shift and go to state 447

state 303

    (172) elaborated_type_specifier -> ENUM enum_name .

    SEMICOLON       reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    TYPEDEF         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    LPAREN          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    AUTO            reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    STATIC          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    EXTERN          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    CONST           reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    VOLATILE        reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    INLINE          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    VIRTUAL         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    BNOP            reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    MULTOP          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    BANDOP          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    CHAR            reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    SHORT           reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    INT             reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    LONG            reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    SIGNED          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    UNSIGNED        reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    FLOAT           reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    DOUBLE          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    VOID            reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    ENUM            reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    IDENTIFIER      reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    DOUBLECOLON     reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    CLASS           reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    STRUCT          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    UNION           reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    OPERATOR        reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    LSPAREN         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    RPAREN          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    EQUAL           reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    MULTEQOP        reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    DIVEQOP         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    MODEQOP         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    PLUSEQOP        reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    MINUSEQOP       reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    LSHIFTEQOP      reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    RSHIFTEQOP      reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    BANDEQOP        reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    B_E_OR          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    BOREQOP         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    DOTSTAR         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    ARROWSTAR       reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    DIVOP           reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    MODOP           reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    PLUSOP          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    MINUSOP         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    LSHIFT          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    RSHIFT          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    LTCOMP          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    GTCOMP          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    LTECOMP         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    GTECOMP         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    EQCOMP          reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    NEQCOMP         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    XOROP           reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    OROP            reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    ANDOP           reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    QUESMARK        reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    COMMA           reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    $end            reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    COLON           reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    RSPAREN         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    RCPAREN         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    DOT             reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    ARROW           reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    DPLUSOP         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    DMINUSOP        reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)
    LCPAREN         reduce using rule 172 (elaborated_type_specifier -> ENUM enum_name .)


state 304

    (170) elaborated_type_specifier -> class_key IDENTIFIER .
    (263) class_head -> class_key IDENTIFIER . base_spec
    (265) class_head -> class_key IDENTIFIER .
    (5) class_name -> IDENTIFIER .
    (287) base_spec -> . COLON base_list

  ! reduce/reduce conflict for LCPAREN resolved using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for COLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DIVEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MODEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUSEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUSEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSHIFTEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RSHIFTEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDEQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for B_E_OR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BOREQOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOTSTAR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ARROWSTAR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DIVOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MODOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUSOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUSOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LTCOMP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LTECOMP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for GTECOMP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQCOMP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for NEQCOMP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for XOROP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OROP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for QUESMARK resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RCPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ARROW resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DPLUSOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DMINUSOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
    SEMICOLON       reduce using rule 5 (class_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 5 (class_name -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    AUTO            reduce using rule 5 (class_name -> IDENTIFIER .)
    STATIC          reduce using rule 5 (class_name -> IDENTIFIER .)
    EXTERN          reduce using rule 5 (class_name -> IDENTIFIER .)
    CONST           reduce using rule 5 (class_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 5 (class_name -> IDENTIFIER .)
    INLINE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 5 (class_name -> IDENTIFIER .)
    BNOP            reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 5 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 5 (class_name -> IDENTIFIER .)
    INT             reduce using rule 5 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 5 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 5 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 5 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 5 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 5 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (class_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 5 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 5 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 5 (class_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 5 (class_name -> IDENTIFIER .)
    LCPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    EQUAL           reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 5 (class_name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    MODEQOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 5 (class_name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 5 (class_name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 5 (class_name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 5 (class_name -> IDENTIFIER .)
    B_E_OR          reduce using rule 5 (class_name -> IDENTIFIER .)
    BOREQOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 5 (class_name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 5 (class_name -> IDENTIFIER .)
    DIVOP           reduce using rule 5 (class_name -> IDENTIFIER .)
    MODOP           reduce using rule 5 (class_name -> IDENTIFIER .)
    PLUSOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    MINUSOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 5 (class_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 5 (class_name -> IDENTIFIER .)
    LTCOMP          reduce using rule 5 (class_name -> IDENTIFIER .)
    GTCOMP          reduce using rule 5 (class_name -> IDENTIFIER .)
    LTECOMP         reduce using rule 5 (class_name -> IDENTIFIER .)
    GTECOMP         reduce using rule 5 (class_name -> IDENTIFIER .)
    EQCOMP          reduce using rule 5 (class_name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 5 (class_name -> IDENTIFIER .)
    XOROP           reduce using rule 5 (class_name -> IDENTIFIER .)
    OROP            reduce using rule 5 (class_name -> IDENTIFIER .)
    ANDOP           reduce using rule 5 (class_name -> IDENTIFIER .)
    QUESMARK        reduce using rule 5 (class_name -> IDENTIFIER .)
    COMMA           reduce using rule 5 (class_name -> IDENTIFIER .)
    $end            reduce using rule 5 (class_name -> IDENTIFIER .)
    RSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    RCPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    DOT             reduce using rule 5 (class_name -> IDENTIFIER .)
    ARROW           reduce using rule 5 (class_name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 5 (class_name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 5 (class_name -> IDENTIFIER .)
    COLON           shift and go to state 307

  ! SEMICOLON       [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! CONST           [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! INT             [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! LONG            [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! VOID            [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! UNION           [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! MULTEQOP        [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! DIVEQOP         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! MODEQOP         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! PLUSEQOP        [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! MINUSEQOP       [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! LSHIFTEQOP      [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! RSHIFTEQOP      [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! BANDEQOP        [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! B_E_OR          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! BOREQOP         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! DOTSTAR         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! ARROWSTAR       [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! DIVOP           [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! MODOP           [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! PLUSOP          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! MINUSOP         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! LSHIFT          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! RSHIFT          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! LTCOMP          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! GTCOMP          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! LTECOMP         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! GTECOMP         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! EQCOMP          [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! NEQCOMP         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! XOROP           [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! OROP            [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! ANDOP           [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! QUESMARK        [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! $end            [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! COLON           [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! RSPAREN         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! RCPAREN         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! DOT             [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! ARROW           [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! DPLUSOP         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! DMINUSOP        [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 170 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 265 (class_head -> class_key IDENTIFIER .) ]
  ! COLON           [ reduce using rule 5 (class_name -> IDENTIFIER .) ]

    base_spec                      shift and go to state 449

state 305

    (171) elaborated_type_specifier -> class_key class_name .
    (267) class_head -> class_key class_name . base_spec
    (268) class_head -> class_key class_name .
    (287) base_spec -> . COLON base_list

  ! reduce/reduce conflict for LCPAREN resolved using rule 171 (elaborated_type_specifier -> class_key class_name .)
  ! shift/reduce conflict for COLON resolved as shift
    SEMICOLON       reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    TYPEDEF         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    LPAREN          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    AUTO            reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    STATIC          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    EXTERN          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    CONST           reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    VOLATILE        reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    INLINE          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    VIRTUAL         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    BNOP            reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    MULTOP          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    BANDOP          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    CHAR            reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    SHORT           reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    INT             reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    LONG            reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    SIGNED          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    UNSIGNED        reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    FLOAT           reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    DOUBLE          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    VOID            reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    ENUM            reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    IDENTIFIER      reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    DOUBLECOLON     reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    CLASS           reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    STRUCT          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    UNION           reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    OPERATOR        reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    LSPAREN         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    RPAREN          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    EQUAL           reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    MULTEQOP        reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    DIVEQOP         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    MODEQOP         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    PLUSEQOP        reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    MINUSEQOP       reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    LSHIFTEQOP      reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    RSHIFTEQOP      reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    BANDEQOP        reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    B_E_OR          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    BOREQOP         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    DOTSTAR         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    ARROWSTAR       reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    DIVOP           reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    MODOP           reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    PLUSOP          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    MINUSOP         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    LSHIFT          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    RSHIFT          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    LTCOMP          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    GTCOMP          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    LTECOMP         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    GTECOMP         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    EQCOMP          reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    NEQCOMP         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    XOROP           reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    OROP            reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    ANDOP           reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    QUESMARK        reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    COMMA           reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    $end            reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    RSPAREN         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    RCPAREN         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    DOT             reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    ARROW           reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    DPLUSOP         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    DMINUSOP        reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    LCPAREN         reduce using rule 171 (elaborated_type_specifier -> class_key class_name .)
    COLON           shift and go to state 307

  ! COLON           [ reduce using rule 171 (elaborated_type_specifier -> class_key class_name .) ]
  ! LCPAREN         [ reduce using rule 268 (class_head -> class_key class_name .) ]

    base_spec                      shift and go to state 450

state 306

    (264) class_head -> class_key base_spec .

    LCPAREN         reduce using rule 264 (class_head -> class_key base_spec .)


state 307

    (287) base_spec -> COLON . base_list
    (288) base_list -> . base_specifier
    (289) base_list -> . base_list COMMA base_specifier
    (290) base_specifier -> . complete_class_name
    (291) base_specifier -> . VIRTUAL access_specifier complete_class_name
    (292) base_specifier -> . VIRTUAL complete_class_name
    (293) base_specifier -> . access_specifier VIRTUAL complete_class_name
    (294) base_specifier -> . access_specifier complete_class_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (295) access_specifier -> . PRIVATE
    (296) access_specifier -> . PROTECTED
    (297) access_specifier -> . PUBLIC
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    VIRTUAL         shift and go to state 454
    DOUBLECOLON     shift and go to state 210
    PRIVATE         shift and go to state 436
    PROTECTED       shift and go to state 437
    PUBLIC          shift and go to state 438
    IDENTIFIER      shift and go to state 222

    base_list                      shift and go to state 451
    base_specifier                 shift and go to state 452
    complete_class_name            shift and go to state 453
    access_specifier               shift and go to state 455
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 308

    (36) equality_expression -> equality_expression EQCOMP . relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    relational_expression          shift and go to state 456
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 309

    (37) equality_expression -> equality_expression NEQCOMP . relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    relational_expression          shift and go to state 457
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 310

    (39) relational_expression -> relational_expression LTCOMP . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    shift_expression               shift and go to state 458
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 311

    (40) relational_expression -> relational_expression GTCOMP . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    shift_expression               shift and go to state 459
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 312

    (41) relational_expression -> relational_expression LTECOMP . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    shift_expression               shift and go to state 460
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 313

    (42) relational_expression -> relational_expression GTECOMP . shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    shift_expression               shift and go to state 461
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 314

    (44) shift_expression -> shift_expression LSHIFT . additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    additive_expression            shift and go to state 462
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 315

    (45) shift_expression -> shift_expression RSHIFT . additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    additive_expression            shift and go to state 463
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 316

    (47) additive_expression -> additive_expression PLUSOP . multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    multiplicative_expression      shift and go to state 464
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 317

    (48) additive_expression -> additive_expression MINUSOP . multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    multiplicative_expression      shift and go to state 465
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 318

    (50) multiplicative_expression -> multiplicative_expression MULTOP . pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    pm_expression                  shift and go to state 466
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 319

    (51) multiplicative_expression -> multiplicative_expression DIVOP . pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    pm_expression                  shift and go to state 467
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 320

    (52) multiplicative_expression -> multiplicative_expression MODOP . pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    pm_expression                  shift and go to state 468
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 321

    (54) pm_expression -> pm_expression DOTSTAR . cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    cast_expression                shift and go to state 469
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 322

    (55) pm_expression -> pm_expression ARROWSTAR . cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    cast_expression                shift and go to state 470
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 323

    (9) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 9 (expression -> expression COMMA assignment_expression .)
    SEMICOLON       reduce using rule 9 (expression -> expression COMMA assignment_expression .)
    $end            reduce using rule 9 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 9 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 9 (expression -> expression COMMA assignment_expression .)
    RSPAREN         reduce using rule 9 (expression -> expression COMMA assignment_expression .)
    GTCOMP          reduce using rule 9 (expression -> expression COMMA assignment_expression .)


state 324

    (11) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 11 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 11 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    $end            reduce using rule 11 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 11 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 11 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RSPAREN         reduce using rule 11 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    GTCOMP          reduce using rule 11 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RCPAREN         reduce using rule 11 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 325

    (355) labeled_statement -> IDENTIFIER COLON statement .

    $end            reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    RCPAREN         reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMICOLON       reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    LCPAREN         reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    TRY             reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    ASM             reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    TEMPLATE        reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    EXTERN          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    DPLUSOP         reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    DMINUSOP        reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPEDEF         reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    LPAREN          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    MULTOP          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    BANDOP          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUSOP          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUSOP         reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    NOTSYM          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    BNOP            reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLECOLON     reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    NEW             reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    DELETE          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    AUTO            reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    STATIC          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    VOLATILE        reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    INLINE          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    VIRTUAL         reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    THIS            reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    SHORT           reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    LONG            reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    SIGNED          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    UNSIGNED        reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    ENUM            reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    NUMBER          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    CLASS           reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    STRUCT          reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    UNION           reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    OPERATOR        reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 355 (labeled_statement -> IDENTIFIER COLON statement .)


state 326

    (356) labeled_statement -> CASE constant_expression COLON . statement
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 153
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    statement                      shift and go to state 471
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    expression                     shift and go to state 154
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 327

    (7) typedef_name -> IDENTIFIER .
    (5) class_name -> IDENTIFIER .
    (126) name -> IDENTIFIER .

  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 5 (class_name -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    CONST           reduce using rule 5 (class_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 5 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 5 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 5 (class_name -> IDENTIFIER .)
    INT             reduce using rule 5 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 5 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 5 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 5 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 5 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 5 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 5 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 5 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (class_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    DOT             reduce using rule 126 (name -> IDENTIFIER .)
    ARROW           reduce using rule 126 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 126 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 126 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 126 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 126 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 126 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 126 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 126 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 126 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    B_E_OR          reduce using rule 126 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 126 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 126 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 126 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 126 (name -> IDENTIFIER .)
    MODOP           reduce using rule 126 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 126 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 126 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 126 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 126 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 126 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 126 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 126 (name -> IDENTIFIER .)
    XOROP           reduce using rule 126 (name -> IDENTIFIER .)
    OROP            reduce using rule 126 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 126 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 126 (name -> IDENTIFIER .)
    COMMA           reduce using rule 126 (name -> IDENTIFIER .)

  ! LPAREN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 126 (name -> IDENTIFIER .) ]


state 328

    (72) allocation_expression -> DOUBLECOLON . NEW placement new_type_name new_initializer
    (74) allocation_expression -> DOUBLECOLON . NEW new_type_name new_initializer
    (76) allocation_expression -> DOUBLECOLON . NEW placement new_type_name
    (78) allocation_expression -> DOUBLECOLON . NEW new_type_name
    (80) allocation_expression -> DOUBLECOLON . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> DOUBLECOLON . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> DOUBLECOLON . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> DOUBLECOLON . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> DOUBLECOLON . DELETE cast_expression
    (105) deallocation_expression -> DOUBLECOLON . DELETE LSPAREN RSPAREN cast_expression
    (179) complete_class_name -> DOUBLECOLON . qualified_class_name
    (121) primary_expression -> DOUBLECOLON . IDENTIFIER
    (122) primary_expression -> DOUBLECOLON . operator_function_name
    (123) primary_expression -> DOUBLECOLON . qualified_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (308) operator_function_name -> . OPERATOR operator_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (5) class_name -> . IDENTIFIER

    NEW             shift and go to state 223
    DELETE          shift and go to state 224
    IDENTIFIER      shift and go to state 225
    OPERATOR        shift and go to state 229

    qualified_class_name           shift and go to state 228
    operator_function_name         shift and go to state 226
    qualified_name                 shift and go to state 227
    class_name                     shift and go to state 230

state 329

    (129) name -> BNOP class_name .

    LSPAREN         reduce using rule 129 (name -> BNOP class_name .)
    LPAREN          reduce using rule 129 (name -> BNOP class_name .)
    DOT             reduce using rule 129 (name -> BNOP class_name .)
    ARROW           reduce using rule 129 (name -> BNOP class_name .)
    DPLUSOP         reduce using rule 129 (name -> BNOP class_name .)
    DMINUSOP        reduce using rule 129 (name -> BNOP class_name .)
    DOTSTAR         reduce using rule 129 (name -> BNOP class_name .)
    ARROWSTAR       reduce using rule 129 (name -> BNOP class_name .)
    MULTOP          reduce using rule 129 (name -> BNOP class_name .)
    DIVOP           reduce using rule 129 (name -> BNOP class_name .)
    MODOP           reduce using rule 129 (name -> BNOP class_name .)
    PLUSOP          reduce using rule 129 (name -> BNOP class_name .)
    MINUSOP         reduce using rule 129 (name -> BNOP class_name .)
    LSHIFT          reduce using rule 129 (name -> BNOP class_name .)
    RSHIFT          reduce using rule 129 (name -> BNOP class_name .)
    LTCOMP          reduce using rule 129 (name -> BNOP class_name .)
    GTCOMP          reduce using rule 129 (name -> BNOP class_name .)
    LTECOMP         reduce using rule 129 (name -> BNOP class_name .)
    GTECOMP         reduce using rule 129 (name -> BNOP class_name .)
    EQCOMP          reduce using rule 129 (name -> BNOP class_name .)
    NEQCOMP         reduce using rule 129 (name -> BNOP class_name .)
    BANDOP          reduce using rule 129 (name -> BNOP class_name .)
    XOROP           reduce using rule 129 (name -> BNOP class_name .)
    OROP            reduce using rule 129 (name -> BNOP class_name .)
    ANDOP           reduce using rule 129 (name -> BNOP class_name .)
    QUESMARK        reduce using rule 129 (name -> BNOP class_name .)
    COLON           reduce using rule 129 (name -> BNOP class_name .)
    EQUAL           reduce using rule 129 (name -> BNOP class_name .)
    MULTEQOP        reduce using rule 129 (name -> BNOP class_name .)
    DIVEQOP         reduce using rule 129 (name -> BNOP class_name .)
    MODEQOP         reduce using rule 129 (name -> BNOP class_name .)
    PLUSEQOP        reduce using rule 129 (name -> BNOP class_name .)
    MINUSEQOP       reduce using rule 129 (name -> BNOP class_name .)
    LSHIFTEQOP      reduce using rule 129 (name -> BNOP class_name .)
    RSHIFTEQOP      reduce using rule 129 (name -> BNOP class_name .)
    BANDEQOP        reduce using rule 129 (name -> BNOP class_name .)
    B_E_OR          reduce using rule 129 (name -> BNOP class_name .)
    BOREQOP         reduce using rule 129 (name -> BNOP class_name .)
    SEMICOLON       reduce using rule 129 (name -> BNOP class_name .)
    COMMA           reduce using rule 129 (name -> BNOP class_name .)
    $end            reduce using rule 129 (name -> BNOP class_name .)
    RPAREN          reduce using rule 129 (name -> BNOP class_name .)
    RSPAREN         reduce using rule 129 (name -> BNOP class_name .)
    RCPAREN         reduce using rule 129 (name -> BNOP class_name .)
    LCPAREN         reduce using rule 129 (name -> BNOP class_name .)


state 330

    (357) labeled_statement -> DEFAULT COLON statement .

    $end            reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    RCPAREN         reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    LCPAREN         reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    TRY             reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    ASM             reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    TEMPLATE        reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    EXTERN          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    DPLUSOP         reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    DMINUSOP        reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    MULTOP          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    BANDOP          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    PLUSOP          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    MINUSOP         reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    NOTSYM          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    BNOP            reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLECOLON     reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    NEW             reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    DELETE          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    STATIC          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    VOLATILE        reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    INLINE          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    VIRTUAL         reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    THIS            reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    ENUM            reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    NUMBER          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    STRING          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    CLASS           reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    UNION           reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    OPERATOR        reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 357 (labeled_statement -> DEFAULT COLON statement .)


state 331

    (360) compound_statement -> LCPAREN statement_list RCPAREN .

    $end            reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RCPAREN         reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IDENTIFIER      reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CASE            reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DEFAULT         reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SEMICOLON       reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LCPAREN         reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IF              reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SWITCH          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    WHILE           reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DO              reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FOR             reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BREAK           reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CONTINUE        reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RETURN          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    GOTO            reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TRY             reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ASM             reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TEMPLATE        reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    EXTERN          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DPLUSOP         reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DMINUSOP        reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIZEOF          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TYPEDEF         reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LPAREN          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MULTOP          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BANDOP          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PLUSOP          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MINUSOP         reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NOTSYM          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BNOP            reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DOUBLECOLON     reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NEW             reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DELETE          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    AUTO            reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STATIC          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CONST           reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VOLATILE        reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    INLINE          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VIRTUAL         reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    THIS            reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CHAR            reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SHORT           reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    INT             reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LONG            reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIGNED          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    UNSIGNED        reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FLOAT           reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DOUBLE          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VOID            reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ENUM            reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NUMBER          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRING          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CLASS           reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRUCT          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    UNION           reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    OPERATOR        reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CATCH           reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ELSE            reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PRIVATE         reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PROTECTED       reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PUBLIC          reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)
    COLON           reduce using rule 360 (compound_statement -> LCPAREN statement_list RCPAREN .)


state 332

    (363) statement_list -> statement_list statement .

    RCPAREN         reduce using rule 363 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 363 (statement_list -> statement_list statement .)
    CASE            reduce using rule 363 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 363 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 363 (statement_list -> statement_list statement .)
    LCPAREN         reduce using rule 363 (statement_list -> statement_list statement .)
    IF              reduce using rule 363 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 363 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 363 (statement_list -> statement_list statement .)
    DO              reduce using rule 363 (statement_list -> statement_list statement .)
    FOR             reduce using rule 363 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 363 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 363 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 363 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 363 (statement_list -> statement_list statement .)
    TRY             reduce using rule 363 (statement_list -> statement_list statement .)
    ASM             reduce using rule 363 (statement_list -> statement_list statement .)
    TEMPLATE        reduce using rule 363 (statement_list -> statement_list statement .)
    EXTERN          reduce using rule 363 (statement_list -> statement_list statement .)
    DPLUSOP         reduce using rule 363 (statement_list -> statement_list statement .)
    DMINUSOP        reduce using rule 363 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 363 (statement_list -> statement_list statement .)
    TYPEDEF         reduce using rule 363 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 363 (statement_list -> statement_list statement .)
    MULTOP          reduce using rule 363 (statement_list -> statement_list statement .)
    BANDOP          reduce using rule 363 (statement_list -> statement_list statement .)
    PLUSOP          reduce using rule 363 (statement_list -> statement_list statement .)
    MINUSOP         reduce using rule 363 (statement_list -> statement_list statement .)
    NOTSYM          reduce using rule 363 (statement_list -> statement_list statement .)
    BNOP            reduce using rule 363 (statement_list -> statement_list statement .)
    DOUBLECOLON     reduce using rule 363 (statement_list -> statement_list statement .)
    NEW             reduce using rule 363 (statement_list -> statement_list statement .)
    DELETE          reduce using rule 363 (statement_list -> statement_list statement .)
    AUTO            reduce using rule 363 (statement_list -> statement_list statement .)
    STATIC          reduce using rule 363 (statement_list -> statement_list statement .)
    CONST           reduce using rule 363 (statement_list -> statement_list statement .)
    VOLATILE        reduce using rule 363 (statement_list -> statement_list statement .)
    INLINE          reduce using rule 363 (statement_list -> statement_list statement .)
    VIRTUAL         reduce using rule 363 (statement_list -> statement_list statement .)
    THIS            reduce using rule 363 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 363 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 363 (statement_list -> statement_list statement .)
    INT             reduce using rule 363 (statement_list -> statement_list statement .)
    LONG            reduce using rule 363 (statement_list -> statement_list statement .)
    SIGNED          reduce using rule 363 (statement_list -> statement_list statement .)
    UNSIGNED        reduce using rule 363 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 363 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 363 (statement_list -> statement_list statement .)
    VOID            reduce using rule 363 (statement_list -> statement_list statement .)
    ENUM            reduce using rule 363 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 363 (statement_list -> statement_list statement .)
    STRING          reduce using rule 363 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 363 (statement_list -> statement_list statement .)
    STRUCT          reduce using rule 363 (statement_list -> statement_list statement .)
    UNION           reduce using rule 363 (statement_list -> statement_list statement .)
    OPERATOR        reduce using rule 363 (statement_list -> statement_list statement .)


state 333

    (220) dname -> BNOP class_name .
    (129) name -> BNOP class_name .

  ! reduce/reduce conflict for LPAREN resolved using rule 129 (name -> BNOP class_name .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 129 (name -> BNOP class_name .)
  ! reduce/reduce conflict for COLON resolved using rule 129 (name -> BNOP class_name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 129 (name -> BNOP class_name .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 129 (name -> BNOP class_name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 129 (name -> BNOP class_name .)
  ! reduce/reduce conflict for COMMA resolved using rule 129 (name -> BNOP class_name .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 129 (name -> BNOP class_name .)
  ! reduce/reduce conflict for RPAREN resolved using rule 129 (name -> BNOP class_name .)
    LPAREN          reduce using rule 129 (name -> BNOP class_name .)
    LSPAREN         reduce using rule 129 (name -> BNOP class_name .)
    COLON           reduce using rule 129 (name -> BNOP class_name .)
    EQUAL           reduce using rule 129 (name -> BNOP class_name .)
    LCPAREN         reduce using rule 129 (name -> BNOP class_name .)
    SEMICOLON       reduce using rule 129 (name -> BNOP class_name .)
    COMMA           reduce using rule 129 (name -> BNOP class_name .)
    DOT             reduce using rule 129 (name -> BNOP class_name .)
    ARROW           reduce using rule 129 (name -> BNOP class_name .)
    DPLUSOP         reduce using rule 129 (name -> BNOP class_name .)
    DMINUSOP        reduce using rule 129 (name -> BNOP class_name .)
    MULTEQOP        reduce using rule 129 (name -> BNOP class_name .)
    DIVEQOP         reduce using rule 129 (name -> BNOP class_name .)
    MODEQOP         reduce using rule 129 (name -> BNOP class_name .)
    PLUSEQOP        reduce using rule 129 (name -> BNOP class_name .)
    MINUSEQOP       reduce using rule 129 (name -> BNOP class_name .)
    LSHIFTEQOP      reduce using rule 129 (name -> BNOP class_name .)
    RSHIFTEQOP      reduce using rule 129 (name -> BNOP class_name .)
    BANDEQOP        reduce using rule 129 (name -> BNOP class_name .)
    B_E_OR          reduce using rule 129 (name -> BNOP class_name .)
    BOREQOP         reduce using rule 129 (name -> BNOP class_name .)
    DOTSTAR         reduce using rule 129 (name -> BNOP class_name .)
    ARROWSTAR       reduce using rule 129 (name -> BNOP class_name .)
    MULTOP          reduce using rule 129 (name -> BNOP class_name .)
    DIVOP           reduce using rule 129 (name -> BNOP class_name .)
    MODOP           reduce using rule 129 (name -> BNOP class_name .)
    PLUSOP          reduce using rule 129 (name -> BNOP class_name .)
    MINUSOP         reduce using rule 129 (name -> BNOP class_name .)
    LSHIFT          reduce using rule 129 (name -> BNOP class_name .)
    RSHIFT          reduce using rule 129 (name -> BNOP class_name .)
    LTCOMP          reduce using rule 129 (name -> BNOP class_name .)
    GTCOMP          reduce using rule 129 (name -> BNOP class_name .)
    LTECOMP         reduce using rule 129 (name -> BNOP class_name .)
    GTECOMP         reduce using rule 129 (name -> BNOP class_name .)
    EQCOMP          reduce using rule 129 (name -> BNOP class_name .)
    NEQCOMP         reduce using rule 129 (name -> BNOP class_name .)
    BANDOP          reduce using rule 129 (name -> BNOP class_name .)
    XOROP           reduce using rule 129 (name -> BNOP class_name .)
    OROP            reduce using rule 129 (name -> BNOP class_name .)
    ANDOP           reduce using rule 129 (name -> BNOP class_name .)
    QUESMARK        reduce using rule 129 (name -> BNOP class_name .)
    RPAREN          reduce using rule 129 (name -> BNOP class_name .)

  ! LPAREN          [ reduce using rule 220 (dname -> BNOP class_name .) ]
  ! LSPAREN         [ reduce using rule 220 (dname -> BNOP class_name .) ]
  ! COLON           [ reduce using rule 220 (dname -> BNOP class_name .) ]
  ! EQUAL           [ reduce using rule 220 (dname -> BNOP class_name .) ]
  ! LCPAREN         [ reduce using rule 220 (dname -> BNOP class_name .) ]
  ! SEMICOLON       [ reduce using rule 220 (dname -> BNOP class_name .) ]
  ! COMMA           [ reduce using rule 220 (dname -> BNOP class_name .) ]
  ! RPAREN          [ reduce using rule 220 (dname -> BNOP class_name .) ]
  ! GTCOMP          [ reduce using rule 220 (dname -> BNOP class_name .) ]


state 334

    (364) selection_statement -> IF LPAREN expression . RPAREN statement
    (365) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (9) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 472
    COMMA           shift and go to state 118


state 335

    (124) primary_expression -> LPAREN expression RPAREN .

    LSPAREN         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    DPLUSOP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    DMINUSOP        reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    MULTEQOP        reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQOP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    MODEQOP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQOP        reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQOP       reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQOP      reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQOP      reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    BANDEQOP        reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    B_E_OR          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    BOREQOP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    DOTSTAR         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    ARROWSTAR       reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    MULTOP          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    DIVOP           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    MODOP           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    PLUSOP          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    MINUSOP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    LTCOMP          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    GTCOMP          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    LTECOMP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    GTECOMP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    EQCOMP          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    NEQCOMP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    BANDOP          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    XOROP           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    OROP            reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    ANDOP           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    QUESMARK        reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    RSPAREN         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    RCPAREN         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)


state 336

    (203) declarator -> declarator LPAREN . argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> declarator LPAREN . argument_declaration_list RPAREN
    (238) argument_declaration_list -> . arg_declaration_list
    (239) argument_declaration_list -> .
    (240) arg_declaration_list -> . argument_declaration
    (241) arg_declaration_list -> . arg_declaration_list COMMA argument_declaration
    (242) argument_declaration -> . decl_specifiers declarator
    (243) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (244) argument_declaration -> . decl_specifiers abstract_declarator
    (245) argument_declaration -> . decl_specifiers
    (246) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (247) argument_declaration -> . decl_specifiers EQUAL expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    RPAREN          reduce using rule 239 (argument_declaration_list -> .)
    TYPEDEF         shift and go to state 87
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    EXTERN          shift and go to state 204
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    IDENTIFIER      shift and go to state 235

    argument_declaration_list      shift and go to state 396
    arg_declaration_list           shift and go to state 398
    argument_declaration           shift and go to state 399
    decl_specifiers                shift and go to state 400
    decl_specifier                 shift and go to state 62
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 236
    typedef_name                   shift and go to state 148

state 337

    (207) declarator -> LPAREN declarator RPAREN .

    LPAREN          reduce using rule 207 (declarator -> LPAREN declarator RPAREN .)
    LSPAREN         reduce using rule 207 (declarator -> LPAREN declarator RPAREN .)
    COLON           reduce using rule 207 (declarator -> LPAREN declarator RPAREN .)
    EQUAL           reduce using rule 207 (declarator -> LPAREN declarator RPAREN .)
    LCPAREN         reduce using rule 207 (declarator -> LPAREN declarator RPAREN .)
    SEMICOLON       reduce using rule 207 (declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 207 (declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 207 (declarator -> LPAREN declarator RPAREN .)
    GTCOMP          reduce using rule 207 (declarator -> LPAREN declarator RPAREN .)


state 338

    (57) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    cast_expression                shift and go to state 473
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 339

    (223) type_name -> type_specifier_list abstract_declarator .
    (229) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (231) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (233) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (235) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RPAREN          reduce using rule 223 (type_name -> type_specifier_list abstract_declarator .)
    LPAREN          shift and go to state 474
    LSPAREN         shift and go to state 475


state 340

    (227) abstract_declarator -> ptr_operator . abstract_declarator
    (228) abstract_declarator -> ptr_operator .
    (227) abstract_declarator -> . ptr_operator abstract_declarator
    (228) abstract_declarator -> . ptr_operator
    (229) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (230) abstract_declarator -> . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (231) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (232) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (233) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (234) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (235) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (236) abstract_declarator -> . LSPAREN RSPAREN
    (237) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    RPAREN          reduce using rule 228 (abstract_declarator -> ptr_operator .)
    LPAREN          shift and go to state 341
    LSPAREN         shift and go to state 342
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    DOUBLECOLON     shift and go to state 210
    IDENTIFIER      shift and go to state 222

  ! LPAREN          [ reduce using rule 228 (abstract_declarator -> ptr_operator .) ]
  ! LSPAREN         [ reduce using rule 228 (abstract_declarator -> ptr_operator .) ]

    ptr_operator                   shift and go to state 340
    abstract_declarator            shift and go to state 476
    complete_class_name            shift and go to state 254
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 341

    (230) abstract_declarator -> LPAREN . argument_declaration_list RPAREN cv_qualifier_list
    (232) abstract_declarator -> LPAREN . argument_declaration_list RPAREN
    (237) abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (238) argument_declaration_list -> . arg_declaration_list
    (239) argument_declaration_list -> .
    (227) abstract_declarator -> . ptr_operator abstract_declarator
    (228) abstract_declarator -> . ptr_operator
    (229) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (230) abstract_declarator -> . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (231) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (232) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (233) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (234) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (235) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (236) abstract_declarator -> . LSPAREN RSPAREN
    (237) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (240) arg_declaration_list -> . argument_declaration
    (241) arg_declaration_list -> . arg_declaration_list COMMA argument_declaration
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (242) argument_declaration -> . decl_specifiers declarator
    (243) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (244) argument_declaration -> . decl_specifiers abstract_declarator
    (245) argument_declaration -> . decl_specifiers
    (246) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (247) argument_declaration -> . decl_specifiers EQUAL expression
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (5) class_name -> . IDENTIFIER
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (7) typedef_name -> . IDENTIFIER

    RPAREN          reduce using rule 239 (argument_declaration_list -> .)
    LPAREN          shift and go to state 341
    LSPAREN         shift and go to state 342
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    DOUBLECOLON     shift and go to state 210
    TYPEDEF         shift and go to state 87
    IDENTIFIER      shift and go to state 480
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    EXTERN          shift and go to state 204
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112

    argument_declaration_list      shift and go to state 477
    abstract_declarator            shift and go to state 478
    arg_declaration_list           shift and go to state 398
    ptr_operator                   shift and go to state 340
    argument_declaration           shift and go to state 399
    complete_class_name            shift and go to state 161
    decl_specifiers                shift and go to state 400
    qualified_class_name           shift and go to state 236
    decl_specifier                 shift and go to state 62
    class_name                     shift and go to state 479
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    typedef_name                   shift and go to state 148

state 342

    (234) abstract_declarator -> LSPAREN . constant_expression RSPAREN
    (236) abstract_declarator -> LSPAREN . RSPAREN
    (190) constant_expression -> . conditional_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    RSPAREN         shift and go to state 482
    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    constant_expression            shift and go to state 481
    conditional_expression         shift and go to state 134
    logical_OR_expression          shift and go to state 34
    logical_AND_expression         shift and go to state 49
    inclusive_OR_expression        shift and go to state 68
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 343

    (225) type_specifier_list -> type_specifier type_specifier_list .

    LPAREN          reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    LSPAREN         reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    MULTOP          reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    BANDOP          reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    DOUBLECOLON     reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    IDENTIFIER      reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    RPAREN          reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    EQUAL           reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    MULTEQOP        reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    DIVEQOP         reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    MODEQOP         reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    PLUSEQOP        reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    MINUSEQOP       reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    LSHIFTEQOP      reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    RSHIFTEQOP      reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    BANDEQOP        reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    B_E_OR          reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    BOREQOP         reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    DOTSTAR         reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    ARROWSTAR       reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    DIVOP           reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    MODOP           reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    PLUSOP          reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    MINUSOP         reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    LSHIFT          reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    RSHIFT          reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    LTCOMP          reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    GTCOMP          reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    LTECOMP         reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    GTECOMP         reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    EQCOMP          reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    NEQCOMP         reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    XOROP           reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    OROP            reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    ANDOP           reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    QUESMARK        reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    COMMA           reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    SEMICOLON       reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    $end            reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    COLON           reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    RSPAREN         reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    RCPAREN         reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    DOT             reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    ARROW           reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    DPLUSOP         reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    DMINUSOP        reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    LCPAREN         reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    BNOP            reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)
    OPERATOR        reduce using rule 225 (type_specifier_list -> type_specifier type_specifier_list .)


state 344

    (366) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (9) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 483
    COMMA           shift and go to state 118


state 345

    (367) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (9) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 484
    COMMA           shift and go to state 118


state 346

    (368) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 485


state 347

    (369) iteration_statement -> FOR LPAREN for_init_statement . expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON expression RPAREN statement
    (371) iteration_statement -> FOR LPAREN for_init_statement . expression SEMICOLON RPAREN statement
    (372) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON RPAREN statement
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 487
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 486
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 348

    (373) for_init_statement -> expression_statement .

    SEMICOLON       reduce using rule 373 (for_init_statement -> expression_statement .)
    DPLUSOP         reduce using rule 373 (for_init_statement -> expression_statement .)
    DMINUSOP        reduce using rule 373 (for_init_statement -> expression_statement .)
    SIZEOF          reduce using rule 373 (for_init_statement -> expression_statement .)
    MULTOP          reduce using rule 373 (for_init_statement -> expression_statement .)
    BANDOP          reduce using rule 373 (for_init_statement -> expression_statement .)
    PLUSOP          reduce using rule 373 (for_init_statement -> expression_statement .)
    MINUSOP         reduce using rule 373 (for_init_statement -> expression_statement .)
    NOTSYM          reduce using rule 373 (for_init_statement -> expression_statement .)
    BNOP            reduce using rule 373 (for_init_statement -> expression_statement .)
    DOUBLECOLON     reduce using rule 373 (for_init_statement -> expression_statement .)
    NEW             reduce using rule 373 (for_init_statement -> expression_statement .)
    DELETE          reduce using rule 373 (for_init_statement -> expression_statement .)
    THIS            reduce using rule 373 (for_init_statement -> expression_statement .)
    LPAREN          reduce using rule 373 (for_init_statement -> expression_statement .)
    CHAR            reduce using rule 373 (for_init_statement -> expression_statement .)
    SHORT           reduce using rule 373 (for_init_statement -> expression_statement .)
    INT             reduce using rule 373 (for_init_statement -> expression_statement .)
    LONG            reduce using rule 373 (for_init_statement -> expression_statement .)
    SIGNED          reduce using rule 373 (for_init_statement -> expression_statement .)
    UNSIGNED        reduce using rule 373 (for_init_statement -> expression_statement .)
    FLOAT           reduce using rule 373 (for_init_statement -> expression_statement .)
    DOUBLE          reduce using rule 373 (for_init_statement -> expression_statement .)
    VOID            reduce using rule 373 (for_init_statement -> expression_statement .)
    NUMBER          reduce using rule 373 (for_init_statement -> expression_statement .)
    STRING          reduce using rule 373 (for_init_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 373 (for_init_statement -> expression_statement .)
    OPERATOR        reduce using rule 373 (for_init_statement -> expression_statement .)


state 349

    (374) for_init_statement -> declaration_statement .

    SEMICOLON       reduce using rule 374 (for_init_statement -> declaration_statement .)
    DPLUSOP         reduce using rule 374 (for_init_statement -> declaration_statement .)
    DMINUSOP        reduce using rule 374 (for_init_statement -> declaration_statement .)
    SIZEOF          reduce using rule 374 (for_init_statement -> declaration_statement .)
    MULTOP          reduce using rule 374 (for_init_statement -> declaration_statement .)
    BANDOP          reduce using rule 374 (for_init_statement -> declaration_statement .)
    PLUSOP          reduce using rule 374 (for_init_statement -> declaration_statement .)
    MINUSOP         reduce using rule 374 (for_init_statement -> declaration_statement .)
    NOTSYM          reduce using rule 374 (for_init_statement -> declaration_statement .)
    BNOP            reduce using rule 374 (for_init_statement -> declaration_statement .)
    DOUBLECOLON     reduce using rule 374 (for_init_statement -> declaration_statement .)
    NEW             reduce using rule 374 (for_init_statement -> declaration_statement .)
    DELETE          reduce using rule 374 (for_init_statement -> declaration_statement .)
    THIS            reduce using rule 374 (for_init_statement -> declaration_statement .)
    LPAREN          reduce using rule 374 (for_init_statement -> declaration_statement .)
    CHAR            reduce using rule 374 (for_init_statement -> declaration_statement .)
    SHORT           reduce using rule 374 (for_init_statement -> declaration_statement .)
    INT             reduce using rule 374 (for_init_statement -> declaration_statement .)
    LONG            reduce using rule 374 (for_init_statement -> declaration_statement .)
    SIGNED          reduce using rule 374 (for_init_statement -> declaration_statement .)
    UNSIGNED        reduce using rule 374 (for_init_statement -> declaration_statement .)
    FLOAT           reduce using rule 374 (for_init_statement -> declaration_statement .)
    DOUBLE          reduce using rule 374 (for_init_statement -> declaration_statement .)
    VOID            reduce using rule 374 (for_init_statement -> declaration_statement .)
    NUMBER          reduce using rule 374 (for_init_statement -> declaration_statement .)
    STRING          reduce using rule 374 (for_init_statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 374 (for_init_statement -> declaration_statement .)
    OPERATOR        reduce using rule 374 (for_init_statement -> declaration_statement .)


state 350

    (377) jump_statement -> RETURN expression SEMICOLON .

    $end            reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    RCPAREN         reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    LCPAREN         reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    TRY             reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    ASM             reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    TEMPLATE        reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    EXTERN          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    DPLUSOP         reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    DMINUSOP        reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    TYPEDEF         reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    MULTOP          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    BANDOP          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    PLUSOP          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    MINUSOP         reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    NOTSYM          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    BNOP            reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLECOLON     reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    NEW             reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    DELETE          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    AUTO            reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    STATIC          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    VOLATILE        reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    INLINE          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    VIRTUAL         reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    THIS            reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    ENUM            reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    STRUCT          reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    UNION           reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    OPERATOR        reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 377 (jump_statement -> RETURN expression SEMICOLON .)


state 351

    (379) jump_statement -> GOTO IDENTIFIER SEMICOLON .

    $end            reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RCPAREN         reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LCPAREN         reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ASM             reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TEMPLATE        reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DPLUSOP         reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DMINUSOP        reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MULTOP          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BANDOP          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUSOP          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUSOP         reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NOTSYM          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BNOP            reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLECOLON     reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOLATILE        reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INLINE          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VIRTUAL         reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INT             reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    OPERATOR        reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 379 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)


state 352

    (393) try_block -> TRY compound_statement handler_list .

    $end            reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    RCPAREN         reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    IDENTIFIER      reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    CASE            reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    DEFAULT         reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    SEMICOLON       reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    LCPAREN         reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    IF              reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    SWITCH          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    WHILE           reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    DO              reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    FOR             reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    BREAK           reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    CONTINUE        reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    RETURN          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    GOTO            reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    TRY             reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    ASM             reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    TEMPLATE        reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    EXTERN          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    DPLUSOP         reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    DMINUSOP        reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    SIZEOF          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    TYPEDEF         reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    LPAREN          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    MULTOP          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    BANDOP          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    PLUSOP          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    MINUSOP         reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    NOTSYM          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    BNOP            reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    DOUBLECOLON     reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    NEW             reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    DELETE          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    AUTO            reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    STATIC          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    CONST           reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    VOLATILE        reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    INLINE          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    VIRTUAL         reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    THIS            reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    CHAR            reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    SHORT           reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    INT             reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    LONG            reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    SIGNED          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    UNSIGNED        reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    FLOAT           reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    DOUBLE          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    VOID            reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    ENUM            reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    NUMBER          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    STRING          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    CLASS           reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    STRUCT          reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    UNION           reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    OPERATOR        reduce using rule 393 (try_block -> TRY compound_statement handler_list .)
    ELSE            reduce using rule 393 (try_block -> TRY compound_statement handler_list .)


state 353

    (394) handler_list -> handler . handler_list
    (395) handler_list -> handler .
    (394) handler_list -> . handler handler_list
    (395) handler_list -> . handler
    (396) handler -> . CATCH LPAREN exception_declaration RPAREN compound_statement

    $end            reduce using rule 395 (handler_list -> handler .)
    RCPAREN         reduce using rule 395 (handler_list -> handler .)
    IDENTIFIER      reduce using rule 395 (handler_list -> handler .)
    CASE            reduce using rule 395 (handler_list -> handler .)
    DEFAULT         reduce using rule 395 (handler_list -> handler .)
    SEMICOLON       reduce using rule 395 (handler_list -> handler .)
    LCPAREN         reduce using rule 395 (handler_list -> handler .)
    IF              reduce using rule 395 (handler_list -> handler .)
    SWITCH          reduce using rule 395 (handler_list -> handler .)
    WHILE           reduce using rule 395 (handler_list -> handler .)
    DO              reduce using rule 395 (handler_list -> handler .)
    FOR             reduce using rule 395 (handler_list -> handler .)
    BREAK           reduce using rule 395 (handler_list -> handler .)
    CONTINUE        reduce using rule 395 (handler_list -> handler .)
    RETURN          reduce using rule 395 (handler_list -> handler .)
    GOTO            reduce using rule 395 (handler_list -> handler .)
    TRY             reduce using rule 395 (handler_list -> handler .)
    ASM             reduce using rule 395 (handler_list -> handler .)
    TEMPLATE        reduce using rule 395 (handler_list -> handler .)
    EXTERN          reduce using rule 395 (handler_list -> handler .)
    DPLUSOP         reduce using rule 395 (handler_list -> handler .)
    DMINUSOP        reduce using rule 395 (handler_list -> handler .)
    SIZEOF          reduce using rule 395 (handler_list -> handler .)
    TYPEDEF         reduce using rule 395 (handler_list -> handler .)
    LPAREN          reduce using rule 395 (handler_list -> handler .)
    MULTOP          reduce using rule 395 (handler_list -> handler .)
    BANDOP          reduce using rule 395 (handler_list -> handler .)
    PLUSOP          reduce using rule 395 (handler_list -> handler .)
    MINUSOP         reduce using rule 395 (handler_list -> handler .)
    NOTSYM          reduce using rule 395 (handler_list -> handler .)
    BNOP            reduce using rule 395 (handler_list -> handler .)
    DOUBLECOLON     reduce using rule 395 (handler_list -> handler .)
    NEW             reduce using rule 395 (handler_list -> handler .)
    DELETE          reduce using rule 395 (handler_list -> handler .)
    AUTO            reduce using rule 395 (handler_list -> handler .)
    STATIC          reduce using rule 395 (handler_list -> handler .)
    CONST           reduce using rule 395 (handler_list -> handler .)
    VOLATILE        reduce using rule 395 (handler_list -> handler .)
    INLINE          reduce using rule 395 (handler_list -> handler .)
    VIRTUAL         reduce using rule 395 (handler_list -> handler .)
    THIS            reduce using rule 395 (handler_list -> handler .)
    CHAR            reduce using rule 395 (handler_list -> handler .)
    SHORT           reduce using rule 395 (handler_list -> handler .)
    INT             reduce using rule 395 (handler_list -> handler .)
    LONG            reduce using rule 395 (handler_list -> handler .)
    SIGNED          reduce using rule 395 (handler_list -> handler .)
    UNSIGNED        reduce using rule 395 (handler_list -> handler .)
    FLOAT           reduce using rule 395 (handler_list -> handler .)
    DOUBLE          reduce using rule 395 (handler_list -> handler .)
    VOID            reduce using rule 395 (handler_list -> handler .)
    ENUM            reduce using rule 395 (handler_list -> handler .)
    NUMBER          reduce using rule 395 (handler_list -> handler .)
    STRING          reduce using rule 395 (handler_list -> handler .)
    CLASS           reduce using rule 395 (handler_list -> handler .)
    STRUCT          reduce using rule 395 (handler_list -> handler .)
    UNION           reduce using rule 395 (handler_list -> handler .)
    OPERATOR        reduce using rule 395 (handler_list -> handler .)
    ELSE            reduce using rule 395 (handler_list -> handler .)
    CATCH           shift and go to state 354

    handler                        shift and go to state 353
    handler_list                   shift and go to state 488

state 354

    (396) handler -> CATCH . LPAREN exception_declaration RPAREN compound_statement

    LPAREN          shift and go to state 489


state 355

    (24) conditional_expression -> logical_OR_expression QUESMARK expression . COLON conditional_expression
    (9) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 490
    COMMA           shift and go to state 118


state 356

    (26) logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .
    (28) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 26 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    OROP            reduce using rule 26 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COMMA           reduce using rule 26 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    SEMICOLON       reduce using rule 26 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    $end            reduce using rule 26 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COLON           reduce using rule 26 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RPAREN          reduce using rule 26 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RSPAREN         reduce using rule 26 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    GTCOMP          reduce using rule 26 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RCPAREN         reduce using rule 26 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    ANDOP           shift and go to state 214


state 357

    (108) postfix_expression -> postfix_expression LSPAREN expression . RSPAREN
    (9) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 491
    COMMA           shift and go to state 118


state 358

    (109) postfix_expression -> postfix_expression LPAREN expression_list . RPAREN
    (118) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 492
    COMMA           shift and go to state 493


state 359

    (110) postfix_expression -> postfix_expression LPAREN RPAREN .

    LSPAREN         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DPLUSOP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DMINUSOP        reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUAL           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTEQOP        reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQOP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQOP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDEQOP        reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    B_E_OR          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BOREQOP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOTSTAR         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTOP          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVOP           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODOP           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSOP          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSOP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTCOMP          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTCOMP          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTECOMP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTECOMP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQCOMP          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NEQCOMP         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDOP          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOROP           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OROP            reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDOP           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    QUESMARK        reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    $end            reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSPAREN         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RCPAREN         reduce using rule 110 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 360

    (117) expression_list -> assignment_expression .

    RPAREN          reduce using rule 117 (expression_list -> assignment_expression .)
    COMMA           reduce using rule 117 (expression_list -> assignment_expression .)


state 361

    (113) postfix_expression -> postfix_expression DOT name .

    LSPAREN         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    LPAREN          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    DOT             reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    ARROW           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    DPLUSOP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    DMINUSOP        reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    EQUAL           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    MULTEQOP        reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    DIVEQOP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    MODEQOP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    PLUSEQOP        reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    MINUSEQOP       reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    LSHIFTEQOP      reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    RSHIFTEQOP      reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    BANDEQOP        reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    B_E_OR          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    BOREQOP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    DOTSTAR         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    ARROWSTAR       reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    MULTOP          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    DIVOP           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    MODOP           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    PLUSOP          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    MINUSOP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    LSHIFT          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    RSHIFT          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    LTCOMP          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    GTCOMP          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    LTECOMP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    GTECOMP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    EQCOMP          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    NEQCOMP         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    BANDOP          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    XOROP           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    OROP            reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    ANDOP           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    QUESMARK        reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    COMMA           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    SEMICOLON       reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    $end            reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    COLON           reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    RPAREN          reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    RSPAREN         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)
    RCPAREN         reduce using rule 113 (postfix_expression -> postfix_expression DOT name .)


state 362

    (126) name -> IDENTIFIER .
    (5) class_name -> IDENTIFIER .

    LSPAREN         reduce using rule 126 (name -> IDENTIFIER .)
    LPAREN          reduce using rule 126 (name -> IDENTIFIER .)
    DOT             reduce using rule 126 (name -> IDENTIFIER .)
    ARROW           reduce using rule 126 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 126 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 126 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 126 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 126 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 126 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 126 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 126 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 126 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 126 (name -> IDENTIFIER .)
    B_E_OR          reduce using rule 126 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 126 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 126 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 126 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 126 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 126 (name -> IDENTIFIER .)
    MODOP           reduce using rule 126 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 126 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 126 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 126 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 126 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 126 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 126 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 126 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 126 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 126 (name -> IDENTIFIER .)
    XOROP           reduce using rule 126 (name -> IDENTIFIER .)
    OROP            reduce using rule 126 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 126 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 126 (name -> IDENTIFIER .)
    COMMA           reduce using rule 126 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 126 (name -> IDENTIFIER .)
    $end            reduce using rule 126 (name -> IDENTIFIER .)
    COLON           reduce using rule 126 (name -> IDENTIFIER .)
    RPAREN          reduce using rule 126 (name -> IDENTIFIER .)
    RSPAREN         reduce using rule 126 (name -> IDENTIFIER .)
    RCPAREN         reduce using rule 126 (name -> IDENTIFIER .)
    LCPAREN         reduce using rule 126 (name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 5 (class_name -> IDENTIFIER .)


state 363

    (129) name -> BNOP . class_name
    (5) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 222

    class_name                     shift and go to state 329

state 364

    (131) qualified_name -> qualified_class_name . DOUBLECOLON name

    DOUBLECOLON     shift and go to state 257


state 365

    (114) postfix_expression -> postfix_expression ARROW name .

    LSPAREN         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    LPAREN          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    DOT             reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    ARROW           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    DPLUSOP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    DMINUSOP        reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    EQUAL           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    MULTEQOP        reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    DIVEQOP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    MODEQOP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    PLUSEQOP        reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    MINUSEQOP       reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFTEQOP      reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFTEQOP      reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    BANDEQOP        reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    B_E_OR          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    BOREQOP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    DOTSTAR         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    ARROWSTAR       reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    MULTOP          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    DIVOP           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    MODOP           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    PLUSOP          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    MINUSOP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFT          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFT          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    LTCOMP          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    GTCOMP          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    LTECOMP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    GTECOMP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    EQCOMP          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    NEQCOMP         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    BANDOP          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    XOROP           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    OROP            reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    ANDOP           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    QUESMARK        reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    COMMA           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    SEMICOLON       reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    $end            reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    COLON           reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    RPAREN          reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    RSPAREN         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)
    RCPAREN         reduce using rule 114 (postfix_expression -> postfix_expression ARROW name .)


state 366

    (63) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 494


state 367

    (135) declaration -> decl_specifiers declarator_list SEMICOLON .

    $end            reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CASE            reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    LCPAREN         reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    IF              reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SWITCH          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    WHILE           reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DO              reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    FOR             reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    BREAK           reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    RETURN          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    GOTO            reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    TRY             reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    ASM             reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    EXTERN          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DPLUSOP         reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DMINUSOP        reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    LPAREN          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    MULTOP          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    BANDOP          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    PLUSOP          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    MINUSOP         reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    NOTSYM          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    BNOP            reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DOUBLECOLON     reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    NEW             reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DELETE          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    AUTO            reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    STATIC          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CONST           reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    INLINE          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    THIS            reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CHAR            reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SHORT           reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    INT             reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    LONG            reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SIGNED          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    FLOAT           reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    VOID            reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    ENUM            reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    NUMBER          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    STRING          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CLASS           reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    STRUCT          reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    UNION           reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    ELSE            reduce using rule 135 (declaration -> decl_specifiers declarator_list SEMICOLON .)


state 368

    (248) function_definition -> decl_specifiers declarator ctor_initializer . fct_body
    (252) fct_body -> . compound_statement
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 21

    fct_body                       shift and go to state 495
    compound_statement             shift and go to state 246

state 369

    (250) function_definition -> decl_specifiers declarator fct_body .

    $end            reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    RCPAREN         reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    IDENTIFIER      reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    CASE            reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    DEFAULT         reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    SEMICOLON       reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    LCPAREN         reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    IF              reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    SWITCH          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    WHILE           reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    DO              reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    FOR             reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    BREAK           reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    CONTINUE        reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    RETURN          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    GOTO            reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    TRY             reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    ASM             reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    TEMPLATE        reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    EXTERN          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    DPLUSOP         reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    DMINUSOP        reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    SIZEOF          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    TYPEDEF         reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    LPAREN          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    MULTOP          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    BANDOP          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    PLUSOP          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    MINUSOP         reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    NOTSYM          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    BNOP            reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    DOUBLECOLON     reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    NEW             reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    DELETE          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    AUTO            reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    STATIC          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    CONST           reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    VOLATILE        reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    INLINE          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    VIRTUAL         reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    THIS            reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    CHAR            reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    SHORT           reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    INT             reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    LONG            reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    SIGNED          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    UNSIGNED        reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    FLOAT           reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    DOUBLE          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    VOID            reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    ENUM            reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    NUMBER          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    STRING          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    CLASS           reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    STRUCT          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    UNION           reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    OPERATOR        reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    ELSE            reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    PRIVATE         reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    PROTECTED       reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    PUBLIC          reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)
    COLON           reduce using rule 250 (function_definition -> decl_specifiers declarator fct_body .)


state 370

    (179) complete_class_name -> DOUBLECOLON qualified_class_name .

    DOUBLECOLON     reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    SEMICOLON       reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    TYPEDEF         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LPAREN          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    AUTO            reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    STATIC          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    EXTERN          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    CONST           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    VOLATILE        reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    INLINE          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    VIRTUAL         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    BNOP            reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    MULTOP          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    BANDOP          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    CHAR            reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    SHORT           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    INT             reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LONG            reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    SIGNED          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    UNSIGNED        reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    FLOAT           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DOUBLE          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    VOID            reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    ENUM            reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    IDENTIFIER      reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    CLASS           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    STRUCT          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    UNION           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    OPERATOR        reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LSPAREN         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    EQUAL           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    MULTEQOP        reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DIVEQOP         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    MODEQOP         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    PLUSEQOP        reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    MINUSEQOP       reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LSHIFTEQOP      reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    RSHIFTEQOP      reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    BANDEQOP        reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    B_E_OR          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    BOREQOP         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DOTSTAR         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    ARROWSTAR       reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DIVOP           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    MODOP           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    PLUSOP          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    MINUSOP         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LSHIFT          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    RSHIFT          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LTCOMP          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    GTCOMP          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LTECOMP         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    GTECOMP         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    EQCOMP          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    NEQCOMP         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    XOROP           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    OROP            reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    ANDOP           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    QUESMARK        reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    COMMA           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    $end            reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    COLON           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    RPAREN          reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    RSPAREN         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    RCPAREN         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DOT             reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    ARROW           reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DPLUSOP         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DMINUSOP        reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LCPAREN         reduce using rule 179 (complete_class_name -> DOUBLECOLON qualified_class_name .)


state 371

    (198) declarator_list -> declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 198 (declarator_list -> declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 198 (declarator_list -> declarator_list COMMA init_declarator .)


state 372

    (199) init_declarator -> declarator . initializer
    (200) init_declarator -> declarator .
    (203) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (205) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (206) declarator -> declarator . LSPAREN RSPAREN
    (253) initializer -> . EQUAL assignment_expression
    (254) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (255) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (256) initializer -> . LPAREN expression_list RPAREN

    SEMICOLON       reduce using rule 200 (init_declarator -> declarator .)
    COMMA           reduce using rule 200 (init_declarator -> declarator .)
    LPAREN          shift and go to state 243
    LSPAREN         shift and go to state 244
    EQUAL           shift and go to state 247

    initializer                    shift and go to state 242

state 373

    (28) logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .
    (30) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

  ! shift/reduce conflict for OROP resolved as shift
    ANDOP           reduce using rule 28 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    QUESMARK        reduce using rule 28 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COMMA           reduce using rule 28 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    SEMICOLON       reduce using rule 28 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    $end            reduce using rule 28 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COLON           reduce using rule 28 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RPAREN          reduce using rule 28 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RSPAREN         reduce using rule 28 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    GTCOMP          reduce using rule 28 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RCPAREN         reduce using rule 28 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    OROP            shift and go to state 250

  ! OROP            [ reduce using rule 28 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .) ]


state 374

    (111) postfix_expression -> simple_type_name LPAREN expression_list . RPAREN
    (118) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 496
    COMMA           shift and go to state 493


state 375

    (112) postfix_expression -> simple_type_name LPAREN RPAREN .

    LSPAREN         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LPAREN          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DOT             reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ARROW           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DPLUSOP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DMINUSOP        reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    EQUAL           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MULTEQOP        reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DIVEQOP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MODEQOP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BANDEQOP        reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    B_E_OR          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BOREQOP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DOTSTAR         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MULTOP          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DIVOP           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MODOP           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    PLUSOP          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MINUSOP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LSHIFT          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSHIFT          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LTCOMP          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    GTCOMP          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LTECOMP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    GTECOMP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    EQCOMP          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    NEQCOMP         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BANDOP          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    XOROP           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    OROP            reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ANDOP           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    QUESMARK        reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    COMMA           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    SEMICOLON       reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    $end            reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    COLON           reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RPAREN          reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSPAREN         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RCPAREN         reduce using rule 112 (postfix_expression -> simple_type_name LPAREN RPAREN .)


state 376

    (214) cv_qualifier_list -> cv_qualifier cv_qualifier_list .

    LPAREN          reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    BNOP            reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    MULTOP          reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    BANDOP          reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    IDENTIFIER      reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    DOUBLECOLON     reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    OPERATOR        reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    LSPAREN         reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    RPAREN          reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    DOT             reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    ARROW           reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    DPLUSOP         reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    DMINUSOP        reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    EQUAL           reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    MULTEQOP        reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    DIVEQOP         reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    MODEQOP         reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    PLUSEQOP        reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    MINUSEQOP       reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    LSHIFTEQOP      reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    RSHIFTEQOP      reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    BANDEQOP        reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    B_E_OR          reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    BOREQOP         reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    DOTSTAR         reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    ARROWSTAR       reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    DIVOP           reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    MODOP           reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    PLUSOP          reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    MINUSOP         reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    LSHIFT          reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    RSHIFT          reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    LTCOMP          reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    GTCOMP          reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    LTECOMP         reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    GTECOMP         reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    EQCOMP          reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    NEQCOMP         reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    XOROP           reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    OROP            reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    ANDOP           reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    QUESMARK        reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    COMMA           reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    SEMICOLON       reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    $end            reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    COLON           reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    LCPAREN         reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    RSPAREN         reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    RCPAREN         reduce using rule 214 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)


state 377

    (72) allocation_expression -> DOUBLECOLON NEW placement . new_type_name new_initializer
    (76) allocation_expression -> DOUBLECOLON NEW placement . new_type_name
    (80) allocation_expression -> DOUBLECOLON NEW placement . LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> DOUBLECOLON NEW placement . LPAREN type_name RPAREN
    (89) new_type_name -> . type_specifier_list new_declarator
    (90) new_type_name -> . type_specifier_list
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 498
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    IDENTIFIER      shift and go to state 235

    new_type_name                  shift and go to state 497
    type_specifier_list            shift and go to state 234
    type_specifier                 shift and go to state 171
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 236
    typedef_name                   shift and go to state 148

state 378

    (74) allocation_expression -> DOUBLECOLON NEW new_type_name . new_initializer
    (78) allocation_expression -> DOUBLECOLON NEW new_type_name .
    (101) new_initializer -> . LPAREN initializer_list RPAREN
    (102) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    MULTEQOP        reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    DIVEQOP         reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    MODEQOP         reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    PLUSEQOP        reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    MINUSEQOP       reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    LSHIFTEQOP      reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    RSHIFTEQOP      reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    BANDEQOP        reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    B_E_OR          reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    BOREQOP         reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    DOTSTAR         reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    ARROWSTAR       reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    MULTOP          reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    DIVOP           reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    MODOP           reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    PLUSOP          reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    MINUSOP         reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    LSHIFT          reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    RSHIFT          reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    LTCOMP          reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    GTCOMP          reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    LTECOMP         reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    GTECOMP         reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    EQCOMP          reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    NEQCOMP         reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    BANDOP          reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    XOROP           reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    OROP            reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    ANDOP           reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    QUESMARK        reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    COMMA           reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    SEMICOLON       reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    $end            reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    COLON           reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    RPAREN          reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    RSPAREN         reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    RCPAREN         reduce using rule 78 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    LPAREN          shift and go to state 386

    new_initializer                shift and go to state 499

state 379

    (82) allocation_expression -> DOUBLECOLON NEW LPAREN . type_name RPAREN new_initializer
    (86) allocation_expression -> DOUBLECOLON NEW LPAREN . type_name RPAREN
    (88) placement -> LPAREN . expression_list RPAREN
    (223) type_name -> . type_specifier_list abstract_declarator
    (224) type_name -> . type_specifier_list
    (117) expression_list -> . assignment_expression
    (118) expression_list -> . expression_list COMMA assignment_expression
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 328
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    IDENTIFIER      shift and go to state 327
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    OPERATOR        shift and go to state 105

    type_name                      shift and go to state 500
    expression_list                shift and go to state 388
    type_specifier_list            shift and go to state 166
    assignment_expression          shift and go to state 360
    type_specifier                 shift and go to state 171
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    simple_type_name               shift and go to state 173
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    name                           shift and go to state 140
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 380

    (103) deallocation_expression -> DOUBLECOLON DELETE cast_expression .

    EQUAL           reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    MULTEQOP        reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    DIVEQOP         reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    MODEQOP         reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    PLUSEQOP        reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    MINUSEQOP       reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    LSHIFTEQOP      reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    RSHIFTEQOP      reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    BANDEQOP        reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    B_E_OR          reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    BOREQOP         reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    DOTSTAR         reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    ARROWSTAR       reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    MULTOP          reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    DIVOP           reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    MODOP           reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    PLUSOP          reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    MINUSOP         reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    LSHIFT          reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    RSHIFT          reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    LTCOMP          reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    GTCOMP          reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    LTECOMP         reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    GTECOMP         reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    EQCOMP          reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    NEQCOMP         reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    BANDOP          reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    XOROP           reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    OROP            reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    ANDOP           reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    QUESMARK        reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    COMMA           reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    SEMICOLON       reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    $end            reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    COLON           reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    RPAREN          reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    RSPAREN         reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    RCPAREN         reduce using rule 103 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)


state 381

    (105) deallocation_expression -> DOUBLECOLON DELETE LSPAREN . RSPAREN cast_expression

    RSPAREN         shift and go to state 501


state 382

    (181) qualified_class_name -> class_name DOUBLECOLON . qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 222

    class_name                     shift and go to state 230
    qualified_class_name           shift and go to state 420

state 383

    (73) allocation_expression -> NEW placement new_type_name . new_initializer
    (77) allocation_expression -> NEW placement new_type_name .
    (101) new_initializer -> . LPAREN initializer_list RPAREN
    (102) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    MULTEQOP        reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    DIVEQOP         reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    MODEQOP         reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    PLUSEQOP        reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    MINUSEQOP       reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    LSHIFTEQOP      reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    RSHIFTEQOP      reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    BANDEQOP        reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    B_E_OR          reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    BOREQOP         reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    DOTSTAR         reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    ARROWSTAR       reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    MULTOP          reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    DIVOP           reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    MODOP           reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    PLUSOP          reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    MINUSOP         reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    LSHIFT          reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    RSHIFT          reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    LTCOMP          reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    GTCOMP          reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    LTECOMP         reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    GTECOMP         reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    EQCOMP          reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    NEQCOMP         reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    BANDOP          reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    XOROP           reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    OROP            reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    ANDOP           reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    QUESMARK        reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    COMMA           reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    SEMICOLON       reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    $end            reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    COLON           reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    RPAREN          reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    RSPAREN         reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    RCPAREN         reduce using rule 77 (allocation_expression -> NEW placement new_type_name .)
    LPAREN          shift and go to state 386

    new_initializer                shift and go to state 502

state 384

    (81) allocation_expression -> NEW placement LPAREN . type_name RPAREN new_initializer
    (85) allocation_expression -> NEW placement LPAREN . type_name RPAREN
    (223) type_name -> . type_specifier_list abstract_declarator
    (224) type_name -> . type_specifier_list
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    IDENTIFIER      shift and go to state 235

    type_name                      shift and go to state 503
    type_specifier_list            shift and go to state 166
    type_specifier                 shift and go to state 171
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 236
    typedef_name                   shift and go to state 148

state 385

    (75) allocation_expression -> NEW new_type_name new_initializer .

    EQUAL           reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTEQOP        reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVEQOP         reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    MODEQOP         reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDEQOP        reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    B_E_OR          reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    BOREQOP         reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    DOTSTAR         reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTOP          reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVOP           reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    MODOP           reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSOP          reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSOP         reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFT          reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFT          reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    LTCOMP          reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    GTCOMP          reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    LTECOMP         reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    GTECOMP         reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    EQCOMP          reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    NEQCOMP         reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDOP          reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    XOROP           reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    OROP            reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    ANDOP           reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    QUESMARK        reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    COMMA           reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    SEMICOLON       reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    $end            reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    COLON           reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    RPAREN          reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    RSPAREN         reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)
    RCPAREN         reduce using rule 75 (allocation_expression -> NEW new_type_name new_initializer .)


state 386

    (101) new_initializer -> LPAREN . initializer_list RPAREN
    (102) new_initializer -> LPAREN . RPAREN
    (257) initializer_list -> . assignment_expression
    (258) initializer_list -> . initializer_list COMMA assignment_expression
    (259) initializer_list -> . LCPAREN initializer_list RCPAREN
    (260) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 505
    LCPAREN         shift and go to state 507
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    initializer_list               shift and go to state 504
    assignment_expression          shift and go to state 506
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 387

    (83) allocation_expression -> NEW LPAREN type_name . RPAREN new_initializer
    (87) allocation_expression -> NEW LPAREN type_name . RPAREN

    RPAREN          shift and go to state 508


state 388

    (88) placement -> LPAREN expression_list . RPAREN
    (118) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 509
    COMMA           shift and go to state 493


state 389

    (89) new_type_name -> type_specifier_list new_declarator .
    (99) new_declarator -> new_declarator . LSPAREN expression RSPAREN

    LPAREN          reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    EQUAL           reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    MULTEQOP        reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    DIVEQOP         reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    MODEQOP         reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    PLUSEQOP        reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    MINUSEQOP       reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    LSHIFTEQOP      reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    RSHIFTEQOP      reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    BANDEQOP        reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    B_E_OR          reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    BOREQOP         reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    DOTSTAR         reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    ARROWSTAR       reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    MULTOP          reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    DIVOP           reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    MODOP           reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    PLUSOP          reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    MINUSOP         reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    LSHIFT          reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    RSHIFT          reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    LTCOMP          reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    GTCOMP          reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    LTECOMP         reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    GTECOMP         reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    EQCOMP          reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    NEQCOMP         reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    BANDOP          reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    XOROP           reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    OROP            reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    ANDOP           reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    QUESMARK        reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    COMMA           reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    SEMICOLON       reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    $end            reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    COLON           reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    RPAREN          reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    RSPAREN         reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    RCPAREN         reduce using rule 89 (new_type_name -> type_specifier_list new_declarator .)
    LSPAREN         shift and go to state 510


state 390

    (91) new_declarator -> MULTOP . cv_qualifier_list new_declarator
    (92) new_declarator -> MULTOP . new_declarator
    (93) new_declarator -> MULTOP . cv_qualifier_list
    (94) new_declarator -> MULTOP .
    (214) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (215) cv_qualifier_list -> . cv_qualifier
    (91) new_declarator -> . MULTOP cv_qualifier_list new_declarator
    (92) new_declarator -> . MULTOP new_declarator
    (93) new_declarator -> . MULTOP cv_qualifier_list
    (94) new_declarator -> . MULTOP
    (95) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator
    (96) new_declarator -> . complete_class_name DOUBLECOLON MULTOP new_declarator
    (97) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (98) new_declarator -> . complete_class_name DOUBLECOLON MULTOP
    (99) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (100) new_declarator -> . LSPAREN expression RSPAREN
    (216) cv_qualifier -> . CONST
    (217) cv_qualifier -> . VOLATILE
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

  ! shift/reduce conflict for MULTOP resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 94 (new_declarator -> MULTOP .)
    EQUAL           reduce using rule 94 (new_declarator -> MULTOP .)
    MULTEQOP        reduce using rule 94 (new_declarator -> MULTOP .)
    DIVEQOP         reduce using rule 94 (new_declarator -> MULTOP .)
    MODEQOP         reduce using rule 94 (new_declarator -> MULTOP .)
    PLUSEQOP        reduce using rule 94 (new_declarator -> MULTOP .)
    MINUSEQOP       reduce using rule 94 (new_declarator -> MULTOP .)
    LSHIFTEQOP      reduce using rule 94 (new_declarator -> MULTOP .)
    RSHIFTEQOP      reduce using rule 94 (new_declarator -> MULTOP .)
    BANDEQOP        reduce using rule 94 (new_declarator -> MULTOP .)
    B_E_OR          reduce using rule 94 (new_declarator -> MULTOP .)
    BOREQOP         reduce using rule 94 (new_declarator -> MULTOP .)
    DOTSTAR         reduce using rule 94 (new_declarator -> MULTOP .)
    ARROWSTAR       reduce using rule 94 (new_declarator -> MULTOP .)
    DIVOP           reduce using rule 94 (new_declarator -> MULTOP .)
    MODOP           reduce using rule 94 (new_declarator -> MULTOP .)
    PLUSOP          reduce using rule 94 (new_declarator -> MULTOP .)
    MINUSOP         reduce using rule 94 (new_declarator -> MULTOP .)
    LSHIFT          reduce using rule 94 (new_declarator -> MULTOP .)
    RSHIFT          reduce using rule 94 (new_declarator -> MULTOP .)
    LTCOMP          reduce using rule 94 (new_declarator -> MULTOP .)
    GTCOMP          reduce using rule 94 (new_declarator -> MULTOP .)
    LTECOMP         reduce using rule 94 (new_declarator -> MULTOP .)
    GTECOMP         reduce using rule 94 (new_declarator -> MULTOP .)
    EQCOMP          reduce using rule 94 (new_declarator -> MULTOP .)
    NEQCOMP         reduce using rule 94 (new_declarator -> MULTOP .)
    BANDOP          reduce using rule 94 (new_declarator -> MULTOP .)
    XOROP           reduce using rule 94 (new_declarator -> MULTOP .)
    OROP            reduce using rule 94 (new_declarator -> MULTOP .)
    ANDOP           reduce using rule 94 (new_declarator -> MULTOP .)
    QUESMARK        reduce using rule 94 (new_declarator -> MULTOP .)
    COMMA           reduce using rule 94 (new_declarator -> MULTOP .)
    SEMICOLON       reduce using rule 94 (new_declarator -> MULTOP .)
    $end            reduce using rule 94 (new_declarator -> MULTOP .)
    COLON           reduce using rule 94 (new_declarator -> MULTOP .)
    RPAREN          reduce using rule 94 (new_declarator -> MULTOP .)
    RSPAREN         reduce using rule 94 (new_declarator -> MULTOP .)
    RCPAREN         reduce using rule 94 (new_declarator -> MULTOP .)
    MULTOP          shift and go to state 390
    LSPAREN         shift and go to state 392
    CONST           shift and go to state 218
    VOLATILE        shift and go to state 219
    DOUBLECOLON     shift and go to state 210
    IDENTIFIER      shift and go to state 222

  ! LSPAREN         [ reduce using rule 94 (new_declarator -> MULTOP .) ]
  ! MULTOP          [ reduce using rule 94 (new_declarator -> MULTOP .) ]

    cv_qualifier_list              shift and go to state 511
    new_declarator                 shift and go to state 512
    cv_qualifier                   shift and go to state 217
    complete_class_name            shift and go to state 391
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 391

    (95) new_declarator -> complete_class_name . DOUBLECOLON MULTOP cv_qualifier_list new_declarator
    (96) new_declarator -> complete_class_name . DOUBLECOLON MULTOP new_declarator
    (97) new_declarator -> complete_class_name . DOUBLECOLON MULTOP cv_qualifier_list
    (98) new_declarator -> complete_class_name . DOUBLECOLON MULTOP

    DOUBLECOLON     shift and go to state 513


state 392

    (100) new_declarator -> LSPAREN . expression RSPAREN
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 514
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 393

    (106) deallocation_expression -> DELETE LSPAREN RSPAREN . cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    cast_expression                shift and go to state 515
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 394

    (196) asm_declaration -> ASM LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 516


state 395

    (249) function_definition -> declarator ctor_initializer fct_body .

    $end            reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    RCPAREN         reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    IDENTIFIER      reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    CASE            reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    DEFAULT         reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    SEMICOLON       reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    LCPAREN         reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    IF              reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    SWITCH          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    WHILE           reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    DO              reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    FOR             reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    BREAK           reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    CONTINUE        reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    RETURN          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    GOTO            reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    TRY             reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    ASM             reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    TEMPLATE        reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    EXTERN          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    DPLUSOP         reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    DMINUSOP        reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    SIZEOF          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    TYPEDEF         reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    LPAREN          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    MULTOP          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    BANDOP          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    PLUSOP          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    MINUSOP         reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    NOTSYM          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    BNOP            reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    DOUBLECOLON     reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    NEW             reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    DELETE          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    AUTO            reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    STATIC          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    CONST           reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    VOLATILE        reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    INLINE          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    VIRTUAL         reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    THIS            reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    CHAR            reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    SHORT           reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    INT             reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    LONG            reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    SIGNED          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    UNSIGNED        reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    FLOAT           reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    DOUBLE          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    VOID            reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    ENUM            reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    NUMBER          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    STRING          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    CLASS           reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    STRUCT          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    UNION           reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    OPERATOR        reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    ELSE            reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    PRIVATE         reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    PROTECTED       reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    PUBLIC          reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)
    COLON           reduce using rule 249 (function_definition -> declarator ctor_initializer fct_body .)


state 396

    (203) declarator -> declarator LPAREN argument_declaration_list . RPAREN cv_qualifier_list
    (204) declarator -> declarator LPAREN argument_declaration_list . RPAREN

    RPAREN          shift and go to state 517


state 397

    (256) initializer -> LPAREN expression_list . RPAREN
    (118) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 518
    COMMA           shift and go to state 493


state 398

    (238) argument_declaration_list -> arg_declaration_list .
    (241) arg_declaration_list -> arg_declaration_list . COMMA argument_declaration

    RPAREN          reduce using rule 238 (argument_declaration_list -> arg_declaration_list .)
    COMMA           shift and go to state 519


state 399

    (240) arg_declaration_list -> argument_declaration .

    COMMA           reduce using rule 240 (arg_declaration_list -> argument_declaration .)
    RPAREN          reduce using rule 240 (arg_declaration_list -> argument_declaration .)


state 400

    (242) argument_declaration -> decl_specifiers . declarator
    (243) argument_declaration -> decl_specifiers . declarator EQUAL expression
    (244) argument_declaration -> decl_specifiers . abstract_declarator
    (245) argument_declaration -> decl_specifiers .
    (246) argument_declaration -> decl_specifiers . abstract_declarator EQUAL expression
    (247) argument_declaration -> decl_specifiers . EQUAL expression
    (146) decl_specifiers -> decl_specifiers . decl_specifier
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (227) abstract_declarator -> . ptr_operator abstract_declarator
    (228) abstract_declarator -> . ptr_operator
    (229) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (230) abstract_declarator -> . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (231) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (232) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (233) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (234) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (235) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (236) abstract_declarator -> . LSPAREN RSPAREN
    (237) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION

    COMMA           reduce using rule 245 (argument_declaration -> decl_specifiers .)
    RPAREN          reduce using rule 245 (argument_declaration -> decl_specifiers .)
    GTCOMP          reduce using rule 245 (argument_declaration -> decl_specifiers .)
    EQUAL           shift and go to state 521
    LPAREN          shift and go to state 524
    LSPAREN         shift and go to state 342
    TYPEDEF         shift and go to state 87
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    EXTERN          shift and go to state 204
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    IDENTIFIER      shift and go to state 172
    DOUBLECOLON     shift and go to state 210
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    OPERATOR        shift and go to state 105
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112

    declarator                     shift and go to state 520
    abstract_declarator            shift and go to state 522
    decl_specifier                 shift and go to state 201
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 523
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    name                           shift and go to state 206
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108

state 401

    (205) declarator -> declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 525


state 402

    (206) declarator -> declarator LSPAREN RSPAREN .

    LPAREN          reduce using rule 206 (declarator -> declarator LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 206 (declarator -> declarator LSPAREN RSPAREN .)
    COLON           reduce using rule 206 (declarator -> declarator LSPAREN RSPAREN .)
    EQUAL           reduce using rule 206 (declarator -> declarator LSPAREN RSPAREN .)
    LCPAREN         reduce using rule 206 (declarator -> declarator LSPAREN RSPAREN .)
    SEMICOLON       reduce using rule 206 (declarator -> declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 206 (declarator -> declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 206 (declarator -> declarator LSPAREN RSPAREN .)
    GTCOMP          reduce using rule 206 (declarator -> declarator LSPAREN RSPAREN .)


state 403

    (301) ctor_initializer -> COLON mem_initializer_list .

    LCPAREN         reduce using rule 301 (ctor_initializer -> COLON mem_initializer_list .)


state 404

    (302) mem_initializer_list -> mem_initializer .
    (303) mem_initializer_list -> mem_initializer . COMMA mem_initializer_list

    LCPAREN         reduce using rule 302 (mem_initializer_list -> mem_initializer .)
    COMMA           shift and go to state 526


state 405

    (304) mem_initializer -> complete_class_name . LPAREN expression_list RPAREN
    (305) mem_initializer -> complete_class_name . LPAREN RPAREN

    LPAREN          shift and go to state 527


state 406

    (306) mem_initializer -> IDENTIFIER . LPAREN expression_list RPAREN
    (307) mem_initializer -> IDENTIFIER . LPAREN RPAREN
    (5) class_name -> IDENTIFIER .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 528
    DOUBLECOLON     reduce using rule 5 (class_name -> IDENTIFIER .)

  ! LPAREN          [ reduce using rule 5 (class_name -> IDENTIFIER .) ]


state 407

    (253) initializer -> EQUAL assignment_expression .

    SEMICOLON       reduce using rule 253 (initializer -> EQUAL assignment_expression .)
    COMMA           reduce using rule 253 (initializer -> EQUAL assignment_expression .)


state 408

    (254) initializer -> EQUAL LCPAREN . initializer_list RCPAREN
    (255) initializer -> EQUAL LCPAREN . initializer_list COMMA RCPAREN
    (257) initializer_list -> . assignment_expression
    (258) initializer_list -> . initializer_list COMMA assignment_expression
    (259) initializer_list -> . LCPAREN initializer_list RCPAREN
    (260) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 507
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    initializer_list               shift and go to state 529
    assignment_expression          shift and go to state 506
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 409

    (381) template_declaration -> TEMPLATE LTCOMP template_argument_list . GTCOMP declaration
    (383) template_argument_list -> template_argument_list . COMMA template_argument

    GTCOMP          shift and go to state 530
    COMMA           shift and go to state 531


state 410

    (382) template_argument_list -> template_argument .

    GTCOMP          reduce using rule 382 (template_argument_list -> template_argument .)
    COMMA           reduce using rule 382 (template_argument_list -> template_argument .)


state 411

    (384) template_argument -> type_argument .

    GTCOMP          reduce using rule 384 (template_argument -> type_argument .)
    COMMA           reduce using rule 384 (template_argument -> type_argument .)


state 412

    (385) template_argument -> argument_declaration .

    GTCOMP          reduce using rule 385 (template_argument -> argument_declaration .)
    COMMA           reduce using rule 385 (template_argument -> argument_declaration .)


state 413

    (386) type_argument -> CLASS . IDENTIFIER
    (173) class_key -> CLASS .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 532
    COLON           reduce using rule 173 (class_key -> CLASS .)
    LCPAREN         reduce using rule 173 (class_key -> CLASS .)

  ! IDENTIFIER      [ reduce using rule 173 (class_key -> CLASS .) ]


state 414

    (191) linkage_specification -> EXTERN STRING LCPAREN . declaration_list RCPAREN
    (192) linkage_specification -> EXTERN STRING LCPAREN . RCPAREN
    (194) declaration_list -> . declaration
    (195) declaration_list -> . declaration_list declaration
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    RCPAREN         shift and go to state 534
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 203
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    IDENTIFIER      shift and go to state 172
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    declaration_list               shift and go to state 533
    declaration                    shift and go to state 535
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    name                           shift and go to state 206
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93

state 415

    (193) linkage_specification -> EXTERN STRING declaration .

    $end            reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    RCPAREN         reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    IDENTIFIER      reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    CASE            reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    DEFAULT         reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    SEMICOLON       reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    LCPAREN         reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    IF              reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    SWITCH          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    WHILE           reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    DO              reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    FOR             reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    BREAK           reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    CONTINUE        reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    RETURN          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    GOTO            reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    TRY             reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    ASM             reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    TEMPLATE        reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    EXTERN          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    DPLUSOP         reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    DMINUSOP        reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    SIZEOF          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    TYPEDEF         reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    LPAREN          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    MULTOP          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    BANDOP          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    PLUSOP          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    MINUSOP         reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    NOTSYM          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    BNOP            reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    DOUBLECOLON     reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    NEW             reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    DELETE          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    AUTO            reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    STATIC          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    CONST           reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    VOLATILE        reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    INLINE          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    VIRTUAL         reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    THIS            reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    CHAR            reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    SHORT           reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    INT             reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    LONG            reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    SIGNED          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    UNSIGNED        reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    FLOAT           reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    DOUBLE          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    VOID            reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    ENUM            reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    NUMBER          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    STRING          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    CLASS           reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    STRUCT          reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    UNION           reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    OPERATOR        reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)
    ELSE            reduce using rule 193 (linkage_specification -> EXTERN STRING declaration .)


state 416

    (30) inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .
    (32) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 30 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    ANDOP           reduce using rule 30 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    QUESMARK        reduce using rule 30 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COMMA           reduce using rule 30 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    SEMICOLON       reduce using rule 30 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    $end            reduce using rule 30 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COLON           reduce using rule 30 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RPAREN          reduce using rule 30 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RSPAREN         reduce using rule 30 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    GTCOMP          reduce using rule 30 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RCPAREN         reduce using rule 30 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    XOROP           shift and go to state 255


state 417

    (212) ptr_operator -> complete_class_name DOUBLECOLON MULTOP . cv_qualifier_list
    (213) ptr_operator -> complete_class_name DOUBLECOLON MULTOP .
    (214) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (215) cv_qualifier_list -> . cv_qualifier
    (216) cv_qualifier -> . CONST
    (217) cv_qualifier -> . VOLATILE

    LPAREN          reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    BNOP            reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    MULTOP          reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    BANDOP          reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    IDENTIFIER      reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    DOUBLECOLON     reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    OPERATOR        reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    LSPAREN         reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    RPAREN          reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    DOT             reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    ARROW           reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    DPLUSOP         reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    DMINUSOP        reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    EQUAL           reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    MULTEQOP        reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    DIVEQOP         reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    MODEQOP         reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    PLUSEQOP        reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    MINUSEQOP       reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    LSHIFTEQOP      reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    RSHIFTEQOP      reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    BANDEQOP        reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    B_E_OR          reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    BOREQOP         reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    DOTSTAR         reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    ARROWSTAR       reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    DIVOP           reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    MODOP           reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    PLUSOP          reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    MINUSOP         reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    LSHIFT          reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    RSHIFT          reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    LTCOMP          reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    GTCOMP          reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    LTECOMP         reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    GTECOMP         reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    EQCOMP          reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    NEQCOMP         reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    XOROP           reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    OROP            reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    ANDOP           reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    QUESMARK        reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    COMMA           reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    SEMICOLON       reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    $end            reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    COLON           reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    LCPAREN         reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    RSPAREN         reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    RCPAREN         reduce using rule 213 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    CONST           shift and go to state 218
    VOLATILE        shift and go to state 219

    cv_qualifier_list              shift and go to state 536
    cv_qualifier                   shift and go to state 217

state 418

    (32) exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .
    (34) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 32 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    OROP            reduce using rule 32 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    ANDOP           reduce using rule 32 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    QUESMARK        reduce using rule 32 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COMMA           reduce using rule 32 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    SEMICOLON       reduce using rule 32 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    $end            reduce using rule 32 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COLON           reduce using rule 32 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RPAREN          reduce using rule 32 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RSPAREN         reduce using rule 32 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    GTCOMP          reduce using rule 32 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RCPAREN         reduce using rule 32 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    BANDOP          shift and go to state 258


state 419

    (177) qualified_type_name -> class_name DOUBLECOLON qualified_type_name .

    LPAREN          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    SEMICOLON       reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    TYPEDEF         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    AUTO            reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    STATIC          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    EXTERN          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    CONST           reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    VOLATILE        reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    INLINE          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    VIRTUAL         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    BNOP            reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    MULTOP          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    BANDOP          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    CHAR            reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    SHORT           reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    INT             reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    LONG            reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    SIGNED          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    UNSIGNED        reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    FLOAT           reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DOUBLE          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    VOID            reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    ENUM            reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    IDENTIFIER      reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DOUBLECOLON     reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    CLASS           reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    STRUCT          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    UNION           reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    OPERATOR        reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    LSPAREN         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    COLON           reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    EQUAL           reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    LCPAREN         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    COMMA           reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    RPAREN          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    MULTEQOP        reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DIVEQOP         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    MODEQOP         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    PLUSEQOP        reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    MINUSEQOP       reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    LSHIFTEQOP      reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    RSHIFTEQOP      reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    BANDEQOP        reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    B_E_OR          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    BOREQOP         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DOTSTAR         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    ARROWSTAR       reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DIVOP           reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    MODOP           reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    PLUSOP          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    MINUSOP         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    LSHIFT          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    RSHIFT          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    LTCOMP          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    GTCOMP          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    LTECOMP         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    GTECOMP         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    EQCOMP          reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    NEQCOMP         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    XOROP           reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    OROP            reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    ANDOP           reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    QUESMARK        reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    $end            reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    RSPAREN         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    RCPAREN         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DOT             reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    ARROW           reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DPLUSOP         reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DMINUSOP        reduce using rule 177 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)


state 420

    (181) qualified_class_name -> class_name DOUBLECOLON qualified_class_name .

    DOUBLECOLON     reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LPAREN          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    SEMICOLON       reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    TYPEDEF         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    AUTO            reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    STATIC          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    EXTERN          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    CONST           reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    VOLATILE        reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    INLINE          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    VIRTUAL         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    BNOP            reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    MULTOP          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    BANDOP          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    CHAR            reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    SHORT           reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    INT             reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LONG            reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    SIGNED          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    UNSIGNED        reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    FLOAT           reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    DOUBLE          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    VOID            reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    ENUM            reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    IDENTIFIER      reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    CLASS           reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    STRUCT          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    UNION           reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    OPERATOR        reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LSPAREN         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    RPAREN          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    EQUAL           reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    COMMA           reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    MULTEQOP        reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    DIVEQOP         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    MODEQOP         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    PLUSEQOP        reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    MINUSEQOP       reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LSHIFTEQOP      reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    RSHIFTEQOP      reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    BANDEQOP        reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    B_E_OR          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    BOREQOP         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    DOTSTAR         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    ARROWSTAR       reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    DIVOP           reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    MODOP           reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    PLUSOP          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    MINUSOP         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LSHIFT          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    RSHIFT          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LTCOMP          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    GTCOMP          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LTECOMP         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    GTECOMP         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    EQCOMP          reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    NEQCOMP         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    XOROP           reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    OROP            reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    ANDOP           reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    QUESMARK        reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    $end            reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    COLON           reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    RSPAREN         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    RCPAREN         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    DOT             reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    ARROW           reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    DPLUSOP         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    DMINUSOP        reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LCPAREN         reduce using rule 181 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)


state 421

    (131) qualified_name -> qualified_class_name DOUBLECOLON name .

    LSPAREN         reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    LPAREN          reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    DOT             reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    ARROW           reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    DPLUSOP         reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    DMINUSOP        reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    EQUAL           reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    MULTEQOP        reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    DIVEQOP         reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    MODEQOP         reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    PLUSEQOP        reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    MINUSEQOP       reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    LSHIFTEQOP      reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    RSHIFTEQOP      reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    BANDEQOP        reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    B_E_OR          reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    BOREQOP         reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    DOTSTAR         reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    ARROWSTAR       reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    MULTOP          reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    DIVOP           reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    MODOP           reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    PLUSOP          reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    MINUSOP         reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    LSHIFT          reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    RSHIFT          reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    LTCOMP          reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    GTCOMP          reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    LTECOMP         reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    GTECOMP         reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    EQCOMP          reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    NEQCOMP         reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    BANDOP          reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    XOROP           reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    OROP            reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    ANDOP           reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    QUESMARK        reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    COMMA           reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    SEMICOLON       reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    $end            reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    COLON           reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    LCPAREN         reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    RPAREN          reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    RSPAREN         reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    RCPAREN         reduce using rule 131 (qualified_name -> qualified_class_name DOUBLECOLON name .)


state 422

    (34) AND_expression -> AND_expression BANDOP equality_expression .
    (36) equality_expression -> equality_expression . EQCOMP relational_expression
    (37) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 34 (AND_expression -> AND_expression BANDOP equality_expression .)
    XOROP           reduce using rule 34 (AND_expression -> AND_expression BANDOP equality_expression .)
    OROP            reduce using rule 34 (AND_expression -> AND_expression BANDOP equality_expression .)
    ANDOP           reduce using rule 34 (AND_expression -> AND_expression BANDOP equality_expression .)
    QUESMARK        reduce using rule 34 (AND_expression -> AND_expression BANDOP equality_expression .)
    COMMA           reduce using rule 34 (AND_expression -> AND_expression BANDOP equality_expression .)
    SEMICOLON       reduce using rule 34 (AND_expression -> AND_expression BANDOP equality_expression .)
    $end            reduce using rule 34 (AND_expression -> AND_expression BANDOP equality_expression .)
    COLON           reduce using rule 34 (AND_expression -> AND_expression BANDOP equality_expression .)
    RPAREN          reduce using rule 34 (AND_expression -> AND_expression BANDOP equality_expression .)
    RSPAREN         reduce using rule 34 (AND_expression -> AND_expression BANDOP equality_expression .)
    GTCOMP          reduce using rule 34 (AND_expression -> AND_expression BANDOP equality_expression .)
    RCPAREN         reduce using rule 34 (AND_expression -> AND_expression BANDOP equality_expression .)
    EQCOMP          shift and go to state 308
    NEQCOMP         shift and go to state 309


state 423

    (345) operator_name -> LPAREN RPAREN .

    LSPAREN         reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    LPAREN          reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    DOT             reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    ARROW           reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    DPLUSOP         reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    DMINUSOP        reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    EQUAL           reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    MULTEQOP        reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    DIVEQOP         reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    MODEQOP         reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    BANDEQOP        reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    B_E_OR          reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    BOREQOP         reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    DOTSTAR         reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    MULTOP          reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    DIVOP           reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    MODOP           reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    PLUSOP          reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    MINUSOP         reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    LSHIFT          reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    RSHIFT          reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    LTCOMP          reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    GTCOMP          reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    LTECOMP         reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    GTECOMP         reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    EQCOMP          reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    NEQCOMP         reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    BANDOP          reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    XOROP           reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    OROP            reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    ANDOP           reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    QUESMARK        reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    COMMA           reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    $end            reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    COLON           reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    LCPAREN         reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    RPAREN          reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    RSPAREN         reduce using rule 345 (operator_name -> LPAREN RPAREN .)
    RCPAREN         reduce using rule 345 (operator_name -> LPAREN RPAREN .)


state 424

    (346) operator_name -> LSPAREN RSPAREN .

    LSPAREN         reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    LPAREN          reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    DOT             reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    ARROW           reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    DPLUSOP         reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    DMINUSOP        reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    EQUAL           reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    MULTEQOP        reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    DIVEQOP         reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    MODEQOP         reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    PLUSEQOP        reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    MINUSEQOP       reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    LSHIFTEQOP      reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    RSHIFTEQOP      reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    BANDEQOP        reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    B_E_OR          reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    BOREQOP         reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    DOTSTAR         reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    ARROWSTAR       reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    MULTOP          reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    DIVOP           reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    MODOP           reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    PLUSOP          reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    MINUSOP         reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    LSHIFT          reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    RSHIFT          reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    LTCOMP          reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    GTCOMP          reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    LTECOMP         reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    GTECOMP         reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    EQCOMP          reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    NEQCOMP         reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    BANDOP          reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    XOROP           reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    OROP            reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    ANDOP           reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    QUESMARK        reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    SEMICOLON       reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    $end            reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    COLON           reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    LCPAREN         reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)
    RCPAREN         reduce using rule 346 (operator_name -> LSPAREN RSPAREN .)


state 425

    (299) conversion_type_name -> type_specifier_list ptr_operator .

    LSPAREN         reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    LPAREN          reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    DOT             reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    ARROW           reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    DPLUSOP         reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    DMINUSOP        reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    EQUAL           reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    MULTEQOP        reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    DIVEQOP         reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    MODEQOP         reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    PLUSEQOP        reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    MINUSEQOP       reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    LSHIFTEQOP      reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    RSHIFTEQOP      reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    BANDEQOP        reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    B_E_OR          reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    BOREQOP         reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    DOTSTAR         reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    ARROWSTAR       reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    MULTOP          reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    DIVOP           reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    MODOP           reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    PLUSOP          reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    MINUSOP         reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    LSHIFT          reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    RSHIFT          reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    LTCOMP          reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    GTCOMP          reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    LTECOMP         reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    GTECOMP         reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    EQCOMP          reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    NEQCOMP         reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    BANDOP          reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    XOROP           reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    OROP            reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    ANDOP           reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    QUESMARK        reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    COMMA           reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    SEMICOLON       reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    $end            reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    COLON           reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    LCPAREN         reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    RPAREN          reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    RSPAREN         reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)
    RCPAREN         reduce using rule 299 (conversion_type_name -> type_specifier_list ptr_operator .)


state 426

    (261) class_specifier -> class_head LCPAREN member_list . RCPAREN

    RCPAREN         shift and go to state 537


state 427

    (262) class_specifier -> class_head LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    LPAREN          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    AUTO            reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    STATIC          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    EXTERN          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    CONST           reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    INLINE          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    BNOP            reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    MULTOP          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    BANDOP          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    CHAR            reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    SHORT           reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    INT             reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    LONG            reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    SIGNED          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    FLOAT           reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    VOID            reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    ENUM            reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    DOUBLECOLON     reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    CLASS           reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    STRUCT          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    UNION           reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    LSPAREN         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    RPAREN          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    EQUAL           reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    MULTEQOP        reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    DIVEQOP         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    MODEQOP         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    PLUSEQOP        reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    MINUSEQOP       reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    LSHIFTEQOP      reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    RSHIFTEQOP      reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    BANDEQOP        reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    B_E_OR          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    BOREQOP         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    DOTSTAR         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    ARROWSTAR       reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    DIVOP           reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    MODOP           reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    LSHIFT          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    RSHIFT          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    LTCOMP          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    GTCOMP          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    LTECOMP         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    GTECOMP         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    EQCOMP          reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    NEQCOMP         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    XOROP           reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    OROP            reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    ANDOP           reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    QUESMARK        reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    COMMA           reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    $end            reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    COLON           reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    RSPAREN         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    DOT             reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    ARROW           reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 262 (class_specifier -> class_head LCPAREN RCPAREN .)


state 428

    (269) member_list -> member_declaration . member_list
    (270) member_list -> member_declaration .
    (269) member_list -> . member_declaration member_list
    (270) member_list -> . member_declaration
    (271) member_list -> . access_specifier COLON member_list
    (272) member_list -> . access_specifier COLON
    (273) member_declaration -> . decl_specifiers member_declarator_list SEMICOLON
    (274) member_declaration -> . member_declarator_list SEMICOLON
    (275) member_declaration -> . decl_specifiers SEMICOLON
    (276) member_declaration -> . SEMICOLON
    (277) member_declaration -> . function_definition SEMICOLON
    (278) member_declaration -> . function_definition
    (279) member_declaration -> . qualified_name SEMICOLON
    (295) access_specifier -> . PRIVATE
    (296) access_specifier -> . PROTECTED
    (297) access_specifier -> . PUBLIC
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (280) member_declarator_list -> . member_declarator
    (281) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (282) member_declarator -> . declarator pure_specifier
    (283) member_declarator -> . declarator
    (284) member_declarator -> . IDENTIFIER COLON constant_expression
    (285) member_declarator -> . COLON constant_expression
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (5) class_name -> . IDENTIFIER
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name

    RCPAREN         reduce using rule 270 (member_list -> member_declaration .)
    SEMICOLON       shift and go to state 433
    PRIVATE         shift and go to state 436
    PROTECTED       shift and go to state 437
    PUBLIC          shift and go to state 438
    TYPEDEF         shift and go to state 87
    IDENTIFIER      shift and go to state 442
    COLON           shift and go to state 430
    LPAREN          shift and go to state 203
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    EXTERN          shift and go to state 204
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    member_declaration             shift and go to state 428
    member_list                    shift and go to state 538
    access_specifier               shift and go to state 429
    decl_specifiers                shift and go to state 431
    member_declarator_list         shift and go to state 432
    function_definition            shift and go to state 434
    qualified_name                 shift and go to state 435
    decl_specifier                 shift and go to state 62
    member_declarator              shift and go to state 439
    declarator                     shift and go to state 440
    qualified_class_name           shift and go to state 441
    name                           shift and go to state 206
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    class_name                     shift and go to state 443
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91

state 429

    (271) member_list -> access_specifier . COLON member_list
    (272) member_list -> access_specifier . COLON

    COLON           shift and go to state 539


state 430

    (285) member_declarator -> COLON . constant_expression
    (190) constant_expression -> . conditional_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    constant_expression            shift and go to state 540
    conditional_expression         shift and go to state 134
    logical_OR_expression          shift and go to state 34
    logical_AND_expression         shift and go to state 49
    inclusive_OR_expression        shift and go to state 68
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 431

    (273) member_declaration -> decl_specifiers . member_declarator_list SEMICOLON
    (275) member_declaration -> decl_specifiers . SEMICOLON
    (146) decl_specifiers -> decl_specifiers . decl_specifier
    (248) function_definition -> decl_specifiers . declarator ctor_initializer fct_body
    (250) function_definition -> decl_specifiers . declarator fct_body
    (280) member_declarator_list -> . member_declarator
    (281) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (282) member_declarator -> . declarator pure_specifier
    (283) member_declarator -> . declarator
    (284) member_declarator -> . IDENTIFIER COLON constant_expression
    (285) member_declarator -> . COLON constant_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    SEMICOLON       shift and go to state 542
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 203
    IDENTIFIER      shift and go to state 544
    COLON           shift and go to state 430
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    EXTERN          shift and go to state 204
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    member_declarator_list         shift and go to state 541
    decl_specifier                 shift and go to state 201
    declarator                     shift and go to state 543
    member_declarator              shift and go to state 439
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    name                           shift and go to state 206
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93

state 432

    (274) member_declaration -> member_declarator_list . SEMICOLON
    (281) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 545
    COMMA           shift and go to state 546


state 433

    (276) member_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 276 (member_declaration -> SEMICOLON .)
    PRIVATE         reduce using rule 276 (member_declaration -> SEMICOLON .)
    PROTECTED       reduce using rule 276 (member_declaration -> SEMICOLON .)
    PUBLIC          reduce using rule 276 (member_declaration -> SEMICOLON .)
    TYPEDEF         reduce using rule 276 (member_declaration -> SEMICOLON .)
    IDENTIFIER      reduce using rule 276 (member_declaration -> SEMICOLON .)
    COLON           reduce using rule 276 (member_declaration -> SEMICOLON .)
    LPAREN          reduce using rule 276 (member_declaration -> SEMICOLON .)
    AUTO            reduce using rule 276 (member_declaration -> SEMICOLON .)
    STATIC          reduce using rule 276 (member_declaration -> SEMICOLON .)
    EXTERN          reduce using rule 276 (member_declaration -> SEMICOLON .)
    CONST           reduce using rule 276 (member_declaration -> SEMICOLON .)
    VOLATILE        reduce using rule 276 (member_declaration -> SEMICOLON .)
    INLINE          reduce using rule 276 (member_declaration -> SEMICOLON .)
    VIRTUAL         reduce using rule 276 (member_declaration -> SEMICOLON .)
    BNOP            reduce using rule 276 (member_declaration -> SEMICOLON .)
    MULTOP          reduce using rule 276 (member_declaration -> SEMICOLON .)
    BANDOP          reduce using rule 276 (member_declaration -> SEMICOLON .)
    CHAR            reduce using rule 276 (member_declaration -> SEMICOLON .)
    SHORT           reduce using rule 276 (member_declaration -> SEMICOLON .)
    INT             reduce using rule 276 (member_declaration -> SEMICOLON .)
    LONG            reduce using rule 276 (member_declaration -> SEMICOLON .)
    SIGNED          reduce using rule 276 (member_declaration -> SEMICOLON .)
    UNSIGNED        reduce using rule 276 (member_declaration -> SEMICOLON .)
    FLOAT           reduce using rule 276 (member_declaration -> SEMICOLON .)
    DOUBLE          reduce using rule 276 (member_declaration -> SEMICOLON .)
    VOID            reduce using rule 276 (member_declaration -> SEMICOLON .)
    ENUM            reduce using rule 276 (member_declaration -> SEMICOLON .)
    DOUBLECOLON     reduce using rule 276 (member_declaration -> SEMICOLON .)
    CLASS           reduce using rule 276 (member_declaration -> SEMICOLON .)
    STRUCT          reduce using rule 276 (member_declaration -> SEMICOLON .)
    UNION           reduce using rule 276 (member_declaration -> SEMICOLON .)
    OPERATOR        reduce using rule 276 (member_declaration -> SEMICOLON .)
    RCPAREN         reduce using rule 276 (member_declaration -> SEMICOLON .)


state 434

    (277) member_declaration -> function_definition . SEMICOLON
    (278) member_declaration -> function_definition .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 547
    PRIVATE         reduce using rule 278 (member_declaration -> function_definition .)
    PROTECTED       reduce using rule 278 (member_declaration -> function_definition .)
    PUBLIC          reduce using rule 278 (member_declaration -> function_definition .)
    TYPEDEF         reduce using rule 278 (member_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 278 (member_declaration -> function_definition .)
    COLON           reduce using rule 278 (member_declaration -> function_definition .)
    LPAREN          reduce using rule 278 (member_declaration -> function_definition .)
    AUTO            reduce using rule 278 (member_declaration -> function_definition .)
    STATIC          reduce using rule 278 (member_declaration -> function_definition .)
    EXTERN          reduce using rule 278 (member_declaration -> function_definition .)
    CONST           reduce using rule 278 (member_declaration -> function_definition .)
    VOLATILE        reduce using rule 278 (member_declaration -> function_definition .)
    INLINE          reduce using rule 278 (member_declaration -> function_definition .)
    VIRTUAL         reduce using rule 278 (member_declaration -> function_definition .)
    BNOP            reduce using rule 278 (member_declaration -> function_definition .)
    MULTOP          reduce using rule 278 (member_declaration -> function_definition .)
    BANDOP          reduce using rule 278 (member_declaration -> function_definition .)
    CHAR            reduce using rule 278 (member_declaration -> function_definition .)
    SHORT           reduce using rule 278 (member_declaration -> function_definition .)
    INT             reduce using rule 278 (member_declaration -> function_definition .)
    LONG            reduce using rule 278 (member_declaration -> function_definition .)
    SIGNED          reduce using rule 278 (member_declaration -> function_definition .)
    UNSIGNED        reduce using rule 278 (member_declaration -> function_definition .)
    FLOAT           reduce using rule 278 (member_declaration -> function_definition .)
    DOUBLE          reduce using rule 278 (member_declaration -> function_definition .)
    VOID            reduce using rule 278 (member_declaration -> function_definition .)
    ENUM            reduce using rule 278 (member_declaration -> function_definition .)
    DOUBLECOLON     reduce using rule 278 (member_declaration -> function_definition .)
    CLASS           reduce using rule 278 (member_declaration -> function_definition .)
    STRUCT          reduce using rule 278 (member_declaration -> function_definition .)
    UNION           reduce using rule 278 (member_declaration -> function_definition .)
    OPERATOR        reduce using rule 278 (member_declaration -> function_definition .)
    RCPAREN         reduce using rule 278 (member_declaration -> function_definition .)

  ! SEMICOLON       [ reduce using rule 278 (member_declaration -> function_definition .) ]


state 435

    (279) member_declaration -> qualified_name . SEMICOLON
    (130) name -> qualified_name .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 548
    LPAREN          reduce using rule 130 (name -> qualified_name .)
    LSPAREN         reduce using rule 130 (name -> qualified_name .)
    COLON           reduce using rule 130 (name -> qualified_name .)
    EQUAL           reduce using rule 130 (name -> qualified_name .)
    LCPAREN         reduce using rule 130 (name -> qualified_name .)
    COMMA           reduce using rule 130 (name -> qualified_name .)

  ! SEMICOLON       [ reduce using rule 130 (name -> qualified_name .) ]


state 436

    (295) access_specifier -> PRIVATE .

    COLON           reduce using rule 295 (access_specifier -> PRIVATE .)
    VIRTUAL         reduce using rule 295 (access_specifier -> PRIVATE .)
    DOUBLECOLON     reduce using rule 295 (access_specifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 295 (access_specifier -> PRIVATE .)


state 437

    (296) access_specifier -> PROTECTED .

    COLON           reduce using rule 296 (access_specifier -> PROTECTED .)
    VIRTUAL         reduce using rule 296 (access_specifier -> PROTECTED .)
    DOUBLECOLON     reduce using rule 296 (access_specifier -> PROTECTED .)
    IDENTIFIER      reduce using rule 296 (access_specifier -> PROTECTED .)


state 438

    (297) access_specifier -> PUBLIC .

    COLON           reduce using rule 297 (access_specifier -> PUBLIC .)
    VIRTUAL         reduce using rule 297 (access_specifier -> PUBLIC .)
    DOUBLECOLON     reduce using rule 297 (access_specifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 297 (access_specifier -> PUBLIC .)


state 439

    (280) member_declarator_list -> member_declarator .

    SEMICOLON       reduce using rule 280 (member_declarator_list -> member_declarator .)
    COMMA           reduce using rule 280 (member_declarator_list -> member_declarator .)


state 440

    (249) function_definition -> declarator . ctor_initializer fct_body
    (251) function_definition -> declarator . fct_body
    (282) member_declarator -> declarator . pure_specifier
    (283) member_declarator -> declarator .
    (203) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (205) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (206) declarator -> declarator . LSPAREN RSPAREN
    (301) ctor_initializer -> . COLON mem_initializer_list
    (252) fct_body -> . compound_statement
    (286) pure_specifier -> . EQUAL NUMBER
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN

    SEMICOLON       reduce using rule 283 (member_declarator -> declarator .)
    COMMA           reduce using rule 283 (member_declarator -> declarator .)
    LPAREN          shift and go to state 336
    LSPAREN         shift and go to state 244
    COLON           shift and go to state 245
    EQUAL           shift and go to state 550
    LCPAREN         shift and go to state 21

    ctor_initializer               shift and go to state 240
    fct_body                       shift and go to state 241
    pure_specifier                 shift and go to state 549
    compound_statement             shift and go to state 246

state 441

    (131) qualified_name -> qualified_class_name . DOUBLECOLON name
    (178) complete_class_name -> qualified_class_name .

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    DOUBLECOLON     shift and go to state 257
    SEMICOLON       reduce using rule 178 (complete_class_name -> qualified_class_name .)
    TYPEDEF         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    LPAREN          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    IDENTIFIER      reduce using rule 178 (complete_class_name -> qualified_class_name .)
    COLON           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    AUTO            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    STATIC          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    EXTERN          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    CONST           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    VOLATILE        reduce using rule 178 (complete_class_name -> qualified_class_name .)
    INLINE          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    VIRTUAL         reduce using rule 178 (complete_class_name -> qualified_class_name .)
    BNOP            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    MULTOP          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    BANDOP          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    CHAR            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    SHORT           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    INT             reduce using rule 178 (complete_class_name -> qualified_class_name .)
    LONG            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    SIGNED          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    UNSIGNED        reduce using rule 178 (complete_class_name -> qualified_class_name .)
    FLOAT           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    DOUBLE          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    VOID            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    ENUM            reduce using rule 178 (complete_class_name -> qualified_class_name .)
    CLASS           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    STRUCT          reduce using rule 178 (complete_class_name -> qualified_class_name .)
    UNION           reduce using rule 178 (complete_class_name -> qualified_class_name .)
    OPERATOR        reduce using rule 178 (complete_class_name -> qualified_class_name .)

  ! DOUBLECOLON     [ reduce using rule 178 (complete_class_name -> qualified_class_name .) ]


state 442

    (284) member_declarator -> IDENTIFIER . COLON constant_expression
    (5) class_name -> IDENTIFIER .
    (126) name -> IDENTIFIER .
    (7) typedef_name -> IDENTIFIER .

  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 5 (class_name -> IDENTIFIER .)
    COLON           shift and go to state 551
    DOUBLECOLON     reduce using rule 5 (class_name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 5 (class_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 5 (class_name -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (class_name -> IDENTIFIER .)
    AUTO            reduce using rule 5 (class_name -> IDENTIFIER .)
    STATIC          reduce using rule 5 (class_name -> IDENTIFIER .)
    EXTERN          reduce using rule 5 (class_name -> IDENTIFIER .)
    CONST           reduce using rule 5 (class_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 5 (class_name -> IDENTIFIER .)
    INLINE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 5 (class_name -> IDENTIFIER .)
    BNOP            reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 5 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 5 (class_name -> IDENTIFIER .)
    INT             reduce using rule 5 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 5 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 5 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 5 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 5 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 5 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 5 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 5 (class_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 5 (class_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    EQUAL           reduce using rule 5 (class_name -> IDENTIFIER .)
    LCPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    COMMA           reduce using rule 5 (class_name -> IDENTIFIER .)

  ! COLON           [ reduce using rule 5 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]


state 443

    (180) qualified_class_name -> class_name .
    (181) qualified_class_name -> class_name . DOUBLECOLON qualified_class_name
    (219) dname -> class_name .
    (177) qualified_type_name -> class_name . DOUBLECOLON qualified_type_name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 180 (qualified_class_name -> class_name .)
  ! reduce/reduce conflict for COLON resolved using rule 180 (qualified_class_name -> class_name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 180 (qualified_class_name -> class_name .)
    SEMICOLON       reduce using rule 180 (qualified_class_name -> class_name .)
    TYPEDEF         reduce using rule 180 (qualified_class_name -> class_name .)
    LPAREN          reduce using rule 180 (qualified_class_name -> class_name .)
    IDENTIFIER      reduce using rule 180 (qualified_class_name -> class_name .)
    COLON           reduce using rule 180 (qualified_class_name -> class_name .)
    AUTO            reduce using rule 180 (qualified_class_name -> class_name .)
    STATIC          reduce using rule 180 (qualified_class_name -> class_name .)
    EXTERN          reduce using rule 180 (qualified_class_name -> class_name .)
    CONST           reduce using rule 180 (qualified_class_name -> class_name .)
    VOLATILE        reduce using rule 180 (qualified_class_name -> class_name .)
    INLINE          reduce using rule 180 (qualified_class_name -> class_name .)
    VIRTUAL         reduce using rule 180 (qualified_class_name -> class_name .)
    BNOP            reduce using rule 180 (qualified_class_name -> class_name .)
    MULTOP          reduce using rule 180 (qualified_class_name -> class_name .)
    BANDOP          reduce using rule 180 (qualified_class_name -> class_name .)
    CHAR            reduce using rule 180 (qualified_class_name -> class_name .)
    SHORT           reduce using rule 180 (qualified_class_name -> class_name .)
    INT             reduce using rule 180 (qualified_class_name -> class_name .)
    LONG            reduce using rule 180 (qualified_class_name -> class_name .)
    SIGNED          reduce using rule 180 (qualified_class_name -> class_name .)
    UNSIGNED        reduce using rule 180 (qualified_class_name -> class_name .)
    FLOAT           reduce using rule 180 (qualified_class_name -> class_name .)
    DOUBLE          reduce using rule 180 (qualified_class_name -> class_name .)
    VOID            reduce using rule 180 (qualified_class_name -> class_name .)
    ENUM            reduce using rule 180 (qualified_class_name -> class_name .)
    CLASS           reduce using rule 180 (qualified_class_name -> class_name .)
    STRUCT          reduce using rule 180 (qualified_class_name -> class_name .)
    UNION           reduce using rule 180 (qualified_class_name -> class_name .)
    OPERATOR        reduce using rule 180 (qualified_class_name -> class_name .)
    DOUBLECOLON     shift and go to state 552
    LSPAREN         reduce using rule 219 (dname -> class_name .)
    EQUAL           reduce using rule 219 (dname -> class_name .)
    LCPAREN         reduce using rule 219 (dname -> class_name .)
    COMMA           reduce using rule 219 (dname -> class_name .)

  ! DOUBLECOLON     [ reduce using rule 180 (qualified_class_name -> class_name .) ]
  ! LPAREN          [ reduce using rule 219 (dname -> class_name .) ]
  ! COLON           [ reduce using rule 219 (dname -> class_name .) ]
  ! SEMICOLON       [ reduce using rule 219 (dname -> class_name .) ]


state 444

    (182) enum_specifier -> ENUM IDENTIFIER LCPAREN . enum_list RCPAREN
    (184) enum_specifier -> ENUM IDENTIFIER LCPAREN . RCPAREN
    (186) enum_list -> . enumerator
    (187) enum_list -> . enum_list COMMA enumerator
    (188) enumerator -> . IDENTIFIER
    (189) enumerator -> . IDENTIFIER EQUAL constant_expression

    RCPAREN         shift and go to state 554
    IDENTIFIER      shift and go to state 448

    enum_list                      shift and go to state 553
    enumerator                     shift and go to state 447

state 445

    (183) enum_specifier -> ENUM LCPAREN enum_list . RCPAREN
    (187) enum_list -> enum_list . COMMA enumerator

    RCPAREN         shift and go to state 555
    COMMA           shift and go to state 556


state 446

    (185) enum_specifier -> ENUM LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LPAREN          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    AUTO            reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    STATIC          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    EXTERN          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    CONST           reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    INLINE          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BNOP            reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MULTOP          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BANDOP          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    CHAR            reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    SHORT           reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    INT             reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LONG            reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    SIGNED          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    FLOAT           reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    VOID            reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    ENUM            reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DOUBLECOLON     reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    CLASS           reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    STRUCT          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    UNION           reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LSPAREN         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RPAREN          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    EQUAL           reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MULTEQOP        reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DIVEQOP         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MODEQOP         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    PLUSEQOP        reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MINUSEQOP       reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LSHIFTEQOP      reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RSHIFTEQOP      reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BANDEQOP        reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    B_E_OR          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BOREQOP         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DOTSTAR         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    ARROWSTAR       reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DIVOP           reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MODOP           reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LSHIFT          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RSHIFT          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LTCOMP          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    GTCOMP          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LTECOMP         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    GTECOMP         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    EQCOMP          reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    NEQCOMP         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    XOROP           reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    OROP            reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    ANDOP           reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    QUESMARK        reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    COMMA           reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    $end            reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    COLON           reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RSPAREN         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DOT             reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    ARROW           reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 185 (enum_specifier -> ENUM LCPAREN RCPAREN .)


state 447

    (186) enum_list -> enumerator .

    RCPAREN         reduce using rule 186 (enum_list -> enumerator .)
    COMMA           reduce using rule 186 (enum_list -> enumerator .)


state 448

    (188) enumerator -> IDENTIFIER .
    (189) enumerator -> IDENTIFIER . EQUAL constant_expression

    RCPAREN         reduce using rule 188 (enumerator -> IDENTIFIER .)
    COMMA           reduce using rule 188 (enumerator -> IDENTIFIER .)
    EQUAL           shift and go to state 557


state 449

    (263) class_head -> class_key IDENTIFIER base_spec .

    LCPAREN         reduce using rule 263 (class_head -> class_key IDENTIFIER base_spec .)


state 450

    (267) class_head -> class_key class_name base_spec .

    LCPAREN         reduce using rule 267 (class_head -> class_key class_name base_spec .)


state 451

    (287) base_spec -> COLON base_list .
    (289) base_list -> base_list . COMMA base_specifier

    LCPAREN         reduce using rule 287 (base_spec -> COLON base_list .)
    COMMA           shift and go to state 558


state 452

    (288) base_list -> base_specifier .

    COMMA           reduce using rule 288 (base_list -> base_specifier .)
    LCPAREN         reduce using rule 288 (base_list -> base_specifier .)


state 453

    (290) base_specifier -> complete_class_name .

    COMMA           reduce using rule 290 (base_specifier -> complete_class_name .)
    LCPAREN         reduce using rule 290 (base_specifier -> complete_class_name .)


state 454

    (291) base_specifier -> VIRTUAL . access_specifier complete_class_name
    (292) base_specifier -> VIRTUAL . complete_class_name
    (295) access_specifier -> . PRIVATE
    (296) access_specifier -> . PROTECTED
    (297) access_specifier -> . PUBLIC
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    PRIVATE         shift and go to state 436
    PROTECTED       shift and go to state 437
    PUBLIC          shift and go to state 438
    DOUBLECOLON     shift and go to state 210
    IDENTIFIER      shift and go to state 222

    access_specifier               shift and go to state 559
    complete_class_name            shift and go to state 560
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 455

    (293) base_specifier -> access_specifier . VIRTUAL complete_class_name
    (294) base_specifier -> access_specifier . complete_class_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    VIRTUAL         shift and go to state 561
    DOUBLECOLON     shift and go to state 210
    IDENTIFIER      shift and go to state 222

    complete_class_name            shift and go to state 562
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 456

    (36) equality_expression -> equality_expression EQCOMP relational_expression .
    (39) relational_expression -> relational_expression . LTCOMP shift_expression
    (40) relational_expression -> relational_expression . GTCOMP shift_expression
    (41) relational_expression -> relational_expression . LTECOMP shift_expression
    (42) relational_expression -> relational_expression . GTECOMP shift_expression

  ! shift/reduce conflict for GTCOMP resolved as shift
    EQCOMP          reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .)
    NEQCOMP         reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .)
    BANDOP          reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .)
    XOROP           reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .)
    OROP            reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .)
    ANDOP           reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .)
    QUESMARK        reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COMMA           reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .)
    SEMICOLON       reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .)
    $end            reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COLON           reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RPAREN          reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RSPAREN         reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RCPAREN         reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .)
    LTCOMP          shift and go to state 310
    GTCOMP          shift and go to state 311
    LTECOMP         shift and go to state 312
    GTECOMP         shift and go to state 313

  ! GTCOMP          [ reduce using rule 36 (equality_expression -> equality_expression EQCOMP relational_expression .) ]


state 457

    (37) equality_expression -> equality_expression NEQCOMP relational_expression .
    (39) relational_expression -> relational_expression . LTCOMP shift_expression
    (40) relational_expression -> relational_expression . GTCOMP shift_expression
    (41) relational_expression -> relational_expression . LTECOMP shift_expression
    (42) relational_expression -> relational_expression . GTECOMP shift_expression

  ! shift/reduce conflict for GTCOMP resolved as shift
    EQCOMP          reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    NEQCOMP         reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    BANDOP          reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    XOROP           reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    OROP            reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    ANDOP           reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    QUESMARK        reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COMMA           reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    SEMICOLON       reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    $end            reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COLON           reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RPAREN          reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RSPAREN         reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RCPAREN         reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    LTCOMP          shift and go to state 310
    GTCOMP          shift and go to state 311
    LTECOMP         shift and go to state 312
    GTECOMP         shift and go to state 313

  ! GTCOMP          [ reduce using rule 37 (equality_expression -> equality_expression NEQCOMP relational_expression .) ]


state 458

    (39) relational_expression -> relational_expression LTCOMP shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTCOMP          reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LTECOMP         reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTECOMP         reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    EQCOMP          reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    NEQCOMP         reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    BANDOP          reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    XOROP           reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    OROP            reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    ANDOP           reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    QUESMARK        reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COMMA           reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    SEMICOLON       reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    $end            reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COLON           reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RPAREN          reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RSPAREN         reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RCPAREN         reduce using rule 39 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LSHIFT          shift and go to state 314
    RSHIFT          shift and go to state 315


state 459

    (40) relational_expression -> relational_expression GTCOMP shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTCOMP          reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LTECOMP         reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTECOMP         reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    EQCOMP          reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    NEQCOMP         reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    BANDOP          reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    XOROP           reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    OROP            reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    ANDOP           reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    QUESMARK        reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COMMA           reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    SEMICOLON       reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    $end            reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COLON           reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RPAREN          reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RSPAREN         reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RCPAREN         reduce using rule 40 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LSHIFT          shift and go to state 314
    RSHIFT          shift and go to state 315


state 460

    (41) relational_expression -> relational_expression LTECOMP shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTCOMP          reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LTECOMP         reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTECOMP         reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    EQCOMP          reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    NEQCOMP         reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    BANDOP          reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    XOROP           reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    OROP            reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    ANDOP           reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    QUESMARK        reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COMMA           reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    SEMICOLON       reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    $end            reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COLON           reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RPAREN          reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RSPAREN         reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RCPAREN         reduce using rule 41 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LSHIFT          shift and go to state 314
    RSHIFT          shift and go to state 315


state 461

    (42) relational_expression -> relational_expression GTECOMP shift_expression .
    (44) shift_expression -> shift_expression . LSHIFT additive_expression
    (45) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTCOMP          reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LTECOMP         reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTECOMP         reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    EQCOMP          reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    NEQCOMP         reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    BANDOP          reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    XOROP           reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    OROP            reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    ANDOP           reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    QUESMARK        reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COMMA           reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    SEMICOLON       reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    $end            reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COLON           reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RPAREN          reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RSPAREN         reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RCPAREN         reduce using rule 42 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LSHIFT          shift and go to state 314
    RSHIFT          shift and go to state 315


state 462

    (44) shift_expression -> shift_expression LSHIFT additive_expression .
    (47) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (48) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTCOMP          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTCOMP          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTECOMP         reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTECOMP         reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQCOMP          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQCOMP         reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BANDOP          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOROP           reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OROP            reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ANDOP           reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    QUESMARK        reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMICOLON       reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    $end            reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSPAREN         reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RCPAREN         reduce using rule 44 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUSOP          shift and go to state 316
    MINUSOP         shift and go to state 317


state 463

    (45) shift_expression -> shift_expression RSHIFT additive_expression .
    (47) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (48) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTCOMP          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTCOMP          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTECOMP         reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTECOMP         reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQCOMP          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQCOMP         reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BANDOP          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOROP           reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OROP            reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ANDOP           reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    QUESMARK        reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMICOLON       reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    $end            reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSPAREN         reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RCPAREN         reduce using rule 45 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUSOP          shift and go to state 316
    MINUSOP         shift and go to state 317


state 464

    (47) additive_expression -> additive_expression PLUSOP multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (51) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (52) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    BANDOP          reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    XOROP           reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    OROP            reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    ANDOP           reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COMMA           reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    $end            reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COLON           reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RPAREN          reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 47 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MULTOP          shift and go to state 318
    DIVOP           shift and go to state 319
    MODOP           shift and go to state 320


state 465

    (48) additive_expression -> additive_expression MINUSOP multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (51) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (52) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    BANDOP          reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    XOROP           reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    OROP            reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    ANDOP           reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COMMA           reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    $end            reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COLON           reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RPAREN          reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 48 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MULTOP          shift and go to state 318
    DIVOP           shift and go to state 319
    MODOP           shift and go to state 320


state 466

    (50) multiplicative_expression -> multiplicative_expression MULTOP pm_expression .
    (54) pm_expression -> pm_expression . DOTSTAR cast_expression
    (55) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    DIVOP           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    MODOP           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    PLUSOP          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    MINUSOP         reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LSHIFT          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RSHIFT          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LTCOMP          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    GTCOMP          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LTECOMP         reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    GTECOMP         reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    EQCOMP          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    NEQCOMP         reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    BANDOP          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    XOROP           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    OROP            reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    ANDOP           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    QUESMARK        reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    COMMA           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    SEMICOLON       reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    $end            reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    COLON           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RPAREN          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RSPAREN         reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RCPAREN         reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    DOTSTAR         shift and go to state 321
    ARROWSTAR       shift and go to state 322


state 467

    (51) multiplicative_expression -> multiplicative_expression DIVOP pm_expression .
    (54) pm_expression -> pm_expression . DOTSTAR cast_expression
    (55) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    DIVOP           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    MODOP           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    PLUSOP          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    MINUSOP         reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LSHIFT          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RSHIFT          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LTCOMP          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    GTCOMP          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LTECOMP         reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    GTECOMP         reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    EQCOMP          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    NEQCOMP         reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    BANDOP          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    XOROP           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    OROP            reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    ANDOP           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    QUESMARK        reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    COMMA           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    SEMICOLON       reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    $end            reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    COLON           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RPAREN          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RSPAREN         reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RCPAREN         reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    DOTSTAR         shift and go to state 321
    ARROWSTAR       shift and go to state 322


state 468

    (52) multiplicative_expression -> multiplicative_expression MODOP pm_expression .
    (54) pm_expression -> pm_expression . DOTSTAR cast_expression
    (55) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    DIVOP           reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    MODOP           reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    PLUSOP          reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    MINUSOP         reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LSHIFT          reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RSHIFT          reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LTCOMP          reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    GTCOMP          reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LTECOMP         reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    GTECOMP         reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    EQCOMP          reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    NEQCOMP         reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    BANDOP          reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    XOROP           reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    OROP            reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    ANDOP           reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    QUESMARK        reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    COMMA           reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    SEMICOLON       reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    $end            reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    COLON           reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RPAREN          reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RSPAREN         reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RCPAREN         reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    DOTSTAR         shift and go to state 321
    ARROWSTAR       shift and go to state 322


state 469

    (54) pm_expression -> pm_expression DOTSTAR cast_expression .

    DOTSTAR         reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    ARROWSTAR       reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MULTOP          reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    DIVOP           reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MODOP           reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    PLUSOP          reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MINUSOP         reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LSHIFT          reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RSHIFT          reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LTCOMP          reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    GTCOMP          reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LTECOMP         reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    GTECOMP         reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    EQCOMP          reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    NEQCOMP         reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    BANDOP          reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    XOROP           reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    OROP            reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    ANDOP           reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    QUESMARK        reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    COMMA           reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    SEMICOLON       reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    $end            reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    COLON           reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RPAREN          reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RSPAREN         reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RCPAREN         reduce using rule 54 (pm_expression -> pm_expression DOTSTAR cast_expression .)


state 470

    (55) pm_expression -> pm_expression ARROWSTAR cast_expression .

    DOTSTAR         reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    ARROWSTAR       reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MULTOP          reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    DIVOP           reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MODOP           reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    PLUSOP          reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MINUSOP         reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LSHIFT          reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RSHIFT          reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LTCOMP          reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    GTCOMP          reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LTECOMP         reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    GTECOMP         reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    EQCOMP          reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    NEQCOMP         reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    BANDOP          reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    XOROP           reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    OROP            reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    ANDOP           reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    QUESMARK        reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    COMMA           reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    SEMICOLON       reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    $end            reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    COLON           reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RPAREN          reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RSPAREN         reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RCPAREN         reduce using rule 55 (pm_expression -> pm_expression ARROWSTAR cast_expression .)


state 471

    (356) labeled_statement -> CASE constant_expression COLON statement .

    $end            reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    RCPAREN         reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    LCPAREN         reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    TRY             reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    ASM             reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    TEMPLATE        reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    EXTERN          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    DPLUSOP         reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    DMINUSOP        reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    MULTOP          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    BANDOP          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUSOP          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUSOP         reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    NOTSYM          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    BNOP            reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLECOLON     reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    NEW             reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    DELETE          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    VOLATILE        reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    INLINE          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    VIRTUAL         reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    THIS            reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    ENUM            reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    NUMBER          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    CLASS           reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    UNION           reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    OPERATOR        reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 356 (labeled_statement -> CASE constant_expression COLON statement .)


state 472

    (364) selection_statement -> IF LPAREN expression RPAREN . statement
    (365) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 153
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 154
    statement                      shift and go to state 563
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 473

    (57) cast_expression -> LPAREN type_name RPAREN cast_expression .

    DOTSTAR         reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ARROWSTAR       reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTOP          reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVOP           reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODOP           reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSOP          reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSOP         reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTCOMP          reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTCOMP          reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTECOMP         reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTECOMP         reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQCOMP          reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NEQCOMP         reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDOP          reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOROP           reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OROP            reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDOP           reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    QUESMARK        reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMICOLON       reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    $end            reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUAL           reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTEQOP        reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQOP         reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQOP         reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQOP        reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQOP       reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQOP      reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQOP      reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDEQOP        reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    B_E_OR          reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BOREQOP         reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSPAREN         reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RCPAREN         reduce using rule 57 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 474

    (229) abstract_declarator -> abstract_declarator LPAREN . argument_declaration_list RPAREN cv_qualifier_list
    (231) abstract_declarator -> abstract_declarator LPAREN . argument_declaration_list RPAREN
    (238) argument_declaration_list -> . arg_declaration_list
    (239) argument_declaration_list -> .
    (240) arg_declaration_list -> . argument_declaration
    (241) arg_declaration_list -> . arg_declaration_list COMMA argument_declaration
    (242) argument_declaration -> . decl_specifiers declarator
    (243) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (244) argument_declaration -> . decl_specifiers abstract_declarator
    (245) argument_declaration -> . decl_specifiers
    (246) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (247) argument_declaration -> . decl_specifiers EQUAL expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    RPAREN          reduce using rule 239 (argument_declaration_list -> .)
    TYPEDEF         shift and go to state 87
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    EXTERN          shift and go to state 204
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    IDENTIFIER      shift and go to state 235

    argument_declaration_list      shift and go to state 564
    arg_declaration_list           shift and go to state 398
    argument_declaration           shift and go to state 399
    decl_specifiers                shift and go to state 400
    decl_specifier                 shift and go to state 62
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 236
    typedef_name                   shift and go to state 148

state 475

    (233) abstract_declarator -> abstract_declarator LSPAREN . constant_expression RSPAREN
    (235) abstract_declarator -> abstract_declarator LSPAREN . RSPAREN
    (190) constant_expression -> . conditional_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    RSPAREN         shift and go to state 566
    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    constant_expression            shift and go to state 565
    conditional_expression         shift and go to state 134
    logical_OR_expression          shift and go to state 34
    logical_AND_expression         shift and go to state 49
    inclusive_OR_expression        shift and go to state 68
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 476

    (227) abstract_declarator -> ptr_operator abstract_declarator .
    (229) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (231) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (233) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (235) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    RPAREN          reduce using rule 227 (abstract_declarator -> ptr_operator abstract_declarator .)
    EQUAL           reduce using rule 227 (abstract_declarator -> ptr_operator abstract_declarator .)
    COMMA           reduce using rule 227 (abstract_declarator -> ptr_operator abstract_declarator .)
    GTCOMP          reduce using rule 227 (abstract_declarator -> ptr_operator abstract_declarator .)
    LPAREN          shift and go to state 474
    LSPAREN         shift and go to state 475

  ! LPAREN          [ reduce using rule 227 (abstract_declarator -> ptr_operator abstract_declarator .) ]
  ! LSPAREN         [ reduce using rule 227 (abstract_declarator -> ptr_operator abstract_declarator .) ]


state 477

    (230) abstract_declarator -> LPAREN argument_declaration_list . RPAREN cv_qualifier_list
    (232) abstract_declarator -> LPAREN argument_declaration_list . RPAREN

    RPAREN          shift and go to state 567


state 478

    (237) abstract_declarator -> LPAREN abstract_declarator . RPAREN
    (229) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (231) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (233) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (235) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RPAREN          shift and go to state 568
    LPAREN          shift and go to state 474
    LSPAREN         shift and go to state 475


state 479

    (180) qualified_class_name -> class_name .
    (181) qualified_class_name -> class_name . DOUBLECOLON qualified_class_name
    (177) qualified_type_name -> class_name . DOUBLECOLON qualified_type_name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    EQUAL           reduce using rule 180 (qualified_class_name -> class_name .)
    LPAREN          reduce using rule 180 (qualified_class_name -> class_name .)
    LSPAREN         reduce using rule 180 (qualified_class_name -> class_name .)
    TYPEDEF         reduce using rule 180 (qualified_class_name -> class_name .)
    BNOP            reduce using rule 180 (qualified_class_name -> class_name .)
    MULTOP          reduce using rule 180 (qualified_class_name -> class_name .)
    BANDOP          reduce using rule 180 (qualified_class_name -> class_name .)
    AUTO            reduce using rule 180 (qualified_class_name -> class_name .)
    STATIC          reduce using rule 180 (qualified_class_name -> class_name .)
    EXTERN          reduce using rule 180 (qualified_class_name -> class_name .)
    CONST           reduce using rule 180 (qualified_class_name -> class_name .)
    VOLATILE        reduce using rule 180 (qualified_class_name -> class_name .)
    INLINE          reduce using rule 180 (qualified_class_name -> class_name .)
    VIRTUAL         reduce using rule 180 (qualified_class_name -> class_name .)
    IDENTIFIER      reduce using rule 180 (qualified_class_name -> class_name .)
    CHAR            reduce using rule 180 (qualified_class_name -> class_name .)
    SHORT           reduce using rule 180 (qualified_class_name -> class_name .)
    INT             reduce using rule 180 (qualified_class_name -> class_name .)
    LONG            reduce using rule 180 (qualified_class_name -> class_name .)
    SIGNED          reduce using rule 180 (qualified_class_name -> class_name .)
    UNSIGNED        reduce using rule 180 (qualified_class_name -> class_name .)
    FLOAT           reduce using rule 180 (qualified_class_name -> class_name .)
    DOUBLE          reduce using rule 180 (qualified_class_name -> class_name .)
    VOID            reduce using rule 180 (qualified_class_name -> class_name .)
    ENUM            reduce using rule 180 (qualified_class_name -> class_name .)
    OPERATOR        reduce using rule 180 (qualified_class_name -> class_name .)
    CLASS           reduce using rule 180 (qualified_class_name -> class_name .)
    STRUCT          reduce using rule 180 (qualified_class_name -> class_name .)
    UNION           reduce using rule 180 (qualified_class_name -> class_name .)
    COMMA           reduce using rule 180 (qualified_class_name -> class_name .)
    RPAREN          reduce using rule 180 (qualified_class_name -> class_name .)
    SEMICOLON       reduce using rule 180 (qualified_class_name -> class_name .)
    COLON           reduce using rule 180 (qualified_class_name -> class_name .)
    DOUBLECOLON     shift and go to state 552

  ! DOUBLECOLON     [ reduce using rule 180 (qualified_class_name -> class_name .) ]


state 480

    (5) class_name -> IDENTIFIER .
    (7) typedef_name -> IDENTIFIER .

  ! reduce/reduce conflict for EQUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 5 (class_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 5 (class_name -> IDENTIFIER .)
    EQUAL           reduce using rule 5 (class_name -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 5 (class_name -> IDENTIFIER .)
    BNOP            reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    AUTO            reduce using rule 5 (class_name -> IDENTIFIER .)
    STATIC          reduce using rule 5 (class_name -> IDENTIFIER .)
    EXTERN          reduce using rule 5 (class_name -> IDENTIFIER .)
    CONST           reduce using rule 5 (class_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 5 (class_name -> IDENTIFIER .)
    INLINE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 5 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 5 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 5 (class_name -> IDENTIFIER .)
    INT             reduce using rule 5 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 5 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 5 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 5 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 5 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 5 (class_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 5 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 5 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 5 (class_name -> IDENTIFIER .)
    COMMA           reduce using rule 5 (class_name -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 5 (class_name -> IDENTIFIER .)
    COLON           reduce using rule 5 (class_name -> IDENTIFIER .)
    LCPAREN         reduce using rule 7 (typedef_name -> IDENTIFIER .)

  ! EQUAL           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]


state 481

    (234) abstract_declarator -> LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 569


state 482

    (236) abstract_declarator -> LSPAREN RSPAREN .

    LPAREN          reduce using rule 236 (abstract_declarator -> LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 236 (abstract_declarator -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 236 (abstract_declarator -> LSPAREN RSPAREN .)
    EQUAL           reduce using rule 236 (abstract_declarator -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 236 (abstract_declarator -> LSPAREN RSPAREN .)
    GTCOMP          reduce using rule 236 (abstract_declarator -> LSPAREN RSPAREN .)


state 483

    (366) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 153
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 154
    statement                      shift and go to state 570
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 484

    (367) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 153
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 154
    statement                      shift and go to state 571
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 485

    (368) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 572
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 486

    (369) iteration_statement -> FOR LPAREN for_init_statement expression . SEMICOLON expression RPAREN statement
    (371) iteration_statement -> FOR LPAREN for_init_statement expression . SEMICOLON RPAREN statement
    (9) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 573
    COMMA           shift and go to state 118


state 487

    (370) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . expression RPAREN statement
    (372) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . RPAREN statement
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 575
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 574
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 488

    (394) handler_list -> handler handler_list .

    $end            reduce using rule 394 (handler_list -> handler handler_list .)
    RCPAREN         reduce using rule 394 (handler_list -> handler handler_list .)
    IDENTIFIER      reduce using rule 394 (handler_list -> handler handler_list .)
    CASE            reduce using rule 394 (handler_list -> handler handler_list .)
    DEFAULT         reduce using rule 394 (handler_list -> handler handler_list .)
    SEMICOLON       reduce using rule 394 (handler_list -> handler handler_list .)
    LCPAREN         reduce using rule 394 (handler_list -> handler handler_list .)
    IF              reduce using rule 394 (handler_list -> handler handler_list .)
    SWITCH          reduce using rule 394 (handler_list -> handler handler_list .)
    WHILE           reduce using rule 394 (handler_list -> handler handler_list .)
    DO              reduce using rule 394 (handler_list -> handler handler_list .)
    FOR             reduce using rule 394 (handler_list -> handler handler_list .)
    BREAK           reduce using rule 394 (handler_list -> handler handler_list .)
    CONTINUE        reduce using rule 394 (handler_list -> handler handler_list .)
    RETURN          reduce using rule 394 (handler_list -> handler handler_list .)
    GOTO            reduce using rule 394 (handler_list -> handler handler_list .)
    TRY             reduce using rule 394 (handler_list -> handler handler_list .)
    ASM             reduce using rule 394 (handler_list -> handler handler_list .)
    TEMPLATE        reduce using rule 394 (handler_list -> handler handler_list .)
    EXTERN          reduce using rule 394 (handler_list -> handler handler_list .)
    DPLUSOP         reduce using rule 394 (handler_list -> handler handler_list .)
    DMINUSOP        reduce using rule 394 (handler_list -> handler handler_list .)
    SIZEOF          reduce using rule 394 (handler_list -> handler handler_list .)
    TYPEDEF         reduce using rule 394 (handler_list -> handler handler_list .)
    LPAREN          reduce using rule 394 (handler_list -> handler handler_list .)
    MULTOP          reduce using rule 394 (handler_list -> handler handler_list .)
    BANDOP          reduce using rule 394 (handler_list -> handler handler_list .)
    PLUSOP          reduce using rule 394 (handler_list -> handler handler_list .)
    MINUSOP         reduce using rule 394 (handler_list -> handler handler_list .)
    NOTSYM          reduce using rule 394 (handler_list -> handler handler_list .)
    BNOP            reduce using rule 394 (handler_list -> handler handler_list .)
    DOUBLECOLON     reduce using rule 394 (handler_list -> handler handler_list .)
    NEW             reduce using rule 394 (handler_list -> handler handler_list .)
    DELETE          reduce using rule 394 (handler_list -> handler handler_list .)
    AUTO            reduce using rule 394 (handler_list -> handler handler_list .)
    STATIC          reduce using rule 394 (handler_list -> handler handler_list .)
    CONST           reduce using rule 394 (handler_list -> handler handler_list .)
    VOLATILE        reduce using rule 394 (handler_list -> handler handler_list .)
    INLINE          reduce using rule 394 (handler_list -> handler handler_list .)
    VIRTUAL         reduce using rule 394 (handler_list -> handler handler_list .)
    THIS            reduce using rule 394 (handler_list -> handler handler_list .)
    CHAR            reduce using rule 394 (handler_list -> handler handler_list .)
    SHORT           reduce using rule 394 (handler_list -> handler handler_list .)
    INT             reduce using rule 394 (handler_list -> handler handler_list .)
    LONG            reduce using rule 394 (handler_list -> handler handler_list .)
    SIGNED          reduce using rule 394 (handler_list -> handler handler_list .)
    UNSIGNED        reduce using rule 394 (handler_list -> handler handler_list .)
    FLOAT           reduce using rule 394 (handler_list -> handler handler_list .)
    DOUBLE          reduce using rule 394 (handler_list -> handler handler_list .)
    VOID            reduce using rule 394 (handler_list -> handler handler_list .)
    ENUM            reduce using rule 394 (handler_list -> handler handler_list .)
    NUMBER          reduce using rule 394 (handler_list -> handler handler_list .)
    STRING          reduce using rule 394 (handler_list -> handler handler_list .)
    CLASS           reduce using rule 394 (handler_list -> handler handler_list .)
    STRUCT          reduce using rule 394 (handler_list -> handler handler_list .)
    UNION           reduce using rule 394 (handler_list -> handler handler_list .)
    OPERATOR        reduce using rule 394 (handler_list -> handler handler_list .)
    ELSE            reduce using rule 394 (handler_list -> handler handler_list .)


state 489

    (396) handler -> CATCH LPAREN . exception_declaration RPAREN compound_statement
    (397) exception_declaration -> . type_specifier_list declarator
    (398) exception_declaration -> . type_specifier_list abstract_declarator
    (399) exception_declaration -> . type_specifier_list
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    IDENTIFIER      shift and go to state 235

    exception_declaration          shift and go to state 576
    type_specifier_list            shift and go to state 577
    type_specifier                 shift and go to state 171
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 236
    typedef_name                   shift and go to state 148

state 490

    (24) conditional_expression -> logical_OR_expression QUESMARK expression COLON . conditional_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    logical_OR_expression          shift and go to state 34
    conditional_expression         shift and go to state 578
    logical_AND_expression         shift and go to state 49
    inclusive_OR_expression        shift and go to state 68
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 491

    (108) postfix_expression -> postfix_expression LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOT             reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROW           reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DPLUSOP         reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DMINUSOP        reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    B_E_OR          reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    OROP            reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    $end            reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COLON           reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 108 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)


state 492

    (109) postfix_expression -> postfix_expression LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOT             reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    B_E_OR          reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    OROP            reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    $end            reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COLON           reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 109 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)


state 493

    (118) expression_list -> expression_list COMMA . assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    assignment_expression          shift and go to state 579
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 494

    (63) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    EQUAL           reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    B_E_OR          reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODOP           reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOROP           reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OROP            reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    $end            reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 63 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 495

    (248) function_definition -> decl_specifiers declarator ctor_initializer fct_body .

    $end            reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    RCPAREN         reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    IDENTIFIER      reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    CASE            reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    DEFAULT         reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    SEMICOLON       reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    LCPAREN         reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    IF              reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    SWITCH          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    WHILE           reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    DO              reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    FOR             reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    BREAK           reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    CONTINUE        reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    RETURN          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    GOTO            reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    TRY             reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    ASM             reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    TEMPLATE        reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    EXTERN          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    DPLUSOP         reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    DMINUSOP        reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    SIZEOF          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    TYPEDEF         reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    LPAREN          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    MULTOP          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    BANDOP          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    PLUSOP          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    MINUSOP         reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    NOTSYM          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    BNOP            reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    DOUBLECOLON     reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    NEW             reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    DELETE          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    AUTO            reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    STATIC          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    CONST           reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    VOLATILE        reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    INLINE          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    VIRTUAL         reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    THIS            reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    CHAR            reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    SHORT           reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    INT             reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    LONG            reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    SIGNED          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    UNSIGNED        reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    FLOAT           reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    DOUBLE          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    VOID            reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    ENUM            reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    NUMBER          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    STRING          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    CLASS           reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    STRUCT          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    UNION           reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    OPERATOR        reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    ELSE            reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    PRIVATE         reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    PROTECTED       reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    PUBLIC          reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    COLON           reduce using rule 248 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)


state 496

    (111) postfix_expression -> simple_type_name LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DOT             reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    B_E_OR          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    OROP            reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    $end            reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    COLON           reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 111 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)


state 497

    (72) allocation_expression -> DOUBLECOLON NEW placement new_type_name . new_initializer
    (76) allocation_expression -> DOUBLECOLON NEW placement new_type_name .
    (101) new_initializer -> . LPAREN initializer_list RPAREN
    (102) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    MULTEQOP        reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    DIVEQOP         reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    MODEQOP         reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    PLUSEQOP        reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    MINUSEQOP       reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    LSHIFTEQOP      reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    RSHIFTEQOP      reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    BANDEQOP        reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    B_E_OR          reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    BOREQOP         reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    DOTSTAR         reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    ARROWSTAR       reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    MULTOP          reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    DIVOP           reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    MODOP           reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    PLUSOP          reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    MINUSOP         reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    LSHIFT          reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    RSHIFT          reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    LTCOMP          reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    GTCOMP          reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    LTECOMP         reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    GTECOMP         reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    EQCOMP          reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    NEQCOMP         reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    BANDOP          reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    XOROP           reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    OROP            reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    ANDOP           reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    QUESMARK        reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    COMMA           reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    SEMICOLON       reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    $end            reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    COLON           reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    RPAREN          reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    RSPAREN         reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    RCPAREN         reduce using rule 76 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    LPAREN          shift and go to state 386

    new_initializer                shift and go to state 580

state 498

    (80) allocation_expression -> DOUBLECOLON NEW placement LPAREN . type_name RPAREN new_initializer
    (84) allocation_expression -> DOUBLECOLON NEW placement LPAREN . type_name RPAREN
    (223) type_name -> . type_specifier_list abstract_declarator
    (224) type_name -> . type_specifier_list
    (225) type_specifier_list -> . type_specifier type_specifier_list
    (226) type_specifier_list -> . type_specifier
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    IDENTIFIER      shift and go to state 235

    type_name                      shift and go to state 581
    type_specifier_list            shift and go to state 166
    type_specifier                 shift and go to state 171
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 236
    typedef_name                   shift and go to state 148

state 499

    (74) allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .

    EQUAL           reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    MULTEQOP        reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    DIVEQOP         reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    MODEQOP         reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    BANDEQOP        reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    B_E_OR          reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    BOREQOP         reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    DOTSTAR         reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    MULTOP          reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    DIVOP           reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    MODOP           reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    PLUSOP          reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    MINUSOP         reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    LSHIFT          reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    RSHIFT          reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    LTCOMP          reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    GTCOMP          reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    LTECOMP         reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    GTECOMP         reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    EQCOMP          reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    NEQCOMP         reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    BANDOP          reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    XOROP           reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    OROP            reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    ANDOP           reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    QUESMARK        reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    COMMA           reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    SEMICOLON       reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    $end            reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    COLON           reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    RPAREN          reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    RSPAREN         reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    RCPAREN         reduce using rule 74 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)


state 500

    (82) allocation_expression -> DOUBLECOLON NEW LPAREN type_name . RPAREN new_initializer
    (86) allocation_expression -> DOUBLECOLON NEW LPAREN type_name . RPAREN

    RPAREN          shift and go to state 582


state 501

    (105) deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN . cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    cast_expression                shift and go to state 583
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 502

    (73) allocation_expression -> NEW placement new_type_name new_initializer .

    EQUAL           reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MULTEQOP        reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    DIVEQOP         reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MODEQOP         reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    BANDEQOP        reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    B_E_OR          reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    BOREQOP         reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    DOTSTAR         reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MULTOP          reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    DIVOP           reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MODOP           reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    PLUSOP          reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MINUSOP         reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LSHIFT          reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RSHIFT          reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LTCOMP          reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    GTCOMP          reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LTECOMP         reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    GTECOMP         reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    EQCOMP          reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    NEQCOMP         reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    BANDOP          reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    XOROP           reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    OROP            reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    ANDOP           reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    QUESMARK        reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    COMMA           reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    SEMICOLON       reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    $end            reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    COLON           reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RPAREN          reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RSPAREN         reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RCPAREN         reduce using rule 73 (allocation_expression -> NEW placement new_type_name new_initializer .)


state 503

    (81) allocation_expression -> NEW placement LPAREN type_name . RPAREN new_initializer
    (85) allocation_expression -> NEW placement LPAREN type_name . RPAREN

    RPAREN          shift and go to state 584


state 504

    (101) new_initializer -> LPAREN initializer_list . RPAREN
    (258) initializer_list -> initializer_list . COMMA assignment_expression

    RPAREN          shift and go to state 585
    COMMA           shift and go to state 586


state 505

    (102) new_initializer -> LPAREN RPAREN .

    EQUAL           reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    MULTEQOP        reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    DIVEQOP         reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    MODEQOP         reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    BANDEQOP        reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    B_E_OR          reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    BOREQOP         reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    DOTSTAR         reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    MULTOP          reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    DIVOP           reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    MODOP           reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    PLUSOP          reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    MINUSOP         reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    LSHIFT          reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    RSHIFT          reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    LTCOMP          reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    GTCOMP          reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    LTECOMP         reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    GTECOMP         reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    EQCOMP          reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    NEQCOMP         reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    BANDOP          reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    XOROP           reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    OROP            reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    ANDOP           reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    QUESMARK        reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    COMMA           reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    $end            reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    COLON           reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    RPAREN          reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    RSPAREN         reduce using rule 102 (new_initializer -> LPAREN RPAREN .)
    RCPAREN         reduce using rule 102 (new_initializer -> LPAREN RPAREN .)


state 506

    (257) initializer_list -> assignment_expression .

    RPAREN          reduce using rule 257 (initializer_list -> assignment_expression .)
    COMMA           reduce using rule 257 (initializer_list -> assignment_expression .)
    RCPAREN         reduce using rule 257 (initializer_list -> assignment_expression .)


state 507

    (259) initializer_list -> LCPAREN . initializer_list RCPAREN
    (260) initializer_list -> LCPAREN . initializer_list COMMA RCPAREN
    (257) initializer_list -> . assignment_expression
    (258) initializer_list -> . initializer_list COMMA assignment_expression
    (259) initializer_list -> . LCPAREN initializer_list RCPAREN
    (260) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 507
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    initializer_list               shift and go to state 587
    assignment_expression          shift and go to state 506
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 508

    (83) allocation_expression -> NEW LPAREN type_name RPAREN . new_initializer
    (87) allocation_expression -> NEW LPAREN type_name RPAREN .
    (101) new_initializer -> . LPAREN initializer_list RPAREN
    (102) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    B_E_OR          reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODOP           reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    XOROP           reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    OROP            reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COMMA           reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    $end            reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COLON           reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 87 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 386

    new_initializer                shift and go to state 588

state 509

    (88) placement -> LPAREN expression_list RPAREN .

    LPAREN          reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    CONST           reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    VOLATILE        reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    CHAR            reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    SHORT           reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    INT             reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    LONG            reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    SIGNED          reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    UNSIGNED        reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    FLOAT           reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    DOUBLE          reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    VOID            reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    ENUM            reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    DOUBLECOLON     reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    CLASS           reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    STRUCT          reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    UNION           reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)
    IDENTIFIER      reduce using rule 88 (placement -> LPAREN expression_list RPAREN .)


state 510

    (99) new_declarator -> new_declarator LSPAREN . expression RSPAREN
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 589
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 511

    (91) new_declarator -> MULTOP cv_qualifier_list . new_declarator
    (93) new_declarator -> MULTOP cv_qualifier_list .
    (91) new_declarator -> . MULTOP cv_qualifier_list new_declarator
    (92) new_declarator -> . MULTOP new_declarator
    (93) new_declarator -> . MULTOP cv_qualifier_list
    (94) new_declarator -> . MULTOP
    (95) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator
    (96) new_declarator -> . complete_class_name DOUBLECOLON MULTOP new_declarator
    (97) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (98) new_declarator -> . complete_class_name DOUBLECOLON MULTOP
    (99) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (100) new_declarator -> . LSPAREN expression RSPAREN
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

  ! shift/reduce conflict for MULTOP resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    EQUAL           reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    MULTEQOP        reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    DIVEQOP         reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    MODEQOP         reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    PLUSEQOP        reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    MINUSEQOP       reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    LSHIFTEQOP      reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    RSHIFTEQOP      reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    BANDEQOP        reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    B_E_OR          reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    BOREQOP         reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    DOTSTAR         reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    ARROWSTAR       reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    DIVOP           reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    MODOP           reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    PLUSOP          reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    MINUSOP         reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    LSHIFT          reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    RSHIFT          reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    LTCOMP          reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    GTCOMP          reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    LTECOMP         reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    GTECOMP         reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    EQCOMP          reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    NEQCOMP         reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    BANDOP          reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    XOROP           reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    OROP            reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    ANDOP           reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    QUESMARK        reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    COMMA           reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    SEMICOLON       reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    $end            reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    COLON           reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    RPAREN          reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    RSPAREN         reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    RCPAREN         reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .)
    MULTOP          shift and go to state 390
    LSPAREN         shift and go to state 392
    DOUBLECOLON     shift and go to state 210
    IDENTIFIER      shift and go to state 222

  ! LSPAREN         [ reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .) ]
  ! MULTOP          [ reduce using rule 93 (new_declarator -> MULTOP cv_qualifier_list .) ]

    new_declarator                 shift and go to state 590
    complete_class_name            shift and go to state 391
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 512

    (92) new_declarator -> MULTOP new_declarator .
    (99) new_declarator -> new_declarator . LSPAREN expression RSPAREN

  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    EQUAL           reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    MULTEQOP        reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    DIVEQOP         reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    MODEQOP         reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    PLUSEQOP        reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    MINUSEQOP       reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    LSHIFTEQOP      reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    RSHIFTEQOP      reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    BANDEQOP        reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    B_E_OR          reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    BOREQOP         reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    DOTSTAR         reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    ARROWSTAR       reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    MULTOP          reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    DIVOP           reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    MODOP           reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    PLUSOP          reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    MINUSOP         reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    LSHIFT          reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    RSHIFT          reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    LTCOMP          reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    GTCOMP          reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    LTECOMP         reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    GTECOMP         reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    EQCOMP          reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    NEQCOMP         reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    BANDOP          reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    XOROP           reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    OROP            reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    ANDOP           reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    QUESMARK        reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    COMMA           reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    SEMICOLON       reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    $end            reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    COLON           reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    RPAREN          reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    RSPAREN         reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    RCPAREN         reduce using rule 92 (new_declarator -> MULTOP new_declarator .)
    LSPAREN         shift and go to state 510

  ! LSPAREN         [ reduce using rule 92 (new_declarator -> MULTOP new_declarator .) ]


state 513

    (95) new_declarator -> complete_class_name DOUBLECOLON . MULTOP cv_qualifier_list new_declarator
    (96) new_declarator -> complete_class_name DOUBLECOLON . MULTOP new_declarator
    (97) new_declarator -> complete_class_name DOUBLECOLON . MULTOP cv_qualifier_list
    (98) new_declarator -> complete_class_name DOUBLECOLON . MULTOP

    MULTOP          shift and go to state 591


state 514

    (100) new_declarator -> LSPAREN expression . RSPAREN
    (9) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 592
    COMMA           shift and go to state 118


state 515

    (106) deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .

    EQUAL           reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    MULTEQOP        reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    DIVEQOP         reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    MODEQOP         reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    PLUSEQOP        reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    MINUSEQOP       reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    LSHIFTEQOP      reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    RSHIFTEQOP      reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    BANDEQOP        reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    B_E_OR          reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    BOREQOP         reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    DOTSTAR         reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    ARROWSTAR       reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    MULTOP          reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    DIVOP           reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    MODOP           reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    PLUSOP          reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    MINUSOP         reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    LSHIFT          reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    RSHIFT          reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    LTCOMP          reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    GTCOMP          reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    LTECOMP         reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    GTECOMP         reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    EQCOMP          reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    NEQCOMP         reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    BANDOP          reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    XOROP           reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    OROP            reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    ANDOP           reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    QUESMARK        reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    COMMA           reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    SEMICOLON       reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    $end            reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    COLON           reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    RPAREN          reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    RSPAREN         reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    RCPAREN         reduce using rule 106 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)


state 516

    (196) asm_declaration -> ASM LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 593


state 517

    (203) declarator -> declarator LPAREN argument_declaration_list RPAREN . cv_qualifier_list
    (204) declarator -> declarator LPAREN argument_declaration_list RPAREN .
    (214) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (215) cv_qualifier_list -> . cv_qualifier
    (216) cv_qualifier -> . CONST
    (217) cv_qualifier -> . VOLATILE

    LPAREN          reduce using rule 204 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    LSPAREN         reduce using rule 204 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    COLON           reduce using rule 204 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    EQUAL           reduce using rule 204 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    LCPAREN         reduce using rule 204 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    SEMICOLON       reduce using rule 204 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    COMMA           reduce using rule 204 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    RPAREN          reduce using rule 204 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    GTCOMP          reduce using rule 204 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    CONST           shift and go to state 218
    VOLATILE        shift and go to state 219

    cv_qualifier_list              shift and go to state 594
    cv_qualifier                   shift and go to state 217

state 518

    (256) initializer -> LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 256 (initializer -> LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 256 (initializer -> LPAREN expression_list RPAREN .)


state 519

    (241) arg_declaration_list -> arg_declaration_list COMMA . argument_declaration
    (242) argument_declaration -> . decl_specifiers declarator
    (243) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (244) argument_declaration -> . decl_specifiers abstract_declarator
    (245) argument_declaration -> . decl_specifiers
    (246) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (247) argument_declaration -> . decl_specifiers EQUAL expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    TYPEDEF         shift and go to state 87
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    EXTERN          shift and go to state 204
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    IDENTIFIER      shift and go to state 235

    argument_declaration           shift and go to state 595
    decl_specifiers                shift and go to state 400
    decl_specifier                 shift and go to state 62
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 236
    typedef_name                   shift and go to state 148

state 520

    (242) argument_declaration -> decl_specifiers declarator .
    (243) argument_declaration -> decl_specifiers declarator . EQUAL expression
    (203) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (205) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (206) declarator -> declarator . LSPAREN RSPAREN

    COMMA           reduce using rule 242 (argument_declaration -> decl_specifiers declarator .)
    RPAREN          reduce using rule 242 (argument_declaration -> decl_specifiers declarator .)
    GTCOMP          reduce using rule 242 (argument_declaration -> decl_specifiers declarator .)
    EQUAL           shift and go to state 596
    LPAREN          shift and go to state 336
    LSPAREN         shift and go to state 244


state 521

    (247) argument_declaration -> decl_specifiers EQUAL . expression
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 597
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 522

    (244) argument_declaration -> decl_specifiers abstract_declarator .
    (246) argument_declaration -> decl_specifiers abstract_declarator . EQUAL expression
    (229) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (231) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (233) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (235) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    COMMA           reduce using rule 244 (argument_declaration -> decl_specifiers abstract_declarator .)
    RPAREN          reduce using rule 244 (argument_declaration -> decl_specifiers abstract_declarator .)
    GTCOMP          reduce using rule 244 (argument_declaration -> decl_specifiers abstract_declarator .)
    EQUAL           shift and go to state 598
    LPAREN          shift and go to state 474
    LSPAREN         shift and go to state 475


state 523

    (202) declarator -> ptr_operator . declarator
    (227) abstract_declarator -> ptr_operator . abstract_declarator
    (228) abstract_declarator -> ptr_operator .
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (227) abstract_declarator -> . ptr_operator abstract_declarator
    (228) abstract_declarator -> . ptr_operator
    (229) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (230) abstract_declarator -> . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (231) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (232) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (233) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (234) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (235) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (236) abstract_declarator -> . LSPAREN RSPAREN
    (237) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    EQUAL           reduce using rule 228 (abstract_declarator -> ptr_operator .)
    COMMA           reduce using rule 228 (abstract_declarator -> ptr_operator .)
    RPAREN          reduce using rule 228 (abstract_declarator -> ptr_operator .)
    GTCOMP          reduce using rule 228 (abstract_declarator -> ptr_operator .)
    LPAREN          shift and go to state 524
    LSPAREN         shift and go to state 342
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    IDENTIFIER      shift and go to state 172
    DOUBLECOLON     shift and go to state 210
    OPERATOR        shift and go to state 105

  ! LPAREN          [ reduce using rule 228 (abstract_declarator -> ptr_operator .) ]
  ! LSPAREN         [ reduce using rule 228 (abstract_declarator -> ptr_operator .) ]

    ptr_operator                   shift and go to state 523
    declarator                     shift and go to state 252
    abstract_declarator            shift and go to state 476
    dname                          shift and go to state 88
    name                           shift and go to state 206
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 253
    complete_class_name            shift and go to state 254
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93

state 524

    (207) declarator -> LPAREN . declarator RPAREN
    (230) abstract_declarator -> LPAREN . argument_declaration_list RPAREN cv_qualifier_list
    (232) abstract_declarator -> LPAREN . argument_declaration_list RPAREN
    (237) abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (238) argument_declaration_list -> . arg_declaration_list
    (239) argument_declaration_list -> .
    (227) abstract_declarator -> . ptr_operator abstract_declarator
    (228) abstract_declarator -> . ptr_operator
    (229) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (230) abstract_declarator -> . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (231) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (232) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (233) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (234) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (235) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (236) abstract_declarator -> . LSPAREN RSPAREN
    (237) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (240) arg_declaration_list -> . argument_declaration
    (241) arg_declaration_list -> . arg_declaration_list COMMA argument_declaration
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (242) argument_declaration -> . decl_specifiers declarator
    (243) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (244) argument_declaration -> . decl_specifiers abstract_declarator
    (245) argument_declaration -> . decl_specifiers
    (246) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (247) argument_declaration -> . decl_specifiers EQUAL expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION

    LPAREN          shift and go to state 524
    RPAREN          reduce using rule 239 (argument_declaration_list -> .)
    LSPAREN         shift and go to state 342
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    IDENTIFIER      shift and go to state 172
    DOUBLECOLON     shift and go to state 210
    OPERATOR        shift and go to state 105
    TYPEDEF         shift and go to state 87
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    EXTERN          shift and go to state 204
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112

    declarator                     shift and go to state 164
    argument_declaration_list      shift and go to state 477
    abstract_declarator            shift and go to state 478
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 523
    arg_declaration_list           shift and go to state 398
    name                           shift and go to state 206
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    argument_declaration           shift and go to state 399
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93
    decl_specifiers                shift and go to state 400
    decl_specifier                 shift and go to state 62
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108

state 525

    (205) declarator -> declarator LSPAREN constant_expression RSPAREN .

    LPAREN          reduce using rule 205 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 205 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    COLON           reduce using rule 205 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    EQUAL           reduce using rule 205 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    LCPAREN         reduce using rule 205 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    SEMICOLON       reduce using rule 205 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 205 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 205 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    GTCOMP          reduce using rule 205 (declarator -> declarator LSPAREN constant_expression RSPAREN .)


state 526

    (303) mem_initializer_list -> mem_initializer COMMA . mem_initializer_list
    (302) mem_initializer_list -> . mem_initializer
    (303) mem_initializer_list -> . mem_initializer COMMA mem_initializer_list
    (304) mem_initializer -> . complete_class_name LPAREN expression_list RPAREN
    (305) mem_initializer -> . complete_class_name LPAREN RPAREN
    (306) mem_initializer -> . IDENTIFIER LPAREN expression_list RPAREN
    (307) mem_initializer -> . IDENTIFIER LPAREN RPAREN
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 406
    DOUBLECOLON     shift and go to state 210

    mem_initializer                shift and go to state 404
    mem_initializer_list           shift and go to state 599
    complete_class_name            shift and go to state 405
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 527

    (304) mem_initializer -> complete_class_name LPAREN . expression_list RPAREN
    (305) mem_initializer -> complete_class_name LPAREN . RPAREN
    (117) expression_list -> . assignment_expression
    (118) expression_list -> . expression_list COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 601
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    complete_class_name            shift and go to state 143
    expression_list                shift and go to state 600
    assignment_expression          shift and go to state 360
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 528

    (306) mem_initializer -> IDENTIFIER LPAREN . expression_list RPAREN
    (307) mem_initializer -> IDENTIFIER LPAREN . RPAREN
    (117) expression_list -> . assignment_expression
    (118) expression_list -> . expression_list COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 603
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression_list                shift and go to state 602
    assignment_expression          shift and go to state 360
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 529

    (254) initializer -> EQUAL LCPAREN initializer_list . RCPAREN
    (255) initializer -> EQUAL LCPAREN initializer_list . COMMA RCPAREN
    (258) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 604
    COMMA           shift and go to state 605


state 530

    (381) template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP . declaration
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 203
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    IDENTIFIER      shift and go to state 172
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    declaration                    shift and go to state 606
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    name                           shift and go to state 206
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93

state 531

    (383) template_argument_list -> template_argument_list COMMA . template_argument
    (384) template_argument -> . type_argument
    (385) template_argument -> . argument_declaration
    (386) type_argument -> . CLASS IDENTIFIER
    (242) argument_declaration -> . decl_specifiers declarator
    (243) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (244) argument_declaration -> . decl_specifiers abstract_declarator
    (245) argument_declaration -> . decl_specifiers
    (246) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (247) argument_declaration -> . decl_specifiers EQUAL expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    CLASS           shift and go to state 413
    TYPEDEF         shift and go to state 87
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    EXTERN          shift and go to state 204
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    IDENTIFIER      shift and go to state 235

    template_argument              shift and go to state 607
    type_argument                  shift and go to state 411
    argument_declaration           shift and go to state 412
    decl_specifiers                shift and go to state 400
    decl_specifier                 shift and go to state 62
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 236
    typedef_name                   shift and go to state 148

state 532

    (386) type_argument -> CLASS IDENTIFIER .

    GTCOMP          reduce using rule 386 (type_argument -> CLASS IDENTIFIER .)
    COMMA           reduce using rule 386 (type_argument -> CLASS IDENTIFIER .)


state 533

    (191) linkage_specification -> EXTERN STRING LCPAREN declaration_list . RCPAREN
    (195) declaration_list -> declaration_list . declaration
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    RCPAREN         shift and go to state 608
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 203
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    IDENTIFIER      shift and go to state 172
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    declaration                    shift and go to state 609
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    name                           shift and go to state 206
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93

state 534

    (192) linkage_specification -> EXTERN STRING LCPAREN RCPAREN .

    $end            reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    CASE            reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    DEFAULT         reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    SEMICOLON       reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    IF              reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    SWITCH          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    WHILE           reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    DO              reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    FOR             reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    BREAK           reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    CONTINUE        reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    RETURN          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    GOTO            reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    TRY             reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    ASM             reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    EXTERN          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    SIZEOF          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    LPAREN          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    MULTOP          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    BANDOP          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    NOTSYM          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    BNOP            reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    DOUBLECOLON     reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    NEW             reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    DELETE          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    AUTO            reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    STATIC          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    CONST           reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    INLINE          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    THIS            reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    CHAR            reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    SHORT           reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    INT             reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    LONG            reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    SIGNED          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    FLOAT           reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    VOID            reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    ENUM            reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    NUMBER          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    STRING          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    CLASS           reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    STRUCT          reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    UNION           reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    ELSE            reduce using rule 192 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)


state 535

    (194) declaration_list -> declaration .

    RCPAREN         reduce using rule 194 (declaration_list -> declaration .)
    ASM             reduce using rule 194 (declaration_list -> declaration .)
    TEMPLATE        reduce using rule 194 (declaration_list -> declaration .)
    EXTERN          reduce using rule 194 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 194 (declaration_list -> declaration .)
    LPAREN          reduce using rule 194 (declaration_list -> declaration .)
    AUTO            reduce using rule 194 (declaration_list -> declaration .)
    STATIC          reduce using rule 194 (declaration_list -> declaration .)
    CONST           reduce using rule 194 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 194 (declaration_list -> declaration .)
    INLINE          reduce using rule 194 (declaration_list -> declaration .)
    VIRTUAL         reduce using rule 194 (declaration_list -> declaration .)
    BNOP            reduce using rule 194 (declaration_list -> declaration .)
    MULTOP          reduce using rule 194 (declaration_list -> declaration .)
    BANDOP          reduce using rule 194 (declaration_list -> declaration .)
    CHAR            reduce using rule 194 (declaration_list -> declaration .)
    SHORT           reduce using rule 194 (declaration_list -> declaration .)
    INT             reduce using rule 194 (declaration_list -> declaration .)
    LONG            reduce using rule 194 (declaration_list -> declaration .)
    SIGNED          reduce using rule 194 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 194 (declaration_list -> declaration .)
    FLOAT           reduce using rule 194 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 194 (declaration_list -> declaration .)
    VOID            reduce using rule 194 (declaration_list -> declaration .)
    ENUM            reduce using rule 194 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 194 (declaration_list -> declaration .)
    DOUBLECOLON     reduce using rule 194 (declaration_list -> declaration .)
    CLASS           reduce using rule 194 (declaration_list -> declaration .)
    STRUCT          reduce using rule 194 (declaration_list -> declaration .)
    UNION           reduce using rule 194 (declaration_list -> declaration .)
    OPERATOR        reduce using rule 194 (declaration_list -> declaration .)


state 536

    (212) ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .

    LPAREN          reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    BNOP            reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MULTOP          reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    BANDOP          reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    IDENTIFIER      reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DOUBLECOLON     reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    OPERATOR        reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LSPAREN         reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RPAREN          reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DOT             reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    ARROW           reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DPLUSOP         reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DMINUSOP        reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    EQUAL           reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MULTEQOP        reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DIVEQOP         reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MODEQOP         reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    PLUSEQOP        reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MINUSEQOP       reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LSHIFTEQOP      reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RSHIFTEQOP      reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    BANDEQOP        reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    B_E_OR          reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    BOREQOP         reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DOTSTAR         reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    ARROWSTAR       reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DIVOP           reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MODOP           reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    PLUSOP          reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MINUSOP         reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LSHIFT          reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RSHIFT          reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LTCOMP          reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    GTCOMP          reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LTECOMP         reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    GTECOMP         reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    EQCOMP          reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    NEQCOMP         reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    XOROP           reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    OROP            reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    ANDOP           reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    QUESMARK        reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    COMMA           reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    SEMICOLON       reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    $end            reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    COLON           reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LCPAREN         reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RSPAREN         reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RCPAREN         reduce using rule 212 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)


state 537

    (261) class_specifier -> class_head LCPAREN member_list RCPAREN .

    SEMICOLON       reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    TYPEDEF         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LPAREN          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    AUTO            reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    STATIC          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    EXTERN          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    CONST           reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    VOLATILE        reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    INLINE          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    VIRTUAL         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BNOP            reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MULTOP          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BANDOP          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    CHAR            reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    SHORT           reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    INT             reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LONG            reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    SIGNED          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    UNSIGNED        reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    FLOAT           reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DOUBLE          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    VOID            reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    ENUM            reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    IDENTIFIER      reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DOUBLECOLON     reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    CLASS           reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    STRUCT          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    UNION           reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    OPERATOR        reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LSPAREN         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RPAREN          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    EQUAL           reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MULTEQOP        reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DIVEQOP         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MODEQOP         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    PLUSEQOP        reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MINUSEQOP       reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LSHIFTEQOP      reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RSHIFTEQOP      reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BANDEQOP        reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    B_E_OR          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BOREQOP         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DOTSTAR         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    ARROWSTAR       reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DIVOP           reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MODOP           reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    PLUSOP          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MINUSOP         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LSHIFT          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RSHIFT          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LTCOMP          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    GTCOMP          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LTECOMP         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    GTECOMP         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    EQCOMP          reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    NEQCOMP         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    XOROP           reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    OROP            reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    ANDOP           reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    QUESMARK        reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    COMMA           reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    $end            reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    COLON           reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RSPAREN         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RCPAREN         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DOT             reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    ARROW           reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DPLUSOP         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DMINUSOP        reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LCPAREN         reduce using rule 261 (class_specifier -> class_head LCPAREN member_list RCPAREN .)


state 538

    (269) member_list -> member_declaration member_list .

    RCPAREN         reduce using rule 269 (member_list -> member_declaration member_list .)


state 539

    (271) member_list -> access_specifier COLON . member_list
    (272) member_list -> access_specifier COLON .
    (269) member_list -> . member_declaration member_list
    (270) member_list -> . member_declaration
    (271) member_list -> . access_specifier COLON member_list
    (272) member_list -> . access_specifier COLON
    (273) member_declaration -> . decl_specifiers member_declarator_list SEMICOLON
    (274) member_declaration -> . member_declarator_list SEMICOLON
    (275) member_declaration -> . decl_specifiers SEMICOLON
    (276) member_declaration -> . SEMICOLON
    (277) member_declaration -> . function_definition SEMICOLON
    (278) member_declaration -> . function_definition
    (279) member_declaration -> . qualified_name SEMICOLON
    (295) access_specifier -> . PRIVATE
    (296) access_specifier -> . PROTECTED
    (297) access_specifier -> . PUBLIC
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (280) member_declarator_list -> . member_declarator
    (281) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (282) member_declarator -> . declarator pure_specifier
    (283) member_declarator -> . declarator
    (284) member_declarator -> . IDENTIFIER COLON constant_expression
    (285) member_declarator -> . COLON constant_expression
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (5) class_name -> . IDENTIFIER
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name

    RCPAREN         reduce using rule 272 (member_list -> access_specifier COLON .)
    SEMICOLON       shift and go to state 433
    PRIVATE         shift and go to state 436
    PROTECTED       shift and go to state 437
    PUBLIC          shift and go to state 438
    TYPEDEF         shift and go to state 87
    IDENTIFIER      shift and go to state 442
    COLON           shift and go to state 430
    LPAREN          shift and go to state 203
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    EXTERN          shift and go to state 204
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    CHAR            shift and go to state 211
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    DOUBLECOLON     shift and go to state 210
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    access_specifier               shift and go to state 429
    member_list                    shift and go to state 610
    member_declaration             shift and go to state 428
    decl_specifiers                shift and go to state 431
    member_declarator_list         shift and go to state 432
    function_definition            shift and go to state 434
    qualified_name                 shift and go to state 435
    decl_specifier                 shift and go to state 62
    member_declarator              shift and go to state 439
    declarator                     shift and go to state 440
    qualified_class_name           shift and go to state 441
    name                           shift and go to state 206
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    class_name                     shift and go to state 443
    simple_type_name               shift and go to state 205
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91

state 540

    (285) member_declarator -> COLON constant_expression .

    SEMICOLON       reduce using rule 285 (member_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 285 (member_declarator -> COLON constant_expression .)


state 541

    (273) member_declaration -> decl_specifiers member_declarator_list . SEMICOLON
    (281) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 611
    COMMA           shift and go to state 546


state 542

    (275) member_declaration -> decl_specifiers SEMICOLON .

    SEMICOLON       reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    PRIVATE         reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    PROTECTED       reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    PUBLIC          reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    TYPEDEF         reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    IDENTIFIER      reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    COLON           reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    LPAREN          reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    AUTO            reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    STATIC          reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    EXTERN          reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    CONST           reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    VOLATILE        reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    INLINE          reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    VIRTUAL         reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    BNOP            reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    MULTOP          reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    BANDOP          reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    CHAR            reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    SHORT           reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    INT             reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    LONG            reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    SIGNED          reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    UNSIGNED        reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    FLOAT           reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    DOUBLE          reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    VOID            reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    ENUM            reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    DOUBLECOLON     reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    CLASS           reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    STRUCT          reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    UNION           reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    OPERATOR        reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)
    RCPAREN         reduce using rule 275 (member_declaration -> decl_specifiers SEMICOLON .)


state 543

    (248) function_definition -> decl_specifiers declarator . ctor_initializer fct_body
    (250) function_definition -> decl_specifiers declarator . fct_body
    (203) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (205) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (206) declarator -> declarator . LSPAREN RSPAREN
    (282) member_declarator -> declarator . pure_specifier
    (283) member_declarator -> declarator .
    (301) ctor_initializer -> . COLON mem_initializer_list
    (252) fct_body -> . compound_statement
    (286) pure_specifier -> . EQUAL NUMBER
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN

    LPAREN          shift and go to state 336
    LSPAREN         shift and go to state 244
    SEMICOLON       reduce using rule 283 (member_declarator -> declarator .)
    COMMA           reduce using rule 283 (member_declarator -> declarator .)
    COLON           shift and go to state 245
    EQUAL           shift and go to state 550
    LCPAREN         shift and go to state 21

    ctor_initializer               shift and go to state 368
    fct_body                       shift and go to state 369
    pure_specifier                 shift and go to state 549
    compound_statement             shift and go to state 246

state 544

    (284) member_declarator -> IDENTIFIER . COLON constant_expression
    (126) name -> IDENTIFIER .
    (5) class_name -> IDENTIFIER .
    (7) typedef_name -> IDENTIFIER .

  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 5 (class_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 5 (class_name -> IDENTIFIER .)
    COLON           shift and go to state 551
    DOUBLECOLON     reduce using rule 5 (class_name -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (class_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    EQUAL           reduce using rule 5 (class_name -> IDENTIFIER .)
    LCPAREN         reduce using rule 5 (class_name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 5 (class_name -> IDENTIFIER .)
    COMMA           reduce using rule 5 (class_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 5 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (class_name -> IDENTIFIER .)
    AUTO            reduce using rule 5 (class_name -> IDENTIFIER .)
    STATIC          reduce using rule 5 (class_name -> IDENTIFIER .)
    EXTERN          reduce using rule 5 (class_name -> IDENTIFIER .)
    CONST           reduce using rule 5 (class_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 5 (class_name -> IDENTIFIER .)
    INLINE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 5 (class_name -> IDENTIFIER .)
    BNOP            reduce using rule 5 (class_name -> IDENTIFIER .)
    MULTOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    BANDOP          reduce using rule 5 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 5 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 5 (class_name -> IDENTIFIER .)
    INT             reduce using rule 5 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 5 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 5 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 5 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 5 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 5 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 5 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 5 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 5 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 5 (class_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 5 (class_name -> IDENTIFIER .)

  ! LPAREN          [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 126 (name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 5 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 7 (typedef_name -> IDENTIFIER .) ]


state 545

    (274) member_declaration -> member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    COLON           reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    STATIC          reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    CONST           reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    INLINE          reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    BNOP            reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    INT             reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    LONG            reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    VOID            reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    ENUM            reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLECOLON     reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    UNION           reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 274 (member_declaration -> member_declarator_list SEMICOLON .)


state 546

    (281) member_declarator_list -> member_declarator_list COMMA . member_declarator
    (282) member_declarator -> . declarator pure_specifier
    (283) member_declarator -> . declarator
    (284) member_declarator -> . IDENTIFIER COLON constant_expression
    (285) member_declarator -> . COLON constant_expression
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    IDENTIFIER      shift and go to state 544
    COLON           shift and go to state 430
    LPAREN          shift and go to state 203
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    DOUBLECOLON     shift and go to state 210
    OPERATOR        shift and go to state 105

    member_declarator              shift and go to state 612
    declarator                     shift and go to state 613
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    name                           shift and go to state 206
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 253
    complete_class_name            shift and go to state 254
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93

state 547

    (277) member_declaration -> function_definition SEMICOLON .

    SEMICOLON       reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    PRIVATE         reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    PROTECTED       reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    PUBLIC          reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    TYPEDEF         reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    IDENTIFIER      reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    COLON           reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    LPAREN          reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    AUTO            reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    STATIC          reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    EXTERN          reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    CONST           reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    VOLATILE        reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    INLINE          reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    VIRTUAL         reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    BNOP            reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    MULTOP          reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    BANDOP          reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    CHAR            reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    SHORT           reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    INT             reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    LONG            reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    SIGNED          reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    UNSIGNED        reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    FLOAT           reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    DOUBLE          reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    VOID            reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    ENUM            reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    DOUBLECOLON     reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    CLASS           reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    STRUCT          reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    UNION           reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    OPERATOR        reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)
    RCPAREN         reduce using rule 277 (member_declaration -> function_definition SEMICOLON .)


state 548

    (279) member_declaration -> qualified_name SEMICOLON .

    SEMICOLON       reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    PRIVATE         reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    PROTECTED       reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    PUBLIC          reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    TYPEDEF         reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    IDENTIFIER      reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    COLON           reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    LPAREN          reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    AUTO            reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    STATIC          reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    EXTERN          reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    CONST           reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    VOLATILE        reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    INLINE          reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    VIRTUAL         reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    BNOP            reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    MULTOP          reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    BANDOP          reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    CHAR            reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    SHORT           reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    INT             reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    LONG            reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    SIGNED          reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    UNSIGNED        reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    FLOAT           reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    DOUBLE          reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    VOID            reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    ENUM            reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    DOUBLECOLON     reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    CLASS           reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    STRUCT          reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    UNION           reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    OPERATOR        reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)
    RCPAREN         reduce using rule 279 (member_declaration -> qualified_name SEMICOLON .)


state 549

    (282) member_declarator -> declarator pure_specifier .

    SEMICOLON       reduce using rule 282 (member_declarator -> declarator pure_specifier .)
    COMMA           reduce using rule 282 (member_declarator -> declarator pure_specifier .)


state 550

    (286) pure_specifier -> EQUAL . NUMBER

    NUMBER          shift and go to state 614


state 551

    (284) member_declarator -> IDENTIFIER COLON . constant_expression
    (190) constant_expression -> . conditional_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    constant_expression            shift and go to state 615
    conditional_expression         shift and go to state 134
    logical_OR_expression          shift and go to state 34
    logical_AND_expression         shift and go to state 49
    inclusive_OR_expression        shift and go to state 68
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 552

    (181) qualified_class_name -> class_name DOUBLECOLON . qualified_class_name
    (177) qualified_type_name -> class_name DOUBLECOLON . qualified_type_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 480

    class_name                     shift and go to state 479
    qualified_class_name           shift and go to state 420
    qualified_type_name            shift and go to state 419
    typedef_name                   shift and go to state 148

state 553

    (182) enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list . RCPAREN
    (187) enum_list -> enum_list . COMMA enumerator

    RCPAREN         shift and go to state 616
    COMMA           shift and go to state 556


state 554

    (184) enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LPAREN          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    AUTO            reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    STATIC          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    EXTERN          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    CONST           reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    INLINE          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BNOP            reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MULTOP          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BANDOP          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    CHAR            reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    SHORT           reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    INT             reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LONG            reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    SIGNED          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    FLOAT           reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    VOID            reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    ENUM            reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DOUBLECOLON     reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    CLASS           reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    STRUCT          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    UNION           reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LSPAREN         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RPAREN          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    EQUAL           reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MULTEQOP        reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DIVEQOP         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MODEQOP         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    PLUSEQOP        reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MINUSEQOP       reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LSHIFTEQOP      reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RSHIFTEQOP      reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BANDEQOP        reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    B_E_OR          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BOREQOP         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DOTSTAR         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    ARROWSTAR       reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DIVOP           reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MODOP           reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LSHIFT          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RSHIFT          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LTCOMP          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    GTCOMP          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LTECOMP         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    GTECOMP         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    EQCOMP          reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    NEQCOMP         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    XOROP           reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    OROP            reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    ANDOP           reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    QUESMARK        reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    COMMA           reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    $end            reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    COLON           reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RSPAREN         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DOT             reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    ARROW           reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 184 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)


state 555

    (183) enum_specifier -> ENUM LCPAREN enum_list RCPAREN .

    SEMICOLON       reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    TYPEDEF         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LPAREN          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    AUTO            reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    STATIC          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    EXTERN          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    CONST           reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    VOLATILE        reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    INLINE          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    VIRTUAL         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BNOP            reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MULTOP          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BANDOP          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    CHAR            reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    SHORT           reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    INT             reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LONG            reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    SIGNED          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    UNSIGNED        reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    FLOAT           reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DOUBLE          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    VOID            reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    ENUM            reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    IDENTIFIER      reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DOUBLECOLON     reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    CLASS           reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    STRUCT          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    UNION           reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    OPERATOR        reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LSPAREN         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RPAREN          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    EQUAL           reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MULTEQOP        reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DIVEQOP         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MODEQOP         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    PLUSEQOP        reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MINUSEQOP       reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LSHIFTEQOP      reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RSHIFTEQOP      reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BANDEQOP        reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    B_E_OR          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BOREQOP         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DOTSTAR         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    ARROWSTAR       reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DIVOP           reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MODOP           reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    PLUSOP          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MINUSOP         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LSHIFT          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RSHIFT          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LTCOMP          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    GTCOMP          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LTECOMP         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    GTECOMP         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    EQCOMP          reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    NEQCOMP         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    XOROP           reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    OROP            reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    ANDOP           reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    QUESMARK        reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    COMMA           reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    $end            reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    COLON           reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RSPAREN         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RCPAREN         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DOT             reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    ARROW           reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DPLUSOP         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DMINUSOP        reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LCPAREN         reduce using rule 183 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)


state 556

    (187) enum_list -> enum_list COMMA . enumerator
    (188) enumerator -> . IDENTIFIER
    (189) enumerator -> . IDENTIFIER EQUAL constant_expression

    IDENTIFIER      shift and go to state 448

    enumerator                     shift and go to state 617

state 557

    (189) enumerator -> IDENTIFIER EQUAL . constant_expression
    (190) constant_expression -> . conditional_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 138
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    constant_expression            shift and go to state 618
    conditional_expression         shift and go to state 134
    logical_OR_expression          shift and go to state 34
    logical_AND_expression         shift and go to state 49
    inclusive_OR_expression        shift and go to state 68
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117
    cast_expression                shift and go to state 39
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148

state 558

    (289) base_list -> base_list COMMA . base_specifier
    (290) base_specifier -> . complete_class_name
    (291) base_specifier -> . VIRTUAL access_specifier complete_class_name
    (292) base_specifier -> . VIRTUAL complete_class_name
    (293) base_specifier -> . access_specifier VIRTUAL complete_class_name
    (294) base_specifier -> . access_specifier complete_class_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (295) access_specifier -> . PRIVATE
    (296) access_specifier -> . PROTECTED
    (297) access_specifier -> . PUBLIC
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    VIRTUAL         shift and go to state 454
    DOUBLECOLON     shift and go to state 210
    PRIVATE         shift and go to state 436
    PROTECTED       shift and go to state 437
    PUBLIC          shift and go to state 438
    IDENTIFIER      shift and go to state 222

    base_specifier                 shift and go to state 619
    complete_class_name            shift and go to state 453
    access_specifier               shift and go to state 455
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 559

    (291) base_specifier -> VIRTUAL access_specifier . complete_class_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    DOUBLECOLON     shift and go to state 210
    IDENTIFIER      shift and go to state 222

    complete_class_name            shift and go to state 620
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 560

    (292) base_specifier -> VIRTUAL complete_class_name .

    COMMA           reduce using rule 292 (base_specifier -> VIRTUAL complete_class_name .)
    LCPAREN         reduce using rule 292 (base_specifier -> VIRTUAL complete_class_name .)


state 561

    (293) base_specifier -> access_specifier VIRTUAL . complete_class_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

    DOUBLECOLON     shift and go to state 210
    IDENTIFIER      shift and go to state 222

    complete_class_name            shift and go to state 621
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 562

    (294) base_specifier -> access_specifier complete_class_name .

    COMMA           reduce using rule 294 (base_specifier -> access_specifier complete_class_name .)
    LCPAREN         reduce using rule 294 (base_specifier -> access_specifier complete_class_name .)


state 563

    (364) selection_statement -> IF LPAREN expression RPAREN statement .
    (365) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    $end            reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RCPAREN         reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TRY             reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASM             reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLECOLON     reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NEW             reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VIRTUAL         reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THIS            reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNION           reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 622

  ! ELSE            [ reduce using rule 364 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 564

    (229) abstract_declarator -> abstract_declarator LPAREN argument_declaration_list . RPAREN cv_qualifier_list
    (231) abstract_declarator -> abstract_declarator LPAREN argument_declaration_list . RPAREN

    RPAREN          shift and go to state 623


state 565

    (233) abstract_declarator -> abstract_declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 624


state 566

    (235) abstract_declarator -> abstract_declarator LSPAREN RSPAREN .

    LPAREN          reduce using rule 235 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 235 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 235 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    EQUAL           reduce using rule 235 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 235 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    GTCOMP          reduce using rule 235 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)


state 567

    (230) abstract_declarator -> LPAREN argument_declaration_list RPAREN . cv_qualifier_list
    (232) abstract_declarator -> LPAREN argument_declaration_list RPAREN .
    (214) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (215) cv_qualifier_list -> . cv_qualifier
    (216) cv_qualifier -> . CONST
    (217) cv_qualifier -> . VOLATILE

    LPAREN          reduce using rule 232 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    LSPAREN         reduce using rule 232 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    RPAREN          reduce using rule 232 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    EQUAL           reduce using rule 232 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    COMMA           reduce using rule 232 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    GTCOMP          reduce using rule 232 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    CONST           shift and go to state 218
    VOLATILE        shift and go to state 219

    cv_qualifier_list              shift and go to state 625
    cv_qualifier                   shift and go to state 217

state 568

    (237) abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LPAREN          reduce using rule 237 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LSPAREN         reduce using rule 237 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 237 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    EQUAL           reduce using rule 237 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 237 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    GTCOMP          reduce using rule 237 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 569

    (234) abstract_declarator -> LSPAREN constant_expression RSPAREN .

    LPAREN          reduce using rule 234 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 234 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 234 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    EQUAL           reduce using rule 234 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 234 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    GTCOMP          reduce using rule 234 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)


state 570

    (366) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    $end            reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RCPAREN         reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TRY             reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ASM             reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLECOLON     reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NEW             reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VIRTUAL         reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THIS            reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNION           reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 366 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 571

    (367) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    $end            reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RCPAREN         reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TRY             reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASM             reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLECOLON     reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NEW             reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VIRTUAL         reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THIS            reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNION           reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 367 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 572

    (368) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (9) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 626
    COMMA           shift and go to state 118


state 573

    (369) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON . expression RPAREN statement
    (371) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON . RPAREN statement
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 628
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 627
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 574

    (370) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression . RPAREN statement
    (9) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 629
    COMMA           shift and go to state 118


state 575

    (372) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN . statement
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 153
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    statement                      shift and go to state 630
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    expression                     shift and go to state 154
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 576

    (396) handler -> CATCH LPAREN exception_declaration . RPAREN compound_statement

    RPAREN          shift and go to state 631


state 577

    (397) exception_declaration -> type_specifier_list . declarator
    (398) exception_declaration -> type_specifier_list . abstract_declarator
    (399) exception_declaration -> type_specifier_list .
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (227) abstract_declarator -> . ptr_operator abstract_declarator
    (228) abstract_declarator -> . ptr_operator
    (229) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (230) abstract_declarator -> . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (231) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (232) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (233) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (234) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (235) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (236) abstract_declarator -> . LSPAREN RSPAREN
    (237) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    RPAREN          reduce using rule 399 (exception_declaration -> type_specifier_list .)
    LPAREN          shift and go to state 524
    LSPAREN         shift and go to state 342
    BNOP            shift and go to state 207
    MULTOP          shift and go to state 208
    BANDOP          shift and go to state 209
    IDENTIFIER      shift and go to state 172
    DOUBLECOLON     shift and go to state 210
    OPERATOR        shift and go to state 105

    declarator                     shift and go to state 632
    abstract_declarator            shift and go to state 633
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 523
    name                           shift and go to state 206
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 253
    complete_class_name            shift and go to state 254
    operator_function_name         shift and go to state 71
    conversion_function_name       shift and go to state 91
    qualified_name                 shift and go to state 72
    qualified_class_name           shift and go to state 93

state 578

    (24) conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .

    COMMA           reduce using rule 24 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    SEMICOLON       reduce using rule 24 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    $end            reduce using rule 24 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COLON           reduce using rule 24 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RPAREN          reduce using rule 24 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RSPAREN         reduce using rule 24 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    GTCOMP          reduce using rule 24 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RCPAREN         reduce using rule 24 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)


state 579

    (118) expression_list -> expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 118 (expression_list -> expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 118 (expression_list -> expression_list COMMA assignment_expression .)


state 580

    (72) allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .

    EQUAL           reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    MULTEQOP        reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    DIVEQOP         reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    MODEQOP         reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    BANDEQOP        reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    B_E_OR          reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    BOREQOP         reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    DOTSTAR         reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    MULTOP          reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    DIVOP           reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    MODOP           reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    PLUSOP          reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    MINUSOP         reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    LSHIFT          reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    RSHIFT          reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    LTCOMP          reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    GTCOMP          reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    LTECOMP         reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    GTECOMP         reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    EQCOMP          reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    NEQCOMP         reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    BANDOP          reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    XOROP           reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    OROP            reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    ANDOP           reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    QUESMARK        reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    COMMA           reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    SEMICOLON       reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    $end            reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    COLON           reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    RPAREN          reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    RSPAREN         reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    RCPAREN         reduce using rule 72 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)


state 581

    (80) allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name . RPAREN new_initializer
    (84) allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name . RPAREN

    RPAREN          shift and go to state 634


state 582

    (82) allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN . new_initializer
    (86) allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .
    (101) new_initializer -> . LPAREN initializer_list RPAREN
    (102) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    B_E_OR          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    MODOP           reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    XOROP           reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    OROP            reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    COMMA           reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    $end            reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    COLON           reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 386

    new_initializer                shift and go to state 635

state 583

    (105) deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .

    EQUAL           reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    MULTEQOP        reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    DIVEQOP         reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    MODEQOP         reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    PLUSEQOP        reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    MINUSEQOP       reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    LSHIFTEQOP      reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    RSHIFTEQOP      reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    BANDEQOP        reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    B_E_OR          reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    BOREQOP         reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    DOTSTAR         reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    ARROWSTAR       reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    MULTOP          reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    DIVOP           reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    MODOP           reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    PLUSOP          reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    MINUSOP         reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    LSHIFT          reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    RSHIFT          reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    LTCOMP          reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    GTCOMP          reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    LTECOMP         reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    GTECOMP         reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    EQCOMP          reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    NEQCOMP         reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    BANDOP          reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    XOROP           reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    OROP            reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    ANDOP           reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    QUESMARK        reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    COMMA           reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    SEMICOLON       reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    $end            reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    COLON           reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    RPAREN          reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    RSPAREN         reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    RCPAREN         reduce using rule 105 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)


state 584

    (81) allocation_expression -> NEW placement LPAREN type_name RPAREN . new_initializer
    (85) allocation_expression -> NEW placement LPAREN type_name RPAREN .
    (101) new_initializer -> . LPAREN initializer_list RPAREN
    (102) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    B_E_OR          reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MODOP           reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    XOROP           reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    OROP            reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    COMMA           reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    $end            reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    COLON           reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 85 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 386

    new_initializer                shift and go to state 636

state 585

    (101) new_initializer -> LPAREN initializer_list RPAREN .

    EQUAL           reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTEQOP        reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVEQOP         reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODEQOP         reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSEQOP        reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSEQOP       reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFTEQOP      reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFTEQOP      reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDEQOP        reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    B_E_OR          reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    BOREQOP         reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    DOTSTAR         reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    ARROWSTAR       reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTOP          reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVOP           reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODOP           reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSOP          reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSOP         reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFT          reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFT          reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTCOMP          reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTCOMP          reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTECOMP         reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTECOMP         reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    EQCOMP          reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    NEQCOMP         reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDOP          reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    XOROP           reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    OROP            reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    ANDOP           reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    QUESMARK        reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    COMMA           reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    SEMICOLON       reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    $end            reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    COLON           reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    RPAREN          reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSPAREN         reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)
    RCPAREN         reduce using rule 101 (new_initializer -> LPAREN initializer_list RPAREN .)


state 586

    (258) initializer_list -> initializer_list COMMA . assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    assignment_expression          shift and go to state 637
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 587

    (259) initializer_list -> LCPAREN initializer_list . RCPAREN
    (260) initializer_list -> LCPAREN initializer_list . COMMA RCPAREN
    (258) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 638
    COMMA           shift and go to state 639


state 588

    (83) allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .

    EQUAL           reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    B_E_OR          reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DOTSTAR         reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    $end            reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 83 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)


state 589

    (99) new_declarator -> new_declarator LSPAREN expression . RSPAREN
    (9) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 640
    COMMA           shift and go to state 118


state 590

    (91) new_declarator -> MULTOP cv_qualifier_list new_declarator .
    (99) new_declarator -> new_declarator . LSPAREN expression RSPAREN

  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    EQUAL           reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    MULTEQOP        reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    DIVEQOP         reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    MODEQOP         reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    PLUSEQOP        reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    MINUSEQOP       reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    LSHIFTEQOP      reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    RSHIFTEQOP      reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    BANDEQOP        reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    B_E_OR          reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    BOREQOP         reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    DOTSTAR         reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    ARROWSTAR       reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    MULTOP          reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    DIVOP           reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    MODOP           reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    PLUSOP          reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    MINUSOP         reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    LSHIFT          reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    RSHIFT          reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    LTCOMP          reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    GTCOMP          reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    LTECOMP         reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    GTECOMP         reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    EQCOMP          reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    NEQCOMP         reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    BANDOP          reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    XOROP           reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    OROP            reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    ANDOP           reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    QUESMARK        reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    COMMA           reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    SEMICOLON       reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    $end            reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    COLON           reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    RPAREN          reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    RSPAREN         reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    RCPAREN         reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    LSPAREN         shift and go to state 510

  ! LSPAREN         [ reduce using rule 91 (new_declarator -> MULTOP cv_qualifier_list new_declarator .) ]


state 591

    (95) new_declarator -> complete_class_name DOUBLECOLON MULTOP . cv_qualifier_list new_declarator
    (96) new_declarator -> complete_class_name DOUBLECOLON MULTOP . new_declarator
    (97) new_declarator -> complete_class_name DOUBLECOLON MULTOP . cv_qualifier_list
    (98) new_declarator -> complete_class_name DOUBLECOLON MULTOP .
    (214) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (215) cv_qualifier_list -> . cv_qualifier
    (91) new_declarator -> . MULTOP cv_qualifier_list new_declarator
    (92) new_declarator -> . MULTOP new_declarator
    (93) new_declarator -> . MULTOP cv_qualifier_list
    (94) new_declarator -> . MULTOP
    (95) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator
    (96) new_declarator -> . complete_class_name DOUBLECOLON MULTOP new_declarator
    (97) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (98) new_declarator -> . complete_class_name DOUBLECOLON MULTOP
    (99) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (100) new_declarator -> . LSPAREN expression RSPAREN
    (216) cv_qualifier -> . CONST
    (217) cv_qualifier -> . VOLATILE
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

  ! shift/reduce conflict for MULTOP resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    EQUAL           reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    MULTEQOP        reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    DIVEQOP         reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    MODEQOP         reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    PLUSEQOP        reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    MINUSEQOP       reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    LSHIFTEQOP      reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    RSHIFTEQOP      reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    BANDEQOP        reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    B_E_OR          reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    BOREQOP         reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    DOTSTAR         reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    ARROWSTAR       reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    DIVOP           reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    MODOP           reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    PLUSOP          reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    MINUSOP         reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    LSHIFT          reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    RSHIFT          reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    LTCOMP          reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    GTCOMP          reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    LTECOMP         reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    GTECOMP         reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    EQCOMP          reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    NEQCOMP         reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    BANDOP          reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    XOROP           reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    OROP            reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    ANDOP           reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    QUESMARK        reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    COMMA           reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    SEMICOLON       reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    $end            reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    COLON           reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    RPAREN          reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    RSPAREN         reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    RCPAREN         reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    MULTOP          shift and go to state 390
    LSPAREN         shift and go to state 392
    CONST           shift and go to state 218
    VOLATILE        shift and go to state 219
    DOUBLECOLON     shift and go to state 210
    IDENTIFIER      shift and go to state 222

  ! LSPAREN         [ reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .) ]
  ! MULTOP          [ reduce using rule 98 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .) ]

    complete_class_name            shift and go to state 391
    cv_qualifier_list              shift and go to state 641
    new_declarator                 shift and go to state 642
    cv_qualifier                   shift and go to state 217
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 592

    (100) new_declarator -> LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    B_E_OR          reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    OROP            reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    $end            reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    COLON           reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 100 (new_declarator -> LSPAREN expression RSPAREN .)


state 593

    (196) asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .

    $end            reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    RCPAREN         reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    CASE            reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    SWITCH          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    DO              reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    BREAK           reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    RETURN          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    GOTO            reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    TRY             reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    ASM             reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    EXTERN          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    LPAREN          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    MULTOP          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    BANDOP          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    BNOP            reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    DOUBLECOLON     reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    NEW             reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    DELETE          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    AUTO            reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    STATIC          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    CONST           reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    INLINE          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    VIRTUAL         reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    THIS            reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    CHAR            reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    SHORT           reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    INT             reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    LONG            reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    SIGNED          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    FLOAT           reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    VOID            reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    ENUM            reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    NUMBER          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    STRING          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    CLASS           reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    STRUCT          reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    UNION           reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    OPERATOR        reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    ELSE            reduce using rule 196 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)


state 594

    (203) declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .

    LPAREN          reduce using rule 203 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    LSPAREN         reduce using rule 203 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    COLON           reduce using rule 203 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    EQUAL           reduce using rule 203 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    LCPAREN         reduce using rule 203 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    SEMICOLON       reduce using rule 203 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    COMMA           reduce using rule 203 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    RPAREN          reduce using rule 203 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    GTCOMP          reduce using rule 203 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)


state 595

    (241) arg_declaration_list -> arg_declaration_list COMMA argument_declaration .

    COMMA           reduce using rule 241 (arg_declaration_list -> arg_declaration_list COMMA argument_declaration .)
    RPAREN          reduce using rule 241 (arg_declaration_list -> arg_declaration_list COMMA argument_declaration .)


state 596

    (243) argument_declaration -> decl_specifiers declarator EQUAL . expression
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 643
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 597

    (247) argument_declaration -> decl_specifiers EQUAL expression .
    (9) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 247 (argument_declaration -> decl_specifiers EQUAL expression .)
    GTCOMP          reduce using rule 247 (argument_declaration -> decl_specifiers EQUAL expression .)
    COMMA           shift and go to state 118

  ! COMMA           [ reduce using rule 247 (argument_declaration -> decl_specifiers EQUAL expression .) ]


state 598

    (246) argument_declaration -> decl_specifiers abstract_declarator EQUAL . expression
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 644
    assignment_expression          shift and go to state 6
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 599

    (303) mem_initializer_list -> mem_initializer COMMA mem_initializer_list .

    LCPAREN         reduce using rule 303 (mem_initializer_list -> mem_initializer COMMA mem_initializer_list .)


state 600

    (304) mem_initializer -> complete_class_name LPAREN expression_list . RPAREN
    (118) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 645
    COMMA           shift and go to state 493


state 601

    (305) mem_initializer -> complete_class_name LPAREN RPAREN .

    COMMA           reduce using rule 305 (mem_initializer -> complete_class_name LPAREN RPAREN .)
    LCPAREN         reduce using rule 305 (mem_initializer -> complete_class_name LPAREN RPAREN .)


state 602

    (306) mem_initializer -> IDENTIFIER LPAREN expression_list . RPAREN
    (118) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 646
    COMMA           shift and go to state 493


state 603

    (307) mem_initializer -> IDENTIFIER LPAREN RPAREN .

    COMMA           reduce using rule 307 (mem_initializer -> IDENTIFIER LPAREN RPAREN .)
    LCPAREN         reduce using rule 307 (mem_initializer -> IDENTIFIER LPAREN RPAREN .)


state 604

    (254) initializer -> EQUAL LCPAREN initializer_list RCPAREN .

    SEMICOLON       reduce using rule 254 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 254 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)


state 605

    (255) initializer -> EQUAL LCPAREN initializer_list COMMA . RCPAREN
    (258) initializer_list -> initializer_list COMMA . assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 647
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    assignment_expression          shift and go to state 637
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 606

    (381) template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .

    $end            reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    RCPAREN         reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    IDENTIFIER      reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    CASE            reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    DEFAULT         reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    SEMICOLON       reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    LCPAREN         reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    IF              reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    SWITCH          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    WHILE           reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    DO              reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    FOR             reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    BREAK           reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    CONTINUE        reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    RETURN          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    GOTO            reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    TRY             reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    ASM             reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    TEMPLATE        reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    EXTERN          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    DPLUSOP         reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    DMINUSOP        reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    SIZEOF          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    TYPEDEF         reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    LPAREN          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    MULTOP          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    BANDOP          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    PLUSOP          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    MINUSOP         reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    NOTSYM          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    BNOP            reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    DOUBLECOLON     reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    NEW             reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    DELETE          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    AUTO            reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    STATIC          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    CONST           reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    VOLATILE        reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    INLINE          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    VIRTUAL         reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    THIS            reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    CHAR            reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    SHORT           reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    INT             reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    LONG            reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    SIGNED          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    UNSIGNED        reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    FLOAT           reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    DOUBLE          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    VOID            reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    ENUM            reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    NUMBER          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    STRING          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    CLASS           reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    STRUCT          reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    UNION           reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    OPERATOR        reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    ELSE            reduce using rule 381 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)


state 607

    (383) template_argument_list -> template_argument_list COMMA template_argument .

    GTCOMP          reduce using rule 383 (template_argument_list -> template_argument_list COMMA template_argument .)
    COMMA           reduce using rule 383 (template_argument_list -> template_argument_list COMMA template_argument .)


state 608

    (191) linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .

    $end            reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    RCPAREN         reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    IDENTIFIER      reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    CASE            reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    DEFAULT         reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    SEMICOLON       reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    LCPAREN         reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    IF              reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    SWITCH          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    WHILE           reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    DO              reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    FOR             reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    BREAK           reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    CONTINUE        reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    RETURN          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    GOTO            reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    TRY             reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    ASM             reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    TEMPLATE        reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    EXTERN          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    DPLUSOP         reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    DMINUSOP        reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    SIZEOF          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    TYPEDEF         reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    LPAREN          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    MULTOP          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    BANDOP          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    PLUSOP          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    MINUSOP         reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    NOTSYM          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    BNOP            reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    DOUBLECOLON     reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    NEW             reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    DELETE          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    AUTO            reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    STATIC          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    CONST           reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    VOLATILE        reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    INLINE          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    VIRTUAL         reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    THIS            reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    CHAR            reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    SHORT           reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    INT             reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    LONG            reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    SIGNED          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    UNSIGNED        reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    FLOAT           reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    DOUBLE          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    VOID            reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    ENUM            reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    NUMBER          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    STRING          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    CLASS           reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    STRUCT          reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    UNION           reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    OPERATOR        reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    ELSE            reduce using rule 191 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)


state 609

    (195) declaration_list -> declaration_list declaration .

    RCPAREN         reduce using rule 195 (declaration_list -> declaration_list declaration .)
    ASM             reduce using rule 195 (declaration_list -> declaration_list declaration .)
    TEMPLATE        reduce using rule 195 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 195 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 195 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 195 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 195 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 195 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 195 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 195 (declaration_list -> declaration_list declaration .)
    INLINE          reduce using rule 195 (declaration_list -> declaration_list declaration .)
    VIRTUAL         reduce using rule 195 (declaration_list -> declaration_list declaration .)
    BNOP            reduce using rule 195 (declaration_list -> declaration_list declaration .)
    MULTOP          reduce using rule 195 (declaration_list -> declaration_list declaration .)
    BANDOP          reduce using rule 195 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 195 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 195 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 195 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 195 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 195 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 195 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 195 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 195 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 195 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 195 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 195 (declaration_list -> declaration_list declaration .)
    DOUBLECOLON     reduce using rule 195 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 195 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 195 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 195 (declaration_list -> declaration_list declaration .)
    OPERATOR        reduce using rule 195 (declaration_list -> declaration_list declaration .)


state 610

    (271) member_list -> access_specifier COLON member_list .

    RCPAREN         reduce using rule 271 (member_list -> access_specifier COLON member_list .)


state 611

    (273) member_declaration -> decl_specifiers member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    COLON           reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    STATIC          reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    CONST           reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    INLINE          reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    BNOP            reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    INT             reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    LONG            reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    VOID            reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    ENUM            reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    DOUBLECOLON     reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    UNION           reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 273 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)


state 612

    (281) member_declarator_list -> member_declarator_list COMMA member_declarator .

    SEMICOLON       reduce using rule 281 (member_declarator_list -> member_declarator_list COMMA member_declarator .)
    COMMA           reduce using rule 281 (member_declarator_list -> member_declarator_list COMMA member_declarator .)


state 613

    (282) member_declarator -> declarator . pure_specifier
    (283) member_declarator -> declarator .
    (203) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (205) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (206) declarator -> declarator . LSPAREN RSPAREN
    (286) pure_specifier -> . EQUAL NUMBER

    SEMICOLON       reduce using rule 283 (member_declarator -> declarator .)
    COMMA           reduce using rule 283 (member_declarator -> declarator .)
    LPAREN          shift and go to state 336
    LSPAREN         shift and go to state 244
    EQUAL           shift and go to state 550

    pure_specifier                 shift and go to state 549

state 614

    (286) pure_specifier -> EQUAL NUMBER .

    SEMICOLON       reduce using rule 286 (pure_specifier -> EQUAL NUMBER .)
    COMMA           reduce using rule 286 (pure_specifier -> EQUAL NUMBER .)


state 615

    (284) member_declarator -> IDENTIFIER COLON constant_expression .

    SEMICOLON       reduce using rule 284 (member_declarator -> IDENTIFIER COLON constant_expression .)
    COMMA           reduce using rule 284 (member_declarator -> IDENTIFIER COLON constant_expression .)


state 616

    (182) enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .

    SEMICOLON       reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    TYPEDEF         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LPAREN          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    AUTO            reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    STATIC          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    EXTERN          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    CONST           reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    VOLATILE        reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    INLINE          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    VIRTUAL         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BNOP            reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MULTOP          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BANDOP          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    CHAR            reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    SHORT           reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    INT             reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LONG            reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    SIGNED          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    UNSIGNED        reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    FLOAT           reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DOUBLE          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    VOID            reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    ENUM            reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    IDENTIFIER      reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DOUBLECOLON     reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    CLASS           reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    STRUCT          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    UNION           reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    OPERATOR        reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LSPAREN         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RPAREN          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    EQUAL           reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MULTEQOP        reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DIVEQOP         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MODEQOP         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    PLUSEQOP        reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MINUSEQOP       reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LSHIFTEQOP      reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RSHIFTEQOP      reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BANDEQOP        reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    B_E_OR          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BOREQOP         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DOTSTAR         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    ARROWSTAR       reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DIVOP           reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MODOP           reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    PLUSOP          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MINUSOP         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LSHIFT          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RSHIFT          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LTCOMP          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    GTCOMP          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LTECOMP         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    GTECOMP         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    EQCOMP          reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    NEQCOMP         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    XOROP           reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    OROP            reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    ANDOP           reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    QUESMARK        reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    COMMA           reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    $end            reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    COLON           reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RSPAREN         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RCPAREN         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DOT             reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    ARROW           reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DPLUSOP         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DMINUSOP        reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LCPAREN         reduce using rule 182 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)


state 617

    (187) enum_list -> enum_list COMMA enumerator .

    RCPAREN         reduce using rule 187 (enum_list -> enum_list COMMA enumerator .)
    COMMA           reduce using rule 187 (enum_list -> enum_list COMMA enumerator .)


state 618

    (189) enumerator -> IDENTIFIER EQUAL constant_expression .

    RCPAREN         reduce using rule 189 (enumerator -> IDENTIFIER EQUAL constant_expression .)
    COMMA           reduce using rule 189 (enumerator -> IDENTIFIER EQUAL constant_expression .)


state 619

    (289) base_list -> base_list COMMA base_specifier .

    COMMA           reduce using rule 289 (base_list -> base_list COMMA base_specifier .)
    LCPAREN         reduce using rule 289 (base_list -> base_list COMMA base_specifier .)


state 620

    (291) base_specifier -> VIRTUAL access_specifier complete_class_name .

    COMMA           reduce using rule 291 (base_specifier -> VIRTUAL access_specifier complete_class_name .)
    LCPAREN         reduce using rule 291 (base_specifier -> VIRTUAL access_specifier complete_class_name .)


state 621

    (293) base_specifier -> access_specifier VIRTUAL complete_class_name .

    COMMA           reduce using rule 293 (base_specifier -> access_specifier VIRTUAL complete_class_name .)
    LCPAREN         reduce using rule 293 (base_specifier -> access_specifier VIRTUAL complete_class_name .)


state 622

    (365) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 153
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 154
    statement                      shift and go to state 648
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 623

    (229) abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN . cv_qualifier_list
    (231) abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .
    (214) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (215) cv_qualifier_list -> . cv_qualifier
    (216) cv_qualifier -> . CONST
    (217) cv_qualifier -> . VOLATILE

    LPAREN          reduce using rule 231 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    LSPAREN         reduce using rule 231 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    RPAREN          reduce using rule 231 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    EQUAL           reduce using rule 231 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    COMMA           reduce using rule 231 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    GTCOMP          reduce using rule 231 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    CONST           shift and go to state 218
    VOLATILE        shift and go to state 219

    cv_qualifier_list              shift and go to state 649
    cv_qualifier                   shift and go to state 217

state 624

    (233) abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .

    LPAREN          reduce using rule 233 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 233 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 233 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    EQUAL           reduce using rule 233 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 233 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    GTCOMP          reduce using rule 233 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)


state 625

    (230) abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list .

    LPAREN          reduce using rule 230 (abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    LSPAREN         reduce using rule 230 (abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    RPAREN          reduce using rule 230 (abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    EQUAL           reduce using rule 230 (abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    COMMA           reduce using rule 230 (abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    GTCOMP          reduce using rule 230 (abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list .)


state 626

    (368) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 650


state 627

    (369) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression . RPAREN statement
    (9) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 651
    COMMA           shift and go to state 118


state 628

    (371) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN . statement
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 153
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 154
    statement                      shift and go to state 652
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 629

    (370) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN . statement
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 153
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 154
    statement                      shift and go to state 653
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 630

    (372) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .

    $end            reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    RCPAREN         reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IDENTIFIER      reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CASE            reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LCPAREN         reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IF              reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DO              reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FOR             reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    GOTO            reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TRY             reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ASM             reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TEMPLATE        reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    EXTERN          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DPLUSOP         reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DMINUSOP        reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TYPEDEF         reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MULTOP          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BANDOP          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    PLUSOP          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MINUSOP         reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NOTSYM          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BNOP            reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DOUBLECOLON     reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NEW             reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STATIC          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONST           reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VOLATILE        reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    INLINE          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VIRTUAL         reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    THIS            reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SHORT           reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    INT             reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LONG            reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIGNED          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    UNSIGNED        reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VOID            reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ENUM            reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NUMBER          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRING          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    UNION           reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    OPERATOR        reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 372 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)


state 631

    (396) handler -> CATCH LPAREN exception_declaration RPAREN . compound_statement
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 21

    compound_statement             shift and go to state 654

state 632

    (397) exception_declaration -> type_specifier_list declarator .
    (203) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (205) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (206) declarator -> declarator . LSPAREN RSPAREN

    RPAREN          reduce using rule 397 (exception_declaration -> type_specifier_list declarator .)
    LPAREN          shift and go to state 336
    LSPAREN         shift and go to state 244


state 633

    (398) exception_declaration -> type_specifier_list abstract_declarator .
    (229) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (231) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (233) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (235) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RPAREN          reduce using rule 398 (exception_declaration -> type_specifier_list abstract_declarator .)
    LPAREN          shift and go to state 474
    LSPAREN         shift and go to state 475


state 634

    (80) allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN . new_initializer
    (84) allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .
    (101) new_initializer -> . LPAREN initializer_list RPAREN
    (102) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    B_E_OR          reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    MODOP           reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    XOROP           reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    OROP            reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    COMMA           reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    $end            reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    COLON           reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 84 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 386

    new_initializer                shift and go to state 655

state 635

    (82) allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .

    EQUAL           reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    B_E_OR          reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    DOTSTAR         reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    $end            reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 82 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)


state 636

    (81) allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .

    EQUAL           reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    B_E_OR          reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    DOTSTAR         reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    $end            reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 81 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)


state 637

    (258) initializer_list -> initializer_list COMMA assignment_expression .

    RPAREN          reduce using rule 258 (initializer_list -> initializer_list COMMA assignment_expression .)
    COMMA           reduce using rule 258 (initializer_list -> initializer_list COMMA assignment_expression .)
    RCPAREN         reduce using rule 258 (initializer_list -> initializer_list COMMA assignment_expression .)


state 638

    (259) initializer_list -> LCPAREN initializer_list RCPAREN .

    RPAREN          reduce using rule 259 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 259 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    RCPAREN         reduce using rule 259 (initializer_list -> LCPAREN initializer_list RCPAREN .)


state 639

    (260) initializer_list -> LCPAREN initializer_list COMMA . RCPAREN
    (258) initializer_list -> initializer_list COMMA . assignment_expression
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (7) typedef_name -> . IDENTIFIER
    (5) class_name -> . IDENTIFIER
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 656
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    MULTOP          shift and go to state 136
    BANDOP          shift and go to state 135
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 141
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    THIS            shift and go to state 70
    LPAREN          shift and go to state 182
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    IDENTIFIER      shift and go to state 142
    OPERATOR        shift and go to state 105

    assignment_expression          shift and go to state 637
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 139
    name                           shift and go to state 140
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    complete_class_name            shift and go to state 143
    qualified_type_name            shift and go to state 144
    exclusive_OR_expression        shift and go to state 90
    conversion_function_name       shift and go to state 91
    class_name                     shift and go to state 147
    qualified_class_name           shift and go to state 93
    typedef_name                   shift and go to state 148
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 640

    (99) new_declarator -> new_declarator LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    B_E_OR          reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    OROP            reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    $end            reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COLON           reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 99 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)


state 641

    (95) new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list . new_declarator
    (97) new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .
    (91) new_declarator -> . MULTOP cv_qualifier_list new_declarator
    (92) new_declarator -> . MULTOP new_declarator
    (93) new_declarator -> . MULTOP cv_qualifier_list
    (94) new_declarator -> . MULTOP
    (95) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator
    (96) new_declarator -> . complete_class_name DOUBLECOLON MULTOP new_declarator
    (97) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (98) new_declarator -> . complete_class_name DOUBLECOLON MULTOP
    (99) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (100) new_declarator -> . LSPAREN expression RSPAREN
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (5) class_name -> . IDENTIFIER

  ! shift/reduce conflict for MULTOP resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    EQUAL           reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MULTEQOP        reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DIVEQOP         reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MODEQOP         reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    PLUSEQOP        reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MINUSEQOP       reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LSHIFTEQOP      reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RSHIFTEQOP      reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    BANDEQOP        reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    B_E_OR          reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    BOREQOP         reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DOTSTAR         reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    ARROWSTAR       reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DIVOP           reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MODOP           reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    PLUSOP          reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MINUSOP         reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LSHIFT          reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RSHIFT          reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LTCOMP          reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    GTCOMP          reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LTECOMP         reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    GTECOMP         reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    EQCOMP          reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    NEQCOMP         reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    BANDOP          reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    XOROP           reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    OROP            reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    ANDOP           reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    QUESMARK        reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    COMMA           reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    SEMICOLON       reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    $end            reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    COLON           reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RPAREN          reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RSPAREN         reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RCPAREN         reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MULTOP          shift and go to state 390
    LSPAREN         shift and go to state 392
    DOUBLECOLON     shift and go to state 210
    IDENTIFIER      shift and go to state 222

  ! LSPAREN         [ reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .) ]
  ! MULTOP          [ reduce using rule 97 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .) ]

    complete_class_name            shift and go to state 391
    new_declarator                 shift and go to state 657
    qualified_class_name           shift and go to state 236
    class_name                     shift and go to state 230

state 642

    (96) new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .
    (99) new_declarator -> new_declarator . LSPAREN expression RSPAREN

  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    EQUAL           reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    MULTEQOP        reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    DIVEQOP         reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    MODEQOP         reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    PLUSEQOP        reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    MINUSEQOP       reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    LSHIFTEQOP      reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    RSHIFTEQOP      reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    BANDEQOP        reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    B_E_OR          reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    BOREQOP         reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    DOTSTAR         reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    ARROWSTAR       reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    MULTOP          reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    DIVOP           reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    MODOP           reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    PLUSOP          reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    MINUSOP         reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    LSHIFT          reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    RSHIFT          reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    LTCOMP          reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    GTCOMP          reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    LTECOMP         reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    GTECOMP         reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    EQCOMP          reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    NEQCOMP         reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    BANDOP          reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    XOROP           reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    OROP            reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    ANDOP           reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    QUESMARK        reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    COMMA           reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    SEMICOLON       reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    $end            reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    COLON           reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    RPAREN          reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    RSPAREN         reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    RCPAREN         reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    LSPAREN         shift and go to state 510

  ! LSPAREN         [ reduce using rule 96 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .) ]


state 643

    (243) argument_declaration -> decl_specifiers declarator EQUAL expression .
    (9) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 243 (argument_declaration -> decl_specifiers declarator EQUAL expression .)
    GTCOMP          reduce using rule 243 (argument_declaration -> decl_specifiers declarator EQUAL expression .)
    COMMA           shift and go to state 118

  ! COMMA           [ reduce using rule 243 (argument_declaration -> decl_specifiers declarator EQUAL expression .) ]


state 644

    (246) argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .
    (9) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 246 (argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .)
    GTCOMP          reduce using rule 246 (argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .)
    COMMA           shift and go to state 118

  ! COMMA           [ reduce using rule 246 (argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .) ]


state 645

    (304) mem_initializer -> complete_class_name LPAREN expression_list RPAREN .

    COMMA           reduce using rule 304 (mem_initializer -> complete_class_name LPAREN expression_list RPAREN .)
    LCPAREN         reduce using rule 304 (mem_initializer -> complete_class_name LPAREN expression_list RPAREN .)


state 646

    (306) mem_initializer -> IDENTIFIER LPAREN expression_list RPAREN .

    COMMA           reduce using rule 306 (mem_initializer -> IDENTIFIER LPAREN expression_list RPAREN .)
    LCPAREN         reduce using rule 306 (mem_initializer -> IDENTIFIER LPAREN expression_list RPAREN .)


state 647

    (255) initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .

    SEMICOLON       reduce using rule 255 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 255 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)


state 648

    (365) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    $end            reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RCPAREN         reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LCPAREN         reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRY             reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASM             reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TEMPLATE        reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXTERN          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DPLUSOP         reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DMINUSOP        reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MULTOP          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BANDOP          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSOP          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSOP         reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOTSYM          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BNOP            reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLECOLON     reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NEW             reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DELETE          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOLATILE        reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INLINE          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VIRTUAL         reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THIS            reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNION           reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    OPERATOR        reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 365 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 649

    (229) abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .

    LPAREN          reduce using rule 229 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    LSPAREN         reduce using rule 229 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    RPAREN          reduce using rule 229 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    EQUAL           reduce using rule 229 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    COMMA           reduce using rule 229 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    GTCOMP          reduce using rule 229 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)


state 650

    (368) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    $end            reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RCPAREN         reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    GOTO            reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TRY             reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ASM             reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    EXTERN          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MULTOP          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BANDOP          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BNOP            reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLECOLON     reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NEW             reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DELETE          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    AUTO            reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STATIC          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONST           reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INLINE          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VIRTUAL         reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    THIS            reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SHORT           reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LONG            reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIGNED          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOID            reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ENUM            reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CLASS           reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRUCT          reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    UNION           reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    OPERATOR        reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 368 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 651

    (369) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN . statement
    (347) statement -> . labeled_statement
    (348) statement -> . expression_statement
    (349) statement -> . compound_statement
    (350) statement -> . selection_statement
    (351) statement -> . iteration_statement
    (352) statement -> . jump_statement
    (353) statement -> . declaration_statement
    (354) statement -> . try_block
    (355) labeled_statement -> . IDENTIFIER COLON statement
    (356) labeled_statement -> . CASE constant_expression COLON statement
    (357) labeled_statement -> . DEFAULT COLON statement
    (358) expression_statement -> . expression SEMICOLON
    (359) expression_statement -> . SEMICOLON
    (360) compound_statement -> . LCPAREN statement_list RCPAREN
    (361) compound_statement -> . LCPAREN RCPAREN
    (364) selection_statement -> . IF LPAREN expression RPAREN statement
    (365) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (366) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (367) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (368) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (369) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (370) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (371) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (372) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (375) jump_statement -> . BREAK SEMICOLON
    (376) jump_statement -> . CONTINUE SEMICOLON
    (377) jump_statement -> . RETURN expression SEMICOLON
    (378) jump_statement -> . RETURN SEMICOLON
    (379) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (380) declaration_statement -> . declaration
    (393) try_block -> . TRY compound_statement handler_list
    (8) expression -> . assignment_expression
    (9) expression -> . expression COMMA assignment_expression
    (135) declaration -> . decl_specifiers declarator_list SEMICOLON
    (136) declaration -> . decl_specifiers SEMICOLON
    (137) declaration -> . declarator_list SEMICOLON
    (138) declaration -> . asm_declaration
    (139) declaration -> . function_definition
    (140) declaration -> . template_declaration
    (141) declaration -> . linkage_specification
    (10) assignment_expression -> . conditional_expression
    (11) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) decl_specifiers -> . decl_specifiers decl_specifier
    (147) decl_specifiers -> . decl_specifier
    (197) declarator_list -> . init_declarator
    (198) declarator_list -> . declarator_list COMMA init_declarator
    (196) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (248) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (249) function_definition -> . declarator ctor_initializer fct_body
    (250) function_definition -> . decl_specifiers declarator fct_body
    (251) function_definition -> . declarator fct_body
    (381) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (191) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (192) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (193) linkage_specification -> . EXTERN STRING declaration
    (23) conditional_expression -> . logical_OR_expression
    (24) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (58) unary_expression -> . postfix_expression
    (59) unary_expression -> . DPLUSOP unary_expression
    (60) unary_expression -> . DMINUSOP unary_expression
    (61) unary_expression -> . unary_operator cast_expression
    (62) unary_expression -> . SIZEOF unary_expression
    (63) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (64) unary_expression -> . allocation_expression
    (65) unary_expression -> . deallocation_expression
    (142) decl_specifier -> . storage_class_specifier
    (143) decl_specifier -> . type_specifier
    (144) decl_specifier -> . fct_specifier
    (145) decl_specifier -> . TYPEDEF
    (199) init_declarator -> . declarator initializer
    (200) init_declarator -> . declarator
    (201) declarator -> . dname
    (202) declarator -> . ptr_operator declarator
    (203) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (204) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (205) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (206) declarator -> . declarator LSPAREN RSPAREN
    (207) declarator -> . LPAREN declarator RPAREN
    (25) logical_OR_expression -> . logical_AND_expression
    (26) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (107) postfix_expression -> . primary_expression
    (108) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (109) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (110) postfix_expression -> . postfix_expression LPAREN RPAREN
    (111) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (112) postfix_expression -> . simple_type_name LPAREN RPAREN
    (113) postfix_expression -> . postfix_expression DOT name
    (114) postfix_expression -> . postfix_expression ARROW name
    (115) postfix_expression -> . postfix_expression DPLUSOP
    (116) postfix_expression -> . postfix_expression DMINUSOP
    (66) unary_operator -> . MULTOP
    (67) unary_operator -> . BANDOP
    (68) unary_operator -> . PLUSOP
    (69) unary_operator -> . MINUSOP
    (70) unary_operator -> . NOTSYM
    (71) unary_operator -> . BNOP
    (72) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (73) allocation_expression -> . NEW placement new_type_name new_initializer
    (74) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (75) allocation_expression -> . NEW new_type_name new_initializer
    (76) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (77) allocation_expression -> . NEW placement new_type_name
    (78) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (79) allocation_expression -> . NEW new_type_name
    (80) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (81) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (82) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (83) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (84) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (85) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (86) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (87) allocation_expression -> . NEW LPAREN type_name RPAREN
    (103) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (104) deallocation_expression -> . DELETE cast_expression
    (105) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (106) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (148) storage_class_specifier -> . AUTO
    (149) storage_class_specifier -> . STATIC
    (150) storage_class_specifier -> . EXTERN
    (153) type_specifier -> . simple_type_name
    (154) type_specifier -> . class_specifier
    (155) type_specifier -> . enum_specifier
    (156) type_specifier -> . elaborated_type_specifier
    (157) type_specifier -> . CONST
    (158) type_specifier -> . VOLATILE
    (151) fct_specifier -> . INLINE
    (152) fct_specifier -> . VIRTUAL
    (218) dname -> . name
    (219) dname -> . class_name
    (220) dname -> . BNOP class_name
    (221) dname -> . typedef_name
    (222) dname -> . qualified_type_name
    (208) ptr_operator -> . MULTOP cv_qualifier_list
    (209) ptr_operator -> . MULTOP
    (210) ptr_operator -> . BANDOP cv_qualifier_list
    (211) ptr_operator -> . BANDOP
    (212) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (213) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (27) logical_AND_expression -> . inclusive_OR_expression
    (28) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (119) primary_expression -> . literal
    (120) primary_expression -> . THIS
    (121) primary_expression -> . DOUBLECOLON IDENTIFIER
    (122) primary_expression -> . DOUBLECOLON operator_function_name
    (123) primary_expression -> . DOUBLECOLON qualified_name
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (159) simple_type_name -> . complete_class_name
    (160) simple_type_name -> . qualified_type_name
    (161) simple_type_name -> . CHAR
    (162) simple_type_name -> . SHORT
    (163) simple_type_name -> . INT
    (164) simple_type_name -> . LONG
    (165) simple_type_name -> . SIGNED
    (166) simple_type_name -> . UNSIGNED
    (167) simple_type_name -> . FLOAT
    (168) simple_type_name -> . DOUBLE
    (169) simple_type_name -> . VOID
    (261) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (262) class_specifier -> . class_head LCPAREN RCPAREN
    (182) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (183) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (184) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (185) enum_specifier -> . ENUM LCPAREN RCPAREN
    (170) elaborated_type_specifier -> . class_key IDENTIFIER
    (171) elaborated_type_specifier -> . class_key class_name
    (172) elaborated_type_specifier -> . ENUM enum_name
    (126) name -> . IDENTIFIER
    (127) name -> . operator_function_name
    (128) name -> . conversion_function_name
    (129) name -> . BNOP class_name
    (130) name -> . qualified_name
    (5) class_name -> . IDENTIFIER
    (7) typedef_name -> . IDENTIFIER
    (176) qualified_type_name -> . typedef_name
    (177) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (178) complete_class_name -> . qualified_class_name
    (179) complete_class_name -> . DOUBLECOLON qualified_class_name
    (29) inclusive_OR_expression -> . exclusive_OR_expression
    (30) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (132) literal -> . NUMBER
    (133) literal -> . CHAR
    (134) literal -> . STRING
    (263) class_head -> . class_key IDENTIFIER base_spec
    (264) class_head -> . class_key base_spec
    (265) class_head -> . class_key IDENTIFIER
    (266) class_head -> . class_key
    (267) class_head -> . class_key class_name base_spec
    (268) class_head -> . class_key class_name
    (173) class_key -> . CLASS
    (174) class_key -> . STRUCT
    (175) class_key -> . UNION
    (308) operator_function_name -> . OPERATOR operator_name
    (298) conversion_function_name -> . OPERATOR conversion_type_name
    (131) qualified_name -> . qualified_class_name DOUBLECOLON name
    (180) qualified_class_name -> . class_name
    (181) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (31) exclusive_OR_expression -> . AND_expression
    (32) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (33) AND_expression -> . equality_expression
    (34) AND_expression -> . AND_expression BANDOP equality_expression
    (35) equality_expression -> . relational_expression
    (36) equality_expression -> . equality_expression EQCOMP relational_expression
    (37) equality_expression -> . equality_expression NEQCOMP relational_expression
    (38) relational_expression -> . shift_expression
    (39) relational_expression -> . relational_expression LTCOMP shift_expression
    (40) relational_expression -> . relational_expression GTCOMP shift_expression
    (41) relational_expression -> . relational_expression LTECOMP shift_expression
    (42) relational_expression -> . relational_expression GTECOMP shift_expression
    (43) shift_expression -> . additive_expression
    (44) shift_expression -> . shift_expression LSHIFT additive_expression
    (45) shift_expression -> . shift_expression RSHIFT additive_expression
    (46) additive_expression -> . multiplicative_expression
    (47) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (48) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (49) multiplicative_expression -> . pm_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (52) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (53) pm_expression -> . cast_expression
    (54) pm_expression -> . pm_expression DOTSTAR cast_expression
    (55) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (56) cast_expression -> . unary_expression
    (57) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 153
    CASE            shift and go to state 18
    DEFAULT         shift and go to state 19
    SEMICOLON       shift and go to state 20
    LCPAREN         shift and go to state 21
    IF              shift and go to state 22
    SWITCH          shift and go to state 24
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    FOR             shift and go to state 27
    BREAK           shift and go to state 28
    CONTINUE        shift and go to state 29
    RETURN          shift and go to state 30
    GOTO            shift and go to state 31
    TRY             shift and go to state 33
    ASM             shift and go to state 64
    TEMPLATE        shift and go to state 66
    EXTERN          shift and go to state 67
    DPLUSOP         shift and go to state 36
    DMINUSOP        shift and go to state 37
    SIZEOF          shift and go to state 40
    TYPEDEF         shift and go to state 87
    LPAREN          shift and go to state 155
    MULTOP          shift and go to state 53
    BANDOP          shift and go to state 54
    PLUSOP          shift and go to state 55
    MINUSOP         shift and go to state 56
    NOTSYM          shift and go to state 57
    BNOP            shift and go to state 157
    DOUBLECOLON     shift and go to state 59
    NEW             shift and go to state 60
    DELETE          shift and go to state 61
    AUTO            shift and go to state 95
    STATIC          shift and go to state 96
    CONST           shift and go to state 100
    VOLATILE        shift and go to state 101
    INLINE          shift and go to state 102
    VIRTUAL         shift and go to state 103
    THIS            shift and go to state 70
    CHAR            shift and go to state 75
    SHORT           shift and go to state 76
    INT             shift and go to state 77
    LONG            shift and go to state 78
    SIGNED          shift and go to state 79
    UNSIGNED        shift and go to state 80
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 82
    VOID            shift and go to state 83
    ENUM            shift and go to state 107
    NUMBER          shift and go to state 145
    STRING          shift and go to state 146
    CLASS           shift and go to state 110
    STRUCT          shift and go to state 111
    UNION           shift and go to state 112
    OPERATOR        shift and go to state 105

    expression                     shift and go to state 154
    statement                      shift and go to state 658
    labeled_statement              shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    selection_statement            shift and go to state 10
    iteration_statement            shift and go to state 11
    jump_statement                 shift and go to state 12
    declaration_statement          shift and go to state 13
    try_block                      shift and go to state 14
    declaration                    shift and go to state 32
    assignment_expression          shift and go to state 6
    decl_specifiers                shift and go to state 43
    declarator_list                shift and go to state 44
    asm_declaration                shift and go to state 45
    function_definition            shift and go to state 46
    template_declaration           shift and go to state 47
    linkage_specification          shift and go to state 48
    conditional_expression         shift and go to state 15
    unary_expression               shift and go to state 16
    decl_specifier                 shift and go to state 62
    init_declarator                shift and go to state 63
    declarator                     shift and go to state 65
    logical_OR_expression          shift and go to state 34
    postfix_expression             shift and go to state 35
    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 39
    allocation_expression          shift and go to state 41
    deallocation_expression        shift and go to state 42
    storage_class_specifier        shift and go to state 84
    type_specifier                 shift and go to state 85
    fct_specifier                  shift and go to state 86
    dname                          shift and go to state 88
    ptr_operator                   shift and go to state 89
    logical_AND_expression         shift and go to state 49
    primary_expression             shift and go to state 50
    simple_type_name               shift and go to state 51
    name                           shift and go to state 156
    class_specifier                shift and go to state 97
    enum_specifier                 shift and go to state 98
    elaborated_type_specifier      shift and go to state 99
    class_name                     shift and go to state 158
    typedef_name                   shift and go to state 159
    qualified_type_name            shift and go to state 160
    complete_class_name            shift and go to state 161
    inclusive_OR_expression        shift and go to state 68
    literal                        shift and go to state 69
    operator_function_name         shift and go to state 71
    qualified_name                 shift and go to state 72
    class_head                     shift and go to state 106
    class_key                      shift and go to state 108
    conversion_function_name       shift and go to state 91
    qualified_class_name           shift and go to state 93
    exclusive_OR_expression        shift and go to state 90
    AND_expression                 shift and go to state 104
    equality_expression            shift and go to state 109
    relational_expression          shift and go to state 113
    shift_expression               shift and go to state 114
    additive_expression            shift and go to state 115
    multiplicative_expression      shift and go to state 116
    pm_expression                  shift and go to state 117

state 652

    (371) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .

    $end            reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    RCPAREN         reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    IDENTIFIER      reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CASE            reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LCPAREN         reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    IF              reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DO              reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    FOR             reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    GOTO            reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TRY             reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ASM             reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TEMPLATE        reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    EXTERN          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DPLUSOP         reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DMINUSOP        reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TYPEDEF         reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    MULTOP          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BANDOP          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    PLUSOP          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    MINUSOP         reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NOTSYM          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BNOP            reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DOUBLECOLON     reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NEW             reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STATIC          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CONST           reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    VOLATILE        reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    INLINE          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    VIRTUAL         reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    THIS            reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SHORT           reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    INT             reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LONG            reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SIGNED          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    UNSIGNED        reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    VOID            reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ENUM            reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NUMBER          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRING          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    UNION           reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    OPERATOR        reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 371 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)


state 653

    (370) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .

    $end            reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    RCPAREN         reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    IDENTIFIER      reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CASE            reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DEFAULT         reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LCPAREN         reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SWITCH          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DO              reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    GOTO            reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TRY             reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ASM             reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TEMPLATE        reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    EXTERN          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DPLUSOP         reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DMINUSOP        reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SIZEOF          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TYPEDEF         reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MULTOP          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BANDOP          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    PLUSOP          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MINUSOP         reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NOTSYM          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BNOP            reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DOUBLECOLON     reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NEW             reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DELETE          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    AUTO            reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STATIC          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CONST           reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VOLATILE        reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    INLINE          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VIRTUAL         reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    THIS            reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CHAR            reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SHORT           reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LONG            reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SIGNED          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    UNSIGNED        reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ENUM            reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRING          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CLASS           reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRUCT          reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    UNION           reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    OPERATOR        reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 370 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)


state 654

    (396) handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .

    CATCH           reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    $end            reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    RCPAREN         reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    IDENTIFIER      reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CASE            reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DEFAULT         reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SEMICOLON       reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    LCPAREN         reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    IF              reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SWITCH          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    WHILE           reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DO              reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    FOR             reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    BREAK           reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CONTINUE        reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    RETURN          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    GOTO            reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    TRY             reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    ASM             reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    TEMPLATE        reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    EXTERN          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DPLUSOP         reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DMINUSOP        reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SIZEOF          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    TYPEDEF         reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    LPAREN          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    MULTOP          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    BANDOP          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    PLUSOP          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    MINUSOP         reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    NOTSYM          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    BNOP            reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DOUBLECOLON     reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    NEW             reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DELETE          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    AUTO            reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    STATIC          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CONST           reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    VOLATILE        reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    INLINE          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    VIRTUAL         reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    THIS            reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CHAR            reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SHORT           reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    INT             reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    LONG            reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SIGNED          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    UNSIGNED        reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    FLOAT           reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DOUBLE          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    VOID            reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    ENUM            reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    NUMBER          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    STRING          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CLASS           reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    STRUCT          reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    UNION           reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    OPERATOR        reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    ELSE            reduce using rule 396 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)


state 655

    (80) allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .

    EQUAL           reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    B_E_OR          reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    DOTSTAR         reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    $end            reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 80 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)


state 656

    (260) initializer_list -> LCPAREN initializer_list COMMA RCPAREN .

    RPAREN          reduce using rule 260 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 260 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    RCPAREN         reduce using rule 260 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)


state 657

    (95) new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .
    (99) new_declarator -> new_declarator . LSPAREN expression RSPAREN

  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    EQUAL           reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    MULTEQOP        reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    DIVEQOP         reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    MODEQOP         reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    PLUSEQOP        reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    MINUSEQOP       reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    LSHIFTEQOP      reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    RSHIFTEQOP      reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    BANDEQOP        reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    B_E_OR          reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    BOREQOP         reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    DOTSTAR         reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    ARROWSTAR       reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    MULTOP          reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    DIVOP           reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    MODOP           reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    PLUSOP          reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    MINUSOP         reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    LSHIFT          reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    RSHIFT          reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    LTCOMP          reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    GTCOMP          reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    LTECOMP         reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    GTECOMP         reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    EQCOMP          reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    NEQCOMP         reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    BANDOP          reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    XOROP           reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    OROP            reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    ANDOP           reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    QUESMARK        reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    COMMA           reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    SEMICOLON       reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    $end            reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    COLON           reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    RPAREN          reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    RSPAREN         reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    RCPAREN         reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    LSPAREN         shift and go to state 510

  ! LSPAREN         [ reduce using rule 95 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .) ]


state 658

    (369) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .

    $end            reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    RCPAREN         reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    IDENTIFIER      reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CASE            reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DEFAULT         reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LCPAREN         reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SWITCH          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DO              reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    GOTO            reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TRY             reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ASM             reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TEMPLATE        reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    EXTERN          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DPLUSOP         reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DMINUSOP        reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SIZEOF          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TYPEDEF         reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    MULTOP          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BANDOP          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    PLUSOP          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    MINUSOP         reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NOTSYM          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BNOP            reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DOUBLECOLON     reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NEW             reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DELETE          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    AUTO            reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STATIC          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CONST           reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    VOLATILE        reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    INLINE          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    VIRTUAL         reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    THIS            reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CHAR            reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SHORT           reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LONG            reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SIGNED          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    UNSIGNED        reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ENUM            reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRING          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CLASS           reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRUCT          reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    UNION           reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    OPERATOR        reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 369 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COLON in state 17 resolved as shift
WARNING: shift/reduce conflict for COLON in state 17 resolved as shift
WARNING: shift/reduce conflict for COLON in state 17 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 51 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 58 resolved as shift
WARNING: shift/reduce conflict for OROP in state 68 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 73 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 92 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 93 resolved as shift
WARNING: shift/reduce conflict for GTCOMP in state 113 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 141 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 147 resolved as shift
WARNING: shift/reduce conflict for COLON in state 153 resolved as shift
WARNING: shift/reduce conflict for COLON in state 153 resolved as shift
WARNING: shift/reduce conflict for COLON in state 153 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 157 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 158 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 161 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 167 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 171 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 171 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 173 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 228 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 230 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 234 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 252 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 252 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 299 resolved as shift
WARNING: shift/reduce conflict for BANDOP in state 299 resolved as shift
WARNING: shift/reduce conflict for LCPAREN in state 301 resolved as shift
WARNING: shift/reduce conflict for COLON in state 304 resolved as shift
WARNING: shift/reduce conflict for COLON in state 305 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 340 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 340 resolved as shift
WARNING: shift/reduce conflict for OROP in state 373 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 390 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 390 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 406 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 413 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 434 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 435 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 441 resolved as shift
WARNING: shift/reduce conflict for COLON in state 442 resolved as shift
WARNING: shift/reduce conflict for COLON in state 442 resolved as shift
WARNING: shift/reduce conflict for COLON in state 442 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 443 resolved as shift
WARNING: shift/reduce conflict for GTCOMP in state 456 resolved as shift
WARNING: shift/reduce conflict for GTCOMP in state 457 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 476 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 476 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 479 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 511 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 511 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 512 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 523 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 523 resolved as shift
WARNING: shift/reduce conflict for COLON in state 544 resolved as shift
WARNING: shift/reduce conflict for COLON in state 544 resolved as shift
WARNING: shift/reduce conflict for COLON in state 544 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 563 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 590 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 591 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 591 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 597 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 641 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 641 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 642 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 643 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 644 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 657 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> NUMBER)
WARNING: rejected rule (literal -> NUMBER) in state 2
WARNING: reduce/reduce conflict in state 3 resolved using rule (program -> STRING)
WARNING: rejected rule (literal -> STRING) in state 3
WARNING: reduce/reduce conflict in state 17 resolved using rule (typedef_name -> IDENTIFIER)
WARNING: rejected rule (name -> IDENTIFIER) in state 17
WARNING: reduce/reduce conflict in state 17 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 17
WARNING: reduce/reduce conflict in state 52 resolved using rule (primary_expression -> name)
WARNING: rejected rule (dname -> name) in state 52
WARNING: reduce/reduce conflict in state 53 resolved using rule (unary_operator -> MULTOP)
WARNING: rejected rule (ptr_operator -> MULTOP) in state 53
WARNING: reduce/reduce conflict in state 54 resolved using rule (unary_operator -> BANDOP)
WARNING: rejected rule (ptr_operator -> BANDOP) in state 54
WARNING: reduce/reduce conflict in state 74 resolved using rule (simple_type_name -> qualified_type_name)
WARNING: rejected rule (dname -> qualified_type_name) in state 74
WARNING: reduce/reduce conflict in state 75 resolved using rule (literal -> CHAR)
WARNING: rejected rule (simple_type_name -> CHAR) in state 75
WARNING: reduce/reduce conflict in state 92 resolved using rule (qualified_class_name -> class_name)
WARNING: rejected rule (dname -> class_name) in state 92
WARNING: reduce/reduce conflict in state 94 resolved using rule (qualified_type_name -> typedef_name)
WARNING: rejected rule (dname -> typedef_name) in state 94
WARNING: reduce/reduce conflict in state 142 resolved using rule (typedef_name -> IDENTIFIER)
WARNING: rejected rule (name -> IDENTIFIER) in state 142
WARNING: reduce/reduce conflict in state 142 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 142
WARNING: reduce/reduce conflict in state 153 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (name -> IDENTIFIER) in state 153
WARNING: reduce/reduce conflict in state 153 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 153
WARNING: reduce/reduce conflict in state 156 resolved using rule (primary_expression -> name)
WARNING: rejected rule (dname -> name) in state 156
WARNING: reduce/reduce conflict in state 158 resolved using rule (qualified_class_name -> class_name)
WARNING: rejected rule (dname -> class_name) in state 158
WARNING: reduce/reduce conflict in state 159 resolved using rule (qualified_type_name -> typedef_name)
WARNING: rejected rule (dname -> typedef_name) in state 159
WARNING: reduce/reduce conflict in state 160 resolved using rule (simple_type_name -> qualified_type_name)
WARNING: rejected rule (dname -> qualified_type_name) in state 160
WARNING: reduce/reduce conflict in state 168 resolved using rule (unary_operator -> MULTOP)
WARNING: rejected rule (ptr_operator -> MULTOP) in state 168
WARNING: reduce/reduce conflict in state 169 resolved using rule (unary_operator -> BANDOP)
WARNING: rejected rule (ptr_operator -> BANDOP) in state 169
WARNING: reduce/reduce conflict in state 172 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (name -> IDENTIFIER) in state 172
WARNING: reduce/reduce conflict in state 172 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 172
WARNING: reduce/reduce conflict in state 221 resolved using rule (name -> BNOP class_name)
WARNING: rejected rule (dname -> BNOP class_name) in state 221
WARNING: reduce/reduce conflict in state 225 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (primary_expression -> DOUBLECOLON IDENTIFIER) in state 225
WARNING: reduce/reduce conflict in state 235 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 235
WARNING: reduce/reduce conflict in state 304 resolved using rule (elaborated_type_specifier -> class_key IDENTIFIER)
WARNING: rejected rule (class_head -> class_key IDENTIFIER) in state 304
WARNING: reduce/reduce conflict in state 304 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (elaborated_type_specifier -> class_key IDENTIFIER) in state 304
WARNING: reduce/reduce conflict in state 305 resolved using rule (elaborated_type_specifier -> class_key class_name)
WARNING: rejected rule (class_head -> class_key class_name) in state 305
WARNING: reduce/reduce conflict in state 327 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 327
WARNING: reduce/reduce conflict in state 327 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (name -> IDENTIFIER) in state 327
WARNING: reduce/reduce conflict in state 333 resolved using rule (name -> BNOP class_name)
WARNING: rejected rule (dname -> BNOP class_name) in state 333
WARNING: reduce/reduce conflict in state 442 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (name -> IDENTIFIER) in state 442
WARNING: reduce/reduce conflict in state 442 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 442
WARNING: reduce/reduce conflict in state 443 resolved using rule (qualified_class_name -> class_name)
WARNING: rejected rule (dname -> class_name) in state 443
WARNING: reduce/reduce conflict in state 480 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 480
WARNING: reduce/reduce conflict in state 544 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (name -> IDENTIFIER) in state 544
WARNING: reduce/reduce conflict in state 544 resolved using rule (class_name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 544
WARNING: Rule (dname -> typedef_name) is never reduced
WARNING: Rule (dname -> BNOP class_name) is never reduced
WARNING: Rule (class_head -> class_key IDENTIFIER) is never reduced
WARNING: Rule (elaborated_type_specifier -> class_key IDENTIFIER) is never reduced
WARNING: Rule (class_head -> class_key class_name) is never reduced
