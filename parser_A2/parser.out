Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    AND_EQ
    BITAND
    BITOR
    BOOL
    BOROP
    CHAR16_T
    CHAR32_T
    CHAR8_T
    COMMENT
    COMPL
    CONDTIONAL
    DOUBLECOLON
    DQUOTE
    FALSE
    INLINE
    LEFTQOP
    LEFTSHIFT
    MODQOP
    NAMESPACE
    NOT
    NOT_EQ
    NULLPTR
    OR
    OR_EQ
    RIGHTLIFT
    RIGHTQOP
    SQUOTE
    STD
    TRUE
    UMINUSOP
    UPLUSOP
    USING
    XOR
    XOREQOR
    XOR_EQ

Grammar

Rule 0     S' -> program
Rule 1     control_line -> control_line control_line_stmt
Rule 2     control_line -> control_line_stmt
Rule 3     include_control -> HASHTAG INCLUDE
Rule 4     control_line_stmt -> include_control LTCOMP STRING_L GTCOMP
Rule 5     control_line_stmt -> include_control STRING_L
Rule 6     program -> control_line translation_unit
Rule 7     program -> translation_unit
Rule 8     translation_unit -> declaration_seq
Rule 9     throw_expression -> THROW expression
Rule 10    throw_expression -> THROW
Rule 11    type_list -> type_name
Rule 12    type_list -> type_list COMMA type_name
Rule 13    declaration_seq -> declaration_seq declaration
Rule 14    declaration_seq -> declaration
Rule 15    empty -> <empty>
Rule 16    template_class_name -> LTEMPLATE template_arg_list RTEMPLATE
Rule 17    template_arg_list -> template_arg
Rule 18    template_arg_list -> template_arg_list COMMA template_arg
Rule 19    template_arg -> expression
Rule 20    template_arg -> type_name
Rule 21    enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN
Rule 22    enum_specifier -> ENUM LCPAREN enum_list RCPAREN
Rule 23    enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN
Rule 24    enum_specifier -> ENUM LCPAREN RCPAREN
Rule 25    enum_list -> enumerator
Rule 26    enum_list -> enum_list COMMA enumerator
Rule 27    enumerator -> IDENTIFIER
Rule 28    enumerator -> IDENTIFIER EQUAL constant_expression
Rule 29    constant_expression -> conditional_expression
Rule 30    conditional_expression -> logical_OR_expression
Rule 31    conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression
Rule 32    logical_OR_expression -> logical_AND_expression
Rule 33    logical_OR_expression -> logical_OR_expression OROP logical_AND_expression
Rule 34    logical_AND_expression -> inclusive_OR_expression
Rule 35    logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression
Rule 36    inclusive_OR_expression -> exclusive_OR_expression
Rule 37    inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression
Rule 38    exclusive_OR_expression -> AND_expression
Rule 39    exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression
Rule 40    AND_expression -> equality_expression
Rule 41    AND_expression -> AND_expression BANDOP equality_expression
Rule 42    equality_expression -> relational_expression
Rule 43    equality_expression -> equality_expression EQCOMP relational_expression
Rule 44    equality_expression -> equality_expression NEQCOMP relational_expression
Rule 45    relational_expression -> shift_expression
Rule 46    relational_expression -> relational_expression LTCOMP shift_expression
Rule 47    relational_expression -> relational_expression GTCOMP shift_expression
Rule 48    relational_expression -> relational_expression LTECOMP shift_expression
Rule 49    relational_expression -> relational_expression GTECOMP shift_expression
Rule 50    shift_expression -> additive_expression
Rule 51    shift_expression -> shift_expression LSHIFT additive_expression
Rule 52    shift_expression -> shift_expression RSHIFT additive_expression
Rule 53    additive_expression -> multiplicative_expression
Rule 54    additive_expression -> additive_expression PLUSOP multiplicative_expression
Rule 55    additive_expression -> additive_expression MINUSOP multiplicative_expression
Rule 56    multiplicative_expression -> pm_expression
Rule 57    multiplicative_expression -> multiplicative_expression MULTOP pm_expression
Rule 58    multiplicative_expression -> multiplicative_expression DIVOP pm_expression
Rule 59    multiplicative_expression -> multiplicative_expression MODOP pm_expression
Rule 60    pm_expression -> cast_expression
Rule 61    pm_expression -> pm_expression DOTSTAR cast_expression
Rule 62    pm_expression -> pm_expression ARROWSTAR cast_expression
Rule 63    expression -> assignment_expression
Rule 64    expression -> throw_expression
Rule 65    expression -> expression COMMA assignment_expression
Rule 66    assignment_expression -> conditional_expression
Rule 67    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 68    assignment_operator -> EQUAL
Rule 69    assignment_operator -> MULTEQOP
Rule 70    assignment_operator -> DIVEQOP
Rule 71    assignment_operator -> MODEQOP
Rule 72    assignment_operator -> PLUSEQOP
Rule 73    assignment_operator -> MINUSEQOP
Rule 74    assignment_operator -> LSHIFTEQOP
Rule 75    assignment_operator -> RSHIFTEQOP
Rule 76    assignment_operator -> BANDEQOP
Rule 77    assignment_operator -> BOREQOP
Rule 78    unary_expression -> postfix_expression
Rule 79    unary_expression -> DPLUSOP unary_expression
Rule 80    unary_expression -> DMINUSOP unary_expression
Rule 81    unary_expression -> unary1_operator cast_expression
Rule 82    unary_expression -> unary2_operator cast_expression
Rule 83    unary_expression -> SIZEOF unary_expression
Rule 84    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 85    unary_expression -> allocation_expression
Rule 86    unary_expression -> deallocation_expression
Rule 87    deallocation_expression -> DELETE cast_expression
Rule 88    allocation_expression -> NEW placement new_type_name new_initializer
Rule 89    allocation_expression -> NEW new_type_name new_initializer
Rule 90    allocation_expression -> NEW placement new_type_name
Rule 91    allocation_expression -> NEW new_type_name
Rule 92    allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer
Rule 93    allocation_expression -> NEW LPAREN type_name RPAREN new_initializer
Rule 94    allocation_expression -> NEW placement LPAREN type_name RPAREN
Rule 95    allocation_expression -> NEW LPAREN type_name RPAREN
Rule 96    new_type_name -> type_specifier_list new_declarator
Rule 97    new_type_name -> type_specifier_list
Rule 98    new_declarator -> MULTOP new_declarator
Rule 99    new_declarator -> MULTOP
Rule 100   new_declarator -> new_declarator LSPAREN expression RSPAREN
Rule 101   new_declarator -> LSPAREN expression RSPAREN
Rule 102   placement -> LPAREN expression_list RPAREN
Rule 103   new_initializer -> LPAREN initializer_list RPAREN
Rule 104   new_initializer -> LPAREN RPAREN
Rule 105   unary1_operator -> PLUSOP
Rule 106   unary1_operator -> MINUSOP
Rule 107   unary1_operator -> NOTSYM
Rule 108   unary1_operator -> BNOP
Rule 109   unary2_operator -> MULTOP
Rule 110   unary2_operator -> BANDOP
Rule 111   postfix_expression -> primary_expression
Rule 112   postfix_expression -> postfix_expression LSPAREN expression RSPAREN
Rule 113   postfix_expression -> postfix_expression LPAREN expression_list RPAREN
Rule 114   postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN
Rule 115   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 116   postfix_expression -> simple_type_name LPAREN expression_list RPAREN
Rule 117   postfix_expression -> simple_type_name LPAREN RPAREN
Rule 118   postfix_expression -> postfix_expression DOT name
Rule 119   postfix_expression -> postfix_expression ARROW name
Rule 120   postfix_expression -> postfix_expression DPLUSOP
Rule 121   postfix_expression -> postfix_expression DMINUSOP
Rule 122   primary_expression -> literal
Rule 123   primary_expression -> THIS
Rule 124   primary_expression -> LPAREN expression RPAREN
Rule 125   primary_expression -> name
Rule 126   literal -> NUMBER
Rule 127   literal -> STRING_L
Rule 128   literal -> SCHAR
Rule 129   cast_expression -> unary_expression
Rule 130   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 131   type_name -> type_specifier_list abstract_declarator
Rule 132   type_name -> type_specifier_list
Rule 133   abstract_declarator -> unary2_operator abstract_declarator
Rule 134   abstract_declarator -> unary2_operator
Rule 135   abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN
Rule 136   abstract_declarator -> LPAREN argument_declaration_list RPAREN
Rule 137   abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN
Rule 138   abstract_declarator -> LSPAREN constant_expression RSPAREN
Rule 139   abstract_declarator -> abstract_declarator LSPAREN RSPAREN
Rule 140   abstract_declarator -> LSPAREN RSPAREN
Rule 141   abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 142   argument_declaration_list -> arg_declaration_list
Rule 143   argument_declaration_list -> empty
Rule 144   arg_declaration_list -> argument_declaration
Rule 145   arg_declaration_list -> argument_declaration COMMA arg_declaration_list
Rule 146   argument_declaration -> decl_specifiers declarator
Rule 147   argument_declaration -> decl_specifiers declarator EQUAL expression
Rule 148   argument_declaration -> decl_specifiers abstract_declarator
Rule 149   argument_declaration -> decl_specifiers
Rule 150   argument_declaration -> decl_specifiers abstract_declarator EQUAL expression
Rule 151   argument_declaration -> decl_specifiers EQUAL expression
Rule 152   decl_specifiers -> decl_specifiers decl_specifier
Rule 153   decl_specifiers -> decl_specifier
Rule 154   decl_specifier -> storage_class_specifier
Rule 155   decl_specifier -> type_specifier
Rule 156   decl_specifier -> TYPEDEF
Rule 157   storage_class_specifier -> AUTO
Rule 158   storage_class_specifier -> STATIC
Rule 159   storage_class_specifier -> EXTERN
Rule 160   storage_class_specifier -> VIRTUAL
Rule 161   type_specifier -> simple_type_name
Rule 162   type_specifier -> class_specifier
Rule 163   type_specifier -> enum_specifier
Rule 164   type_specifier -> elaborated_type_specifier
Rule 165   type_specifier -> CONST
Rule 166   type_specifier -> VOLATILE
Rule 167   class_specifier -> class_head LCPAREN member_list RCPAREN
Rule 168   class_specifier -> class_head LCPAREN RCPAREN
Rule 169   member_list -> member_access_list
Rule 170   member_list -> access_list
Rule 171   member_list -> member_list access_list
Rule 172   access_list -> access_specifier COLON member_access_list
Rule 173   access_list -> access_specifier COLON
Rule 174   member_access_list -> member_declaration member_access_list
Rule 175   member_access_list -> member_declaration
Rule 176   member_declaration -> decl_specifiers member_declarator_list SEMICOLON
Rule 177   member_declaration -> member_declarator_list SEMICOLON
Rule 178   member_declaration -> decl_specifiers SEMICOLON
Rule 179   member_declaration -> SEMICOLON
Rule 180   member_declaration -> function_definition SEMICOLON
Rule 181   member_declaration -> function_definition
Rule 182   function_definition -> decl_specifiers declarator fct_body
Rule 183   function_definition -> declarator fct_body
Rule 184   fct_body -> compound_statement
Rule 185   compound_statement -> LCPAREN statement_list RCPAREN
Rule 186   compound_statement -> LCPAREN RCPAREN
Rule 187   statement_list -> statement
Rule 188   statement_list -> statement_list statement
Rule 189   statement -> labeled_statement
Rule 190   statement -> expression_statement
Rule 191   statement -> compound_statement
Rule 192   statement -> selection_statement
Rule 193   statement -> iteration_statement
Rule 194   statement -> jump_statement
Rule 195   statement -> declaration_statement
Rule 196   statement -> try_block
Rule 197   jump_statement -> BREAK SEMICOLON
Rule 198   jump_statement -> CONTINUE SEMICOLON
Rule 199   jump_statement -> RETURN expression SEMICOLON
Rule 200   jump_statement -> RETURN SEMICOLON
Rule 201   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 202   selection_statement -> IF LPAREN expression RPAREN statement
Rule 203   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 204   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 205   try_block -> TRY compound_statement handler_list
Rule 206   handler_list -> handler handler_list
Rule 207   handler_list -> handler
Rule 208   handler -> CATCH LPAREN exception_declaration RPAREN compound_statement
Rule 209   exception_declaration -> type_specifier_list declarator
Rule 210   exception_declaration -> type_specifier_list abstract_declarator
Rule 211   exception_declaration -> type_specifier_list
Rule 212   labeled_statement -> IDENTIFIER COLON statement
Rule 213   labeled_statement -> CASE constant_expression COLON statement
Rule 214   labeled_statement -> DEFAULT COLON statement
Rule 215   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 216   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 217   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
Rule 218   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
Rule 219   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
Rule 220   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement
Rule 221   for_init_statement -> expression_statement
Rule 222   for_init_statement -> declaration_statement
Rule 223   expression_statement -> expression SEMICOLON
Rule 224   expression_statement -> SEMICOLON
Rule 225   declaration_statement -> declaration
Rule 226   declaration -> decl_specifiers declarator_list SEMICOLON
Rule 227   declaration -> decl_specifiers SEMICOLON
Rule 228   declaration -> declarator_list SEMICOLON
Rule 229   declaration -> asm_declaration
Rule 230   declaration -> function_definition
Rule 231   declaration -> template_declaration
Rule 232   template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
Rule 233   template_argument_list -> argument_declaration
Rule 234   template_argument_list -> template_argument_list COMMA argument_declaration
Rule 235   declarator_list -> init_declarator
Rule 236   declarator_list -> declarator_list COMMA init_declarator
Rule 237   init_declarator -> declarator initializer
Rule 238   init_declarator -> declarator
Rule 239   initializer -> EQUAL assignment_expression
Rule 240   initializer -> EQUAL LCPAREN initializer_list RCPAREN
Rule 241   initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN
Rule 242   initializer -> LPAREN expression_list RPAREN
Rule 243   initializer_list -> assignment_expression
Rule 244   initializer_list -> initializer_list COMMA assignment_expression
Rule 245   initializer_list -> LCPAREN initializer_list RCPAREN
Rule 246   initializer_list -> LCPAREN initializer_list COMMA RCPAREN
Rule 247   asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON
Rule 248   declaration_list -> declaration
Rule 249   declaration_list -> declaration_list declaration
Rule 250   expression_list -> assignment_expression
Rule 251   expression_list -> expression_list COMMA assignment_expression
Rule 252   member_declarator_list -> member_declarator
Rule 253   member_declarator_list -> member_declarator_list COMMA member_declarator
Rule 254   member_declarator -> declarator pure_specifier
Rule 255   member_declarator -> declarator
Rule 256   member_declarator -> IDENTIFIER COLON constant_expression
Rule 257   member_declarator -> COLON constant_expression
Rule 258   declarator -> name
Rule 259   declarator -> unary2_operator declarator
Rule 260   declarator -> declarator LPAREN argument_declaration_list RPAREN
Rule 261   declarator -> declarator LSPAREN constant_expression RSPAREN
Rule 262   declarator -> declarator LSPAREN RSPAREN
Rule 263   declarator -> LPAREN declarator RPAREN
Rule 264   name -> IDENTIFIER
Rule 265   name -> operator_function_name
Rule 266   name -> BNOP IDENTIFIER
Rule 267   type_specifier_list -> type_specifier type_specifier_list
Rule 268   type_specifier_list -> type_specifier
Rule 269   operator_function_name -> OPERATOR operator_name
Rule 270   operator_name -> NEW
Rule 271   operator_name -> DELETE
Rule 272   operator_name -> PLUSOP
Rule 273   operator_name -> MINUSOP
Rule 274   operator_name -> MULTOP
Rule 275   operator_name -> DIVOP
Rule 276   operator_name -> MODOP
Rule 277   operator_name -> XOROP
Rule 278   operator_name -> BANDOP
Rule 279   operator_name -> BNOP
Rule 280   operator_name -> NOTSYM
Rule 281   operator_name -> EQUAL
Rule 282   operator_name -> LTCOMP
Rule 283   operator_name -> GTCOMP
Rule 284   operator_name -> PLUSEQOP
Rule 285   operator_name -> MINUSEQOP
Rule 286   operator_name -> MULTEQOP
Rule 287   operator_name -> DIVEQOP
Rule 288   operator_name -> MODEQOP
Rule 289   operator_name -> XOREQOP
Rule 290   operator_name -> BANDEQOP
Rule 291   operator_name -> LSHIFT
Rule 292   operator_name -> RSHIFT
Rule 293   operator_name -> RSHIFTEQOP
Rule 294   operator_name -> LSHIFTEQOP
Rule 295   operator_name -> EQCOMP
Rule 296   operator_name -> NEQCOMP
Rule 297   operator_name -> LTECOMP
Rule 298   operator_name -> GTECOMP
Rule 299   operator_name -> ANDOP
Rule 300   operator_name -> OROP
Rule 301   operator_name -> DPLUSOP
Rule 302   operator_name -> DMINUSOP
Rule 303   operator_name -> COMMA
Rule 304   operator_name -> ARROWSTAR
Rule 305   operator_name -> ARROW
Rule 306   operator_name -> LPAREN RPAREN
Rule 307   operator_name -> LSPAREN RSPAREN
Rule 308   pure_specifier -> EQUAL NUMBER
Rule 309   class_head -> class_key base_spec
Rule 310   class_head -> class_key
Rule 311   class_head -> class_key IDENTIFIER base_spec
Rule 312   class_head -> class_key IDENTIFIER
Rule 313   base_spec -> COLON base_list
Rule 314   base_list -> base_specifier
Rule 315   base_list -> base_list COMMA base_specifier
Rule 316   base_specifier -> class_key IDENTIFIER
Rule 317   base_specifier -> access_specifier class_key IDENTIFIER
Rule 318   base_specifier -> class_key IDENTIFIER template_class_name
Rule 319   base_specifier -> access_specifier class_key IDENTIFIER template_class_name
Rule 320   base_specifier -> IDENTIFIER
Rule 321   base_specifier -> access_specifier IDENTIFIER
Rule 322   base_specifier -> IDENTIFIER template_class_name
Rule 323   base_specifier -> access_specifier IDENTIFIER template_class_name
Rule 324   access_specifier -> PRIVATE
Rule 325   access_specifier -> PROTECTED
Rule 326   access_specifier -> PUBLIC
Rule 327   elaborated_type_specifier -> class_key IDENTIFIER
Rule 328   elaborated_type_specifier -> class_key IDENTIFIER template_class_name
Rule 329   elaborated_type_specifier -> ENUM enum_name
Rule 330   elaborated_type_specifier -> TYPE IDENTIFIER
Rule 331   elaborated_type_specifier -> TYPE IDENTIFIER template_class_name
Rule 332   enum_name -> IDENTIFIER
Rule 333   class_key -> CLASS
Rule 334   class_key -> STRUCT
Rule 335   class_key -> UNION
Rule 336   class_key -> TEMPLATE
Rule 337   simple_type_name -> CHAR
Rule 338   simple_type_name -> SHORT
Rule 339   simple_type_name -> INT
Rule 340   simple_type_name -> LONG
Rule 341   simple_type_name -> SIGNED
Rule 342   simple_type_name -> UNSIGNED
Rule 343   simple_type_name -> FLOAT
Rule 344   simple_type_name -> DOUBLE
Rule 345   simple_type_name -> VOID
Rule 346   simple_type_name -> STRING

Terminals, with rules where they appear

AND                  : 
ANDOP                : 35 299
AND_EQ               : 
ARROW                : 119 305
ARROWSTAR            : 62 304
ASM                  : 247
AUTO                 : 157
BANDEQOP             : 76 290
BANDOP               : 41 110 278
BITAND               : 
BITOR                : 
BNOP                 : 108 266 279
BOOL                 : 
BOREQOP              : 77
BOROP                : 
BREAK                : 197
CASE                 : 213
CATCH                : 208
CHAR                 : 337
CHAR16_T             : 
CHAR32_T             : 
CHAR8_T              : 
CLASS                : 333
COLON                : 31 172 173 212 213 214 256 257 313
COMMA                : 12 18 26 65 145 234 236 241 244 246 251 253 303 315
COMMENT              : 
COMPL                : 
CONDTIONAL           : 
CONST                : 165
CONTINUE             : 198
DEFAULT              : 214
DELETE               : 87 271
DIVEQOP              : 70 287
DIVOP                : 58 275
DMINUSOP             : 80 121 302
DO                   : 216
DOT                  : 118
DOTSTAR              : 61
DOUBLE               : 344
DOUBLECOLON          : 
DPLUSOP              : 79 120 301
DQUOTE               : 
ELSE                 : 203
ENUM                 : 21 22 23 24 329
EQCOMP               : 43 295
EQUAL                : 28 68 147 150 151 239 240 241 281 308
EXTERN               : 159
FALSE                : 
FLOAT                : 343
FOR                  : 217 218 219 220
GOTO                 : 201
GTCOMP               : 4 47 283
GTECOMP              : 49 298
HASHTAG              : 3
IDENTIFIER           : 21 23 27 28 201 212 256 264 266 311 312 316 317 318 319 320 321 322 323 327 328 330 331 332
IF                   : 202 203
INCLUDE              : 3
INLINE               : 
INT                  : 339
LCPAREN              : 21 22 23 24 167 168 185 186 240 241 245 246
LEFTQOP              : 
LEFTSHIFT            : 
LONG                 : 340
LPAREN               : 84 92 93 94 95 102 103 104 113 114 115 116 117 124 130 135 136 141 202 203 204 208 215 216 217 218 219 220 242 247 260 263 306
LSHIFT               : 51 291
LSHIFTEQOP           : 74 294
LSPAREN              : 100 101 112 137 138 139 140 261 262 307
LTCOMP               : 4 46 282
LTECOMP              : 48 297
LTEMPLATE            : 16 232
MINUSEQOP            : 73 285
MINUSOP              : 55 106 273
MODEQOP              : 71 288
MODOP                : 59 276
MODQOP               : 
MULTEQOP             : 69 286
MULTOP               : 57 98 99 109 274
NAMESPACE            : 
NEQCOMP              : 44 296
NEW                  : 88 89 90 91 92 93 94 95 270
NOT                  : 
NOTSYM               : 107 280
NOT_EQ               : 
NULLPTR              : 
NUMBER               : 126 308
OPERATOR             : 269
OR                   : 
OROP                 : 33 37 300
OR_EQ                : 
PLUSEQOP             : 72 284
PLUSOP               : 54 105 272
PRIVATE              : 324
PROTECTED            : 325
PUBLIC               : 326
QUESMARK             : 31
RCPAREN              : 21 22 23 24 167 168 185 186 240 241 245 246
RETURN               : 199 200
RIGHTLIFT            : 
RIGHTQOP             : 
RPAREN               : 84 92 93 94 95 102 103 104 113 114 115 116 117 124 130 135 136 141 202 203 204 208 215 216 217 218 219 220 242 247 260 263 306
RSHIFT               : 52 292
RSHIFTEQOP           : 75 293
RSPAREN              : 100 101 112 137 138 139 140 261 262 307
RTEMPLATE            : 16 232
SCHAR                : 128
SEMICOLON            : 176 177 178 179 180 197 198 199 200 201 216 217 218 219 220 223 224 226 227 228 247
SHORT                : 338
SIGNED               : 341
SIZEOF               : 83 84
SQUOTE               : 
STATIC               : 158
STD                  : 
STRING               : 346
STRING_L             : 4 5 127 247
STRUCT               : 334
SWITCH               : 204
TEMPLATE             : 232 336
THIS                 : 123
THROW                : 9 10
TRUE                 : 
TRY                  : 205
TYPE                 : 330 331
TYPEDEF              : 156
UMINUSOP             : 
UNION                : 335
UNSIGNED             : 342
UPLUSOP              : 
USING                : 
VIRTUAL              : 160
VOID                 : 345
VOLATILE             : 166
WHILE                : 215 216
XOR                  : 
XOREQOP              : 289
XOREQOR              : 
XOROP                : 39 277
XOR_EQ               : 
error                : 

Nonterminals, with rules where they appear

AND_expression       : 38 39 41
abstract_declarator  : 131 133 135 137 139 141 148 150 210
access_list          : 170 171
access_specifier     : 172 173 317 319 321 323
additive_expression  : 50 51 52 54 55
allocation_expression : 85
arg_declaration_list : 142 145
argument_declaration : 144 145 233 234
argument_declaration_list : 135 136 260
asm_declaration      : 229
assignment_expression : 63 65 67 239 243 244 250 251
assignment_operator  : 67
base_list            : 313 315
base_spec            : 309 311
base_specifier       : 314 315
cast_expression      : 60 61 62 81 82 87 130
class_head           : 167 168
class_key            : 309 310 311 312 316 317 318 319 327 328
class_specifier      : 162
compound_statement   : 184 191 205 208
conditional_expression : 29 31 66
constant_expression  : 28 137 138 213 256 257 261
control_line         : 1 6
control_line_stmt    : 1 2
deallocation_expression : 86
decl_specifier       : 152 153
decl_specifiers      : 146 147 148 149 150 151 152 176 178 182 226 227
declaration          : 13 14 225 232 248 249
declaration_list     : 249
declaration_seq      : 8 13
declaration_statement : 195 222
declarator           : 146 147 182 183 209 237 238 254 255 259 260 261 262 263
declarator_list      : 226 228 236
elaborated_type_specifier : 164
empty                : 143
enum_list            : 21 22 26
enum_name            : 329
enum_specifier       : 163
enumerator           : 25 26
equality_expression  : 40 41 43 44
exception_declaration : 208
exclusive_OR_expression : 36 37 39
expression           : 9 19 31 65 100 101 112 124 147 150 151 199 202 203 204 215 216 217 217 218 219 223
expression_list      : 102 113 114 116 242 251
expression_statement : 190 221
fct_body             : 182 183
for_init_statement   : 217 218 219 220
function_definition  : 180 181 230
handler              : 206 207
handler_list         : 205 206
include_control      : 4 5
inclusive_OR_expression : 34 35 37
init_declarator      : 235 236
initializer          : 237
initializer_list     : 103 240 241 244 245 246
iteration_statement  : 193
jump_statement       : 194
labeled_statement    : 189
literal              : 122
logical_AND_expression : 32 33 35
logical_OR_expression : 30 31 33
member_access_list   : 169 172 174
member_declaration   : 174 175
member_declarator    : 252 253
member_declarator_list : 176 177 253
member_list          : 167 171
multiplicative_expression : 53 54 55 57 58 59
name                 : 118 119 125 258
new_declarator       : 96 98 100
new_initializer      : 88 89 92 93
new_type_name        : 88 89 90 91
operator_function_name : 265
operator_name        : 269
placement            : 88 90 92 94
pm_expression        : 56 57 58 59 61 62
postfix_expression   : 78 112 113 114 115 118 119 120 121
primary_expression   : 111
program              : 0
pure_specifier       : 254
relational_expression : 42 43 44 46 47 48 49
selection_statement  : 192
shift_expression     : 45 46 47 48 49 51 52
simple_type_name     : 116 117 161
statement            : 187 188 202 203 203 204 212 213 214 215 216 217 218 219 220
statement_list       : 185 188
storage_class_specifier : 154
template_arg         : 17 18
template_arg_list    : 16 18
template_argument_list : 232 234
template_class_name  : 114 318 319 322 323 328 331
template_declaration : 231
throw_expression     : 64
translation_unit     : 6 7
try_block            : 196
type_list            : 12
type_name            : 11 12 20 84 92 93 94 95 130
type_specifier       : 155 267 268
type_specifier_list  : 96 97 131 132 209 210 211 267
unary1_operator      : 81
unary2_operator      : 82 133 134 259
unary_expression     : 67 79 80 83 129

Parsing method: LALR

state 0

    (0) S' -> . program
    (6) program -> . control_line translation_unit
    (7) program -> . translation_unit
    (1) control_line -> . control_line control_line_stmt
    (2) control_line -> . control_line_stmt
    (8) translation_unit -> . declaration_seq
    (4) control_line_stmt -> . include_control LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> . include_control STRING_L
    (13) declaration_seq -> . declaration_seq declaration
    (14) declaration_seq -> . declaration
    (3) include_control -> . HASHTAG INCLUDE
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    HASHTAG         shift and go to state 8
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 17
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    program                        shift and go to state 1
    control_line                   shift and go to state 2
    translation_unit               shift and go to state 3
    control_line_stmt              shift and go to state 4
    declaration_seq                shift and go to state 5
    include_control                shift and go to state 6
    declaration                    shift and go to state 7
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 23
    unary2_operator                shift and go to state 24
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 1

    (0) S' -> program .



state 2

    (6) program -> control_line . translation_unit
    (1) control_line -> control_line . control_line_stmt
    (8) translation_unit -> . declaration_seq
    (4) control_line_stmt -> . include_control LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> . include_control STRING_L
    (13) declaration_seq -> . declaration_seq declaration
    (14) declaration_seq -> . declaration
    (3) include_control -> . HASHTAG INCLUDE
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    HASHTAG         shift and go to state 8
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 17
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    translation_unit               shift and go to state 58
    control_line_stmt              shift and go to state 59
    declaration_seq                shift and go to state 5
    include_control                shift and go to state 6
    declaration                    shift and go to state 7
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 23
    unary2_operator                shift and go to state 24
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 3

    (7) program -> translation_unit .

    $end            reduce using rule 7 (program -> translation_unit .)


state 4

    (2) control_line -> control_line_stmt .

    HASHTAG         reduce using rule 2 (control_line -> control_line_stmt .)
    ASM             reduce using rule 2 (control_line -> control_line_stmt .)
    TEMPLATE        reduce using rule 2 (control_line -> control_line_stmt .)
    TYPEDEF         reduce using rule 2 (control_line -> control_line_stmt .)
    LPAREN          reduce using rule 2 (control_line -> control_line_stmt .)
    AUTO            reduce using rule 2 (control_line -> control_line_stmt .)
    STATIC          reduce using rule 2 (control_line -> control_line_stmt .)
    EXTERN          reduce using rule 2 (control_line -> control_line_stmt .)
    VIRTUAL         reduce using rule 2 (control_line -> control_line_stmt .)
    CONST           reduce using rule 2 (control_line -> control_line_stmt .)
    VOLATILE        reduce using rule 2 (control_line -> control_line_stmt .)
    IDENTIFIER      reduce using rule 2 (control_line -> control_line_stmt .)
    BNOP            reduce using rule 2 (control_line -> control_line_stmt .)
    MULTOP          reduce using rule 2 (control_line -> control_line_stmt .)
    BANDOP          reduce using rule 2 (control_line -> control_line_stmt .)
    CHAR            reduce using rule 2 (control_line -> control_line_stmt .)
    SHORT           reduce using rule 2 (control_line -> control_line_stmt .)
    INT             reduce using rule 2 (control_line -> control_line_stmt .)
    LONG            reduce using rule 2 (control_line -> control_line_stmt .)
    SIGNED          reduce using rule 2 (control_line -> control_line_stmt .)
    UNSIGNED        reduce using rule 2 (control_line -> control_line_stmt .)
    FLOAT           reduce using rule 2 (control_line -> control_line_stmt .)
    DOUBLE          reduce using rule 2 (control_line -> control_line_stmt .)
    VOID            reduce using rule 2 (control_line -> control_line_stmt .)
    STRING          reduce using rule 2 (control_line -> control_line_stmt .)
    ENUM            reduce using rule 2 (control_line -> control_line_stmt .)
    TYPE            reduce using rule 2 (control_line -> control_line_stmt .)
    OPERATOR        reduce using rule 2 (control_line -> control_line_stmt .)
    CLASS           reduce using rule 2 (control_line -> control_line_stmt .)
    STRUCT          reduce using rule 2 (control_line -> control_line_stmt .)
    UNION           reduce using rule 2 (control_line -> control_line_stmt .)


state 5

    (8) translation_unit -> declaration_seq .
    (13) declaration_seq -> declaration_seq . declaration
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    $end            reduce using rule 8 (translation_unit -> declaration_seq .)
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 17
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    declaration                    shift and go to state 60
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 23
    unary2_operator                shift and go to state 24
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 6

    (4) control_line_stmt -> include_control . LTCOMP STRING_L GTCOMP
    (5) control_line_stmt -> include_control . STRING_L

    LTCOMP          shift and go to state 61
    STRING_L        shift and go to state 62


state 7

    (14) declaration_seq -> declaration .

    ASM             reduce using rule 14 (declaration_seq -> declaration .)
    TEMPLATE        reduce using rule 14 (declaration_seq -> declaration .)
    TYPEDEF         reduce using rule 14 (declaration_seq -> declaration .)
    LPAREN          reduce using rule 14 (declaration_seq -> declaration .)
    AUTO            reduce using rule 14 (declaration_seq -> declaration .)
    STATIC          reduce using rule 14 (declaration_seq -> declaration .)
    EXTERN          reduce using rule 14 (declaration_seq -> declaration .)
    VIRTUAL         reduce using rule 14 (declaration_seq -> declaration .)
    CONST           reduce using rule 14 (declaration_seq -> declaration .)
    VOLATILE        reduce using rule 14 (declaration_seq -> declaration .)
    IDENTIFIER      reduce using rule 14 (declaration_seq -> declaration .)
    BNOP            reduce using rule 14 (declaration_seq -> declaration .)
    MULTOP          reduce using rule 14 (declaration_seq -> declaration .)
    BANDOP          reduce using rule 14 (declaration_seq -> declaration .)
    CHAR            reduce using rule 14 (declaration_seq -> declaration .)
    SHORT           reduce using rule 14 (declaration_seq -> declaration .)
    INT             reduce using rule 14 (declaration_seq -> declaration .)
    LONG            reduce using rule 14 (declaration_seq -> declaration .)
    SIGNED          reduce using rule 14 (declaration_seq -> declaration .)
    UNSIGNED        reduce using rule 14 (declaration_seq -> declaration .)
    FLOAT           reduce using rule 14 (declaration_seq -> declaration .)
    DOUBLE          reduce using rule 14 (declaration_seq -> declaration .)
    VOID            reduce using rule 14 (declaration_seq -> declaration .)
    STRING          reduce using rule 14 (declaration_seq -> declaration .)
    ENUM            reduce using rule 14 (declaration_seq -> declaration .)
    TYPE            reduce using rule 14 (declaration_seq -> declaration .)
    OPERATOR        reduce using rule 14 (declaration_seq -> declaration .)
    CLASS           reduce using rule 14 (declaration_seq -> declaration .)
    STRUCT          reduce using rule 14 (declaration_seq -> declaration .)
    UNION           reduce using rule 14 (declaration_seq -> declaration .)
    $end            reduce using rule 14 (declaration_seq -> declaration .)


state 8

    (3) include_control -> HASHTAG . INCLUDE

    INCLUDE         shift and go to state 63


state 9

    (226) declaration -> decl_specifiers . declarator_list SEMICOLON
    (227) declaration -> decl_specifiers . SEMICOLON
    (152) decl_specifiers -> decl_specifiers . decl_specifier
    (182) function_definition -> decl_specifiers . declarator fct_body
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    SEMICOLON       shift and go to state 65
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 17
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    declarator_list                shift and go to state 64
    decl_specifier                 shift and go to state 66
    declarator                     shift and go to state 67
    init_declarator                shift and go to state 15
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 23
    unary2_operator                shift and go to state 24
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 10

    (228) declaration -> declarator_list . SEMICOLON
    (236) declarator_list -> declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 69
    COMMA           shift and go to state 70


state 11

    (229) declaration -> asm_declaration .

    ASM             reduce using rule 229 (declaration -> asm_declaration .)
    TEMPLATE        reduce using rule 229 (declaration -> asm_declaration .)
    TYPEDEF         reduce using rule 229 (declaration -> asm_declaration .)
    LPAREN          reduce using rule 229 (declaration -> asm_declaration .)
    AUTO            reduce using rule 229 (declaration -> asm_declaration .)
    STATIC          reduce using rule 229 (declaration -> asm_declaration .)
    EXTERN          reduce using rule 229 (declaration -> asm_declaration .)
    VIRTUAL         reduce using rule 229 (declaration -> asm_declaration .)
    CONST           reduce using rule 229 (declaration -> asm_declaration .)
    VOLATILE        reduce using rule 229 (declaration -> asm_declaration .)
    IDENTIFIER      reduce using rule 229 (declaration -> asm_declaration .)
    BNOP            reduce using rule 229 (declaration -> asm_declaration .)
    MULTOP          reduce using rule 229 (declaration -> asm_declaration .)
    BANDOP          reduce using rule 229 (declaration -> asm_declaration .)
    CHAR            reduce using rule 229 (declaration -> asm_declaration .)
    SHORT           reduce using rule 229 (declaration -> asm_declaration .)
    INT             reduce using rule 229 (declaration -> asm_declaration .)
    LONG            reduce using rule 229 (declaration -> asm_declaration .)
    SIGNED          reduce using rule 229 (declaration -> asm_declaration .)
    UNSIGNED        reduce using rule 229 (declaration -> asm_declaration .)
    FLOAT           reduce using rule 229 (declaration -> asm_declaration .)
    DOUBLE          reduce using rule 229 (declaration -> asm_declaration .)
    VOID            reduce using rule 229 (declaration -> asm_declaration .)
    STRING          reduce using rule 229 (declaration -> asm_declaration .)
    ENUM            reduce using rule 229 (declaration -> asm_declaration .)
    TYPE            reduce using rule 229 (declaration -> asm_declaration .)
    OPERATOR        reduce using rule 229 (declaration -> asm_declaration .)
    CLASS           reduce using rule 229 (declaration -> asm_declaration .)
    STRUCT          reduce using rule 229 (declaration -> asm_declaration .)
    UNION           reduce using rule 229 (declaration -> asm_declaration .)
    $end            reduce using rule 229 (declaration -> asm_declaration .)
    RCPAREN         reduce using rule 229 (declaration -> asm_declaration .)
    CASE            reduce using rule 229 (declaration -> asm_declaration .)
    DEFAULT         reduce using rule 229 (declaration -> asm_declaration .)
    SEMICOLON       reduce using rule 229 (declaration -> asm_declaration .)
    LCPAREN         reduce using rule 229 (declaration -> asm_declaration .)
    IF              reduce using rule 229 (declaration -> asm_declaration .)
    SWITCH          reduce using rule 229 (declaration -> asm_declaration .)
    WHILE           reduce using rule 229 (declaration -> asm_declaration .)
    DO              reduce using rule 229 (declaration -> asm_declaration .)
    FOR             reduce using rule 229 (declaration -> asm_declaration .)
    BREAK           reduce using rule 229 (declaration -> asm_declaration .)
    CONTINUE        reduce using rule 229 (declaration -> asm_declaration .)
    RETURN          reduce using rule 229 (declaration -> asm_declaration .)
    GOTO            reduce using rule 229 (declaration -> asm_declaration .)
    TRY             reduce using rule 229 (declaration -> asm_declaration .)
    THROW           reduce using rule 229 (declaration -> asm_declaration .)
    DPLUSOP         reduce using rule 229 (declaration -> asm_declaration .)
    DMINUSOP        reduce using rule 229 (declaration -> asm_declaration .)
    SIZEOF          reduce using rule 229 (declaration -> asm_declaration .)
    PLUSOP          reduce using rule 229 (declaration -> asm_declaration .)
    MINUSOP         reduce using rule 229 (declaration -> asm_declaration .)
    NOTSYM          reduce using rule 229 (declaration -> asm_declaration .)
    NEW             reduce using rule 229 (declaration -> asm_declaration .)
    DELETE          reduce using rule 229 (declaration -> asm_declaration .)
    THIS            reduce using rule 229 (declaration -> asm_declaration .)
    NUMBER          reduce using rule 229 (declaration -> asm_declaration .)
    STRING_L        reduce using rule 229 (declaration -> asm_declaration .)
    SCHAR           reduce using rule 229 (declaration -> asm_declaration .)
    ELSE            reduce using rule 229 (declaration -> asm_declaration .)


state 12

    (230) declaration -> function_definition .

    ASM             reduce using rule 230 (declaration -> function_definition .)
    TEMPLATE        reduce using rule 230 (declaration -> function_definition .)
    TYPEDEF         reduce using rule 230 (declaration -> function_definition .)
    LPAREN          reduce using rule 230 (declaration -> function_definition .)
    AUTO            reduce using rule 230 (declaration -> function_definition .)
    STATIC          reduce using rule 230 (declaration -> function_definition .)
    EXTERN          reduce using rule 230 (declaration -> function_definition .)
    VIRTUAL         reduce using rule 230 (declaration -> function_definition .)
    CONST           reduce using rule 230 (declaration -> function_definition .)
    VOLATILE        reduce using rule 230 (declaration -> function_definition .)
    IDENTIFIER      reduce using rule 230 (declaration -> function_definition .)
    BNOP            reduce using rule 230 (declaration -> function_definition .)
    MULTOP          reduce using rule 230 (declaration -> function_definition .)
    BANDOP          reduce using rule 230 (declaration -> function_definition .)
    CHAR            reduce using rule 230 (declaration -> function_definition .)
    SHORT           reduce using rule 230 (declaration -> function_definition .)
    INT             reduce using rule 230 (declaration -> function_definition .)
    LONG            reduce using rule 230 (declaration -> function_definition .)
    SIGNED          reduce using rule 230 (declaration -> function_definition .)
    UNSIGNED        reduce using rule 230 (declaration -> function_definition .)
    FLOAT           reduce using rule 230 (declaration -> function_definition .)
    DOUBLE          reduce using rule 230 (declaration -> function_definition .)
    VOID            reduce using rule 230 (declaration -> function_definition .)
    STRING          reduce using rule 230 (declaration -> function_definition .)
    ENUM            reduce using rule 230 (declaration -> function_definition .)
    TYPE            reduce using rule 230 (declaration -> function_definition .)
    OPERATOR        reduce using rule 230 (declaration -> function_definition .)
    CLASS           reduce using rule 230 (declaration -> function_definition .)
    STRUCT          reduce using rule 230 (declaration -> function_definition .)
    UNION           reduce using rule 230 (declaration -> function_definition .)
    $end            reduce using rule 230 (declaration -> function_definition .)
    RCPAREN         reduce using rule 230 (declaration -> function_definition .)
    CASE            reduce using rule 230 (declaration -> function_definition .)
    DEFAULT         reduce using rule 230 (declaration -> function_definition .)
    SEMICOLON       reduce using rule 230 (declaration -> function_definition .)
    LCPAREN         reduce using rule 230 (declaration -> function_definition .)
    IF              reduce using rule 230 (declaration -> function_definition .)
    SWITCH          reduce using rule 230 (declaration -> function_definition .)
    WHILE           reduce using rule 230 (declaration -> function_definition .)
    DO              reduce using rule 230 (declaration -> function_definition .)
    FOR             reduce using rule 230 (declaration -> function_definition .)
    BREAK           reduce using rule 230 (declaration -> function_definition .)
    CONTINUE        reduce using rule 230 (declaration -> function_definition .)
    RETURN          reduce using rule 230 (declaration -> function_definition .)
    GOTO            reduce using rule 230 (declaration -> function_definition .)
    TRY             reduce using rule 230 (declaration -> function_definition .)
    THROW           reduce using rule 230 (declaration -> function_definition .)
    DPLUSOP         reduce using rule 230 (declaration -> function_definition .)
    DMINUSOP        reduce using rule 230 (declaration -> function_definition .)
    SIZEOF          reduce using rule 230 (declaration -> function_definition .)
    PLUSOP          reduce using rule 230 (declaration -> function_definition .)
    MINUSOP         reduce using rule 230 (declaration -> function_definition .)
    NOTSYM          reduce using rule 230 (declaration -> function_definition .)
    NEW             reduce using rule 230 (declaration -> function_definition .)
    DELETE          reduce using rule 230 (declaration -> function_definition .)
    THIS            reduce using rule 230 (declaration -> function_definition .)
    NUMBER          reduce using rule 230 (declaration -> function_definition .)
    STRING_L        reduce using rule 230 (declaration -> function_definition .)
    SCHAR           reduce using rule 230 (declaration -> function_definition .)
    ELSE            reduce using rule 230 (declaration -> function_definition .)


state 13

    (231) declaration -> template_declaration .

    ASM             reduce using rule 231 (declaration -> template_declaration .)
    TEMPLATE        reduce using rule 231 (declaration -> template_declaration .)
    TYPEDEF         reduce using rule 231 (declaration -> template_declaration .)
    LPAREN          reduce using rule 231 (declaration -> template_declaration .)
    AUTO            reduce using rule 231 (declaration -> template_declaration .)
    STATIC          reduce using rule 231 (declaration -> template_declaration .)
    EXTERN          reduce using rule 231 (declaration -> template_declaration .)
    VIRTUAL         reduce using rule 231 (declaration -> template_declaration .)
    CONST           reduce using rule 231 (declaration -> template_declaration .)
    VOLATILE        reduce using rule 231 (declaration -> template_declaration .)
    IDENTIFIER      reduce using rule 231 (declaration -> template_declaration .)
    BNOP            reduce using rule 231 (declaration -> template_declaration .)
    MULTOP          reduce using rule 231 (declaration -> template_declaration .)
    BANDOP          reduce using rule 231 (declaration -> template_declaration .)
    CHAR            reduce using rule 231 (declaration -> template_declaration .)
    SHORT           reduce using rule 231 (declaration -> template_declaration .)
    INT             reduce using rule 231 (declaration -> template_declaration .)
    LONG            reduce using rule 231 (declaration -> template_declaration .)
    SIGNED          reduce using rule 231 (declaration -> template_declaration .)
    UNSIGNED        reduce using rule 231 (declaration -> template_declaration .)
    FLOAT           reduce using rule 231 (declaration -> template_declaration .)
    DOUBLE          reduce using rule 231 (declaration -> template_declaration .)
    VOID            reduce using rule 231 (declaration -> template_declaration .)
    STRING          reduce using rule 231 (declaration -> template_declaration .)
    ENUM            reduce using rule 231 (declaration -> template_declaration .)
    TYPE            reduce using rule 231 (declaration -> template_declaration .)
    OPERATOR        reduce using rule 231 (declaration -> template_declaration .)
    CLASS           reduce using rule 231 (declaration -> template_declaration .)
    STRUCT          reduce using rule 231 (declaration -> template_declaration .)
    UNION           reduce using rule 231 (declaration -> template_declaration .)
    $end            reduce using rule 231 (declaration -> template_declaration .)
    RCPAREN         reduce using rule 231 (declaration -> template_declaration .)
    CASE            reduce using rule 231 (declaration -> template_declaration .)
    DEFAULT         reduce using rule 231 (declaration -> template_declaration .)
    SEMICOLON       reduce using rule 231 (declaration -> template_declaration .)
    LCPAREN         reduce using rule 231 (declaration -> template_declaration .)
    IF              reduce using rule 231 (declaration -> template_declaration .)
    SWITCH          reduce using rule 231 (declaration -> template_declaration .)
    WHILE           reduce using rule 231 (declaration -> template_declaration .)
    DO              reduce using rule 231 (declaration -> template_declaration .)
    FOR             reduce using rule 231 (declaration -> template_declaration .)
    BREAK           reduce using rule 231 (declaration -> template_declaration .)
    CONTINUE        reduce using rule 231 (declaration -> template_declaration .)
    RETURN          reduce using rule 231 (declaration -> template_declaration .)
    GOTO            reduce using rule 231 (declaration -> template_declaration .)
    TRY             reduce using rule 231 (declaration -> template_declaration .)
    THROW           reduce using rule 231 (declaration -> template_declaration .)
    DPLUSOP         reduce using rule 231 (declaration -> template_declaration .)
    DMINUSOP        reduce using rule 231 (declaration -> template_declaration .)
    SIZEOF          reduce using rule 231 (declaration -> template_declaration .)
    PLUSOP          reduce using rule 231 (declaration -> template_declaration .)
    MINUSOP         reduce using rule 231 (declaration -> template_declaration .)
    NOTSYM          reduce using rule 231 (declaration -> template_declaration .)
    NEW             reduce using rule 231 (declaration -> template_declaration .)
    DELETE          reduce using rule 231 (declaration -> template_declaration .)
    THIS            reduce using rule 231 (declaration -> template_declaration .)
    NUMBER          reduce using rule 231 (declaration -> template_declaration .)
    STRING_L        reduce using rule 231 (declaration -> template_declaration .)
    SCHAR           reduce using rule 231 (declaration -> template_declaration .)
    ELSE            reduce using rule 231 (declaration -> template_declaration .)


state 14

    (153) decl_specifiers -> decl_specifier .

    SEMICOLON       reduce using rule 153 (decl_specifiers -> decl_specifier .)
    TYPEDEF         reduce using rule 153 (decl_specifiers -> decl_specifier .)
    LPAREN          reduce using rule 153 (decl_specifiers -> decl_specifier .)
    AUTO            reduce using rule 153 (decl_specifiers -> decl_specifier .)
    STATIC          reduce using rule 153 (decl_specifiers -> decl_specifier .)
    EXTERN          reduce using rule 153 (decl_specifiers -> decl_specifier .)
    VIRTUAL         reduce using rule 153 (decl_specifiers -> decl_specifier .)
    CONST           reduce using rule 153 (decl_specifiers -> decl_specifier .)
    VOLATILE        reduce using rule 153 (decl_specifiers -> decl_specifier .)
    IDENTIFIER      reduce using rule 153 (decl_specifiers -> decl_specifier .)
    BNOP            reduce using rule 153 (decl_specifiers -> decl_specifier .)
    MULTOP          reduce using rule 153 (decl_specifiers -> decl_specifier .)
    BANDOP          reduce using rule 153 (decl_specifiers -> decl_specifier .)
    CHAR            reduce using rule 153 (decl_specifiers -> decl_specifier .)
    SHORT           reduce using rule 153 (decl_specifiers -> decl_specifier .)
    INT             reduce using rule 153 (decl_specifiers -> decl_specifier .)
    LONG            reduce using rule 153 (decl_specifiers -> decl_specifier .)
    SIGNED          reduce using rule 153 (decl_specifiers -> decl_specifier .)
    UNSIGNED        reduce using rule 153 (decl_specifiers -> decl_specifier .)
    FLOAT           reduce using rule 153 (decl_specifiers -> decl_specifier .)
    DOUBLE          reduce using rule 153 (decl_specifiers -> decl_specifier .)
    VOID            reduce using rule 153 (decl_specifiers -> decl_specifier .)
    STRING          reduce using rule 153 (decl_specifiers -> decl_specifier .)
    ENUM            reduce using rule 153 (decl_specifiers -> decl_specifier .)
    TYPE            reduce using rule 153 (decl_specifiers -> decl_specifier .)
    OPERATOR        reduce using rule 153 (decl_specifiers -> decl_specifier .)
    CLASS           reduce using rule 153 (decl_specifiers -> decl_specifier .)
    STRUCT          reduce using rule 153 (decl_specifiers -> decl_specifier .)
    UNION           reduce using rule 153 (decl_specifiers -> decl_specifier .)
    TEMPLATE        reduce using rule 153 (decl_specifiers -> decl_specifier .)
    EQUAL           reduce using rule 153 (decl_specifiers -> decl_specifier .)
    LSPAREN         reduce using rule 153 (decl_specifiers -> decl_specifier .)
    COMMA           reduce using rule 153 (decl_specifiers -> decl_specifier .)
    RPAREN          reduce using rule 153 (decl_specifiers -> decl_specifier .)
    RTEMPLATE       reduce using rule 153 (decl_specifiers -> decl_specifier .)
    COLON           reduce using rule 153 (decl_specifiers -> decl_specifier .)


state 15

    (235) declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 235 (declarator_list -> init_declarator .)
    COMMA           reduce using rule 235 (declarator_list -> init_declarator .)


state 16

    (247) asm_declaration -> ASM . LPAREN STRING_L RPAREN SEMICOLON

    LPAREN          shift and go to state 71


state 17

    (263) declarator -> LPAREN . declarator RPAREN
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    OPERATOR        shift and go to state 54

    declarator                     shift and go to state 72
    name                           shift and go to state 23
    unary2_operator                shift and go to state 24
    operator_function_name         shift and go to state 36

state 18

    (183) function_definition -> declarator . fct_body
    (237) init_declarator -> declarator . initializer
    (238) init_declarator -> declarator .
    (260) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (261) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (262) declarator -> declarator . LSPAREN RSPAREN
    (184) fct_body -> . compound_statement
    (239) initializer -> . EQUAL assignment_expression
    (240) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (241) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (242) initializer -> . LPAREN expression_list RPAREN
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN

    SEMICOLON       reduce using rule 238 (init_declarator -> declarator .)
    COMMA           reduce using rule 238 (init_declarator -> declarator .)
    LPAREN          shift and go to state 75
    LSPAREN         shift and go to state 76
    EQUAL           shift and go to state 78
    LCPAREN         shift and go to state 79

    fct_body                       shift and go to state 73
    initializer                    shift and go to state 74
    compound_statement             shift and go to state 77

state 19

    (232) template_declaration -> TEMPLATE . LTEMPLATE template_argument_list RTEMPLATE declaration
    (336) class_key -> TEMPLATE .

    LTEMPLATE       shift and go to state 80
    IDENTIFIER      reduce using rule 336 (class_key -> TEMPLATE .)
    COLON           reduce using rule 336 (class_key -> TEMPLATE .)
    LCPAREN         reduce using rule 336 (class_key -> TEMPLATE .)


state 20

    (154) decl_specifier -> storage_class_specifier .

    SEMICOLON       reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    TYPEDEF         reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    LPAREN          reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    AUTO            reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    STATIC          reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    EXTERN          reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    VIRTUAL         reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    CONST           reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    VOLATILE        reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    BNOP            reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    MULTOP          reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    BANDOP          reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    CHAR            reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    SHORT           reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    INT             reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    LONG            reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    SIGNED          reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    UNSIGNED        reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    FLOAT           reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    DOUBLE          reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    VOID            reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    STRING          reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    ENUM            reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    TYPE            reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    OPERATOR        reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    CLASS           reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    STRUCT          reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    UNION           reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    TEMPLATE        reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    EQUAL           reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    LSPAREN         reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    COMMA           reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    RPAREN          reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    RTEMPLATE       reduce using rule 154 (decl_specifier -> storage_class_specifier .)
    COLON           reduce using rule 154 (decl_specifier -> storage_class_specifier .)


state 21

    (155) decl_specifier -> type_specifier .

    SEMICOLON       reduce using rule 155 (decl_specifier -> type_specifier .)
    TYPEDEF         reduce using rule 155 (decl_specifier -> type_specifier .)
    LPAREN          reduce using rule 155 (decl_specifier -> type_specifier .)
    AUTO            reduce using rule 155 (decl_specifier -> type_specifier .)
    STATIC          reduce using rule 155 (decl_specifier -> type_specifier .)
    EXTERN          reduce using rule 155 (decl_specifier -> type_specifier .)
    VIRTUAL         reduce using rule 155 (decl_specifier -> type_specifier .)
    CONST           reduce using rule 155 (decl_specifier -> type_specifier .)
    VOLATILE        reduce using rule 155 (decl_specifier -> type_specifier .)
    IDENTIFIER      reduce using rule 155 (decl_specifier -> type_specifier .)
    BNOP            reduce using rule 155 (decl_specifier -> type_specifier .)
    MULTOP          reduce using rule 155 (decl_specifier -> type_specifier .)
    BANDOP          reduce using rule 155 (decl_specifier -> type_specifier .)
    CHAR            reduce using rule 155 (decl_specifier -> type_specifier .)
    SHORT           reduce using rule 155 (decl_specifier -> type_specifier .)
    INT             reduce using rule 155 (decl_specifier -> type_specifier .)
    LONG            reduce using rule 155 (decl_specifier -> type_specifier .)
    SIGNED          reduce using rule 155 (decl_specifier -> type_specifier .)
    UNSIGNED        reduce using rule 155 (decl_specifier -> type_specifier .)
    FLOAT           reduce using rule 155 (decl_specifier -> type_specifier .)
    DOUBLE          reduce using rule 155 (decl_specifier -> type_specifier .)
    VOID            reduce using rule 155 (decl_specifier -> type_specifier .)
    STRING          reduce using rule 155 (decl_specifier -> type_specifier .)
    ENUM            reduce using rule 155 (decl_specifier -> type_specifier .)
    TYPE            reduce using rule 155 (decl_specifier -> type_specifier .)
    OPERATOR        reduce using rule 155 (decl_specifier -> type_specifier .)
    CLASS           reduce using rule 155 (decl_specifier -> type_specifier .)
    STRUCT          reduce using rule 155 (decl_specifier -> type_specifier .)
    UNION           reduce using rule 155 (decl_specifier -> type_specifier .)
    TEMPLATE        reduce using rule 155 (decl_specifier -> type_specifier .)
    EQUAL           reduce using rule 155 (decl_specifier -> type_specifier .)
    LSPAREN         reduce using rule 155 (decl_specifier -> type_specifier .)
    COMMA           reduce using rule 155 (decl_specifier -> type_specifier .)
    RPAREN          reduce using rule 155 (decl_specifier -> type_specifier .)
    RTEMPLATE       reduce using rule 155 (decl_specifier -> type_specifier .)
    COLON           reduce using rule 155 (decl_specifier -> type_specifier .)


state 22

    (156) decl_specifier -> TYPEDEF .

    SEMICOLON       reduce using rule 156 (decl_specifier -> TYPEDEF .)
    TYPEDEF         reduce using rule 156 (decl_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 156 (decl_specifier -> TYPEDEF .)
    AUTO            reduce using rule 156 (decl_specifier -> TYPEDEF .)
    STATIC          reduce using rule 156 (decl_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 156 (decl_specifier -> TYPEDEF .)
    VIRTUAL         reduce using rule 156 (decl_specifier -> TYPEDEF .)
    CONST           reduce using rule 156 (decl_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 156 (decl_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 156 (decl_specifier -> TYPEDEF .)
    BNOP            reduce using rule 156 (decl_specifier -> TYPEDEF .)
    MULTOP          reduce using rule 156 (decl_specifier -> TYPEDEF .)
    BANDOP          reduce using rule 156 (decl_specifier -> TYPEDEF .)
    CHAR            reduce using rule 156 (decl_specifier -> TYPEDEF .)
    SHORT           reduce using rule 156 (decl_specifier -> TYPEDEF .)
    INT             reduce using rule 156 (decl_specifier -> TYPEDEF .)
    LONG            reduce using rule 156 (decl_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 156 (decl_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 156 (decl_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 156 (decl_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 156 (decl_specifier -> TYPEDEF .)
    VOID            reduce using rule 156 (decl_specifier -> TYPEDEF .)
    STRING          reduce using rule 156 (decl_specifier -> TYPEDEF .)
    ENUM            reduce using rule 156 (decl_specifier -> TYPEDEF .)
    TYPE            reduce using rule 156 (decl_specifier -> TYPEDEF .)
    OPERATOR        reduce using rule 156 (decl_specifier -> TYPEDEF .)
    CLASS           reduce using rule 156 (decl_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 156 (decl_specifier -> TYPEDEF .)
    UNION           reduce using rule 156 (decl_specifier -> TYPEDEF .)
    TEMPLATE        reduce using rule 156 (decl_specifier -> TYPEDEF .)
    EQUAL           reduce using rule 156 (decl_specifier -> TYPEDEF .)
    LSPAREN         reduce using rule 156 (decl_specifier -> TYPEDEF .)
    COMMA           reduce using rule 156 (decl_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 156 (decl_specifier -> TYPEDEF .)
    RTEMPLATE       reduce using rule 156 (decl_specifier -> TYPEDEF .)
    COLON           reduce using rule 156 (decl_specifier -> TYPEDEF .)


state 23

    (258) declarator -> name .

    LPAREN          reduce using rule 258 (declarator -> name .)
    LSPAREN         reduce using rule 258 (declarator -> name .)
    EQUAL           reduce using rule 258 (declarator -> name .)
    LCPAREN         reduce using rule 258 (declarator -> name .)
    SEMICOLON       reduce using rule 258 (declarator -> name .)
    COMMA           reduce using rule 258 (declarator -> name .)
    RPAREN          reduce using rule 258 (declarator -> name .)
    RTEMPLATE       reduce using rule 258 (declarator -> name .)


state 24

    (259) declarator -> unary2_operator . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    OPERATOR        shift and go to state 54

    unary2_operator                shift and go to state 24
    declarator                     shift and go to state 81
    name                           shift and go to state 23
    operator_function_name         shift and go to state 36

state 25

    (157) storage_class_specifier -> AUTO .

    SEMICOLON       reduce using rule 157 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 157 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 157 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 157 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 157 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 157 (storage_class_specifier -> AUTO .)
    VIRTUAL         reduce using rule 157 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 157 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 157 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 157 (storage_class_specifier -> AUTO .)
    BNOP            reduce using rule 157 (storage_class_specifier -> AUTO .)
    MULTOP          reduce using rule 157 (storage_class_specifier -> AUTO .)
    BANDOP          reduce using rule 157 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 157 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 157 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 157 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 157 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 157 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 157 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 157 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 157 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 157 (storage_class_specifier -> AUTO .)
    STRING          reduce using rule 157 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 157 (storage_class_specifier -> AUTO .)
    TYPE            reduce using rule 157 (storage_class_specifier -> AUTO .)
    OPERATOR        reduce using rule 157 (storage_class_specifier -> AUTO .)
    CLASS           reduce using rule 157 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 157 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 157 (storage_class_specifier -> AUTO .)
    TEMPLATE        reduce using rule 157 (storage_class_specifier -> AUTO .)
    EQUAL           reduce using rule 157 (storage_class_specifier -> AUTO .)
    LSPAREN         reduce using rule 157 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 157 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 157 (storage_class_specifier -> AUTO .)
    RTEMPLATE       reduce using rule 157 (storage_class_specifier -> AUTO .)
    COLON           reduce using rule 157 (storage_class_specifier -> AUTO .)


state 26

    (158) storage_class_specifier -> STATIC .

    SEMICOLON       reduce using rule 158 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 158 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 158 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 158 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 158 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 158 (storage_class_specifier -> STATIC .)
    VIRTUAL         reduce using rule 158 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 158 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 158 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 158 (storage_class_specifier -> STATIC .)
    BNOP            reduce using rule 158 (storage_class_specifier -> STATIC .)
    MULTOP          reduce using rule 158 (storage_class_specifier -> STATIC .)
    BANDOP          reduce using rule 158 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 158 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 158 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 158 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 158 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 158 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 158 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 158 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 158 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 158 (storage_class_specifier -> STATIC .)
    STRING          reduce using rule 158 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 158 (storage_class_specifier -> STATIC .)
    TYPE            reduce using rule 158 (storage_class_specifier -> STATIC .)
    OPERATOR        reduce using rule 158 (storage_class_specifier -> STATIC .)
    CLASS           reduce using rule 158 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 158 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 158 (storage_class_specifier -> STATIC .)
    TEMPLATE        reduce using rule 158 (storage_class_specifier -> STATIC .)
    EQUAL           reduce using rule 158 (storage_class_specifier -> STATIC .)
    LSPAREN         reduce using rule 158 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 158 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 158 (storage_class_specifier -> STATIC .)
    RTEMPLATE       reduce using rule 158 (storage_class_specifier -> STATIC .)
    COLON           reduce using rule 158 (storage_class_specifier -> STATIC .)


state 27

    (159) storage_class_specifier -> EXTERN .

    SEMICOLON       reduce using rule 159 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 159 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 159 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 159 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 159 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 159 (storage_class_specifier -> EXTERN .)
    VIRTUAL         reduce using rule 159 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 159 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 159 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 159 (storage_class_specifier -> EXTERN .)
    BNOP            reduce using rule 159 (storage_class_specifier -> EXTERN .)
    MULTOP          reduce using rule 159 (storage_class_specifier -> EXTERN .)
    BANDOP          reduce using rule 159 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 159 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 159 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 159 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 159 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 159 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 159 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 159 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 159 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 159 (storage_class_specifier -> EXTERN .)
    STRING          reduce using rule 159 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 159 (storage_class_specifier -> EXTERN .)
    TYPE            reduce using rule 159 (storage_class_specifier -> EXTERN .)
    OPERATOR        reduce using rule 159 (storage_class_specifier -> EXTERN .)
    CLASS           reduce using rule 159 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 159 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 159 (storage_class_specifier -> EXTERN .)
    TEMPLATE        reduce using rule 159 (storage_class_specifier -> EXTERN .)
    EQUAL           reduce using rule 159 (storage_class_specifier -> EXTERN .)
    LSPAREN         reduce using rule 159 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 159 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 159 (storage_class_specifier -> EXTERN .)
    RTEMPLATE       reduce using rule 159 (storage_class_specifier -> EXTERN .)
    COLON           reduce using rule 159 (storage_class_specifier -> EXTERN .)


state 28

    (160) storage_class_specifier -> VIRTUAL .

    SEMICOLON       reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    TYPEDEF         reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    LPAREN          reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    AUTO            reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    STATIC          reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    EXTERN          reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    VIRTUAL         reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    CONST           reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    VOLATILE        reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    IDENTIFIER      reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    BNOP            reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    MULTOP          reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    BANDOP          reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    CHAR            reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    SHORT           reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    INT             reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    LONG            reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    SIGNED          reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    UNSIGNED        reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    FLOAT           reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    DOUBLE          reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    VOID            reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    STRING          reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    ENUM            reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    TYPE            reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    OPERATOR        reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    CLASS           reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    STRUCT          reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    UNION           reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    TEMPLATE        reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    EQUAL           reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    LSPAREN         reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    COMMA           reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    RPAREN          reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    RTEMPLATE       reduce using rule 160 (storage_class_specifier -> VIRTUAL .)
    COLON           reduce using rule 160 (storage_class_specifier -> VIRTUAL .)


state 29

    (161) type_specifier -> simple_type_name .

    SEMICOLON       reduce using rule 161 (type_specifier -> simple_type_name .)
    TYPEDEF         reduce using rule 161 (type_specifier -> simple_type_name .)
    LPAREN          reduce using rule 161 (type_specifier -> simple_type_name .)
    AUTO            reduce using rule 161 (type_specifier -> simple_type_name .)
    STATIC          reduce using rule 161 (type_specifier -> simple_type_name .)
    EXTERN          reduce using rule 161 (type_specifier -> simple_type_name .)
    VIRTUAL         reduce using rule 161 (type_specifier -> simple_type_name .)
    CONST           reduce using rule 161 (type_specifier -> simple_type_name .)
    VOLATILE        reduce using rule 161 (type_specifier -> simple_type_name .)
    IDENTIFIER      reduce using rule 161 (type_specifier -> simple_type_name .)
    BNOP            reduce using rule 161 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 161 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 161 (type_specifier -> simple_type_name .)
    CHAR            reduce using rule 161 (type_specifier -> simple_type_name .)
    SHORT           reduce using rule 161 (type_specifier -> simple_type_name .)
    INT             reduce using rule 161 (type_specifier -> simple_type_name .)
    LONG            reduce using rule 161 (type_specifier -> simple_type_name .)
    SIGNED          reduce using rule 161 (type_specifier -> simple_type_name .)
    UNSIGNED        reduce using rule 161 (type_specifier -> simple_type_name .)
    FLOAT           reduce using rule 161 (type_specifier -> simple_type_name .)
    DOUBLE          reduce using rule 161 (type_specifier -> simple_type_name .)
    VOID            reduce using rule 161 (type_specifier -> simple_type_name .)
    STRING          reduce using rule 161 (type_specifier -> simple_type_name .)
    ENUM            reduce using rule 161 (type_specifier -> simple_type_name .)
    TYPE            reduce using rule 161 (type_specifier -> simple_type_name .)
    OPERATOR        reduce using rule 161 (type_specifier -> simple_type_name .)
    CLASS           reduce using rule 161 (type_specifier -> simple_type_name .)
    STRUCT          reduce using rule 161 (type_specifier -> simple_type_name .)
    UNION           reduce using rule 161 (type_specifier -> simple_type_name .)
    TEMPLATE        reduce using rule 161 (type_specifier -> simple_type_name .)
    EQUAL           reduce using rule 161 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 161 (type_specifier -> simple_type_name .)
    RTEMPLATE       reduce using rule 161 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 161 (type_specifier -> simple_type_name .)
    COLON           reduce using rule 161 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 161 (type_specifier -> simple_type_name .)
    MULTEQOP        reduce using rule 161 (type_specifier -> simple_type_name .)
    DIVEQOP         reduce using rule 161 (type_specifier -> simple_type_name .)
    MODEQOP         reduce using rule 161 (type_specifier -> simple_type_name .)
    PLUSEQOP        reduce using rule 161 (type_specifier -> simple_type_name .)
    MINUSEQOP       reduce using rule 161 (type_specifier -> simple_type_name .)
    LSHIFTEQOP      reduce using rule 161 (type_specifier -> simple_type_name .)
    RSHIFTEQOP      reduce using rule 161 (type_specifier -> simple_type_name .)
    BANDEQOP        reduce using rule 161 (type_specifier -> simple_type_name .)
    BOREQOP         reduce using rule 161 (type_specifier -> simple_type_name .)
    DOTSTAR         reduce using rule 161 (type_specifier -> simple_type_name .)
    ARROWSTAR       reduce using rule 161 (type_specifier -> simple_type_name .)
    DIVOP           reduce using rule 161 (type_specifier -> simple_type_name .)
    MODOP           reduce using rule 161 (type_specifier -> simple_type_name .)
    PLUSOP          reduce using rule 161 (type_specifier -> simple_type_name .)
    MINUSOP         reduce using rule 161 (type_specifier -> simple_type_name .)
    LSHIFT          reduce using rule 161 (type_specifier -> simple_type_name .)
    RSHIFT          reduce using rule 161 (type_specifier -> simple_type_name .)
    LTCOMP          reduce using rule 161 (type_specifier -> simple_type_name .)
    GTCOMP          reduce using rule 161 (type_specifier -> simple_type_name .)
    LTECOMP         reduce using rule 161 (type_specifier -> simple_type_name .)
    GTECOMP         reduce using rule 161 (type_specifier -> simple_type_name .)
    EQCOMP          reduce using rule 161 (type_specifier -> simple_type_name .)
    NEQCOMP         reduce using rule 161 (type_specifier -> simple_type_name .)
    XOROP           reduce using rule 161 (type_specifier -> simple_type_name .)
    OROP            reduce using rule 161 (type_specifier -> simple_type_name .)
    ANDOP           reduce using rule 161 (type_specifier -> simple_type_name .)
    QUESMARK        reduce using rule 161 (type_specifier -> simple_type_name .)
    RSPAREN         reduce using rule 161 (type_specifier -> simple_type_name .)
    RCPAREN         reduce using rule 161 (type_specifier -> simple_type_name .)


state 30

    (162) type_specifier -> class_specifier .

    SEMICOLON       reduce using rule 162 (type_specifier -> class_specifier .)
    TYPEDEF         reduce using rule 162 (type_specifier -> class_specifier .)
    LPAREN          reduce using rule 162 (type_specifier -> class_specifier .)
    AUTO            reduce using rule 162 (type_specifier -> class_specifier .)
    STATIC          reduce using rule 162 (type_specifier -> class_specifier .)
    EXTERN          reduce using rule 162 (type_specifier -> class_specifier .)
    VIRTUAL         reduce using rule 162 (type_specifier -> class_specifier .)
    CONST           reduce using rule 162 (type_specifier -> class_specifier .)
    VOLATILE        reduce using rule 162 (type_specifier -> class_specifier .)
    IDENTIFIER      reduce using rule 162 (type_specifier -> class_specifier .)
    BNOP            reduce using rule 162 (type_specifier -> class_specifier .)
    MULTOP          reduce using rule 162 (type_specifier -> class_specifier .)
    BANDOP          reduce using rule 162 (type_specifier -> class_specifier .)
    CHAR            reduce using rule 162 (type_specifier -> class_specifier .)
    SHORT           reduce using rule 162 (type_specifier -> class_specifier .)
    INT             reduce using rule 162 (type_specifier -> class_specifier .)
    LONG            reduce using rule 162 (type_specifier -> class_specifier .)
    SIGNED          reduce using rule 162 (type_specifier -> class_specifier .)
    UNSIGNED        reduce using rule 162 (type_specifier -> class_specifier .)
    FLOAT           reduce using rule 162 (type_specifier -> class_specifier .)
    DOUBLE          reduce using rule 162 (type_specifier -> class_specifier .)
    VOID            reduce using rule 162 (type_specifier -> class_specifier .)
    STRING          reduce using rule 162 (type_specifier -> class_specifier .)
    ENUM            reduce using rule 162 (type_specifier -> class_specifier .)
    TYPE            reduce using rule 162 (type_specifier -> class_specifier .)
    OPERATOR        reduce using rule 162 (type_specifier -> class_specifier .)
    CLASS           reduce using rule 162 (type_specifier -> class_specifier .)
    STRUCT          reduce using rule 162 (type_specifier -> class_specifier .)
    UNION           reduce using rule 162 (type_specifier -> class_specifier .)
    TEMPLATE        reduce using rule 162 (type_specifier -> class_specifier .)
    EQUAL           reduce using rule 162 (type_specifier -> class_specifier .)
    LSPAREN         reduce using rule 162 (type_specifier -> class_specifier .)
    COMMA           reduce using rule 162 (type_specifier -> class_specifier .)
    RPAREN          reduce using rule 162 (type_specifier -> class_specifier .)
    RTEMPLATE       reduce using rule 162 (type_specifier -> class_specifier .)
    COLON           reduce using rule 162 (type_specifier -> class_specifier .)
    MULTEQOP        reduce using rule 162 (type_specifier -> class_specifier .)
    DIVEQOP         reduce using rule 162 (type_specifier -> class_specifier .)
    MODEQOP         reduce using rule 162 (type_specifier -> class_specifier .)
    PLUSEQOP        reduce using rule 162 (type_specifier -> class_specifier .)
    MINUSEQOP       reduce using rule 162 (type_specifier -> class_specifier .)
    LSHIFTEQOP      reduce using rule 162 (type_specifier -> class_specifier .)
    RSHIFTEQOP      reduce using rule 162 (type_specifier -> class_specifier .)
    BANDEQOP        reduce using rule 162 (type_specifier -> class_specifier .)
    BOREQOP         reduce using rule 162 (type_specifier -> class_specifier .)
    DOTSTAR         reduce using rule 162 (type_specifier -> class_specifier .)
    ARROWSTAR       reduce using rule 162 (type_specifier -> class_specifier .)
    DIVOP           reduce using rule 162 (type_specifier -> class_specifier .)
    MODOP           reduce using rule 162 (type_specifier -> class_specifier .)
    PLUSOP          reduce using rule 162 (type_specifier -> class_specifier .)
    MINUSOP         reduce using rule 162 (type_specifier -> class_specifier .)
    LSHIFT          reduce using rule 162 (type_specifier -> class_specifier .)
    RSHIFT          reduce using rule 162 (type_specifier -> class_specifier .)
    LTCOMP          reduce using rule 162 (type_specifier -> class_specifier .)
    GTCOMP          reduce using rule 162 (type_specifier -> class_specifier .)
    LTECOMP         reduce using rule 162 (type_specifier -> class_specifier .)
    GTECOMP         reduce using rule 162 (type_specifier -> class_specifier .)
    EQCOMP          reduce using rule 162 (type_specifier -> class_specifier .)
    NEQCOMP         reduce using rule 162 (type_specifier -> class_specifier .)
    XOROP           reduce using rule 162 (type_specifier -> class_specifier .)
    OROP            reduce using rule 162 (type_specifier -> class_specifier .)
    ANDOP           reduce using rule 162 (type_specifier -> class_specifier .)
    QUESMARK        reduce using rule 162 (type_specifier -> class_specifier .)
    RSPAREN         reduce using rule 162 (type_specifier -> class_specifier .)
    RCPAREN         reduce using rule 162 (type_specifier -> class_specifier .)


state 31

    (163) type_specifier -> enum_specifier .

    SEMICOLON       reduce using rule 163 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 163 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 163 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 163 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 163 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 163 (type_specifier -> enum_specifier .)
    VIRTUAL         reduce using rule 163 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 163 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 163 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 163 (type_specifier -> enum_specifier .)
    BNOP            reduce using rule 163 (type_specifier -> enum_specifier .)
    MULTOP          reduce using rule 163 (type_specifier -> enum_specifier .)
    BANDOP          reduce using rule 163 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 163 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 163 (type_specifier -> enum_specifier .)
    INT             reduce using rule 163 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 163 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 163 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 163 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 163 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 163 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 163 (type_specifier -> enum_specifier .)
    STRING          reduce using rule 163 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 163 (type_specifier -> enum_specifier .)
    TYPE            reduce using rule 163 (type_specifier -> enum_specifier .)
    OPERATOR        reduce using rule 163 (type_specifier -> enum_specifier .)
    CLASS           reduce using rule 163 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 163 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 163 (type_specifier -> enum_specifier .)
    TEMPLATE        reduce using rule 163 (type_specifier -> enum_specifier .)
    EQUAL           reduce using rule 163 (type_specifier -> enum_specifier .)
    LSPAREN         reduce using rule 163 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 163 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 163 (type_specifier -> enum_specifier .)
    RTEMPLATE       reduce using rule 163 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 163 (type_specifier -> enum_specifier .)
    MULTEQOP        reduce using rule 163 (type_specifier -> enum_specifier .)
    DIVEQOP         reduce using rule 163 (type_specifier -> enum_specifier .)
    MODEQOP         reduce using rule 163 (type_specifier -> enum_specifier .)
    PLUSEQOP        reduce using rule 163 (type_specifier -> enum_specifier .)
    MINUSEQOP       reduce using rule 163 (type_specifier -> enum_specifier .)
    LSHIFTEQOP      reduce using rule 163 (type_specifier -> enum_specifier .)
    RSHIFTEQOP      reduce using rule 163 (type_specifier -> enum_specifier .)
    BANDEQOP        reduce using rule 163 (type_specifier -> enum_specifier .)
    BOREQOP         reduce using rule 163 (type_specifier -> enum_specifier .)
    DOTSTAR         reduce using rule 163 (type_specifier -> enum_specifier .)
    ARROWSTAR       reduce using rule 163 (type_specifier -> enum_specifier .)
    DIVOP           reduce using rule 163 (type_specifier -> enum_specifier .)
    MODOP           reduce using rule 163 (type_specifier -> enum_specifier .)
    PLUSOP          reduce using rule 163 (type_specifier -> enum_specifier .)
    MINUSOP         reduce using rule 163 (type_specifier -> enum_specifier .)
    LSHIFT          reduce using rule 163 (type_specifier -> enum_specifier .)
    RSHIFT          reduce using rule 163 (type_specifier -> enum_specifier .)
    LTCOMP          reduce using rule 163 (type_specifier -> enum_specifier .)
    GTCOMP          reduce using rule 163 (type_specifier -> enum_specifier .)
    LTECOMP         reduce using rule 163 (type_specifier -> enum_specifier .)
    GTECOMP         reduce using rule 163 (type_specifier -> enum_specifier .)
    EQCOMP          reduce using rule 163 (type_specifier -> enum_specifier .)
    NEQCOMP         reduce using rule 163 (type_specifier -> enum_specifier .)
    XOROP           reduce using rule 163 (type_specifier -> enum_specifier .)
    OROP            reduce using rule 163 (type_specifier -> enum_specifier .)
    ANDOP           reduce using rule 163 (type_specifier -> enum_specifier .)
    QUESMARK        reduce using rule 163 (type_specifier -> enum_specifier .)
    RSPAREN         reduce using rule 163 (type_specifier -> enum_specifier .)
    RCPAREN         reduce using rule 163 (type_specifier -> enum_specifier .)


state 32

    (164) type_specifier -> elaborated_type_specifier .

    SEMICOLON       reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    TYPEDEF         reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    LPAREN          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    AUTO            reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    STATIC          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    EXTERN          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    VIRTUAL         reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    CONST           reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    VOLATILE        reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    IDENTIFIER      reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    BNOP            reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    MULTOP          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    BANDOP          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    CHAR            reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    SHORT           reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    INT             reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    LONG            reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    SIGNED          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    UNSIGNED        reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    FLOAT           reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    DOUBLE          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    VOID            reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    STRING          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    ENUM            reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    TYPE            reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    OPERATOR        reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    CLASS           reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    STRUCT          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    UNION           reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    TEMPLATE        reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    EQUAL           reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    LSPAREN         reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    COMMA           reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    RPAREN          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    RTEMPLATE       reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    COLON           reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    MULTEQOP        reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    DIVEQOP         reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    MODEQOP         reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    PLUSEQOP        reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    MINUSEQOP       reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    LSHIFTEQOP      reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    RSHIFTEQOP      reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    BANDEQOP        reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    BOREQOP         reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    DOTSTAR         reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    ARROWSTAR       reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    DIVOP           reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    MODOP           reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    PLUSOP          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    MINUSOP         reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    LSHIFT          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    RSHIFT          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    LTCOMP          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    GTCOMP          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    LTECOMP         reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    GTECOMP         reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    EQCOMP          reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    NEQCOMP         reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    XOROP           reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    OROP            reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    ANDOP           reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    QUESMARK        reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    RSPAREN         reduce using rule 164 (type_specifier -> elaborated_type_specifier .)
    RCPAREN         reduce using rule 164 (type_specifier -> elaborated_type_specifier .)


state 33

    (165) type_specifier -> CONST .

    SEMICOLON       reduce using rule 165 (type_specifier -> CONST .)
    TYPEDEF         reduce using rule 165 (type_specifier -> CONST .)
    LPAREN          reduce using rule 165 (type_specifier -> CONST .)
    AUTO            reduce using rule 165 (type_specifier -> CONST .)
    STATIC          reduce using rule 165 (type_specifier -> CONST .)
    EXTERN          reduce using rule 165 (type_specifier -> CONST .)
    VIRTUAL         reduce using rule 165 (type_specifier -> CONST .)
    CONST           reduce using rule 165 (type_specifier -> CONST .)
    VOLATILE        reduce using rule 165 (type_specifier -> CONST .)
    IDENTIFIER      reduce using rule 165 (type_specifier -> CONST .)
    BNOP            reduce using rule 165 (type_specifier -> CONST .)
    MULTOP          reduce using rule 165 (type_specifier -> CONST .)
    BANDOP          reduce using rule 165 (type_specifier -> CONST .)
    CHAR            reduce using rule 165 (type_specifier -> CONST .)
    SHORT           reduce using rule 165 (type_specifier -> CONST .)
    INT             reduce using rule 165 (type_specifier -> CONST .)
    LONG            reduce using rule 165 (type_specifier -> CONST .)
    SIGNED          reduce using rule 165 (type_specifier -> CONST .)
    UNSIGNED        reduce using rule 165 (type_specifier -> CONST .)
    FLOAT           reduce using rule 165 (type_specifier -> CONST .)
    DOUBLE          reduce using rule 165 (type_specifier -> CONST .)
    VOID            reduce using rule 165 (type_specifier -> CONST .)
    STRING          reduce using rule 165 (type_specifier -> CONST .)
    ENUM            reduce using rule 165 (type_specifier -> CONST .)
    TYPE            reduce using rule 165 (type_specifier -> CONST .)
    OPERATOR        reduce using rule 165 (type_specifier -> CONST .)
    CLASS           reduce using rule 165 (type_specifier -> CONST .)
    STRUCT          reduce using rule 165 (type_specifier -> CONST .)
    UNION           reduce using rule 165 (type_specifier -> CONST .)
    TEMPLATE        reduce using rule 165 (type_specifier -> CONST .)
    EQUAL           reduce using rule 165 (type_specifier -> CONST .)
    LSPAREN         reduce using rule 165 (type_specifier -> CONST .)
    COMMA           reduce using rule 165 (type_specifier -> CONST .)
    RPAREN          reduce using rule 165 (type_specifier -> CONST .)
    RTEMPLATE       reduce using rule 165 (type_specifier -> CONST .)
    COLON           reduce using rule 165 (type_specifier -> CONST .)
    MULTEQOP        reduce using rule 165 (type_specifier -> CONST .)
    DIVEQOP         reduce using rule 165 (type_specifier -> CONST .)
    MODEQOP         reduce using rule 165 (type_specifier -> CONST .)
    PLUSEQOP        reduce using rule 165 (type_specifier -> CONST .)
    MINUSEQOP       reduce using rule 165 (type_specifier -> CONST .)
    LSHIFTEQOP      reduce using rule 165 (type_specifier -> CONST .)
    RSHIFTEQOP      reduce using rule 165 (type_specifier -> CONST .)
    BANDEQOP        reduce using rule 165 (type_specifier -> CONST .)
    BOREQOP         reduce using rule 165 (type_specifier -> CONST .)
    DOTSTAR         reduce using rule 165 (type_specifier -> CONST .)
    ARROWSTAR       reduce using rule 165 (type_specifier -> CONST .)
    DIVOP           reduce using rule 165 (type_specifier -> CONST .)
    MODOP           reduce using rule 165 (type_specifier -> CONST .)
    PLUSOP          reduce using rule 165 (type_specifier -> CONST .)
    MINUSOP         reduce using rule 165 (type_specifier -> CONST .)
    LSHIFT          reduce using rule 165 (type_specifier -> CONST .)
    RSHIFT          reduce using rule 165 (type_specifier -> CONST .)
    LTCOMP          reduce using rule 165 (type_specifier -> CONST .)
    GTCOMP          reduce using rule 165 (type_specifier -> CONST .)
    LTECOMP         reduce using rule 165 (type_specifier -> CONST .)
    GTECOMP         reduce using rule 165 (type_specifier -> CONST .)
    EQCOMP          reduce using rule 165 (type_specifier -> CONST .)
    NEQCOMP         reduce using rule 165 (type_specifier -> CONST .)
    XOROP           reduce using rule 165 (type_specifier -> CONST .)
    OROP            reduce using rule 165 (type_specifier -> CONST .)
    ANDOP           reduce using rule 165 (type_specifier -> CONST .)
    QUESMARK        reduce using rule 165 (type_specifier -> CONST .)
    RSPAREN         reduce using rule 165 (type_specifier -> CONST .)
    RCPAREN         reduce using rule 165 (type_specifier -> CONST .)


state 34

    (166) type_specifier -> VOLATILE .

    SEMICOLON       reduce using rule 166 (type_specifier -> VOLATILE .)
    TYPEDEF         reduce using rule 166 (type_specifier -> VOLATILE .)
    LPAREN          reduce using rule 166 (type_specifier -> VOLATILE .)
    AUTO            reduce using rule 166 (type_specifier -> VOLATILE .)
    STATIC          reduce using rule 166 (type_specifier -> VOLATILE .)
    EXTERN          reduce using rule 166 (type_specifier -> VOLATILE .)
    VIRTUAL         reduce using rule 166 (type_specifier -> VOLATILE .)
    CONST           reduce using rule 166 (type_specifier -> VOLATILE .)
    VOLATILE        reduce using rule 166 (type_specifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 166 (type_specifier -> VOLATILE .)
    BNOP            reduce using rule 166 (type_specifier -> VOLATILE .)
    MULTOP          reduce using rule 166 (type_specifier -> VOLATILE .)
    BANDOP          reduce using rule 166 (type_specifier -> VOLATILE .)
    CHAR            reduce using rule 166 (type_specifier -> VOLATILE .)
    SHORT           reduce using rule 166 (type_specifier -> VOLATILE .)
    INT             reduce using rule 166 (type_specifier -> VOLATILE .)
    LONG            reduce using rule 166 (type_specifier -> VOLATILE .)
    SIGNED          reduce using rule 166 (type_specifier -> VOLATILE .)
    UNSIGNED        reduce using rule 166 (type_specifier -> VOLATILE .)
    FLOAT           reduce using rule 166 (type_specifier -> VOLATILE .)
    DOUBLE          reduce using rule 166 (type_specifier -> VOLATILE .)
    VOID            reduce using rule 166 (type_specifier -> VOLATILE .)
    STRING          reduce using rule 166 (type_specifier -> VOLATILE .)
    ENUM            reduce using rule 166 (type_specifier -> VOLATILE .)
    TYPE            reduce using rule 166 (type_specifier -> VOLATILE .)
    OPERATOR        reduce using rule 166 (type_specifier -> VOLATILE .)
    CLASS           reduce using rule 166 (type_specifier -> VOLATILE .)
    STRUCT          reduce using rule 166 (type_specifier -> VOLATILE .)
    UNION           reduce using rule 166 (type_specifier -> VOLATILE .)
    TEMPLATE        reduce using rule 166 (type_specifier -> VOLATILE .)
    EQUAL           reduce using rule 166 (type_specifier -> VOLATILE .)
    LSPAREN         reduce using rule 166 (type_specifier -> VOLATILE .)
    COMMA           reduce using rule 166 (type_specifier -> VOLATILE .)
    RPAREN          reduce using rule 166 (type_specifier -> VOLATILE .)
    RTEMPLATE       reduce using rule 166 (type_specifier -> VOLATILE .)
    COLON           reduce using rule 166 (type_specifier -> VOLATILE .)
    MULTEQOP        reduce using rule 166 (type_specifier -> VOLATILE .)
    DIVEQOP         reduce using rule 166 (type_specifier -> VOLATILE .)
    MODEQOP         reduce using rule 166 (type_specifier -> VOLATILE .)
    PLUSEQOP        reduce using rule 166 (type_specifier -> VOLATILE .)
    MINUSEQOP       reduce using rule 166 (type_specifier -> VOLATILE .)
    LSHIFTEQOP      reduce using rule 166 (type_specifier -> VOLATILE .)
    RSHIFTEQOP      reduce using rule 166 (type_specifier -> VOLATILE .)
    BANDEQOP        reduce using rule 166 (type_specifier -> VOLATILE .)
    BOREQOP         reduce using rule 166 (type_specifier -> VOLATILE .)
    DOTSTAR         reduce using rule 166 (type_specifier -> VOLATILE .)
    ARROWSTAR       reduce using rule 166 (type_specifier -> VOLATILE .)
    DIVOP           reduce using rule 166 (type_specifier -> VOLATILE .)
    MODOP           reduce using rule 166 (type_specifier -> VOLATILE .)
    PLUSOP          reduce using rule 166 (type_specifier -> VOLATILE .)
    MINUSOP         reduce using rule 166 (type_specifier -> VOLATILE .)
    LSHIFT          reduce using rule 166 (type_specifier -> VOLATILE .)
    RSHIFT          reduce using rule 166 (type_specifier -> VOLATILE .)
    LTCOMP          reduce using rule 166 (type_specifier -> VOLATILE .)
    GTCOMP          reduce using rule 166 (type_specifier -> VOLATILE .)
    LTECOMP         reduce using rule 166 (type_specifier -> VOLATILE .)
    GTECOMP         reduce using rule 166 (type_specifier -> VOLATILE .)
    EQCOMP          reduce using rule 166 (type_specifier -> VOLATILE .)
    NEQCOMP         reduce using rule 166 (type_specifier -> VOLATILE .)
    XOROP           reduce using rule 166 (type_specifier -> VOLATILE .)
    OROP            reduce using rule 166 (type_specifier -> VOLATILE .)
    ANDOP           reduce using rule 166 (type_specifier -> VOLATILE .)
    QUESMARK        reduce using rule 166 (type_specifier -> VOLATILE .)
    RSPAREN         reduce using rule 166 (type_specifier -> VOLATILE .)
    RCPAREN         reduce using rule 166 (type_specifier -> VOLATILE .)


state 35

    (264) name -> IDENTIFIER .

    LPAREN          reduce using rule 264 (name -> IDENTIFIER .)
    LSPAREN         reduce using rule 264 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 264 (name -> IDENTIFIER .)
    LCPAREN         reduce using rule 264 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 264 (name -> IDENTIFIER .)
    COMMA           reduce using rule 264 (name -> IDENTIFIER .)
    RPAREN          reduce using rule 264 (name -> IDENTIFIER .)
    DOT             reduce using rule 264 (name -> IDENTIFIER .)
    ARROW           reduce using rule 264 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 264 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 264 (name -> IDENTIFIER .)
    LTEMPLATE       reduce using rule 264 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 264 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 264 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 264 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 264 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 264 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 264 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 264 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 264 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 264 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 264 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 264 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 264 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 264 (name -> IDENTIFIER .)
    MODOP           reduce using rule 264 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 264 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 264 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 264 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 264 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 264 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 264 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 264 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 264 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 264 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 264 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 264 (name -> IDENTIFIER .)
    XOROP           reduce using rule 264 (name -> IDENTIFIER .)
    OROP            reduce using rule 264 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 264 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 264 (name -> IDENTIFIER .)
    RSPAREN         reduce using rule 264 (name -> IDENTIFIER .)
    RTEMPLATE       reduce using rule 264 (name -> IDENTIFIER .)
    RCPAREN         reduce using rule 264 (name -> IDENTIFIER .)
    COLON           reduce using rule 264 (name -> IDENTIFIER .)


state 36

    (265) name -> operator_function_name .

    LPAREN          reduce using rule 265 (name -> operator_function_name .)
    LSPAREN         reduce using rule 265 (name -> operator_function_name .)
    EQUAL           reduce using rule 265 (name -> operator_function_name .)
    LCPAREN         reduce using rule 265 (name -> operator_function_name .)
    SEMICOLON       reduce using rule 265 (name -> operator_function_name .)
    COMMA           reduce using rule 265 (name -> operator_function_name .)
    RPAREN          reduce using rule 265 (name -> operator_function_name .)
    DOT             reduce using rule 265 (name -> operator_function_name .)
    ARROW           reduce using rule 265 (name -> operator_function_name .)
    DPLUSOP         reduce using rule 265 (name -> operator_function_name .)
    DMINUSOP        reduce using rule 265 (name -> operator_function_name .)
    LTEMPLATE       reduce using rule 265 (name -> operator_function_name .)
    MULTEQOP        reduce using rule 265 (name -> operator_function_name .)
    DIVEQOP         reduce using rule 265 (name -> operator_function_name .)
    MODEQOP         reduce using rule 265 (name -> operator_function_name .)
    PLUSEQOP        reduce using rule 265 (name -> operator_function_name .)
    MINUSEQOP       reduce using rule 265 (name -> operator_function_name .)
    LSHIFTEQOP      reduce using rule 265 (name -> operator_function_name .)
    RSHIFTEQOP      reduce using rule 265 (name -> operator_function_name .)
    BANDEQOP        reduce using rule 265 (name -> operator_function_name .)
    BOREQOP         reduce using rule 265 (name -> operator_function_name .)
    DOTSTAR         reduce using rule 265 (name -> operator_function_name .)
    ARROWSTAR       reduce using rule 265 (name -> operator_function_name .)
    MULTOP          reduce using rule 265 (name -> operator_function_name .)
    DIVOP           reduce using rule 265 (name -> operator_function_name .)
    MODOP           reduce using rule 265 (name -> operator_function_name .)
    PLUSOP          reduce using rule 265 (name -> operator_function_name .)
    MINUSOP         reduce using rule 265 (name -> operator_function_name .)
    LSHIFT          reduce using rule 265 (name -> operator_function_name .)
    RSHIFT          reduce using rule 265 (name -> operator_function_name .)
    LTCOMP          reduce using rule 265 (name -> operator_function_name .)
    GTCOMP          reduce using rule 265 (name -> operator_function_name .)
    LTECOMP         reduce using rule 265 (name -> operator_function_name .)
    GTECOMP         reduce using rule 265 (name -> operator_function_name .)
    EQCOMP          reduce using rule 265 (name -> operator_function_name .)
    NEQCOMP         reduce using rule 265 (name -> operator_function_name .)
    BANDOP          reduce using rule 265 (name -> operator_function_name .)
    XOROP           reduce using rule 265 (name -> operator_function_name .)
    OROP            reduce using rule 265 (name -> operator_function_name .)
    ANDOP           reduce using rule 265 (name -> operator_function_name .)
    QUESMARK        reduce using rule 265 (name -> operator_function_name .)
    RSPAREN         reduce using rule 265 (name -> operator_function_name .)
    RTEMPLATE       reduce using rule 265 (name -> operator_function_name .)
    RCPAREN         reduce using rule 265 (name -> operator_function_name .)
    COLON           reduce using rule 265 (name -> operator_function_name .)


state 37

    (266) name -> BNOP . IDENTIFIER

    IDENTIFIER      shift and go to state 82


state 38

    (109) unary2_operator -> MULTOP .

    LPAREN          reduce using rule 109 (unary2_operator -> MULTOP .)
    IDENTIFIER      reduce using rule 109 (unary2_operator -> MULTOP .)
    BNOP            reduce using rule 109 (unary2_operator -> MULTOP .)
    MULTOP          reduce using rule 109 (unary2_operator -> MULTOP .)
    BANDOP          reduce using rule 109 (unary2_operator -> MULTOP .)
    OPERATOR        reduce using rule 109 (unary2_operator -> MULTOP .)
    DPLUSOP         reduce using rule 109 (unary2_operator -> MULTOP .)
    DMINUSOP        reduce using rule 109 (unary2_operator -> MULTOP .)
    SIZEOF          reduce using rule 109 (unary2_operator -> MULTOP .)
    PLUSOP          reduce using rule 109 (unary2_operator -> MULTOP .)
    MINUSOP         reduce using rule 109 (unary2_operator -> MULTOP .)
    NOTSYM          reduce using rule 109 (unary2_operator -> MULTOP .)
    NEW             reduce using rule 109 (unary2_operator -> MULTOP .)
    DELETE          reduce using rule 109 (unary2_operator -> MULTOP .)
    THIS            reduce using rule 109 (unary2_operator -> MULTOP .)
    CHAR            reduce using rule 109 (unary2_operator -> MULTOP .)
    SHORT           reduce using rule 109 (unary2_operator -> MULTOP .)
    INT             reduce using rule 109 (unary2_operator -> MULTOP .)
    LONG            reduce using rule 109 (unary2_operator -> MULTOP .)
    SIGNED          reduce using rule 109 (unary2_operator -> MULTOP .)
    UNSIGNED        reduce using rule 109 (unary2_operator -> MULTOP .)
    FLOAT           reduce using rule 109 (unary2_operator -> MULTOP .)
    DOUBLE          reduce using rule 109 (unary2_operator -> MULTOP .)
    VOID            reduce using rule 109 (unary2_operator -> MULTOP .)
    STRING          reduce using rule 109 (unary2_operator -> MULTOP .)
    NUMBER          reduce using rule 109 (unary2_operator -> MULTOP .)
    STRING_L        reduce using rule 109 (unary2_operator -> MULTOP .)
    SCHAR           reduce using rule 109 (unary2_operator -> MULTOP .)
    LSPAREN         reduce using rule 109 (unary2_operator -> MULTOP .)
    EQUAL           reduce using rule 109 (unary2_operator -> MULTOP .)
    COMMA           reduce using rule 109 (unary2_operator -> MULTOP .)
    RPAREN          reduce using rule 109 (unary2_operator -> MULTOP .)
    RTEMPLATE       reduce using rule 109 (unary2_operator -> MULTOP .)


state 39

    (110) unary2_operator -> BANDOP .

    LPAREN          reduce using rule 110 (unary2_operator -> BANDOP .)
    IDENTIFIER      reduce using rule 110 (unary2_operator -> BANDOP .)
    BNOP            reduce using rule 110 (unary2_operator -> BANDOP .)
    MULTOP          reduce using rule 110 (unary2_operator -> BANDOP .)
    BANDOP          reduce using rule 110 (unary2_operator -> BANDOP .)
    OPERATOR        reduce using rule 110 (unary2_operator -> BANDOP .)
    DPLUSOP         reduce using rule 110 (unary2_operator -> BANDOP .)
    DMINUSOP        reduce using rule 110 (unary2_operator -> BANDOP .)
    SIZEOF          reduce using rule 110 (unary2_operator -> BANDOP .)
    PLUSOP          reduce using rule 110 (unary2_operator -> BANDOP .)
    MINUSOP         reduce using rule 110 (unary2_operator -> BANDOP .)
    NOTSYM          reduce using rule 110 (unary2_operator -> BANDOP .)
    NEW             reduce using rule 110 (unary2_operator -> BANDOP .)
    DELETE          reduce using rule 110 (unary2_operator -> BANDOP .)
    THIS            reduce using rule 110 (unary2_operator -> BANDOP .)
    CHAR            reduce using rule 110 (unary2_operator -> BANDOP .)
    SHORT           reduce using rule 110 (unary2_operator -> BANDOP .)
    INT             reduce using rule 110 (unary2_operator -> BANDOP .)
    LONG            reduce using rule 110 (unary2_operator -> BANDOP .)
    SIGNED          reduce using rule 110 (unary2_operator -> BANDOP .)
    UNSIGNED        reduce using rule 110 (unary2_operator -> BANDOP .)
    FLOAT           reduce using rule 110 (unary2_operator -> BANDOP .)
    DOUBLE          reduce using rule 110 (unary2_operator -> BANDOP .)
    VOID            reduce using rule 110 (unary2_operator -> BANDOP .)
    STRING          reduce using rule 110 (unary2_operator -> BANDOP .)
    NUMBER          reduce using rule 110 (unary2_operator -> BANDOP .)
    STRING_L        reduce using rule 110 (unary2_operator -> BANDOP .)
    SCHAR           reduce using rule 110 (unary2_operator -> BANDOP .)
    LSPAREN         reduce using rule 110 (unary2_operator -> BANDOP .)
    EQUAL           reduce using rule 110 (unary2_operator -> BANDOP .)
    COMMA           reduce using rule 110 (unary2_operator -> BANDOP .)
    RPAREN          reduce using rule 110 (unary2_operator -> BANDOP .)
    RTEMPLATE       reduce using rule 110 (unary2_operator -> BANDOP .)


state 40

    (337) simple_type_name -> CHAR .

    SEMICOLON       reduce using rule 337 (simple_type_name -> CHAR .)
    TYPEDEF         reduce using rule 337 (simple_type_name -> CHAR .)
    LPAREN          reduce using rule 337 (simple_type_name -> CHAR .)
    AUTO            reduce using rule 337 (simple_type_name -> CHAR .)
    STATIC          reduce using rule 337 (simple_type_name -> CHAR .)
    EXTERN          reduce using rule 337 (simple_type_name -> CHAR .)
    VIRTUAL         reduce using rule 337 (simple_type_name -> CHAR .)
    CONST           reduce using rule 337 (simple_type_name -> CHAR .)
    VOLATILE        reduce using rule 337 (simple_type_name -> CHAR .)
    IDENTIFIER      reduce using rule 337 (simple_type_name -> CHAR .)
    BNOP            reduce using rule 337 (simple_type_name -> CHAR .)
    MULTOP          reduce using rule 337 (simple_type_name -> CHAR .)
    BANDOP          reduce using rule 337 (simple_type_name -> CHAR .)
    CHAR            reduce using rule 337 (simple_type_name -> CHAR .)
    SHORT           reduce using rule 337 (simple_type_name -> CHAR .)
    INT             reduce using rule 337 (simple_type_name -> CHAR .)
    LONG            reduce using rule 337 (simple_type_name -> CHAR .)
    SIGNED          reduce using rule 337 (simple_type_name -> CHAR .)
    UNSIGNED        reduce using rule 337 (simple_type_name -> CHAR .)
    FLOAT           reduce using rule 337 (simple_type_name -> CHAR .)
    DOUBLE          reduce using rule 337 (simple_type_name -> CHAR .)
    VOID            reduce using rule 337 (simple_type_name -> CHAR .)
    STRING          reduce using rule 337 (simple_type_name -> CHAR .)
    ENUM            reduce using rule 337 (simple_type_name -> CHAR .)
    TYPE            reduce using rule 337 (simple_type_name -> CHAR .)
    OPERATOR        reduce using rule 337 (simple_type_name -> CHAR .)
    CLASS           reduce using rule 337 (simple_type_name -> CHAR .)
    STRUCT          reduce using rule 337 (simple_type_name -> CHAR .)
    UNION           reduce using rule 337 (simple_type_name -> CHAR .)
    TEMPLATE        reduce using rule 337 (simple_type_name -> CHAR .)
    EQUAL           reduce using rule 337 (simple_type_name -> CHAR .)
    LSPAREN         reduce using rule 337 (simple_type_name -> CHAR .)
    COMMA           reduce using rule 337 (simple_type_name -> CHAR .)
    RPAREN          reduce using rule 337 (simple_type_name -> CHAR .)
    RTEMPLATE       reduce using rule 337 (simple_type_name -> CHAR .)
    COLON           reduce using rule 337 (simple_type_name -> CHAR .)
    MULTEQOP        reduce using rule 337 (simple_type_name -> CHAR .)
    DIVEQOP         reduce using rule 337 (simple_type_name -> CHAR .)
    MODEQOP         reduce using rule 337 (simple_type_name -> CHAR .)
    PLUSEQOP        reduce using rule 337 (simple_type_name -> CHAR .)
    MINUSEQOP       reduce using rule 337 (simple_type_name -> CHAR .)
    LSHIFTEQOP      reduce using rule 337 (simple_type_name -> CHAR .)
    RSHIFTEQOP      reduce using rule 337 (simple_type_name -> CHAR .)
    BANDEQOP        reduce using rule 337 (simple_type_name -> CHAR .)
    BOREQOP         reduce using rule 337 (simple_type_name -> CHAR .)
    DOTSTAR         reduce using rule 337 (simple_type_name -> CHAR .)
    ARROWSTAR       reduce using rule 337 (simple_type_name -> CHAR .)
    DIVOP           reduce using rule 337 (simple_type_name -> CHAR .)
    MODOP           reduce using rule 337 (simple_type_name -> CHAR .)
    PLUSOP          reduce using rule 337 (simple_type_name -> CHAR .)
    MINUSOP         reduce using rule 337 (simple_type_name -> CHAR .)
    LSHIFT          reduce using rule 337 (simple_type_name -> CHAR .)
    RSHIFT          reduce using rule 337 (simple_type_name -> CHAR .)
    LTCOMP          reduce using rule 337 (simple_type_name -> CHAR .)
    GTCOMP          reduce using rule 337 (simple_type_name -> CHAR .)
    LTECOMP         reduce using rule 337 (simple_type_name -> CHAR .)
    GTECOMP         reduce using rule 337 (simple_type_name -> CHAR .)
    EQCOMP          reduce using rule 337 (simple_type_name -> CHAR .)
    NEQCOMP         reduce using rule 337 (simple_type_name -> CHAR .)
    XOROP           reduce using rule 337 (simple_type_name -> CHAR .)
    OROP            reduce using rule 337 (simple_type_name -> CHAR .)
    ANDOP           reduce using rule 337 (simple_type_name -> CHAR .)
    QUESMARK        reduce using rule 337 (simple_type_name -> CHAR .)
    RSPAREN         reduce using rule 337 (simple_type_name -> CHAR .)
    RCPAREN         reduce using rule 337 (simple_type_name -> CHAR .)


state 41

    (338) simple_type_name -> SHORT .

    SEMICOLON       reduce using rule 338 (simple_type_name -> SHORT .)
    TYPEDEF         reduce using rule 338 (simple_type_name -> SHORT .)
    LPAREN          reduce using rule 338 (simple_type_name -> SHORT .)
    AUTO            reduce using rule 338 (simple_type_name -> SHORT .)
    STATIC          reduce using rule 338 (simple_type_name -> SHORT .)
    EXTERN          reduce using rule 338 (simple_type_name -> SHORT .)
    VIRTUAL         reduce using rule 338 (simple_type_name -> SHORT .)
    CONST           reduce using rule 338 (simple_type_name -> SHORT .)
    VOLATILE        reduce using rule 338 (simple_type_name -> SHORT .)
    IDENTIFIER      reduce using rule 338 (simple_type_name -> SHORT .)
    BNOP            reduce using rule 338 (simple_type_name -> SHORT .)
    MULTOP          reduce using rule 338 (simple_type_name -> SHORT .)
    BANDOP          reduce using rule 338 (simple_type_name -> SHORT .)
    CHAR            reduce using rule 338 (simple_type_name -> SHORT .)
    SHORT           reduce using rule 338 (simple_type_name -> SHORT .)
    INT             reduce using rule 338 (simple_type_name -> SHORT .)
    LONG            reduce using rule 338 (simple_type_name -> SHORT .)
    SIGNED          reduce using rule 338 (simple_type_name -> SHORT .)
    UNSIGNED        reduce using rule 338 (simple_type_name -> SHORT .)
    FLOAT           reduce using rule 338 (simple_type_name -> SHORT .)
    DOUBLE          reduce using rule 338 (simple_type_name -> SHORT .)
    VOID            reduce using rule 338 (simple_type_name -> SHORT .)
    STRING          reduce using rule 338 (simple_type_name -> SHORT .)
    ENUM            reduce using rule 338 (simple_type_name -> SHORT .)
    TYPE            reduce using rule 338 (simple_type_name -> SHORT .)
    OPERATOR        reduce using rule 338 (simple_type_name -> SHORT .)
    CLASS           reduce using rule 338 (simple_type_name -> SHORT .)
    STRUCT          reduce using rule 338 (simple_type_name -> SHORT .)
    UNION           reduce using rule 338 (simple_type_name -> SHORT .)
    TEMPLATE        reduce using rule 338 (simple_type_name -> SHORT .)
    EQUAL           reduce using rule 338 (simple_type_name -> SHORT .)
    LSPAREN         reduce using rule 338 (simple_type_name -> SHORT .)
    COMMA           reduce using rule 338 (simple_type_name -> SHORT .)
    RPAREN          reduce using rule 338 (simple_type_name -> SHORT .)
    RTEMPLATE       reduce using rule 338 (simple_type_name -> SHORT .)
    COLON           reduce using rule 338 (simple_type_name -> SHORT .)
    MULTEQOP        reduce using rule 338 (simple_type_name -> SHORT .)
    DIVEQOP         reduce using rule 338 (simple_type_name -> SHORT .)
    MODEQOP         reduce using rule 338 (simple_type_name -> SHORT .)
    PLUSEQOP        reduce using rule 338 (simple_type_name -> SHORT .)
    MINUSEQOP       reduce using rule 338 (simple_type_name -> SHORT .)
    LSHIFTEQOP      reduce using rule 338 (simple_type_name -> SHORT .)
    RSHIFTEQOP      reduce using rule 338 (simple_type_name -> SHORT .)
    BANDEQOP        reduce using rule 338 (simple_type_name -> SHORT .)
    BOREQOP         reduce using rule 338 (simple_type_name -> SHORT .)
    DOTSTAR         reduce using rule 338 (simple_type_name -> SHORT .)
    ARROWSTAR       reduce using rule 338 (simple_type_name -> SHORT .)
    DIVOP           reduce using rule 338 (simple_type_name -> SHORT .)
    MODOP           reduce using rule 338 (simple_type_name -> SHORT .)
    PLUSOP          reduce using rule 338 (simple_type_name -> SHORT .)
    MINUSOP         reduce using rule 338 (simple_type_name -> SHORT .)
    LSHIFT          reduce using rule 338 (simple_type_name -> SHORT .)
    RSHIFT          reduce using rule 338 (simple_type_name -> SHORT .)
    LTCOMP          reduce using rule 338 (simple_type_name -> SHORT .)
    GTCOMP          reduce using rule 338 (simple_type_name -> SHORT .)
    LTECOMP         reduce using rule 338 (simple_type_name -> SHORT .)
    GTECOMP         reduce using rule 338 (simple_type_name -> SHORT .)
    EQCOMP          reduce using rule 338 (simple_type_name -> SHORT .)
    NEQCOMP         reduce using rule 338 (simple_type_name -> SHORT .)
    XOROP           reduce using rule 338 (simple_type_name -> SHORT .)
    OROP            reduce using rule 338 (simple_type_name -> SHORT .)
    ANDOP           reduce using rule 338 (simple_type_name -> SHORT .)
    QUESMARK        reduce using rule 338 (simple_type_name -> SHORT .)
    RSPAREN         reduce using rule 338 (simple_type_name -> SHORT .)
    RCPAREN         reduce using rule 338 (simple_type_name -> SHORT .)


state 42

    (339) simple_type_name -> INT .

    SEMICOLON       reduce using rule 339 (simple_type_name -> INT .)
    TYPEDEF         reduce using rule 339 (simple_type_name -> INT .)
    LPAREN          reduce using rule 339 (simple_type_name -> INT .)
    AUTO            reduce using rule 339 (simple_type_name -> INT .)
    STATIC          reduce using rule 339 (simple_type_name -> INT .)
    EXTERN          reduce using rule 339 (simple_type_name -> INT .)
    VIRTUAL         reduce using rule 339 (simple_type_name -> INT .)
    CONST           reduce using rule 339 (simple_type_name -> INT .)
    VOLATILE        reduce using rule 339 (simple_type_name -> INT .)
    IDENTIFIER      reduce using rule 339 (simple_type_name -> INT .)
    BNOP            reduce using rule 339 (simple_type_name -> INT .)
    MULTOP          reduce using rule 339 (simple_type_name -> INT .)
    BANDOP          reduce using rule 339 (simple_type_name -> INT .)
    CHAR            reduce using rule 339 (simple_type_name -> INT .)
    SHORT           reduce using rule 339 (simple_type_name -> INT .)
    INT             reduce using rule 339 (simple_type_name -> INT .)
    LONG            reduce using rule 339 (simple_type_name -> INT .)
    SIGNED          reduce using rule 339 (simple_type_name -> INT .)
    UNSIGNED        reduce using rule 339 (simple_type_name -> INT .)
    FLOAT           reduce using rule 339 (simple_type_name -> INT .)
    DOUBLE          reduce using rule 339 (simple_type_name -> INT .)
    VOID            reduce using rule 339 (simple_type_name -> INT .)
    STRING          reduce using rule 339 (simple_type_name -> INT .)
    ENUM            reduce using rule 339 (simple_type_name -> INT .)
    TYPE            reduce using rule 339 (simple_type_name -> INT .)
    OPERATOR        reduce using rule 339 (simple_type_name -> INT .)
    CLASS           reduce using rule 339 (simple_type_name -> INT .)
    STRUCT          reduce using rule 339 (simple_type_name -> INT .)
    UNION           reduce using rule 339 (simple_type_name -> INT .)
    TEMPLATE        reduce using rule 339 (simple_type_name -> INT .)
    EQUAL           reduce using rule 339 (simple_type_name -> INT .)
    LSPAREN         reduce using rule 339 (simple_type_name -> INT .)
    COMMA           reduce using rule 339 (simple_type_name -> INT .)
    RPAREN          reduce using rule 339 (simple_type_name -> INT .)
    RTEMPLATE       reduce using rule 339 (simple_type_name -> INT .)
    COLON           reduce using rule 339 (simple_type_name -> INT .)
    MULTEQOP        reduce using rule 339 (simple_type_name -> INT .)
    DIVEQOP         reduce using rule 339 (simple_type_name -> INT .)
    MODEQOP         reduce using rule 339 (simple_type_name -> INT .)
    PLUSEQOP        reduce using rule 339 (simple_type_name -> INT .)
    MINUSEQOP       reduce using rule 339 (simple_type_name -> INT .)
    LSHIFTEQOP      reduce using rule 339 (simple_type_name -> INT .)
    RSHIFTEQOP      reduce using rule 339 (simple_type_name -> INT .)
    BANDEQOP        reduce using rule 339 (simple_type_name -> INT .)
    BOREQOP         reduce using rule 339 (simple_type_name -> INT .)
    DOTSTAR         reduce using rule 339 (simple_type_name -> INT .)
    ARROWSTAR       reduce using rule 339 (simple_type_name -> INT .)
    DIVOP           reduce using rule 339 (simple_type_name -> INT .)
    MODOP           reduce using rule 339 (simple_type_name -> INT .)
    PLUSOP          reduce using rule 339 (simple_type_name -> INT .)
    MINUSOP         reduce using rule 339 (simple_type_name -> INT .)
    LSHIFT          reduce using rule 339 (simple_type_name -> INT .)
    RSHIFT          reduce using rule 339 (simple_type_name -> INT .)
    LTCOMP          reduce using rule 339 (simple_type_name -> INT .)
    GTCOMP          reduce using rule 339 (simple_type_name -> INT .)
    LTECOMP         reduce using rule 339 (simple_type_name -> INT .)
    GTECOMP         reduce using rule 339 (simple_type_name -> INT .)
    EQCOMP          reduce using rule 339 (simple_type_name -> INT .)
    NEQCOMP         reduce using rule 339 (simple_type_name -> INT .)
    XOROP           reduce using rule 339 (simple_type_name -> INT .)
    OROP            reduce using rule 339 (simple_type_name -> INT .)
    ANDOP           reduce using rule 339 (simple_type_name -> INT .)
    QUESMARK        reduce using rule 339 (simple_type_name -> INT .)
    RSPAREN         reduce using rule 339 (simple_type_name -> INT .)
    RCPAREN         reduce using rule 339 (simple_type_name -> INT .)


state 43

    (340) simple_type_name -> LONG .

    SEMICOLON       reduce using rule 340 (simple_type_name -> LONG .)
    TYPEDEF         reduce using rule 340 (simple_type_name -> LONG .)
    LPAREN          reduce using rule 340 (simple_type_name -> LONG .)
    AUTO            reduce using rule 340 (simple_type_name -> LONG .)
    STATIC          reduce using rule 340 (simple_type_name -> LONG .)
    EXTERN          reduce using rule 340 (simple_type_name -> LONG .)
    VIRTUAL         reduce using rule 340 (simple_type_name -> LONG .)
    CONST           reduce using rule 340 (simple_type_name -> LONG .)
    VOLATILE        reduce using rule 340 (simple_type_name -> LONG .)
    IDENTIFIER      reduce using rule 340 (simple_type_name -> LONG .)
    BNOP            reduce using rule 340 (simple_type_name -> LONG .)
    MULTOP          reduce using rule 340 (simple_type_name -> LONG .)
    BANDOP          reduce using rule 340 (simple_type_name -> LONG .)
    CHAR            reduce using rule 340 (simple_type_name -> LONG .)
    SHORT           reduce using rule 340 (simple_type_name -> LONG .)
    INT             reduce using rule 340 (simple_type_name -> LONG .)
    LONG            reduce using rule 340 (simple_type_name -> LONG .)
    SIGNED          reduce using rule 340 (simple_type_name -> LONG .)
    UNSIGNED        reduce using rule 340 (simple_type_name -> LONG .)
    FLOAT           reduce using rule 340 (simple_type_name -> LONG .)
    DOUBLE          reduce using rule 340 (simple_type_name -> LONG .)
    VOID            reduce using rule 340 (simple_type_name -> LONG .)
    STRING          reduce using rule 340 (simple_type_name -> LONG .)
    ENUM            reduce using rule 340 (simple_type_name -> LONG .)
    TYPE            reduce using rule 340 (simple_type_name -> LONG .)
    OPERATOR        reduce using rule 340 (simple_type_name -> LONG .)
    CLASS           reduce using rule 340 (simple_type_name -> LONG .)
    STRUCT          reduce using rule 340 (simple_type_name -> LONG .)
    UNION           reduce using rule 340 (simple_type_name -> LONG .)
    TEMPLATE        reduce using rule 340 (simple_type_name -> LONG .)
    EQUAL           reduce using rule 340 (simple_type_name -> LONG .)
    LSPAREN         reduce using rule 340 (simple_type_name -> LONG .)
    COMMA           reduce using rule 340 (simple_type_name -> LONG .)
    RPAREN          reduce using rule 340 (simple_type_name -> LONG .)
    RTEMPLATE       reduce using rule 340 (simple_type_name -> LONG .)
    COLON           reduce using rule 340 (simple_type_name -> LONG .)
    MULTEQOP        reduce using rule 340 (simple_type_name -> LONG .)
    DIVEQOP         reduce using rule 340 (simple_type_name -> LONG .)
    MODEQOP         reduce using rule 340 (simple_type_name -> LONG .)
    PLUSEQOP        reduce using rule 340 (simple_type_name -> LONG .)
    MINUSEQOP       reduce using rule 340 (simple_type_name -> LONG .)
    LSHIFTEQOP      reduce using rule 340 (simple_type_name -> LONG .)
    RSHIFTEQOP      reduce using rule 340 (simple_type_name -> LONG .)
    BANDEQOP        reduce using rule 340 (simple_type_name -> LONG .)
    BOREQOP         reduce using rule 340 (simple_type_name -> LONG .)
    DOTSTAR         reduce using rule 340 (simple_type_name -> LONG .)
    ARROWSTAR       reduce using rule 340 (simple_type_name -> LONG .)
    DIVOP           reduce using rule 340 (simple_type_name -> LONG .)
    MODOP           reduce using rule 340 (simple_type_name -> LONG .)
    PLUSOP          reduce using rule 340 (simple_type_name -> LONG .)
    MINUSOP         reduce using rule 340 (simple_type_name -> LONG .)
    LSHIFT          reduce using rule 340 (simple_type_name -> LONG .)
    RSHIFT          reduce using rule 340 (simple_type_name -> LONG .)
    LTCOMP          reduce using rule 340 (simple_type_name -> LONG .)
    GTCOMP          reduce using rule 340 (simple_type_name -> LONG .)
    LTECOMP         reduce using rule 340 (simple_type_name -> LONG .)
    GTECOMP         reduce using rule 340 (simple_type_name -> LONG .)
    EQCOMP          reduce using rule 340 (simple_type_name -> LONG .)
    NEQCOMP         reduce using rule 340 (simple_type_name -> LONG .)
    XOROP           reduce using rule 340 (simple_type_name -> LONG .)
    OROP            reduce using rule 340 (simple_type_name -> LONG .)
    ANDOP           reduce using rule 340 (simple_type_name -> LONG .)
    QUESMARK        reduce using rule 340 (simple_type_name -> LONG .)
    RSPAREN         reduce using rule 340 (simple_type_name -> LONG .)
    RCPAREN         reduce using rule 340 (simple_type_name -> LONG .)


state 44

    (341) simple_type_name -> SIGNED .

    SEMICOLON       reduce using rule 341 (simple_type_name -> SIGNED .)
    TYPEDEF         reduce using rule 341 (simple_type_name -> SIGNED .)
    LPAREN          reduce using rule 341 (simple_type_name -> SIGNED .)
    AUTO            reduce using rule 341 (simple_type_name -> SIGNED .)
    STATIC          reduce using rule 341 (simple_type_name -> SIGNED .)
    EXTERN          reduce using rule 341 (simple_type_name -> SIGNED .)
    VIRTUAL         reduce using rule 341 (simple_type_name -> SIGNED .)
    CONST           reduce using rule 341 (simple_type_name -> SIGNED .)
    VOLATILE        reduce using rule 341 (simple_type_name -> SIGNED .)
    IDENTIFIER      reduce using rule 341 (simple_type_name -> SIGNED .)
    BNOP            reduce using rule 341 (simple_type_name -> SIGNED .)
    MULTOP          reduce using rule 341 (simple_type_name -> SIGNED .)
    BANDOP          reduce using rule 341 (simple_type_name -> SIGNED .)
    CHAR            reduce using rule 341 (simple_type_name -> SIGNED .)
    SHORT           reduce using rule 341 (simple_type_name -> SIGNED .)
    INT             reduce using rule 341 (simple_type_name -> SIGNED .)
    LONG            reduce using rule 341 (simple_type_name -> SIGNED .)
    SIGNED          reduce using rule 341 (simple_type_name -> SIGNED .)
    UNSIGNED        reduce using rule 341 (simple_type_name -> SIGNED .)
    FLOAT           reduce using rule 341 (simple_type_name -> SIGNED .)
    DOUBLE          reduce using rule 341 (simple_type_name -> SIGNED .)
    VOID            reduce using rule 341 (simple_type_name -> SIGNED .)
    STRING          reduce using rule 341 (simple_type_name -> SIGNED .)
    ENUM            reduce using rule 341 (simple_type_name -> SIGNED .)
    TYPE            reduce using rule 341 (simple_type_name -> SIGNED .)
    OPERATOR        reduce using rule 341 (simple_type_name -> SIGNED .)
    CLASS           reduce using rule 341 (simple_type_name -> SIGNED .)
    STRUCT          reduce using rule 341 (simple_type_name -> SIGNED .)
    UNION           reduce using rule 341 (simple_type_name -> SIGNED .)
    TEMPLATE        reduce using rule 341 (simple_type_name -> SIGNED .)
    EQUAL           reduce using rule 341 (simple_type_name -> SIGNED .)
    LSPAREN         reduce using rule 341 (simple_type_name -> SIGNED .)
    COMMA           reduce using rule 341 (simple_type_name -> SIGNED .)
    RPAREN          reduce using rule 341 (simple_type_name -> SIGNED .)
    RTEMPLATE       reduce using rule 341 (simple_type_name -> SIGNED .)
    COLON           reduce using rule 341 (simple_type_name -> SIGNED .)
    MULTEQOP        reduce using rule 341 (simple_type_name -> SIGNED .)
    DIVEQOP         reduce using rule 341 (simple_type_name -> SIGNED .)
    MODEQOP         reduce using rule 341 (simple_type_name -> SIGNED .)
    PLUSEQOP        reduce using rule 341 (simple_type_name -> SIGNED .)
    MINUSEQOP       reduce using rule 341 (simple_type_name -> SIGNED .)
    LSHIFTEQOP      reduce using rule 341 (simple_type_name -> SIGNED .)
    RSHIFTEQOP      reduce using rule 341 (simple_type_name -> SIGNED .)
    BANDEQOP        reduce using rule 341 (simple_type_name -> SIGNED .)
    BOREQOP         reduce using rule 341 (simple_type_name -> SIGNED .)
    DOTSTAR         reduce using rule 341 (simple_type_name -> SIGNED .)
    ARROWSTAR       reduce using rule 341 (simple_type_name -> SIGNED .)
    DIVOP           reduce using rule 341 (simple_type_name -> SIGNED .)
    MODOP           reduce using rule 341 (simple_type_name -> SIGNED .)
    PLUSOP          reduce using rule 341 (simple_type_name -> SIGNED .)
    MINUSOP         reduce using rule 341 (simple_type_name -> SIGNED .)
    LSHIFT          reduce using rule 341 (simple_type_name -> SIGNED .)
    RSHIFT          reduce using rule 341 (simple_type_name -> SIGNED .)
    LTCOMP          reduce using rule 341 (simple_type_name -> SIGNED .)
    GTCOMP          reduce using rule 341 (simple_type_name -> SIGNED .)
    LTECOMP         reduce using rule 341 (simple_type_name -> SIGNED .)
    GTECOMP         reduce using rule 341 (simple_type_name -> SIGNED .)
    EQCOMP          reduce using rule 341 (simple_type_name -> SIGNED .)
    NEQCOMP         reduce using rule 341 (simple_type_name -> SIGNED .)
    XOROP           reduce using rule 341 (simple_type_name -> SIGNED .)
    OROP            reduce using rule 341 (simple_type_name -> SIGNED .)
    ANDOP           reduce using rule 341 (simple_type_name -> SIGNED .)
    QUESMARK        reduce using rule 341 (simple_type_name -> SIGNED .)
    RSPAREN         reduce using rule 341 (simple_type_name -> SIGNED .)
    RCPAREN         reduce using rule 341 (simple_type_name -> SIGNED .)


state 45

    (342) simple_type_name -> UNSIGNED .

    SEMICOLON       reduce using rule 342 (simple_type_name -> UNSIGNED .)
    TYPEDEF         reduce using rule 342 (simple_type_name -> UNSIGNED .)
    LPAREN          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    AUTO            reduce using rule 342 (simple_type_name -> UNSIGNED .)
    STATIC          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    EXTERN          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    VIRTUAL         reduce using rule 342 (simple_type_name -> UNSIGNED .)
    CONST           reduce using rule 342 (simple_type_name -> UNSIGNED .)
    VOLATILE        reduce using rule 342 (simple_type_name -> UNSIGNED .)
    IDENTIFIER      reduce using rule 342 (simple_type_name -> UNSIGNED .)
    BNOP            reduce using rule 342 (simple_type_name -> UNSIGNED .)
    MULTOP          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    BANDOP          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    CHAR            reduce using rule 342 (simple_type_name -> UNSIGNED .)
    SHORT           reduce using rule 342 (simple_type_name -> UNSIGNED .)
    INT             reduce using rule 342 (simple_type_name -> UNSIGNED .)
    LONG            reduce using rule 342 (simple_type_name -> UNSIGNED .)
    SIGNED          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    UNSIGNED        reduce using rule 342 (simple_type_name -> UNSIGNED .)
    FLOAT           reduce using rule 342 (simple_type_name -> UNSIGNED .)
    DOUBLE          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    VOID            reduce using rule 342 (simple_type_name -> UNSIGNED .)
    STRING          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    ENUM            reduce using rule 342 (simple_type_name -> UNSIGNED .)
    TYPE            reduce using rule 342 (simple_type_name -> UNSIGNED .)
    OPERATOR        reduce using rule 342 (simple_type_name -> UNSIGNED .)
    CLASS           reduce using rule 342 (simple_type_name -> UNSIGNED .)
    STRUCT          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    UNION           reduce using rule 342 (simple_type_name -> UNSIGNED .)
    TEMPLATE        reduce using rule 342 (simple_type_name -> UNSIGNED .)
    EQUAL           reduce using rule 342 (simple_type_name -> UNSIGNED .)
    LSPAREN         reduce using rule 342 (simple_type_name -> UNSIGNED .)
    COMMA           reduce using rule 342 (simple_type_name -> UNSIGNED .)
    RPAREN          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    RTEMPLATE       reduce using rule 342 (simple_type_name -> UNSIGNED .)
    COLON           reduce using rule 342 (simple_type_name -> UNSIGNED .)
    MULTEQOP        reduce using rule 342 (simple_type_name -> UNSIGNED .)
    DIVEQOP         reduce using rule 342 (simple_type_name -> UNSIGNED .)
    MODEQOP         reduce using rule 342 (simple_type_name -> UNSIGNED .)
    PLUSEQOP        reduce using rule 342 (simple_type_name -> UNSIGNED .)
    MINUSEQOP       reduce using rule 342 (simple_type_name -> UNSIGNED .)
    LSHIFTEQOP      reduce using rule 342 (simple_type_name -> UNSIGNED .)
    RSHIFTEQOP      reduce using rule 342 (simple_type_name -> UNSIGNED .)
    BANDEQOP        reduce using rule 342 (simple_type_name -> UNSIGNED .)
    BOREQOP         reduce using rule 342 (simple_type_name -> UNSIGNED .)
    DOTSTAR         reduce using rule 342 (simple_type_name -> UNSIGNED .)
    ARROWSTAR       reduce using rule 342 (simple_type_name -> UNSIGNED .)
    DIVOP           reduce using rule 342 (simple_type_name -> UNSIGNED .)
    MODOP           reduce using rule 342 (simple_type_name -> UNSIGNED .)
    PLUSOP          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    MINUSOP         reduce using rule 342 (simple_type_name -> UNSIGNED .)
    LSHIFT          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    RSHIFT          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    LTCOMP          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    GTCOMP          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    LTECOMP         reduce using rule 342 (simple_type_name -> UNSIGNED .)
    GTECOMP         reduce using rule 342 (simple_type_name -> UNSIGNED .)
    EQCOMP          reduce using rule 342 (simple_type_name -> UNSIGNED .)
    NEQCOMP         reduce using rule 342 (simple_type_name -> UNSIGNED .)
    XOROP           reduce using rule 342 (simple_type_name -> UNSIGNED .)
    OROP            reduce using rule 342 (simple_type_name -> UNSIGNED .)
    ANDOP           reduce using rule 342 (simple_type_name -> UNSIGNED .)
    QUESMARK        reduce using rule 342 (simple_type_name -> UNSIGNED .)
    RSPAREN         reduce using rule 342 (simple_type_name -> UNSIGNED .)
    RCPAREN         reduce using rule 342 (simple_type_name -> UNSIGNED .)


state 46

    (343) simple_type_name -> FLOAT .

    SEMICOLON       reduce using rule 343 (simple_type_name -> FLOAT .)
    TYPEDEF         reduce using rule 343 (simple_type_name -> FLOAT .)
    LPAREN          reduce using rule 343 (simple_type_name -> FLOAT .)
    AUTO            reduce using rule 343 (simple_type_name -> FLOAT .)
    STATIC          reduce using rule 343 (simple_type_name -> FLOAT .)
    EXTERN          reduce using rule 343 (simple_type_name -> FLOAT .)
    VIRTUAL         reduce using rule 343 (simple_type_name -> FLOAT .)
    CONST           reduce using rule 343 (simple_type_name -> FLOAT .)
    VOLATILE        reduce using rule 343 (simple_type_name -> FLOAT .)
    IDENTIFIER      reduce using rule 343 (simple_type_name -> FLOAT .)
    BNOP            reduce using rule 343 (simple_type_name -> FLOAT .)
    MULTOP          reduce using rule 343 (simple_type_name -> FLOAT .)
    BANDOP          reduce using rule 343 (simple_type_name -> FLOAT .)
    CHAR            reduce using rule 343 (simple_type_name -> FLOAT .)
    SHORT           reduce using rule 343 (simple_type_name -> FLOAT .)
    INT             reduce using rule 343 (simple_type_name -> FLOAT .)
    LONG            reduce using rule 343 (simple_type_name -> FLOAT .)
    SIGNED          reduce using rule 343 (simple_type_name -> FLOAT .)
    UNSIGNED        reduce using rule 343 (simple_type_name -> FLOAT .)
    FLOAT           reduce using rule 343 (simple_type_name -> FLOAT .)
    DOUBLE          reduce using rule 343 (simple_type_name -> FLOAT .)
    VOID            reduce using rule 343 (simple_type_name -> FLOAT .)
    STRING          reduce using rule 343 (simple_type_name -> FLOAT .)
    ENUM            reduce using rule 343 (simple_type_name -> FLOAT .)
    TYPE            reduce using rule 343 (simple_type_name -> FLOAT .)
    OPERATOR        reduce using rule 343 (simple_type_name -> FLOAT .)
    CLASS           reduce using rule 343 (simple_type_name -> FLOAT .)
    STRUCT          reduce using rule 343 (simple_type_name -> FLOAT .)
    UNION           reduce using rule 343 (simple_type_name -> FLOAT .)
    TEMPLATE        reduce using rule 343 (simple_type_name -> FLOAT .)
    EQUAL           reduce using rule 343 (simple_type_name -> FLOAT .)
    LSPAREN         reduce using rule 343 (simple_type_name -> FLOAT .)
    COMMA           reduce using rule 343 (simple_type_name -> FLOAT .)
    RPAREN          reduce using rule 343 (simple_type_name -> FLOAT .)
    RTEMPLATE       reduce using rule 343 (simple_type_name -> FLOAT .)
    COLON           reduce using rule 343 (simple_type_name -> FLOAT .)
    MULTEQOP        reduce using rule 343 (simple_type_name -> FLOAT .)
    DIVEQOP         reduce using rule 343 (simple_type_name -> FLOAT .)
    MODEQOP         reduce using rule 343 (simple_type_name -> FLOAT .)
    PLUSEQOP        reduce using rule 343 (simple_type_name -> FLOAT .)
    MINUSEQOP       reduce using rule 343 (simple_type_name -> FLOAT .)
    LSHIFTEQOP      reduce using rule 343 (simple_type_name -> FLOAT .)
    RSHIFTEQOP      reduce using rule 343 (simple_type_name -> FLOAT .)
    BANDEQOP        reduce using rule 343 (simple_type_name -> FLOAT .)
    BOREQOP         reduce using rule 343 (simple_type_name -> FLOAT .)
    DOTSTAR         reduce using rule 343 (simple_type_name -> FLOAT .)
    ARROWSTAR       reduce using rule 343 (simple_type_name -> FLOAT .)
    DIVOP           reduce using rule 343 (simple_type_name -> FLOAT .)
    MODOP           reduce using rule 343 (simple_type_name -> FLOAT .)
    PLUSOP          reduce using rule 343 (simple_type_name -> FLOAT .)
    MINUSOP         reduce using rule 343 (simple_type_name -> FLOAT .)
    LSHIFT          reduce using rule 343 (simple_type_name -> FLOAT .)
    RSHIFT          reduce using rule 343 (simple_type_name -> FLOAT .)
    LTCOMP          reduce using rule 343 (simple_type_name -> FLOAT .)
    GTCOMP          reduce using rule 343 (simple_type_name -> FLOAT .)
    LTECOMP         reduce using rule 343 (simple_type_name -> FLOAT .)
    GTECOMP         reduce using rule 343 (simple_type_name -> FLOAT .)
    EQCOMP          reduce using rule 343 (simple_type_name -> FLOAT .)
    NEQCOMP         reduce using rule 343 (simple_type_name -> FLOAT .)
    XOROP           reduce using rule 343 (simple_type_name -> FLOAT .)
    OROP            reduce using rule 343 (simple_type_name -> FLOAT .)
    ANDOP           reduce using rule 343 (simple_type_name -> FLOAT .)
    QUESMARK        reduce using rule 343 (simple_type_name -> FLOAT .)
    RSPAREN         reduce using rule 343 (simple_type_name -> FLOAT .)
    RCPAREN         reduce using rule 343 (simple_type_name -> FLOAT .)


state 47

    (344) simple_type_name -> DOUBLE .

    SEMICOLON       reduce using rule 344 (simple_type_name -> DOUBLE .)
    TYPEDEF         reduce using rule 344 (simple_type_name -> DOUBLE .)
    LPAREN          reduce using rule 344 (simple_type_name -> DOUBLE .)
    AUTO            reduce using rule 344 (simple_type_name -> DOUBLE .)
    STATIC          reduce using rule 344 (simple_type_name -> DOUBLE .)
    EXTERN          reduce using rule 344 (simple_type_name -> DOUBLE .)
    VIRTUAL         reduce using rule 344 (simple_type_name -> DOUBLE .)
    CONST           reduce using rule 344 (simple_type_name -> DOUBLE .)
    VOLATILE        reduce using rule 344 (simple_type_name -> DOUBLE .)
    IDENTIFIER      reduce using rule 344 (simple_type_name -> DOUBLE .)
    BNOP            reduce using rule 344 (simple_type_name -> DOUBLE .)
    MULTOP          reduce using rule 344 (simple_type_name -> DOUBLE .)
    BANDOP          reduce using rule 344 (simple_type_name -> DOUBLE .)
    CHAR            reduce using rule 344 (simple_type_name -> DOUBLE .)
    SHORT           reduce using rule 344 (simple_type_name -> DOUBLE .)
    INT             reduce using rule 344 (simple_type_name -> DOUBLE .)
    LONG            reduce using rule 344 (simple_type_name -> DOUBLE .)
    SIGNED          reduce using rule 344 (simple_type_name -> DOUBLE .)
    UNSIGNED        reduce using rule 344 (simple_type_name -> DOUBLE .)
    FLOAT           reduce using rule 344 (simple_type_name -> DOUBLE .)
    DOUBLE          reduce using rule 344 (simple_type_name -> DOUBLE .)
    VOID            reduce using rule 344 (simple_type_name -> DOUBLE .)
    STRING          reduce using rule 344 (simple_type_name -> DOUBLE .)
    ENUM            reduce using rule 344 (simple_type_name -> DOUBLE .)
    TYPE            reduce using rule 344 (simple_type_name -> DOUBLE .)
    OPERATOR        reduce using rule 344 (simple_type_name -> DOUBLE .)
    CLASS           reduce using rule 344 (simple_type_name -> DOUBLE .)
    STRUCT          reduce using rule 344 (simple_type_name -> DOUBLE .)
    UNION           reduce using rule 344 (simple_type_name -> DOUBLE .)
    TEMPLATE        reduce using rule 344 (simple_type_name -> DOUBLE .)
    EQUAL           reduce using rule 344 (simple_type_name -> DOUBLE .)
    LSPAREN         reduce using rule 344 (simple_type_name -> DOUBLE .)
    COMMA           reduce using rule 344 (simple_type_name -> DOUBLE .)
    RPAREN          reduce using rule 344 (simple_type_name -> DOUBLE .)
    RTEMPLATE       reduce using rule 344 (simple_type_name -> DOUBLE .)
    COLON           reduce using rule 344 (simple_type_name -> DOUBLE .)
    MULTEQOP        reduce using rule 344 (simple_type_name -> DOUBLE .)
    DIVEQOP         reduce using rule 344 (simple_type_name -> DOUBLE .)
    MODEQOP         reduce using rule 344 (simple_type_name -> DOUBLE .)
    PLUSEQOP        reduce using rule 344 (simple_type_name -> DOUBLE .)
    MINUSEQOP       reduce using rule 344 (simple_type_name -> DOUBLE .)
    LSHIFTEQOP      reduce using rule 344 (simple_type_name -> DOUBLE .)
    RSHIFTEQOP      reduce using rule 344 (simple_type_name -> DOUBLE .)
    BANDEQOP        reduce using rule 344 (simple_type_name -> DOUBLE .)
    BOREQOP         reduce using rule 344 (simple_type_name -> DOUBLE .)
    DOTSTAR         reduce using rule 344 (simple_type_name -> DOUBLE .)
    ARROWSTAR       reduce using rule 344 (simple_type_name -> DOUBLE .)
    DIVOP           reduce using rule 344 (simple_type_name -> DOUBLE .)
    MODOP           reduce using rule 344 (simple_type_name -> DOUBLE .)
    PLUSOP          reduce using rule 344 (simple_type_name -> DOUBLE .)
    MINUSOP         reduce using rule 344 (simple_type_name -> DOUBLE .)
    LSHIFT          reduce using rule 344 (simple_type_name -> DOUBLE .)
    RSHIFT          reduce using rule 344 (simple_type_name -> DOUBLE .)
    LTCOMP          reduce using rule 344 (simple_type_name -> DOUBLE .)
    GTCOMP          reduce using rule 344 (simple_type_name -> DOUBLE .)
    LTECOMP         reduce using rule 344 (simple_type_name -> DOUBLE .)
    GTECOMP         reduce using rule 344 (simple_type_name -> DOUBLE .)
    EQCOMP          reduce using rule 344 (simple_type_name -> DOUBLE .)
    NEQCOMP         reduce using rule 344 (simple_type_name -> DOUBLE .)
    XOROP           reduce using rule 344 (simple_type_name -> DOUBLE .)
    OROP            reduce using rule 344 (simple_type_name -> DOUBLE .)
    ANDOP           reduce using rule 344 (simple_type_name -> DOUBLE .)
    QUESMARK        reduce using rule 344 (simple_type_name -> DOUBLE .)
    RSPAREN         reduce using rule 344 (simple_type_name -> DOUBLE .)
    RCPAREN         reduce using rule 344 (simple_type_name -> DOUBLE .)


state 48

    (345) simple_type_name -> VOID .

    SEMICOLON       reduce using rule 345 (simple_type_name -> VOID .)
    TYPEDEF         reduce using rule 345 (simple_type_name -> VOID .)
    LPAREN          reduce using rule 345 (simple_type_name -> VOID .)
    AUTO            reduce using rule 345 (simple_type_name -> VOID .)
    STATIC          reduce using rule 345 (simple_type_name -> VOID .)
    EXTERN          reduce using rule 345 (simple_type_name -> VOID .)
    VIRTUAL         reduce using rule 345 (simple_type_name -> VOID .)
    CONST           reduce using rule 345 (simple_type_name -> VOID .)
    VOLATILE        reduce using rule 345 (simple_type_name -> VOID .)
    IDENTIFIER      reduce using rule 345 (simple_type_name -> VOID .)
    BNOP            reduce using rule 345 (simple_type_name -> VOID .)
    MULTOP          reduce using rule 345 (simple_type_name -> VOID .)
    BANDOP          reduce using rule 345 (simple_type_name -> VOID .)
    CHAR            reduce using rule 345 (simple_type_name -> VOID .)
    SHORT           reduce using rule 345 (simple_type_name -> VOID .)
    INT             reduce using rule 345 (simple_type_name -> VOID .)
    LONG            reduce using rule 345 (simple_type_name -> VOID .)
    SIGNED          reduce using rule 345 (simple_type_name -> VOID .)
    UNSIGNED        reduce using rule 345 (simple_type_name -> VOID .)
    FLOAT           reduce using rule 345 (simple_type_name -> VOID .)
    DOUBLE          reduce using rule 345 (simple_type_name -> VOID .)
    VOID            reduce using rule 345 (simple_type_name -> VOID .)
    STRING          reduce using rule 345 (simple_type_name -> VOID .)
    ENUM            reduce using rule 345 (simple_type_name -> VOID .)
    TYPE            reduce using rule 345 (simple_type_name -> VOID .)
    OPERATOR        reduce using rule 345 (simple_type_name -> VOID .)
    CLASS           reduce using rule 345 (simple_type_name -> VOID .)
    STRUCT          reduce using rule 345 (simple_type_name -> VOID .)
    UNION           reduce using rule 345 (simple_type_name -> VOID .)
    TEMPLATE        reduce using rule 345 (simple_type_name -> VOID .)
    EQUAL           reduce using rule 345 (simple_type_name -> VOID .)
    LSPAREN         reduce using rule 345 (simple_type_name -> VOID .)
    COMMA           reduce using rule 345 (simple_type_name -> VOID .)
    RPAREN          reduce using rule 345 (simple_type_name -> VOID .)
    RTEMPLATE       reduce using rule 345 (simple_type_name -> VOID .)
    COLON           reduce using rule 345 (simple_type_name -> VOID .)
    MULTEQOP        reduce using rule 345 (simple_type_name -> VOID .)
    DIVEQOP         reduce using rule 345 (simple_type_name -> VOID .)
    MODEQOP         reduce using rule 345 (simple_type_name -> VOID .)
    PLUSEQOP        reduce using rule 345 (simple_type_name -> VOID .)
    MINUSEQOP       reduce using rule 345 (simple_type_name -> VOID .)
    LSHIFTEQOP      reduce using rule 345 (simple_type_name -> VOID .)
    RSHIFTEQOP      reduce using rule 345 (simple_type_name -> VOID .)
    BANDEQOP        reduce using rule 345 (simple_type_name -> VOID .)
    BOREQOP         reduce using rule 345 (simple_type_name -> VOID .)
    DOTSTAR         reduce using rule 345 (simple_type_name -> VOID .)
    ARROWSTAR       reduce using rule 345 (simple_type_name -> VOID .)
    DIVOP           reduce using rule 345 (simple_type_name -> VOID .)
    MODOP           reduce using rule 345 (simple_type_name -> VOID .)
    PLUSOP          reduce using rule 345 (simple_type_name -> VOID .)
    MINUSOP         reduce using rule 345 (simple_type_name -> VOID .)
    LSHIFT          reduce using rule 345 (simple_type_name -> VOID .)
    RSHIFT          reduce using rule 345 (simple_type_name -> VOID .)
    LTCOMP          reduce using rule 345 (simple_type_name -> VOID .)
    GTCOMP          reduce using rule 345 (simple_type_name -> VOID .)
    LTECOMP         reduce using rule 345 (simple_type_name -> VOID .)
    GTECOMP         reduce using rule 345 (simple_type_name -> VOID .)
    EQCOMP          reduce using rule 345 (simple_type_name -> VOID .)
    NEQCOMP         reduce using rule 345 (simple_type_name -> VOID .)
    XOROP           reduce using rule 345 (simple_type_name -> VOID .)
    OROP            reduce using rule 345 (simple_type_name -> VOID .)
    ANDOP           reduce using rule 345 (simple_type_name -> VOID .)
    QUESMARK        reduce using rule 345 (simple_type_name -> VOID .)
    RSPAREN         reduce using rule 345 (simple_type_name -> VOID .)
    RCPAREN         reduce using rule 345 (simple_type_name -> VOID .)


state 49

    (346) simple_type_name -> STRING .

    SEMICOLON       reduce using rule 346 (simple_type_name -> STRING .)
    TYPEDEF         reduce using rule 346 (simple_type_name -> STRING .)
    LPAREN          reduce using rule 346 (simple_type_name -> STRING .)
    AUTO            reduce using rule 346 (simple_type_name -> STRING .)
    STATIC          reduce using rule 346 (simple_type_name -> STRING .)
    EXTERN          reduce using rule 346 (simple_type_name -> STRING .)
    VIRTUAL         reduce using rule 346 (simple_type_name -> STRING .)
    CONST           reduce using rule 346 (simple_type_name -> STRING .)
    VOLATILE        reduce using rule 346 (simple_type_name -> STRING .)
    IDENTIFIER      reduce using rule 346 (simple_type_name -> STRING .)
    BNOP            reduce using rule 346 (simple_type_name -> STRING .)
    MULTOP          reduce using rule 346 (simple_type_name -> STRING .)
    BANDOP          reduce using rule 346 (simple_type_name -> STRING .)
    CHAR            reduce using rule 346 (simple_type_name -> STRING .)
    SHORT           reduce using rule 346 (simple_type_name -> STRING .)
    INT             reduce using rule 346 (simple_type_name -> STRING .)
    LONG            reduce using rule 346 (simple_type_name -> STRING .)
    SIGNED          reduce using rule 346 (simple_type_name -> STRING .)
    UNSIGNED        reduce using rule 346 (simple_type_name -> STRING .)
    FLOAT           reduce using rule 346 (simple_type_name -> STRING .)
    DOUBLE          reduce using rule 346 (simple_type_name -> STRING .)
    VOID            reduce using rule 346 (simple_type_name -> STRING .)
    STRING          reduce using rule 346 (simple_type_name -> STRING .)
    ENUM            reduce using rule 346 (simple_type_name -> STRING .)
    TYPE            reduce using rule 346 (simple_type_name -> STRING .)
    OPERATOR        reduce using rule 346 (simple_type_name -> STRING .)
    CLASS           reduce using rule 346 (simple_type_name -> STRING .)
    STRUCT          reduce using rule 346 (simple_type_name -> STRING .)
    UNION           reduce using rule 346 (simple_type_name -> STRING .)
    TEMPLATE        reduce using rule 346 (simple_type_name -> STRING .)
    EQUAL           reduce using rule 346 (simple_type_name -> STRING .)
    LSPAREN         reduce using rule 346 (simple_type_name -> STRING .)
    COMMA           reduce using rule 346 (simple_type_name -> STRING .)
    RPAREN          reduce using rule 346 (simple_type_name -> STRING .)
    RTEMPLATE       reduce using rule 346 (simple_type_name -> STRING .)
    COLON           reduce using rule 346 (simple_type_name -> STRING .)
    MULTEQOP        reduce using rule 346 (simple_type_name -> STRING .)
    DIVEQOP         reduce using rule 346 (simple_type_name -> STRING .)
    MODEQOP         reduce using rule 346 (simple_type_name -> STRING .)
    PLUSEQOP        reduce using rule 346 (simple_type_name -> STRING .)
    MINUSEQOP       reduce using rule 346 (simple_type_name -> STRING .)
    LSHIFTEQOP      reduce using rule 346 (simple_type_name -> STRING .)
    RSHIFTEQOP      reduce using rule 346 (simple_type_name -> STRING .)
    BANDEQOP        reduce using rule 346 (simple_type_name -> STRING .)
    BOREQOP         reduce using rule 346 (simple_type_name -> STRING .)
    DOTSTAR         reduce using rule 346 (simple_type_name -> STRING .)
    ARROWSTAR       reduce using rule 346 (simple_type_name -> STRING .)
    DIVOP           reduce using rule 346 (simple_type_name -> STRING .)
    MODOP           reduce using rule 346 (simple_type_name -> STRING .)
    PLUSOP          reduce using rule 346 (simple_type_name -> STRING .)
    MINUSOP         reduce using rule 346 (simple_type_name -> STRING .)
    LSHIFT          reduce using rule 346 (simple_type_name -> STRING .)
    RSHIFT          reduce using rule 346 (simple_type_name -> STRING .)
    LTCOMP          reduce using rule 346 (simple_type_name -> STRING .)
    GTCOMP          reduce using rule 346 (simple_type_name -> STRING .)
    LTECOMP         reduce using rule 346 (simple_type_name -> STRING .)
    GTECOMP         reduce using rule 346 (simple_type_name -> STRING .)
    EQCOMP          reduce using rule 346 (simple_type_name -> STRING .)
    NEQCOMP         reduce using rule 346 (simple_type_name -> STRING .)
    XOROP           reduce using rule 346 (simple_type_name -> STRING .)
    OROP            reduce using rule 346 (simple_type_name -> STRING .)
    ANDOP           reduce using rule 346 (simple_type_name -> STRING .)
    QUESMARK        reduce using rule 346 (simple_type_name -> STRING .)
    RSPAREN         reduce using rule 346 (simple_type_name -> STRING .)
    RCPAREN         reduce using rule 346 (simple_type_name -> STRING .)


state 50

    (167) class_specifier -> class_head . LCPAREN member_list RCPAREN
    (168) class_specifier -> class_head . LCPAREN RCPAREN

    LCPAREN         shift and go to state 83


state 51

    (21) enum_specifier -> ENUM . IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> ENUM . LCPAREN enum_list RCPAREN
    (23) enum_specifier -> ENUM . IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> ENUM . LCPAREN RCPAREN
    (329) elaborated_type_specifier -> ENUM . enum_name
    (332) enum_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 84
    LCPAREN         shift and go to state 85

    enum_name                      shift and go to state 86

state 52

    (327) elaborated_type_specifier -> class_key . IDENTIFIER
    (328) elaborated_type_specifier -> class_key . IDENTIFIER template_class_name
    (309) class_head -> class_key . base_spec
    (310) class_head -> class_key .
    (311) class_head -> class_key . IDENTIFIER base_spec
    (312) class_head -> class_key . IDENTIFIER
    (313) base_spec -> . COLON base_list

    IDENTIFIER      shift and go to state 87
    LCPAREN         reduce using rule 310 (class_head -> class_key .)
    COLON           shift and go to state 89

    base_spec                      shift and go to state 88

state 53

    (330) elaborated_type_specifier -> TYPE . IDENTIFIER
    (331) elaborated_type_specifier -> TYPE . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 90


state 54

    (269) operator_function_name -> OPERATOR . operator_name
    (270) operator_name -> . NEW
    (271) operator_name -> . DELETE
    (272) operator_name -> . PLUSOP
    (273) operator_name -> . MINUSOP
    (274) operator_name -> . MULTOP
    (275) operator_name -> . DIVOP
    (276) operator_name -> . MODOP
    (277) operator_name -> . XOROP
    (278) operator_name -> . BANDOP
    (279) operator_name -> . BNOP
    (280) operator_name -> . NOTSYM
    (281) operator_name -> . EQUAL
    (282) operator_name -> . LTCOMP
    (283) operator_name -> . GTCOMP
    (284) operator_name -> . PLUSEQOP
    (285) operator_name -> . MINUSEQOP
    (286) operator_name -> . MULTEQOP
    (287) operator_name -> . DIVEQOP
    (288) operator_name -> . MODEQOP
    (289) operator_name -> . XOREQOP
    (290) operator_name -> . BANDEQOP
    (291) operator_name -> . LSHIFT
    (292) operator_name -> . RSHIFT
    (293) operator_name -> . RSHIFTEQOP
    (294) operator_name -> . LSHIFTEQOP
    (295) operator_name -> . EQCOMP
    (296) operator_name -> . NEQCOMP
    (297) operator_name -> . LTECOMP
    (298) operator_name -> . GTECOMP
    (299) operator_name -> . ANDOP
    (300) operator_name -> . OROP
    (301) operator_name -> . DPLUSOP
    (302) operator_name -> . DMINUSOP
    (303) operator_name -> . COMMA
    (304) operator_name -> . ARROWSTAR
    (305) operator_name -> . ARROW
    (306) operator_name -> . LPAREN RPAREN
    (307) operator_name -> . LSPAREN RSPAREN

    NEW             shift and go to state 92
    DELETE          shift and go to state 93
    PLUSOP          shift and go to state 94
    MINUSOP         shift and go to state 95
    MULTOP          shift and go to state 96
    DIVOP           shift and go to state 97
    MODOP           shift and go to state 98
    XOROP           shift and go to state 99
    BANDOP          shift and go to state 100
    BNOP            shift and go to state 101
    NOTSYM          shift and go to state 102
    EQUAL           shift and go to state 103
    LTCOMP          shift and go to state 104
    GTCOMP          shift and go to state 105
    PLUSEQOP        shift and go to state 106
    MINUSEQOP       shift and go to state 107
    MULTEQOP        shift and go to state 108
    DIVEQOP         shift and go to state 109
    MODEQOP         shift and go to state 110
    XOREQOP         shift and go to state 111
    BANDEQOP        shift and go to state 112
    LSHIFT          shift and go to state 113
    RSHIFT          shift and go to state 114
    RSHIFTEQOP      shift and go to state 115
    LSHIFTEQOP      shift and go to state 116
    EQCOMP          shift and go to state 117
    NEQCOMP         shift and go to state 118
    LTECOMP         shift and go to state 119
    GTECOMP         shift and go to state 120
    ANDOP           shift and go to state 121
    OROP            shift and go to state 122
    DPLUSOP         shift and go to state 123
    DMINUSOP        shift and go to state 124
    COMMA           shift and go to state 125
    ARROWSTAR       shift and go to state 126
    ARROW           shift and go to state 127
    LPAREN          shift and go to state 128
    LSPAREN         shift and go to state 129

    operator_name                  shift and go to state 91

state 55

    (333) class_key -> CLASS .

    IDENTIFIER      reduce using rule 333 (class_key -> CLASS .)
    COLON           reduce using rule 333 (class_key -> CLASS .)
    LCPAREN         reduce using rule 333 (class_key -> CLASS .)


state 56

    (334) class_key -> STRUCT .

    IDENTIFIER      reduce using rule 334 (class_key -> STRUCT .)
    COLON           reduce using rule 334 (class_key -> STRUCT .)
    LCPAREN         reduce using rule 334 (class_key -> STRUCT .)


state 57

    (335) class_key -> UNION .

    IDENTIFIER      reduce using rule 335 (class_key -> UNION .)
    COLON           reduce using rule 335 (class_key -> UNION .)
    LCPAREN         reduce using rule 335 (class_key -> UNION .)


state 58

    (6) program -> control_line translation_unit .

    $end            reduce using rule 6 (program -> control_line translation_unit .)


state 59

    (1) control_line -> control_line control_line_stmt .

    HASHTAG         reduce using rule 1 (control_line -> control_line control_line_stmt .)
    ASM             reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TEMPLATE        reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TYPEDEF         reduce using rule 1 (control_line -> control_line control_line_stmt .)
    LPAREN          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    AUTO            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    STATIC          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    EXTERN          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    VIRTUAL         reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CONST           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    VOLATILE        reduce using rule 1 (control_line -> control_line control_line_stmt .)
    IDENTIFIER      reduce using rule 1 (control_line -> control_line control_line_stmt .)
    BNOP            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    MULTOP          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    BANDOP          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CHAR            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    SHORT           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    INT             reduce using rule 1 (control_line -> control_line control_line_stmt .)
    LONG            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    SIGNED          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    UNSIGNED        reduce using rule 1 (control_line -> control_line control_line_stmt .)
    FLOAT           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    DOUBLE          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    VOID            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    STRING          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    ENUM            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    TYPE            reduce using rule 1 (control_line -> control_line control_line_stmt .)
    OPERATOR        reduce using rule 1 (control_line -> control_line control_line_stmt .)
    CLASS           reduce using rule 1 (control_line -> control_line control_line_stmt .)
    STRUCT          reduce using rule 1 (control_line -> control_line control_line_stmt .)
    UNION           reduce using rule 1 (control_line -> control_line control_line_stmt .)


state 60

    (13) declaration_seq -> declaration_seq declaration .

    ASM             reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    TEMPLATE        reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    TYPEDEF         reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    LPAREN          reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    AUTO            reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    STATIC          reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    EXTERN          reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    VIRTUAL         reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    CONST           reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    VOLATILE        reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    IDENTIFIER      reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    BNOP            reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    MULTOP          reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    BANDOP          reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    CHAR            reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    SHORT           reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    INT             reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    LONG            reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    SIGNED          reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    UNSIGNED        reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    FLOAT           reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    DOUBLE          reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    VOID            reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    STRING          reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    ENUM            reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    TYPE            reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    OPERATOR        reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    CLASS           reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    STRUCT          reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    UNION           reduce using rule 13 (declaration_seq -> declaration_seq declaration .)
    $end            reduce using rule 13 (declaration_seq -> declaration_seq declaration .)


state 61

    (4) control_line_stmt -> include_control LTCOMP . STRING_L GTCOMP

    STRING_L        shift and go to state 130


state 62

    (5) control_line_stmt -> include_control STRING_L .

    HASHTAG         reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    ASM             reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TEMPLATE        reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TYPEDEF         reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    LPAREN          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    AUTO            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    STATIC          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    EXTERN          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    VIRTUAL         reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CONST           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    VOLATILE        reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    IDENTIFIER      reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    BNOP            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    MULTOP          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    BANDOP          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CHAR            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    SHORT           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    INT             reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    LONG            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    SIGNED          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    UNSIGNED        reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    FLOAT           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    DOUBLE          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    VOID            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    STRING          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    ENUM            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    TYPE            reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    OPERATOR        reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    CLASS           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    STRUCT          reduce using rule 5 (control_line_stmt -> include_control STRING_L .)
    UNION           reduce using rule 5 (control_line_stmt -> include_control STRING_L .)


state 63

    (3) include_control -> HASHTAG INCLUDE .

    LTCOMP          reduce using rule 3 (include_control -> HASHTAG INCLUDE .)
    STRING_L        reduce using rule 3 (include_control -> HASHTAG INCLUDE .)


state 64

    (226) declaration -> decl_specifiers declarator_list . SEMICOLON
    (236) declarator_list -> declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 131
    COMMA           shift and go to state 70


state 65

    (227) declaration -> decl_specifiers SEMICOLON .

    ASM             reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    TEMPLATE        reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    TYPEDEF         reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    LPAREN          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    AUTO            reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    STATIC          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    EXTERN          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    VIRTUAL         reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    CONST           reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    VOLATILE        reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    IDENTIFIER      reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    BNOP            reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    MULTOP          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    BANDOP          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    CHAR            reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    SHORT           reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    INT             reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    LONG            reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    SIGNED          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    UNSIGNED        reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    FLOAT           reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    DOUBLE          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    VOID            reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    STRING          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    ENUM            reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    TYPE            reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    OPERATOR        reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    CLASS           reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    STRUCT          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    UNION           reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    $end            reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    RCPAREN         reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    CASE            reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    DEFAULT         reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    SEMICOLON       reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    LCPAREN         reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    IF              reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    SWITCH          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    WHILE           reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    DO              reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    FOR             reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    BREAK           reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    CONTINUE        reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    RETURN          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    GOTO            reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    TRY             reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    THROW           reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    DPLUSOP         reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    DMINUSOP        reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    SIZEOF          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    PLUSOP          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    MINUSOP         reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    NOTSYM          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    NEW             reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    DELETE          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    THIS            reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    NUMBER          reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    STRING_L        reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    SCHAR           reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)
    ELSE            reduce using rule 227 (declaration -> decl_specifiers SEMICOLON .)


state 66

    (152) decl_specifiers -> decl_specifiers decl_specifier .

    SEMICOLON       reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    TYPEDEF         reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    LPAREN          reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    AUTO            reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    STATIC          reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    EXTERN          reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    VIRTUAL         reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    CONST           reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    VOLATILE        reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    IDENTIFIER      reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    BNOP            reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    MULTOP          reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    BANDOP          reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    CHAR            reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    SHORT           reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    INT             reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    LONG            reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    SIGNED          reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    UNSIGNED        reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    FLOAT           reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    DOUBLE          reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    VOID            reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    STRING          reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    ENUM            reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    TYPE            reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    OPERATOR        reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    CLASS           reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    STRUCT          reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    UNION           reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    TEMPLATE        reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    EQUAL           reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    LSPAREN         reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    COMMA           reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    RPAREN          reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    RTEMPLATE       reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)
    COLON           reduce using rule 152 (decl_specifiers -> decl_specifiers decl_specifier .)


state 67

    (182) function_definition -> decl_specifiers declarator . fct_body
    (260) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (261) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (262) declarator -> declarator . LSPAREN RSPAREN
    (237) init_declarator -> declarator . initializer
    (238) init_declarator -> declarator .
    (184) fct_body -> . compound_statement
    (239) initializer -> . EQUAL assignment_expression
    (240) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (241) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (242) initializer -> . LPAREN expression_list RPAREN
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN

    LPAREN          shift and go to state 75
    LSPAREN         shift and go to state 76
    SEMICOLON       reduce using rule 238 (init_declarator -> declarator .)
    COMMA           reduce using rule 238 (init_declarator -> declarator .)
    EQUAL           shift and go to state 78
    LCPAREN         shift and go to state 79

    fct_body                       shift and go to state 132
    initializer                    shift and go to state 74
    compound_statement             shift and go to state 77

state 68

    (336) class_key -> TEMPLATE .

    IDENTIFIER      reduce using rule 336 (class_key -> TEMPLATE .)
    COLON           reduce using rule 336 (class_key -> TEMPLATE .)
    LCPAREN         reduce using rule 336 (class_key -> TEMPLATE .)


state 69

    (228) declaration -> declarator_list SEMICOLON .

    ASM             reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    LPAREN          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    AUTO            reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    STATIC          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    EXTERN          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    CONST           reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    BNOP            reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    MULTOP          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    BANDOP          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    CHAR            reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    SHORT           reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    INT             reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    LONG            reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    SIGNED          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    FLOAT           reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    VOID            reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    STRING          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    ENUM            reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    TYPE            reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    CLASS           reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    STRUCT          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    UNION           reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    $end            reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    CASE            reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    LCPAREN         reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    IF              reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    SWITCH          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    WHILE           reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    DO              reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    FOR             reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    BREAK           reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    RETURN          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    GOTO            reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    TRY             reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    THROW           reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    DPLUSOP         reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    DMINUSOP        reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    PLUSOP          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    MINUSOP         reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    NOTSYM          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    NEW             reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    DELETE          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    THIS            reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    NUMBER          reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    STRING_L        reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    SCHAR           reduce using rule 228 (declaration -> declarator_list SEMICOLON .)
    ELSE            reduce using rule 228 (declaration -> declarator_list SEMICOLON .)


state 70

    (236) declarator_list -> declarator_list COMMA . init_declarator
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    OPERATOR        shift and go to state 54

    init_declarator                shift and go to state 133
    declarator                     shift and go to state 134
    name                           shift and go to state 23
    unary2_operator                shift and go to state 24
    operator_function_name         shift and go to state 36

state 71

    (247) asm_declaration -> ASM LPAREN . STRING_L RPAREN SEMICOLON

    STRING_L        shift and go to state 135


state 72

    (263) declarator -> LPAREN declarator . RPAREN
    (260) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (261) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (262) declarator -> declarator . LSPAREN RSPAREN

    RPAREN          shift and go to state 137
    LPAREN          shift and go to state 136
    LSPAREN         shift and go to state 76


state 73

    (183) function_definition -> declarator fct_body .

    ASM             reduce using rule 183 (function_definition -> declarator fct_body .)
    TEMPLATE        reduce using rule 183 (function_definition -> declarator fct_body .)
    TYPEDEF         reduce using rule 183 (function_definition -> declarator fct_body .)
    LPAREN          reduce using rule 183 (function_definition -> declarator fct_body .)
    AUTO            reduce using rule 183 (function_definition -> declarator fct_body .)
    STATIC          reduce using rule 183 (function_definition -> declarator fct_body .)
    EXTERN          reduce using rule 183 (function_definition -> declarator fct_body .)
    VIRTUAL         reduce using rule 183 (function_definition -> declarator fct_body .)
    CONST           reduce using rule 183 (function_definition -> declarator fct_body .)
    VOLATILE        reduce using rule 183 (function_definition -> declarator fct_body .)
    IDENTIFIER      reduce using rule 183 (function_definition -> declarator fct_body .)
    BNOP            reduce using rule 183 (function_definition -> declarator fct_body .)
    MULTOP          reduce using rule 183 (function_definition -> declarator fct_body .)
    BANDOP          reduce using rule 183 (function_definition -> declarator fct_body .)
    CHAR            reduce using rule 183 (function_definition -> declarator fct_body .)
    SHORT           reduce using rule 183 (function_definition -> declarator fct_body .)
    INT             reduce using rule 183 (function_definition -> declarator fct_body .)
    LONG            reduce using rule 183 (function_definition -> declarator fct_body .)
    SIGNED          reduce using rule 183 (function_definition -> declarator fct_body .)
    UNSIGNED        reduce using rule 183 (function_definition -> declarator fct_body .)
    FLOAT           reduce using rule 183 (function_definition -> declarator fct_body .)
    DOUBLE          reduce using rule 183 (function_definition -> declarator fct_body .)
    VOID            reduce using rule 183 (function_definition -> declarator fct_body .)
    STRING          reduce using rule 183 (function_definition -> declarator fct_body .)
    ENUM            reduce using rule 183 (function_definition -> declarator fct_body .)
    TYPE            reduce using rule 183 (function_definition -> declarator fct_body .)
    OPERATOR        reduce using rule 183 (function_definition -> declarator fct_body .)
    CLASS           reduce using rule 183 (function_definition -> declarator fct_body .)
    STRUCT          reduce using rule 183 (function_definition -> declarator fct_body .)
    UNION           reduce using rule 183 (function_definition -> declarator fct_body .)
    $end            reduce using rule 183 (function_definition -> declarator fct_body .)
    RCPAREN         reduce using rule 183 (function_definition -> declarator fct_body .)
    CASE            reduce using rule 183 (function_definition -> declarator fct_body .)
    DEFAULT         reduce using rule 183 (function_definition -> declarator fct_body .)
    SEMICOLON       reduce using rule 183 (function_definition -> declarator fct_body .)
    LCPAREN         reduce using rule 183 (function_definition -> declarator fct_body .)
    IF              reduce using rule 183 (function_definition -> declarator fct_body .)
    SWITCH          reduce using rule 183 (function_definition -> declarator fct_body .)
    WHILE           reduce using rule 183 (function_definition -> declarator fct_body .)
    DO              reduce using rule 183 (function_definition -> declarator fct_body .)
    FOR             reduce using rule 183 (function_definition -> declarator fct_body .)
    BREAK           reduce using rule 183 (function_definition -> declarator fct_body .)
    CONTINUE        reduce using rule 183 (function_definition -> declarator fct_body .)
    RETURN          reduce using rule 183 (function_definition -> declarator fct_body .)
    GOTO            reduce using rule 183 (function_definition -> declarator fct_body .)
    TRY             reduce using rule 183 (function_definition -> declarator fct_body .)
    THROW           reduce using rule 183 (function_definition -> declarator fct_body .)
    DPLUSOP         reduce using rule 183 (function_definition -> declarator fct_body .)
    DMINUSOP        reduce using rule 183 (function_definition -> declarator fct_body .)
    SIZEOF          reduce using rule 183 (function_definition -> declarator fct_body .)
    PLUSOP          reduce using rule 183 (function_definition -> declarator fct_body .)
    MINUSOP         reduce using rule 183 (function_definition -> declarator fct_body .)
    NOTSYM          reduce using rule 183 (function_definition -> declarator fct_body .)
    NEW             reduce using rule 183 (function_definition -> declarator fct_body .)
    DELETE          reduce using rule 183 (function_definition -> declarator fct_body .)
    THIS            reduce using rule 183 (function_definition -> declarator fct_body .)
    NUMBER          reduce using rule 183 (function_definition -> declarator fct_body .)
    STRING_L        reduce using rule 183 (function_definition -> declarator fct_body .)
    SCHAR           reduce using rule 183 (function_definition -> declarator fct_body .)
    COLON           reduce using rule 183 (function_definition -> declarator fct_body .)
    PRIVATE         reduce using rule 183 (function_definition -> declarator fct_body .)
    PROTECTED       reduce using rule 183 (function_definition -> declarator fct_body .)
    PUBLIC          reduce using rule 183 (function_definition -> declarator fct_body .)
    ELSE            reduce using rule 183 (function_definition -> declarator fct_body .)


state 74

    (237) init_declarator -> declarator initializer .

    SEMICOLON       reduce using rule 237 (init_declarator -> declarator initializer .)
    COMMA           reduce using rule 237 (init_declarator -> declarator initializer .)


state 75

    (260) declarator -> declarator LPAREN . argument_declaration_list RPAREN
    (242) initializer -> LPAREN . expression_list RPAREN
    (142) argument_declaration_list -> . arg_declaration_list
    (143) argument_declaration_list -> . empty
    (250) expression_list -> . assignment_expression
    (251) expression_list -> . expression_list COMMA assignment_expression
    (144) arg_declaration_list -> . argument_declaration
    (145) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (15) empty -> .
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) argument_declaration -> . decl_specifiers declarator
    (147) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (148) argument_declaration -> . decl_specifiers abstract_declarator
    (149) argument_declaration -> . decl_specifiers
    (150) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (151) argument_declaration -> . decl_specifiers EQUAL expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 15 (empty -> .)
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    TYPEDEF         shift and go to state 22
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    argument_declaration_list      shift and go to state 139
    expression_list                shift and go to state 140
    arg_declaration_list           shift and go to state 141
    empty                          shift and go to state 142
    assignment_expression          shift and go to state 143
    argument_declaration           shift and go to state 144
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifiers                shift and go to state 147
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    decl_specifier                 shift and go to state 14
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    name                           shift and go to state 161
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 76

    (261) declarator -> declarator LSPAREN . constant_expression RSPAREN
    (262) declarator -> declarator LSPAREN . RSPAREN
    (29) constant_expression -> . conditional_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    RSPAREN         shift and go to state 183
    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    constant_expression            shift and go to state 182
    conditional_expression         shift and go to state 184
    logical_OR_expression          shift and go to state 148
    logical_AND_expression         shift and go to state 158
    inclusive_OR_expression        shift and go to state 168
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 77

    (184) fct_body -> compound_statement .

    ASM             reduce using rule 184 (fct_body -> compound_statement .)
    TEMPLATE        reduce using rule 184 (fct_body -> compound_statement .)
    TYPEDEF         reduce using rule 184 (fct_body -> compound_statement .)
    LPAREN          reduce using rule 184 (fct_body -> compound_statement .)
    AUTO            reduce using rule 184 (fct_body -> compound_statement .)
    STATIC          reduce using rule 184 (fct_body -> compound_statement .)
    EXTERN          reduce using rule 184 (fct_body -> compound_statement .)
    VIRTUAL         reduce using rule 184 (fct_body -> compound_statement .)
    CONST           reduce using rule 184 (fct_body -> compound_statement .)
    VOLATILE        reduce using rule 184 (fct_body -> compound_statement .)
    IDENTIFIER      reduce using rule 184 (fct_body -> compound_statement .)
    BNOP            reduce using rule 184 (fct_body -> compound_statement .)
    MULTOP          reduce using rule 184 (fct_body -> compound_statement .)
    BANDOP          reduce using rule 184 (fct_body -> compound_statement .)
    CHAR            reduce using rule 184 (fct_body -> compound_statement .)
    SHORT           reduce using rule 184 (fct_body -> compound_statement .)
    INT             reduce using rule 184 (fct_body -> compound_statement .)
    LONG            reduce using rule 184 (fct_body -> compound_statement .)
    SIGNED          reduce using rule 184 (fct_body -> compound_statement .)
    UNSIGNED        reduce using rule 184 (fct_body -> compound_statement .)
    FLOAT           reduce using rule 184 (fct_body -> compound_statement .)
    DOUBLE          reduce using rule 184 (fct_body -> compound_statement .)
    VOID            reduce using rule 184 (fct_body -> compound_statement .)
    STRING          reduce using rule 184 (fct_body -> compound_statement .)
    ENUM            reduce using rule 184 (fct_body -> compound_statement .)
    TYPE            reduce using rule 184 (fct_body -> compound_statement .)
    OPERATOR        reduce using rule 184 (fct_body -> compound_statement .)
    CLASS           reduce using rule 184 (fct_body -> compound_statement .)
    STRUCT          reduce using rule 184 (fct_body -> compound_statement .)
    UNION           reduce using rule 184 (fct_body -> compound_statement .)
    $end            reduce using rule 184 (fct_body -> compound_statement .)
    RCPAREN         reduce using rule 184 (fct_body -> compound_statement .)
    CASE            reduce using rule 184 (fct_body -> compound_statement .)
    DEFAULT         reduce using rule 184 (fct_body -> compound_statement .)
    SEMICOLON       reduce using rule 184 (fct_body -> compound_statement .)
    LCPAREN         reduce using rule 184 (fct_body -> compound_statement .)
    IF              reduce using rule 184 (fct_body -> compound_statement .)
    SWITCH          reduce using rule 184 (fct_body -> compound_statement .)
    WHILE           reduce using rule 184 (fct_body -> compound_statement .)
    DO              reduce using rule 184 (fct_body -> compound_statement .)
    FOR             reduce using rule 184 (fct_body -> compound_statement .)
    BREAK           reduce using rule 184 (fct_body -> compound_statement .)
    CONTINUE        reduce using rule 184 (fct_body -> compound_statement .)
    RETURN          reduce using rule 184 (fct_body -> compound_statement .)
    GOTO            reduce using rule 184 (fct_body -> compound_statement .)
    TRY             reduce using rule 184 (fct_body -> compound_statement .)
    THROW           reduce using rule 184 (fct_body -> compound_statement .)
    DPLUSOP         reduce using rule 184 (fct_body -> compound_statement .)
    DMINUSOP        reduce using rule 184 (fct_body -> compound_statement .)
    SIZEOF          reduce using rule 184 (fct_body -> compound_statement .)
    PLUSOP          reduce using rule 184 (fct_body -> compound_statement .)
    MINUSOP         reduce using rule 184 (fct_body -> compound_statement .)
    NOTSYM          reduce using rule 184 (fct_body -> compound_statement .)
    NEW             reduce using rule 184 (fct_body -> compound_statement .)
    DELETE          reduce using rule 184 (fct_body -> compound_statement .)
    THIS            reduce using rule 184 (fct_body -> compound_statement .)
    NUMBER          reduce using rule 184 (fct_body -> compound_statement .)
    STRING_L        reduce using rule 184 (fct_body -> compound_statement .)
    SCHAR           reduce using rule 184 (fct_body -> compound_statement .)
    ELSE            reduce using rule 184 (fct_body -> compound_statement .)
    COLON           reduce using rule 184 (fct_body -> compound_statement .)
    PRIVATE         reduce using rule 184 (fct_body -> compound_statement .)
    PROTECTED       reduce using rule 184 (fct_body -> compound_statement .)
    PUBLIC          reduce using rule 184 (fct_body -> compound_statement .)


state 78

    (239) initializer -> EQUAL . assignment_expression
    (240) initializer -> EQUAL . LCPAREN initializer_list RCPAREN
    (241) initializer -> EQUAL . LCPAREN initializer_list COMMA RCPAREN
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 189
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    assignment_expression          shift and go to state 188
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 79

    (185) compound_statement -> LCPAREN . statement_list RCPAREN
    (186) compound_statement -> LCPAREN . RCPAREN
    (187) statement_list -> . statement
    (188) statement_list -> . statement_list statement
    (189) statement -> . labeled_statement
    (190) statement -> . expression_statement
    (191) statement -> . compound_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) statement -> . declaration_statement
    (196) statement -> . try_block
    (212) labeled_statement -> . IDENTIFIER COLON statement
    (213) labeled_statement -> . CASE constant_expression COLON statement
    (214) labeled_statement -> . DEFAULT COLON statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN
    (202) selection_statement -> . IF LPAREN expression RPAREN statement
    (203) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (204) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (215) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (216) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (217) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (197) jump_statement -> . BREAK SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . RETURN expression SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (225) declaration_statement -> . declaration
    (205) try_block -> . TRY compound_statement handler_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 191
    IDENTIFIER      shift and go to state 201
    CASE            shift and go to state 202
    DEFAULT         shift and go to state 203
    SEMICOLON       shift and go to state 205
    LCPAREN         shift and go to state 79
    IF              shift and go to state 206
    SWITCH          shift and go to state 208
    WHILE           shift and go to state 209
    DO              shift and go to state 210
    FOR             shift and go to state 211
    BREAK           shift and go to state 212
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 214
    GOTO            shift and go to state 215
    TRY             shift and go to state 217
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    statement_list                 shift and go to state 190
    statement                      shift and go to state 192
    labeled_statement              shift and go to state 193
    expression_statement           shift and go to state 194
    compound_statement             shift and go to state 195
    selection_statement            shift and go to state 196
    iteration_statement            shift and go to state 197
    jump_statement                 shift and go to state 198
    declaration_statement          shift and go to state 199
    try_block                      shift and go to state 200
    expression                     shift and go to state 204
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 80

    (232) template_declaration -> TEMPLATE LTEMPLATE . template_argument_list RTEMPLATE declaration
    (233) template_argument_list -> . argument_declaration
    (234) template_argument_list -> . template_argument_list COMMA argument_declaration
    (146) argument_declaration -> . decl_specifiers declarator
    (147) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (148) argument_declaration -> . decl_specifiers abstract_declarator
    (149) argument_declaration -> . decl_specifiers
    (150) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (151) argument_declaration -> . decl_specifiers EQUAL expression
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    TYPEDEF         shift and go to state 22
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    template_argument_list         shift and go to state 223
    argument_declaration           shift and go to state 224
    decl_specifiers                shift and go to state 147
    decl_specifier                 shift and go to state 14
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 81

    (259) declarator -> unary2_operator declarator .
    (260) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (261) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (262) declarator -> declarator . LSPAREN RSPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    EQUAL           reduce using rule 259 (declarator -> unary2_operator declarator .)
    LCPAREN         reduce using rule 259 (declarator -> unary2_operator declarator .)
    SEMICOLON       reduce using rule 259 (declarator -> unary2_operator declarator .)
    COMMA           reduce using rule 259 (declarator -> unary2_operator declarator .)
    RPAREN          reduce using rule 259 (declarator -> unary2_operator declarator .)
    RTEMPLATE       reduce using rule 259 (declarator -> unary2_operator declarator .)
    LPAREN          shift and go to state 136
    LSPAREN         shift and go to state 76

  ! LPAREN          [ reduce using rule 259 (declarator -> unary2_operator declarator .) ]
  ! LSPAREN         [ reduce using rule 259 (declarator -> unary2_operator declarator .) ]


state 82

    (266) name -> BNOP IDENTIFIER .

    LPAREN          reduce using rule 266 (name -> BNOP IDENTIFIER .)
    LSPAREN         reduce using rule 266 (name -> BNOP IDENTIFIER .)
    EQUAL           reduce using rule 266 (name -> BNOP IDENTIFIER .)
    LCPAREN         reduce using rule 266 (name -> BNOP IDENTIFIER .)
    SEMICOLON       reduce using rule 266 (name -> BNOP IDENTIFIER .)
    COMMA           reduce using rule 266 (name -> BNOP IDENTIFIER .)
    RPAREN          reduce using rule 266 (name -> BNOP IDENTIFIER .)
    DOT             reduce using rule 266 (name -> BNOP IDENTIFIER .)
    ARROW           reduce using rule 266 (name -> BNOP IDENTIFIER .)
    DPLUSOP         reduce using rule 266 (name -> BNOP IDENTIFIER .)
    DMINUSOP        reduce using rule 266 (name -> BNOP IDENTIFIER .)
    LTEMPLATE       reduce using rule 266 (name -> BNOP IDENTIFIER .)
    MULTEQOP        reduce using rule 266 (name -> BNOP IDENTIFIER .)
    DIVEQOP         reduce using rule 266 (name -> BNOP IDENTIFIER .)
    MODEQOP         reduce using rule 266 (name -> BNOP IDENTIFIER .)
    PLUSEQOP        reduce using rule 266 (name -> BNOP IDENTIFIER .)
    MINUSEQOP       reduce using rule 266 (name -> BNOP IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 266 (name -> BNOP IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 266 (name -> BNOP IDENTIFIER .)
    BANDEQOP        reduce using rule 266 (name -> BNOP IDENTIFIER .)
    BOREQOP         reduce using rule 266 (name -> BNOP IDENTIFIER .)
    DOTSTAR         reduce using rule 266 (name -> BNOP IDENTIFIER .)
    ARROWSTAR       reduce using rule 266 (name -> BNOP IDENTIFIER .)
    MULTOP          reduce using rule 266 (name -> BNOP IDENTIFIER .)
    DIVOP           reduce using rule 266 (name -> BNOP IDENTIFIER .)
    MODOP           reduce using rule 266 (name -> BNOP IDENTIFIER .)
    PLUSOP          reduce using rule 266 (name -> BNOP IDENTIFIER .)
    MINUSOP         reduce using rule 266 (name -> BNOP IDENTIFIER .)
    LSHIFT          reduce using rule 266 (name -> BNOP IDENTIFIER .)
    RSHIFT          reduce using rule 266 (name -> BNOP IDENTIFIER .)
    LTCOMP          reduce using rule 266 (name -> BNOP IDENTIFIER .)
    GTCOMP          reduce using rule 266 (name -> BNOP IDENTIFIER .)
    LTECOMP         reduce using rule 266 (name -> BNOP IDENTIFIER .)
    GTECOMP         reduce using rule 266 (name -> BNOP IDENTIFIER .)
    EQCOMP          reduce using rule 266 (name -> BNOP IDENTIFIER .)
    NEQCOMP         reduce using rule 266 (name -> BNOP IDENTIFIER .)
    BANDOP          reduce using rule 266 (name -> BNOP IDENTIFIER .)
    XOROP           reduce using rule 266 (name -> BNOP IDENTIFIER .)
    OROP            reduce using rule 266 (name -> BNOP IDENTIFIER .)
    ANDOP           reduce using rule 266 (name -> BNOP IDENTIFIER .)
    QUESMARK        reduce using rule 266 (name -> BNOP IDENTIFIER .)
    RSPAREN         reduce using rule 266 (name -> BNOP IDENTIFIER .)
    RTEMPLATE       reduce using rule 266 (name -> BNOP IDENTIFIER .)
    RCPAREN         reduce using rule 266 (name -> BNOP IDENTIFIER .)
    COLON           reduce using rule 266 (name -> BNOP IDENTIFIER .)


state 83

    (167) class_specifier -> class_head LCPAREN . member_list RCPAREN
    (168) class_specifier -> class_head LCPAREN . RCPAREN
    (169) member_list -> . member_access_list
    (170) member_list -> . access_list
    (171) member_list -> . member_list access_list
    (174) member_access_list -> . member_declaration member_access_list
    (175) member_access_list -> . member_declaration
    (172) access_list -> . access_specifier COLON member_access_list
    (173) access_list -> . access_specifier COLON
    (176) member_declaration -> . decl_specifiers member_declarator_list SEMICOLON
    (177) member_declaration -> . member_declarator_list SEMICOLON
    (178) member_declaration -> . decl_specifiers SEMICOLON
    (179) member_declaration -> . SEMICOLON
    (180) member_declaration -> . function_definition SEMICOLON
    (181) member_declaration -> . function_definition
    (324) access_specifier -> . PRIVATE
    (325) access_specifier -> . PROTECTED
    (326) access_specifier -> . PUBLIC
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (252) member_declarator_list -> . member_declarator
    (253) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (254) member_declarator -> . declarator pure_specifier
    (255) member_declarator -> . declarator
    (256) member_declarator -> . IDENTIFIER COLON constant_expression
    (257) member_declarator -> . COLON constant_expression
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    RCPAREN         shift and go to state 226
    SEMICOLON       shift and go to state 234
    PRIVATE         shift and go to state 236
    PROTECTED       shift and go to state 237
    PUBLIC          shift and go to state 238
    TYPEDEF         shift and go to state 22
    IDENTIFIER      shift and go to state 241
    COLON           shift and go to state 231
    LPAREN          shift and go to state 17
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    class_head                     shift and go to state 50
    member_list                    shift and go to state 225
    member_access_list             shift and go to state 227
    access_list                    shift and go to state 228
    member_declaration             shift and go to state 229
    access_specifier               shift and go to state 230
    decl_specifiers                shift and go to state 232
    member_declarator_list         shift and go to state 233
    function_definition            shift and go to state 235
    decl_specifier                 shift and go to state 14
    member_declarator              shift and go to state 239
    declarator                     shift and go to state 240
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 23
    unary2_operator                shift and go to state 24
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    class_key                      shift and go to state 52

state 84

    (21) enum_specifier -> ENUM IDENTIFIER . LCPAREN enum_list RCPAREN
    (23) enum_specifier -> ENUM IDENTIFIER . LCPAREN RCPAREN
    (332) enum_name -> IDENTIFIER .

    LCPAREN         shift and go to state 242
    SEMICOLON       reduce using rule 332 (enum_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 332 (enum_name -> IDENTIFIER .)
    LPAREN          reduce using rule 332 (enum_name -> IDENTIFIER .)
    AUTO            reduce using rule 332 (enum_name -> IDENTIFIER .)
    STATIC          reduce using rule 332 (enum_name -> IDENTIFIER .)
    EXTERN          reduce using rule 332 (enum_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 332 (enum_name -> IDENTIFIER .)
    CONST           reduce using rule 332 (enum_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 332 (enum_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 332 (enum_name -> IDENTIFIER .)
    BNOP            reduce using rule 332 (enum_name -> IDENTIFIER .)
    MULTOP          reduce using rule 332 (enum_name -> IDENTIFIER .)
    BANDOP          reduce using rule 332 (enum_name -> IDENTIFIER .)
    CHAR            reduce using rule 332 (enum_name -> IDENTIFIER .)
    SHORT           reduce using rule 332 (enum_name -> IDENTIFIER .)
    INT             reduce using rule 332 (enum_name -> IDENTIFIER .)
    LONG            reduce using rule 332 (enum_name -> IDENTIFIER .)
    SIGNED          reduce using rule 332 (enum_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 332 (enum_name -> IDENTIFIER .)
    FLOAT           reduce using rule 332 (enum_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 332 (enum_name -> IDENTIFIER .)
    VOID            reduce using rule 332 (enum_name -> IDENTIFIER .)
    STRING          reduce using rule 332 (enum_name -> IDENTIFIER .)
    ENUM            reduce using rule 332 (enum_name -> IDENTIFIER .)
    TYPE            reduce using rule 332 (enum_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 332 (enum_name -> IDENTIFIER .)
    CLASS           reduce using rule 332 (enum_name -> IDENTIFIER .)
    STRUCT          reduce using rule 332 (enum_name -> IDENTIFIER .)
    UNION           reduce using rule 332 (enum_name -> IDENTIFIER .)
    TEMPLATE        reduce using rule 332 (enum_name -> IDENTIFIER .)
    EQUAL           reduce using rule 332 (enum_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 332 (enum_name -> IDENTIFIER .)
    COMMA           reduce using rule 332 (enum_name -> IDENTIFIER .)
    RPAREN          reduce using rule 332 (enum_name -> IDENTIFIER .)
    RTEMPLATE       reduce using rule 332 (enum_name -> IDENTIFIER .)
    COLON           reduce using rule 332 (enum_name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 332 (enum_name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 332 (enum_name -> IDENTIFIER .)
    MODEQOP         reduce using rule 332 (enum_name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 332 (enum_name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 332 (enum_name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 332 (enum_name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 332 (enum_name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 332 (enum_name -> IDENTIFIER .)
    BOREQOP         reduce using rule 332 (enum_name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 332 (enum_name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 332 (enum_name -> IDENTIFIER .)
    DIVOP           reduce using rule 332 (enum_name -> IDENTIFIER .)
    MODOP           reduce using rule 332 (enum_name -> IDENTIFIER .)
    PLUSOP          reduce using rule 332 (enum_name -> IDENTIFIER .)
    MINUSOP         reduce using rule 332 (enum_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 332 (enum_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 332 (enum_name -> IDENTIFIER .)
    LTCOMP          reduce using rule 332 (enum_name -> IDENTIFIER .)
    GTCOMP          reduce using rule 332 (enum_name -> IDENTIFIER .)
    LTECOMP         reduce using rule 332 (enum_name -> IDENTIFIER .)
    GTECOMP         reduce using rule 332 (enum_name -> IDENTIFIER .)
    EQCOMP          reduce using rule 332 (enum_name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 332 (enum_name -> IDENTIFIER .)
    XOROP           reduce using rule 332 (enum_name -> IDENTIFIER .)
    OROP            reduce using rule 332 (enum_name -> IDENTIFIER .)
    ANDOP           reduce using rule 332 (enum_name -> IDENTIFIER .)
    QUESMARK        reduce using rule 332 (enum_name -> IDENTIFIER .)
    RSPAREN         reduce using rule 332 (enum_name -> IDENTIFIER .)
    RCPAREN         reduce using rule 332 (enum_name -> IDENTIFIER .)


state 85

    (22) enum_specifier -> ENUM LCPAREN . enum_list RCPAREN
    (24) enum_specifier -> ENUM LCPAREN . RCPAREN
    (25) enum_list -> . enumerator
    (26) enum_list -> . enum_list COMMA enumerator
    (27) enumerator -> . IDENTIFIER
    (28) enumerator -> . IDENTIFIER EQUAL constant_expression

    RCPAREN         shift and go to state 244
    IDENTIFIER      shift and go to state 246

    enum_list                      shift and go to state 243
    enumerator                     shift and go to state 245

state 86

    (329) elaborated_type_specifier -> ENUM enum_name .

    SEMICOLON       reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    TYPEDEF         reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    LPAREN          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    AUTO            reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    STATIC          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    EXTERN          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    VIRTUAL         reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    CONST           reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    VOLATILE        reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    IDENTIFIER      reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    BNOP            reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    MULTOP          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    BANDOP          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    CHAR            reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    SHORT           reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    INT             reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    LONG            reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    SIGNED          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    UNSIGNED        reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    FLOAT           reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    DOUBLE          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    VOID            reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    STRING          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    ENUM            reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    TYPE            reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    OPERATOR        reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    CLASS           reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    STRUCT          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    UNION           reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    TEMPLATE        reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    EQUAL           reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    LSPAREN         reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    COMMA           reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    RPAREN          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    RTEMPLATE       reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    COLON           reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    MULTEQOP        reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    DIVEQOP         reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    MODEQOP         reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    PLUSEQOP        reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    MINUSEQOP       reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    LSHIFTEQOP      reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    RSHIFTEQOP      reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    BANDEQOP        reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    BOREQOP         reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    DOTSTAR         reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    ARROWSTAR       reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    DIVOP           reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    MODOP           reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    PLUSOP          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    MINUSOP         reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    LSHIFT          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    RSHIFT          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    LTCOMP          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    GTCOMP          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    LTECOMP         reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    GTECOMP         reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    EQCOMP          reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    NEQCOMP         reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    XOROP           reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    OROP            reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    ANDOP           reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    QUESMARK        reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    RSPAREN         reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)
    RCPAREN         reduce using rule 329 (elaborated_type_specifier -> ENUM enum_name .)


state 87

    (327) elaborated_type_specifier -> class_key IDENTIFIER .
    (328) elaborated_type_specifier -> class_key IDENTIFIER . template_class_name
    (311) class_head -> class_key IDENTIFIER . base_spec
    (312) class_head -> class_key IDENTIFIER .
    (16) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE
    (313) base_spec -> . COLON base_list

  ! shift/reduce conflict for COLON resolved as shift
    SEMICOLON       reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    TYPEDEF         reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LPAREN          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    AUTO            reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    STATIC          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    EXTERN          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    VIRTUAL         reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    CONST           reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    VOLATILE        reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    IDENTIFIER      reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    BNOP            reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MULTOP          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    BANDOP          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    CHAR            reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    SHORT           reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    INT             reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LONG            reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    SIGNED          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    UNSIGNED        reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    FLOAT           reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DOUBLE          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    VOID            reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    STRING          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    ENUM            reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    TYPE            reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    OPERATOR        reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    CLASS           reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    STRUCT          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    UNION           reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    TEMPLATE        reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    EQUAL           reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LSPAREN         reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    COMMA           reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RPAREN          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RTEMPLATE       reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MULTEQOP        reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DIVEQOP         reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MODEQOP         reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    PLUSEQOP        reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MINUSEQOP       reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    BANDEQOP        reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    BOREQOP         reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DOTSTAR         reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    ARROWSTAR       reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DIVOP           reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MODOP           reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    PLUSOP          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MINUSOP         reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LSHIFT          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RSHIFT          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LTCOMP          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    GTCOMP          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LTECOMP         reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    GTECOMP         reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    EQCOMP          reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    NEQCOMP         reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    XOROP           reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    OROP            reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    ANDOP           reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    QUESMARK        reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RSPAREN         reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RCPAREN         reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LCPAREN         reduce using rule 312 (class_head -> class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 249
    COLON           shift and go to state 89

  ! COLON           [ reduce using rule 327 (elaborated_type_specifier -> class_key IDENTIFIER .) ]

    template_class_name            shift and go to state 247
    base_spec                      shift and go to state 248

state 88

    (309) class_head -> class_key base_spec .

    LCPAREN         reduce using rule 309 (class_head -> class_key base_spec .)


state 89

    (313) base_spec -> COLON . base_list
    (314) base_list -> . base_specifier
    (315) base_list -> . base_list COMMA base_specifier
    (316) base_specifier -> . class_key IDENTIFIER
    (317) base_specifier -> . access_specifier class_key IDENTIFIER
    (318) base_specifier -> . class_key IDENTIFIER template_class_name
    (319) base_specifier -> . access_specifier class_key IDENTIFIER template_class_name
    (320) base_specifier -> . IDENTIFIER
    (321) base_specifier -> . access_specifier IDENTIFIER
    (322) base_specifier -> . IDENTIFIER template_class_name
    (323) base_specifier -> . access_specifier IDENTIFIER template_class_name
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (324) access_specifier -> . PRIVATE
    (325) access_specifier -> . PROTECTED
    (326) access_specifier -> . PUBLIC

    IDENTIFIER      shift and go to state 253
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68
    PRIVATE         shift and go to state 236
    PROTECTED       shift and go to state 237
    PUBLIC          shift and go to state 238

    base_list                      shift and go to state 250
    base_specifier                 shift and go to state 251
    class_key                      shift and go to state 252
    access_specifier               shift and go to state 254

state 90

    (330) elaborated_type_specifier -> TYPE IDENTIFIER .
    (331) elaborated_type_specifier -> TYPE IDENTIFIER . template_class_name
    (16) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    SEMICOLON       reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    TYPEDEF         reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LPAREN          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    AUTO            reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    STATIC          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    EXTERN          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    VIRTUAL         reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    CONST           reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    VOLATILE        reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    IDENTIFIER      reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    BNOP            reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    MULTOP          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    BANDOP          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    CHAR            reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    SHORT           reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    INT             reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LONG            reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    SIGNED          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    UNSIGNED        reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    FLOAT           reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    DOUBLE          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    VOID            reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    STRING          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    ENUM            reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    TYPE            reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    OPERATOR        reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    CLASS           reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    STRUCT          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    UNION           reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    TEMPLATE        reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    EQUAL           reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LSPAREN         reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    COMMA           reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    RPAREN          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    RTEMPLATE       reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    COLON           reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    MULTEQOP        reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    DIVEQOP         reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    MODEQOP         reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    PLUSEQOP        reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    MINUSEQOP       reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    BANDEQOP        reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    BOREQOP         reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    DOTSTAR         reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    ARROWSTAR       reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    DIVOP           reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    MODOP           reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    PLUSOP          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    MINUSOP         reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LSHIFT          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    RSHIFT          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LTCOMP          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    GTCOMP          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LTECOMP         reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    GTECOMP         reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    EQCOMP          reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    NEQCOMP         reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    XOROP           reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    OROP            reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    ANDOP           reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    QUESMARK        reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    RSPAREN         reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    RCPAREN         reduce using rule 330 (elaborated_type_specifier -> TYPE IDENTIFIER .)
    LTEMPLATE       shift and go to state 249

    template_class_name            shift and go to state 255

state 91

    (269) operator_function_name -> OPERATOR operator_name .

    LPAREN          reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    LSPAREN         reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    EQUAL           reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    LCPAREN         reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    SEMICOLON       reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    COMMA           reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    RPAREN          reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    DOT             reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    ARROW           reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    DPLUSOP         reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    DMINUSOP        reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    LTEMPLATE       reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    MULTEQOP        reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    DIVEQOP         reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    MODEQOP         reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    PLUSEQOP        reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    MINUSEQOP       reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    LSHIFTEQOP      reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    RSHIFTEQOP      reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    BANDEQOP        reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    BOREQOP         reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    DOTSTAR         reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    ARROWSTAR       reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    MULTOP          reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    DIVOP           reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    MODOP           reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    PLUSOP          reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    MINUSOP         reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    LSHIFT          reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    RSHIFT          reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    LTCOMP          reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    GTCOMP          reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    LTECOMP         reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    GTECOMP         reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    EQCOMP          reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    NEQCOMP         reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    BANDOP          reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    XOROP           reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    OROP            reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    ANDOP           reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    QUESMARK        reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    RSPAREN         reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    RTEMPLATE       reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    RCPAREN         reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)
    COLON           reduce using rule 269 (operator_function_name -> OPERATOR operator_name .)


state 92

    (270) operator_name -> NEW .

    LPAREN          reduce using rule 270 (operator_name -> NEW .)
    LSPAREN         reduce using rule 270 (operator_name -> NEW .)
    EQUAL           reduce using rule 270 (operator_name -> NEW .)
    LCPAREN         reduce using rule 270 (operator_name -> NEW .)
    SEMICOLON       reduce using rule 270 (operator_name -> NEW .)
    COMMA           reduce using rule 270 (operator_name -> NEW .)
    RPAREN          reduce using rule 270 (operator_name -> NEW .)
    DOT             reduce using rule 270 (operator_name -> NEW .)
    ARROW           reduce using rule 270 (operator_name -> NEW .)
    DPLUSOP         reduce using rule 270 (operator_name -> NEW .)
    DMINUSOP        reduce using rule 270 (operator_name -> NEW .)
    LTEMPLATE       reduce using rule 270 (operator_name -> NEW .)
    MULTEQOP        reduce using rule 270 (operator_name -> NEW .)
    DIVEQOP         reduce using rule 270 (operator_name -> NEW .)
    MODEQOP         reduce using rule 270 (operator_name -> NEW .)
    PLUSEQOP        reduce using rule 270 (operator_name -> NEW .)
    MINUSEQOP       reduce using rule 270 (operator_name -> NEW .)
    LSHIFTEQOP      reduce using rule 270 (operator_name -> NEW .)
    RSHIFTEQOP      reduce using rule 270 (operator_name -> NEW .)
    BANDEQOP        reduce using rule 270 (operator_name -> NEW .)
    BOREQOP         reduce using rule 270 (operator_name -> NEW .)
    DOTSTAR         reduce using rule 270 (operator_name -> NEW .)
    ARROWSTAR       reduce using rule 270 (operator_name -> NEW .)
    MULTOP          reduce using rule 270 (operator_name -> NEW .)
    DIVOP           reduce using rule 270 (operator_name -> NEW .)
    MODOP           reduce using rule 270 (operator_name -> NEW .)
    PLUSOP          reduce using rule 270 (operator_name -> NEW .)
    MINUSOP         reduce using rule 270 (operator_name -> NEW .)
    LSHIFT          reduce using rule 270 (operator_name -> NEW .)
    RSHIFT          reduce using rule 270 (operator_name -> NEW .)
    LTCOMP          reduce using rule 270 (operator_name -> NEW .)
    GTCOMP          reduce using rule 270 (operator_name -> NEW .)
    LTECOMP         reduce using rule 270 (operator_name -> NEW .)
    GTECOMP         reduce using rule 270 (operator_name -> NEW .)
    EQCOMP          reduce using rule 270 (operator_name -> NEW .)
    NEQCOMP         reduce using rule 270 (operator_name -> NEW .)
    BANDOP          reduce using rule 270 (operator_name -> NEW .)
    XOROP           reduce using rule 270 (operator_name -> NEW .)
    OROP            reduce using rule 270 (operator_name -> NEW .)
    ANDOP           reduce using rule 270 (operator_name -> NEW .)
    QUESMARK        reduce using rule 270 (operator_name -> NEW .)
    RSPAREN         reduce using rule 270 (operator_name -> NEW .)
    RTEMPLATE       reduce using rule 270 (operator_name -> NEW .)
    RCPAREN         reduce using rule 270 (operator_name -> NEW .)
    COLON           reduce using rule 270 (operator_name -> NEW .)


state 93

    (271) operator_name -> DELETE .

    LPAREN          reduce using rule 271 (operator_name -> DELETE .)
    LSPAREN         reduce using rule 271 (operator_name -> DELETE .)
    EQUAL           reduce using rule 271 (operator_name -> DELETE .)
    LCPAREN         reduce using rule 271 (operator_name -> DELETE .)
    SEMICOLON       reduce using rule 271 (operator_name -> DELETE .)
    COMMA           reduce using rule 271 (operator_name -> DELETE .)
    RPAREN          reduce using rule 271 (operator_name -> DELETE .)
    DOT             reduce using rule 271 (operator_name -> DELETE .)
    ARROW           reduce using rule 271 (operator_name -> DELETE .)
    DPLUSOP         reduce using rule 271 (operator_name -> DELETE .)
    DMINUSOP        reduce using rule 271 (operator_name -> DELETE .)
    LTEMPLATE       reduce using rule 271 (operator_name -> DELETE .)
    MULTEQOP        reduce using rule 271 (operator_name -> DELETE .)
    DIVEQOP         reduce using rule 271 (operator_name -> DELETE .)
    MODEQOP         reduce using rule 271 (operator_name -> DELETE .)
    PLUSEQOP        reduce using rule 271 (operator_name -> DELETE .)
    MINUSEQOP       reduce using rule 271 (operator_name -> DELETE .)
    LSHIFTEQOP      reduce using rule 271 (operator_name -> DELETE .)
    RSHIFTEQOP      reduce using rule 271 (operator_name -> DELETE .)
    BANDEQOP        reduce using rule 271 (operator_name -> DELETE .)
    BOREQOP         reduce using rule 271 (operator_name -> DELETE .)
    DOTSTAR         reduce using rule 271 (operator_name -> DELETE .)
    ARROWSTAR       reduce using rule 271 (operator_name -> DELETE .)
    MULTOP          reduce using rule 271 (operator_name -> DELETE .)
    DIVOP           reduce using rule 271 (operator_name -> DELETE .)
    MODOP           reduce using rule 271 (operator_name -> DELETE .)
    PLUSOP          reduce using rule 271 (operator_name -> DELETE .)
    MINUSOP         reduce using rule 271 (operator_name -> DELETE .)
    LSHIFT          reduce using rule 271 (operator_name -> DELETE .)
    RSHIFT          reduce using rule 271 (operator_name -> DELETE .)
    LTCOMP          reduce using rule 271 (operator_name -> DELETE .)
    GTCOMP          reduce using rule 271 (operator_name -> DELETE .)
    LTECOMP         reduce using rule 271 (operator_name -> DELETE .)
    GTECOMP         reduce using rule 271 (operator_name -> DELETE .)
    EQCOMP          reduce using rule 271 (operator_name -> DELETE .)
    NEQCOMP         reduce using rule 271 (operator_name -> DELETE .)
    BANDOP          reduce using rule 271 (operator_name -> DELETE .)
    XOROP           reduce using rule 271 (operator_name -> DELETE .)
    OROP            reduce using rule 271 (operator_name -> DELETE .)
    ANDOP           reduce using rule 271 (operator_name -> DELETE .)
    QUESMARK        reduce using rule 271 (operator_name -> DELETE .)
    RSPAREN         reduce using rule 271 (operator_name -> DELETE .)
    RTEMPLATE       reduce using rule 271 (operator_name -> DELETE .)
    RCPAREN         reduce using rule 271 (operator_name -> DELETE .)
    COLON           reduce using rule 271 (operator_name -> DELETE .)


state 94

    (272) operator_name -> PLUSOP .

    LPAREN          reduce using rule 272 (operator_name -> PLUSOP .)
    LSPAREN         reduce using rule 272 (operator_name -> PLUSOP .)
    EQUAL           reduce using rule 272 (operator_name -> PLUSOP .)
    LCPAREN         reduce using rule 272 (operator_name -> PLUSOP .)
    SEMICOLON       reduce using rule 272 (operator_name -> PLUSOP .)
    COMMA           reduce using rule 272 (operator_name -> PLUSOP .)
    RPAREN          reduce using rule 272 (operator_name -> PLUSOP .)
    DOT             reduce using rule 272 (operator_name -> PLUSOP .)
    ARROW           reduce using rule 272 (operator_name -> PLUSOP .)
    DPLUSOP         reduce using rule 272 (operator_name -> PLUSOP .)
    DMINUSOP        reduce using rule 272 (operator_name -> PLUSOP .)
    LTEMPLATE       reduce using rule 272 (operator_name -> PLUSOP .)
    MULTEQOP        reduce using rule 272 (operator_name -> PLUSOP .)
    DIVEQOP         reduce using rule 272 (operator_name -> PLUSOP .)
    MODEQOP         reduce using rule 272 (operator_name -> PLUSOP .)
    PLUSEQOP        reduce using rule 272 (operator_name -> PLUSOP .)
    MINUSEQOP       reduce using rule 272 (operator_name -> PLUSOP .)
    LSHIFTEQOP      reduce using rule 272 (operator_name -> PLUSOP .)
    RSHIFTEQOP      reduce using rule 272 (operator_name -> PLUSOP .)
    BANDEQOP        reduce using rule 272 (operator_name -> PLUSOP .)
    BOREQOP         reduce using rule 272 (operator_name -> PLUSOP .)
    DOTSTAR         reduce using rule 272 (operator_name -> PLUSOP .)
    ARROWSTAR       reduce using rule 272 (operator_name -> PLUSOP .)
    MULTOP          reduce using rule 272 (operator_name -> PLUSOP .)
    DIVOP           reduce using rule 272 (operator_name -> PLUSOP .)
    MODOP           reduce using rule 272 (operator_name -> PLUSOP .)
    PLUSOP          reduce using rule 272 (operator_name -> PLUSOP .)
    MINUSOP         reduce using rule 272 (operator_name -> PLUSOP .)
    LSHIFT          reduce using rule 272 (operator_name -> PLUSOP .)
    RSHIFT          reduce using rule 272 (operator_name -> PLUSOP .)
    LTCOMP          reduce using rule 272 (operator_name -> PLUSOP .)
    GTCOMP          reduce using rule 272 (operator_name -> PLUSOP .)
    LTECOMP         reduce using rule 272 (operator_name -> PLUSOP .)
    GTECOMP         reduce using rule 272 (operator_name -> PLUSOP .)
    EQCOMP          reduce using rule 272 (operator_name -> PLUSOP .)
    NEQCOMP         reduce using rule 272 (operator_name -> PLUSOP .)
    BANDOP          reduce using rule 272 (operator_name -> PLUSOP .)
    XOROP           reduce using rule 272 (operator_name -> PLUSOP .)
    OROP            reduce using rule 272 (operator_name -> PLUSOP .)
    ANDOP           reduce using rule 272 (operator_name -> PLUSOP .)
    QUESMARK        reduce using rule 272 (operator_name -> PLUSOP .)
    RSPAREN         reduce using rule 272 (operator_name -> PLUSOP .)
    RTEMPLATE       reduce using rule 272 (operator_name -> PLUSOP .)
    RCPAREN         reduce using rule 272 (operator_name -> PLUSOP .)
    COLON           reduce using rule 272 (operator_name -> PLUSOP .)


state 95

    (273) operator_name -> MINUSOP .

    LPAREN          reduce using rule 273 (operator_name -> MINUSOP .)
    LSPAREN         reduce using rule 273 (operator_name -> MINUSOP .)
    EQUAL           reduce using rule 273 (operator_name -> MINUSOP .)
    LCPAREN         reduce using rule 273 (operator_name -> MINUSOP .)
    SEMICOLON       reduce using rule 273 (operator_name -> MINUSOP .)
    COMMA           reduce using rule 273 (operator_name -> MINUSOP .)
    RPAREN          reduce using rule 273 (operator_name -> MINUSOP .)
    DOT             reduce using rule 273 (operator_name -> MINUSOP .)
    ARROW           reduce using rule 273 (operator_name -> MINUSOP .)
    DPLUSOP         reduce using rule 273 (operator_name -> MINUSOP .)
    DMINUSOP        reduce using rule 273 (operator_name -> MINUSOP .)
    LTEMPLATE       reduce using rule 273 (operator_name -> MINUSOP .)
    MULTEQOP        reduce using rule 273 (operator_name -> MINUSOP .)
    DIVEQOP         reduce using rule 273 (operator_name -> MINUSOP .)
    MODEQOP         reduce using rule 273 (operator_name -> MINUSOP .)
    PLUSEQOP        reduce using rule 273 (operator_name -> MINUSOP .)
    MINUSEQOP       reduce using rule 273 (operator_name -> MINUSOP .)
    LSHIFTEQOP      reduce using rule 273 (operator_name -> MINUSOP .)
    RSHIFTEQOP      reduce using rule 273 (operator_name -> MINUSOP .)
    BANDEQOP        reduce using rule 273 (operator_name -> MINUSOP .)
    BOREQOP         reduce using rule 273 (operator_name -> MINUSOP .)
    DOTSTAR         reduce using rule 273 (operator_name -> MINUSOP .)
    ARROWSTAR       reduce using rule 273 (operator_name -> MINUSOP .)
    MULTOP          reduce using rule 273 (operator_name -> MINUSOP .)
    DIVOP           reduce using rule 273 (operator_name -> MINUSOP .)
    MODOP           reduce using rule 273 (operator_name -> MINUSOP .)
    PLUSOP          reduce using rule 273 (operator_name -> MINUSOP .)
    MINUSOP         reduce using rule 273 (operator_name -> MINUSOP .)
    LSHIFT          reduce using rule 273 (operator_name -> MINUSOP .)
    RSHIFT          reduce using rule 273 (operator_name -> MINUSOP .)
    LTCOMP          reduce using rule 273 (operator_name -> MINUSOP .)
    GTCOMP          reduce using rule 273 (operator_name -> MINUSOP .)
    LTECOMP         reduce using rule 273 (operator_name -> MINUSOP .)
    GTECOMP         reduce using rule 273 (operator_name -> MINUSOP .)
    EQCOMP          reduce using rule 273 (operator_name -> MINUSOP .)
    NEQCOMP         reduce using rule 273 (operator_name -> MINUSOP .)
    BANDOP          reduce using rule 273 (operator_name -> MINUSOP .)
    XOROP           reduce using rule 273 (operator_name -> MINUSOP .)
    OROP            reduce using rule 273 (operator_name -> MINUSOP .)
    ANDOP           reduce using rule 273 (operator_name -> MINUSOP .)
    QUESMARK        reduce using rule 273 (operator_name -> MINUSOP .)
    RSPAREN         reduce using rule 273 (operator_name -> MINUSOP .)
    RTEMPLATE       reduce using rule 273 (operator_name -> MINUSOP .)
    RCPAREN         reduce using rule 273 (operator_name -> MINUSOP .)
    COLON           reduce using rule 273 (operator_name -> MINUSOP .)


state 96

    (274) operator_name -> MULTOP .

    LPAREN          reduce using rule 274 (operator_name -> MULTOP .)
    LSPAREN         reduce using rule 274 (operator_name -> MULTOP .)
    EQUAL           reduce using rule 274 (operator_name -> MULTOP .)
    LCPAREN         reduce using rule 274 (operator_name -> MULTOP .)
    SEMICOLON       reduce using rule 274 (operator_name -> MULTOP .)
    COMMA           reduce using rule 274 (operator_name -> MULTOP .)
    RPAREN          reduce using rule 274 (operator_name -> MULTOP .)
    DOT             reduce using rule 274 (operator_name -> MULTOP .)
    ARROW           reduce using rule 274 (operator_name -> MULTOP .)
    DPLUSOP         reduce using rule 274 (operator_name -> MULTOP .)
    DMINUSOP        reduce using rule 274 (operator_name -> MULTOP .)
    LTEMPLATE       reduce using rule 274 (operator_name -> MULTOP .)
    MULTEQOP        reduce using rule 274 (operator_name -> MULTOP .)
    DIVEQOP         reduce using rule 274 (operator_name -> MULTOP .)
    MODEQOP         reduce using rule 274 (operator_name -> MULTOP .)
    PLUSEQOP        reduce using rule 274 (operator_name -> MULTOP .)
    MINUSEQOP       reduce using rule 274 (operator_name -> MULTOP .)
    LSHIFTEQOP      reduce using rule 274 (operator_name -> MULTOP .)
    RSHIFTEQOP      reduce using rule 274 (operator_name -> MULTOP .)
    BANDEQOP        reduce using rule 274 (operator_name -> MULTOP .)
    BOREQOP         reduce using rule 274 (operator_name -> MULTOP .)
    DOTSTAR         reduce using rule 274 (operator_name -> MULTOP .)
    ARROWSTAR       reduce using rule 274 (operator_name -> MULTOP .)
    MULTOP          reduce using rule 274 (operator_name -> MULTOP .)
    DIVOP           reduce using rule 274 (operator_name -> MULTOP .)
    MODOP           reduce using rule 274 (operator_name -> MULTOP .)
    PLUSOP          reduce using rule 274 (operator_name -> MULTOP .)
    MINUSOP         reduce using rule 274 (operator_name -> MULTOP .)
    LSHIFT          reduce using rule 274 (operator_name -> MULTOP .)
    RSHIFT          reduce using rule 274 (operator_name -> MULTOP .)
    LTCOMP          reduce using rule 274 (operator_name -> MULTOP .)
    GTCOMP          reduce using rule 274 (operator_name -> MULTOP .)
    LTECOMP         reduce using rule 274 (operator_name -> MULTOP .)
    GTECOMP         reduce using rule 274 (operator_name -> MULTOP .)
    EQCOMP          reduce using rule 274 (operator_name -> MULTOP .)
    NEQCOMP         reduce using rule 274 (operator_name -> MULTOP .)
    BANDOP          reduce using rule 274 (operator_name -> MULTOP .)
    XOROP           reduce using rule 274 (operator_name -> MULTOP .)
    OROP            reduce using rule 274 (operator_name -> MULTOP .)
    ANDOP           reduce using rule 274 (operator_name -> MULTOP .)
    QUESMARK        reduce using rule 274 (operator_name -> MULTOP .)
    RSPAREN         reduce using rule 274 (operator_name -> MULTOP .)
    RTEMPLATE       reduce using rule 274 (operator_name -> MULTOP .)
    RCPAREN         reduce using rule 274 (operator_name -> MULTOP .)
    COLON           reduce using rule 274 (operator_name -> MULTOP .)


state 97

    (275) operator_name -> DIVOP .

    LPAREN          reduce using rule 275 (operator_name -> DIVOP .)
    LSPAREN         reduce using rule 275 (operator_name -> DIVOP .)
    EQUAL           reduce using rule 275 (operator_name -> DIVOP .)
    LCPAREN         reduce using rule 275 (operator_name -> DIVOP .)
    SEMICOLON       reduce using rule 275 (operator_name -> DIVOP .)
    COMMA           reduce using rule 275 (operator_name -> DIVOP .)
    RPAREN          reduce using rule 275 (operator_name -> DIVOP .)
    DOT             reduce using rule 275 (operator_name -> DIVOP .)
    ARROW           reduce using rule 275 (operator_name -> DIVOP .)
    DPLUSOP         reduce using rule 275 (operator_name -> DIVOP .)
    DMINUSOP        reduce using rule 275 (operator_name -> DIVOP .)
    LTEMPLATE       reduce using rule 275 (operator_name -> DIVOP .)
    MULTEQOP        reduce using rule 275 (operator_name -> DIVOP .)
    DIVEQOP         reduce using rule 275 (operator_name -> DIVOP .)
    MODEQOP         reduce using rule 275 (operator_name -> DIVOP .)
    PLUSEQOP        reduce using rule 275 (operator_name -> DIVOP .)
    MINUSEQOP       reduce using rule 275 (operator_name -> DIVOP .)
    LSHIFTEQOP      reduce using rule 275 (operator_name -> DIVOP .)
    RSHIFTEQOP      reduce using rule 275 (operator_name -> DIVOP .)
    BANDEQOP        reduce using rule 275 (operator_name -> DIVOP .)
    BOREQOP         reduce using rule 275 (operator_name -> DIVOP .)
    DOTSTAR         reduce using rule 275 (operator_name -> DIVOP .)
    ARROWSTAR       reduce using rule 275 (operator_name -> DIVOP .)
    MULTOP          reduce using rule 275 (operator_name -> DIVOP .)
    DIVOP           reduce using rule 275 (operator_name -> DIVOP .)
    MODOP           reduce using rule 275 (operator_name -> DIVOP .)
    PLUSOP          reduce using rule 275 (operator_name -> DIVOP .)
    MINUSOP         reduce using rule 275 (operator_name -> DIVOP .)
    LSHIFT          reduce using rule 275 (operator_name -> DIVOP .)
    RSHIFT          reduce using rule 275 (operator_name -> DIVOP .)
    LTCOMP          reduce using rule 275 (operator_name -> DIVOP .)
    GTCOMP          reduce using rule 275 (operator_name -> DIVOP .)
    LTECOMP         reduce using rule 275 (operator_name -> DIVOP .)
    GTECOMP         reduce using rule 275 (operator_name -> DIVOP .)
    EQCOMP          reduce using rule 275 (operator_name -> DIVOP .)
    NEQCOMP         reduce using rule 275 (operator_name -> DIVOP .)
    BANDOP          reduce using rule 275 (operator_name -> DIVOP .)
    XOROP           reduce using rule 275 (operator_name -> DIVOP .)
    OROP            reduce using rule 275 (operator_name -> DIVOP .)
    ANDOP           reduce using rule 275 (operator_name -> DIVOP .)
    QUESMARK        reduce using rule 275 (operator_name -> DIVOP .)
    RSPAREN         reduce using rule 275 (operator_name -> DIVOP .)
    RTEMPLATE       reduce using rule 275 (operator_name -> DIVOP .)
    RCPAREN         reduce using rule 275 (operator_name -> DIVOP .)
    COLON           reduce using rule 275 (operator_name -> DIVOP .)


state 98

    (276) operator_name -> MODOP .

    LPAREN          reduce using rule 276 (operator_name -> MODOP .)
    LSPAREN         reduce using rule 276 (operator_name -> MODOP .)
    EQUAL           reduce using rule 276 (operator_name -> MODOP .)
    LCPAREN         reduce using rule 276 (operator_name -> MODOP .)
    SEMICOLON       reduce using rule 276 (operator_name -> MODOP .)
    COMMA           reduce using rule 276 (operator_name -> MODOP .)
    RPAREN          reduce using rule 276 (operator_name -> MODOP .)
    DOT             reduce using rule 276 (operator_name -> MODOP .)
    ARROW           reduce using rule 276 (operator_name -> MODOP .)
    DPLUSOP         reduce using rule 276 (operator_name -> MODOP .)
    DMINUSOP        reduce using rule 276 (operator_name -> MODOP .)
    LTEMPLATE       reduce using rule 276 (operator_name -> MODOP .)
    MULTEQOP        reduce using rule 276 (operator_name -> MODOP .)
    DIVEQOP         reduce using rule 276 (operator_name -> MODOP .)
    MODEQOP         reduce using rule 276 (operator_name -> MODOP .)
    PLUSEQOP        reduce using rule 276 (operator_name -> MODOP .)
    MINUSEQOP       reduce using rule 276 (operator_name -> MODOP .)
    LSHIFTEQOP      reduce using rule 276 (operator_name -> MODOP .)
    RSHIFTEQOP      reduce using rule 276 (operator_name -> MODOP .)
    BANDEQOP        reduce using rule 276 (operator_name -> MODOP .)
    BOREQOP         reduce using rule 276 (operator_name -> MODOP .)
    DOTSTAR         reduce using rule 276 (operator_name -> MODOP .)
    ARROWSTAR       reduce using rule 276 (operator_name -> MODOP .)
    MULTOP          reduce using rule 276 (operator_name -> MODOP .)
    DIVOP           reduce using rule 276 (operator_name -> MODOP .)
    MODOP           reduce using rule 276 (operator_name -> MODOP .)
    PLUSOP          reduce using rule 276 (operator_name -> MODOP .)
    MINUSOP         reduce using rule 276 (operator_name -> MODOP .)
    LSHIFT          reduce using rule 276 (operator_name -> MODOP .)
    RSHIFT          reduce using rule 276 (operator_name -> MODOP .)
    LTCOMP          reduce using rule 276 (operator_name -> MODOP .)
    GTCOMP          reduce using rule 276 (operator_name -> MODOP .)
    LTECOMP         reduce using rule 276 (operator_name -> MODOP .)
    GTECOMP         reduce using rule 276 (operator_name -> MODOP .)
    EQCOMP          reduce using rule 276 (operator_name -> MODOP .)
    NEQCOMP         reduce using rule 276 (operator_name -> MODOP .)
    BANDOP          reduce using rule 276 (operator_name -> MODOP .)
    XOROP           reduce using rule 276 (operator_name -> MODOP .)
    OROP            reduce using rule 276 (operator_name -> MODOP .)
    ANDOP           reduce using rule 276 (operator_name -> MODOP .)
    QUESMARK        reduce using rule 276 (operator_name -> MODOP .)
    RSPAREN         reduce using rule 276 (operator_name -> MODOP .)
    RTEMPLATE       reduce using rule 276 (operator_name -> MODOP .)
    RCPAREN         reduce using rule 276 (operator_name -> MODOP .)
    COLON           reduce using rule 276 (operator_name -> MODOP .)


state 99

    (277) operator_name -> XOROP .

    LPAREN          reduce using rule 277 (operator_name -> XOROP .)
    LSPAREN         reduce using rule 277 (operator_name -> XOROP .)
    EQUAL           reduce using rule 277 (operator_name -> XOROP .)
    LCPAREN         reduce using rule 277 (operator_name -> XOROP .)
    SEMICOLON       reduce using rule 277 (operator_name -> XOROP .)
    COMMA           reduce using rule 277 (operator_name -> XOROP .)
    RPAREN          reduce using rule 277 (operator_name -> XOROP .)
    DOT             reduce using rule 277 (operator_name -> XOROP .)
    ARROW           reduce using rule 277 (operator_name -> XOROP .)
    DPLUSOP         reduce using rule 277 (operator_name -> XOROP .)
    DMINUSOP        reduce using rule 277 (operator_name -> XOROP .)
    LTEMPLATE       reduce using rule 277 (operator_name -> XOROP .)
    MULTEQOP        reduce using rule 277 (operator_name -> XOROP .)
    DIVEQOP         reduce using rule 277 (operator_name -> XOROP .)
    MODEQOP         reduce using rule 277 (operator_name -> XOROP .)
    PLUSEQOP        reduce using rule 277 (operator_name -> XOROP .)
    MINUSEQOP       reduce using rule 277 (operator_name -> XOROP .)
    LSHIFTEQOP      reduce using rule 277 (operator_name -> XOROP .)
    RSHIFTEQOP      reduce using rule 277 (operator_name -> XOROP .)
    BANDEQOP        reduce using rule 277 (operator_name -> XOROP .)
    BOREQOP         reduce using rule 277 (operator_name -> XOROP .)
    DOTSTAR         reduce using rule 277 (operator_name -> XOROP .)
    ARROWSTAR       reduce using rule 277 (operator_name -> XOROP .)
    MULTOP          reduce using rule 277 (operator_name -> XOROP .)
    DIVOP           reduce using rule 277 (operator_name -> XOROP .)
    MODOP           reduce using rule 277 (operator_name -> XOROP .)
    PLUSOP          reduce using rule 277 (operator_name -> XOROP .)
    MINUSOP         reduce using rule 277 (operator_name -> XOROP .)
    LSHIFT          reduce using rule 277 (operator_name -> XOROP .)
    RSHIFT          reduce using rule 277 (operator_name -> XOROP .)
    LTCOMP          reduce using rule 277 (operator_name -> XOROP .)
    GTCOMP          reduce using rule 277 (operator_name -> XOROP .)
    LTECOMP         reduce using rule 277 (operator_name -> XOROP .)
    GTECOMP         reduce using rule 277 (operator_name -> XOROP .)
    EQCOMP          reduce using rule 277 (operator_name -> XOROP .)
    NEQCOMP         reduce using rule 277 (operator_name -> XOROP .)
    BANDOP          reduce using rule 277 (operator_name -> XOROP .)
    XOROP           reduce using rule 277 (operator_name -> XOROP .)
    OROP            reduce using rule 277 (operator_name -> XOROP .)
    ANDOP           reduce using rule 277 (operator_name -> XOROP .)
    QUESMARK        reduce using rule 277 (operator_name -> XOROP .)
    RSPAREN         reduce using rule 277 (operator_name -> XOROP .)
    RTEMPLATE       reduce using rule 277 (operator_name -> XOROP .)
    RCPAREN         reduce using rule 277 (operator_name -> XOROP .)
    COLON           reduce using rule 277 (operator_name -> XOROP .)


state 100

    (278) operator_name -> BANDOP .

    LPAREN          reduce using rule 278 (operator_name -> BANDOP .)
    LSPAREN         reduce using rule 278 (operator_name -> BANDOP .)
    EQUAL           reduce using rule 278 (operator_name -> BANDOP .)
    LCPAREN         reduce using rule 278 (operator_name -> BANDOP .)
    SEMICOLON       reduce using rule 278 (operator_name -> BANDOP .)
    COMMA           reduce using rule 278 (operator_name -> BANDOP .)
    RPAREN          reduce using rule 278 (operator_name -> BANDOP .)
    DOT             reduce using rule 278 (operator_name -> BANDOP .)
    ARROW           reduce using rule 278 (operator_name -> BANDOP .)
    DPLUSOP         reduce using rule 278 (operator_name -> BANDOP .)
    DMINUSOP        reduce using rule 278 (operator_name -> BANDOP .)
    LTEMPLATE       reduce using rule 278 (operator_name -> BANDOP .)
    MULTEQOP        reduce using rule 278 (operator_name -> BANDOP .)
    DIVEQOP         reduce using rule 278 (operator_name -> BANDOP .)
    MODEQOP         reduce using rule 278 (operator_name -> BANDOP .)
    PLUSEQOP        reduce using rule 278 (operator_name -> BANDOP .)
    MINUSEQOP       reduce using rule 278 (operator_name -> BANDOP .)
    LSHIFTEQOP      reduce using rule 278 (operator_name -> BANDOP .)
    RSHIFTEQOP      reduce using rule 278 (operator_name -> BANDOP .)
    BANDEQOP        reduce using rule 278 (operator_name -> BANDOP .)
    BOREQOP         reduce using rule 278 (operator_name -> BANDOP .)
    DOTSTAR         reduce using rule 278 (operator_name -> BANDOP .)
    ARROWSTAR       reduce using rule 278 (operator_name -> BANDOP .)
    MULTOP          reduce using rule 278 (operator_name -> BANDOP .)
    DIVOP           reduce using rule 278 (operator_name -> BANDOP .)
    MODOP           reduce using rule 278 (operator_name -> BANDOP .)
    PLUSOP          reduce using rule 278 (operator_name -> BANDOP .)
    MINUSOP         reduce using rule 278 (operator_name -> BANDOP .)
    LSHIFT          reduce using rule 278 (operator_name -> BANDOP .)
    RSHIFT          reduce using rule 278 (operator_name -> BANDOP .)
    LTCOMP          reduce using rule 278 (operator_name -> BANDOP .)
    GTCOMP          reduce using rule 278 (operator_name -> BANDOP .)
    LTECOMP         reduce using rule 278 (operator_name -> BANDOP .)
    GTECOMP         reduce using rule 278 (operator_name -> BANDOP .)
    EQCOMP          reduce using rule 278 (operator_name -> BANDOP .)
    NEQCOMP         reduce using rule 278 (operator_name -> BANDOP .)
    BANDOP          reduce using rule 278 (operator_name -> BANDOP .)
    XOROP           reduce using rule 278 (operator_name -> BANDOP .)
    OROP            reduce using rule 278 (operator_name -> BANDOP .)
    ANDOP           reduce using rule 278 (operator_name -> BANDOP .)
    QUESMARK        reduce using rule 278 (operator_name -> BANDOP .)
    RSPAREN         reduce using rule 278 (operator_name -> BANDOP .)
    RTEMPLATE       reduce using rule 278 (operator_name -> BANDOP .)
    RCPAREN         reduce using rule 278 (operator_name -> BANDOP .)
    COLON           reduce using rule 278 (operator_name -> BANDOP .)


state 101

    (279) operator_name -> BNOP .

    LPAREN          reduce using rule 279 (operator_name -> BNOP .)
    LSPAREN         reduce using rule 279 (operator_name -> BNOP .)
    EQUAL           reduce using rule 279 (operator_name -> BNOP .)
    LCPAREN         reduce using rule 279 (operator_name -> BNOP .)
    SEMICOLON       reduce using rule 279 (operator_name -> BNOP .)
    COMMA           reduce using rule 279 (operator_name -> BNOP .)
    RPAREN          reduce using rule 279 (operator_name -> BNOP .)
    DOT             reduce using rule 279 (operator_name -> BNOP .)
    ARROW           reduce using rule 279 (operator_name -> BNOP .)
    DPLUSOP         reduce using rule 279 (operator_name -> BNOP .)
    DMINUSOP        reduce using rule 279 (operator_name -> BNOP .)
    LTEMPLATE       reduce using rule 279 (operator_name -> BNOP .)
    MULTEQOP        reduce using rule 279 (operator_name -> BNOP .)
    DIVEQOP         reduce using rule 279 (operator_name -> BNOP .)
    MODEQOP         reduce using rule 279 (operator_name -> BNOP .)
    PLUSEQOP        reduce using rule 279 (operator_name -> BNOP .)
    MINUSEQOP       reduce using rule 279 (operator_name -> BNOP .)
    LSHIFTEQOP      reduce using rule 279 (operator_name -> BNOP .)
    RSHIFTEQOP      reduce using rule 279 (operator_name -> BNOP .)
    BANDEQOP        reduce using rule 279 (operator_name -> BNOP .)
    BOREQOP         reduce using rule 279 (operator_name -> BNOP .)
    DOTSTAR         reduce using rule 279 (operator_name -> BNOP .)
    ARROWSTAR       reduce using rule 279 (operator_name -> BNOP .)
    MULTOP          reduce using rule 279 (operator_name -> BNOP .)
    DIVOP           reduce using rule 279 (operator_name -> BNOP .)
    MODOP           reduce using rule 279 (operator_name -> BNOP .)
    PLUSOP          reduce using rule 279 (operator_name -> BNOP .)
    MINUSOP         reduce using rule 279 (operator_name -> BNOP .)
    LSHIFT          reduce using rule 279 (operator_name -> BNOP .)
    RSHIFT          reduce using rule 279 (operator_name -> BNOP .)
    LTCOMP          reduce using rule 279 (operator_name -> BNOP .)
    GTCOMP          reduce using rule 279 (operator_name -> BNOP .)
    LTECOMP         reduce using rule 279 (operator_name -> BNOP .)
    GTECOMP         reduce using rule 279 (operator_name -> BNOP .)
    EQCOMP          reduce using rule 279 (operator_name -> BNOP .)
    NEQCOMP         reduce using rule 279 (operator_name -> BNOP .)
    BANDOP          reduce using rule 279 (operator_name -> BNOP .)
    XOROP           reduce using rule 279 (operator_name -> BNOP .)
    OROP            reduce using rule 279 (operator_name -> BNOP .)
    ANDOP           reduce using rule 279 (operator_name -> BNOP .)
    QUESMARK        reduce using rule 279 (operator_name -> BNOP .)
    RSPAREN         reduce using rule 279 (operator_name -> BNOP .)
    RTEMPLATE       reduce using rule 279 (operator_name -> BNOP .)
    RCPAREN         reduce using rule 279 (operator_name -> BNOP .)
    COLON           reduce using rule 279 (operator_name -> BNOP .)


state 102

    (280) operator_name -> NOTSYM .

    LPAREN          reduce using rule 280 (operator_name -> NOTSYM .)
    LSPAREN         reduce using rule 280 (operator_name -> NOTSYM .)
    EQUAL           reduce using rule 280 (operator_name -> NOTSYM .)
    LCPAREN         reduce using rule 280 (operator_name -> NOTSYM .)
    SEMICOLON       reduce using rule 280 (operator_name -> NOTSYM .)
    COMMA           reduce using rule 280 (operator_name -> NOTSYM .)
    RPAREN          reduce using rule 280 (operator_name -> NOTSYM .)
    DOT             reduce using rule 280 (operator_name -> NOTSYM .)
    ARROW           reduce using rule 280 (operator_name -> NOTSYM .)
    DPLUSOP         reduce using rule 280 (operator_name -> NOTSYM .)
    DMINUSOP        reduce using rule 280 (operator_name -> NOTSYM .)
    LTEMPLATE       reduce using rule 280 (operator_name -> NOTSYM .)
    MULTEQOP        reduce using rule 280 (operator_name -> NOTSYM .)
    DIVEQOP         reduce using rule 280 (operator_name -> NOTSYM .)
    MODEQOP         reduce using rule 280 (operator_name -> NOTSYM .)
    PLUSEQOP        reduce using rule 280 (operator_name -> NOTSYM .)
    MINUSEQOP       reduce using rule 280 (operator_name -> NOTSYM .)
    LSHIFTEQOP      reduce using rule 280 (operator_name -> NOTSYM .)
    RSHIFTEQOP      reduce using rule 280 (operator_name -> NOTSYM .)
    BANDEQOP        reduce using rule 280 (operator_name -> NOTSYM .)
    BOREQOP         reduce using rule 280 (operator_name -> NOTSYM .)
    DOTSTAR         reduce using rule 280 (operator_name -> NOTSYM .)
    ARROWSTAR       reduce using rule 280 (operator_name -> NOTSYM .)
    MULTOP          reduce using rule 280 (operator_name -> NOTSYM .)
    DIVOP           reduce using rule 280 (operator_name -> NOTSYM .)
    MODOP           reduce using rule 280 (operator_name -> NOTSYM .)
    PLUSOP          reduce using rule 280 (operator_name -> NOTSYM .)
    MINUSOP         reduce using rule 280 (operator_name -> NOTSYM .)
    LSHIFT          reduce using rule 280 (operator_name -> NOTSYM .)
    RSHIFT          reduce using rule 280 (operator_name -> NOTSYM .)
    LTCOMP          reduce using rule 280 (operator_name -> NOTSYM .)
    GTCOMP          reduce using rule 280 (operator_name -> NOTSYM .)
    LTECOMP         reduce using rule 280 (operator_name -> NOTSYM .)
    GTECOMP         reduce using rule 280 (operator_name -> NOTSYM .)
    EQCOMP          reduce using rule 280 (operator_name -> NOTSYM .)
    NEQCOMP         reduce using rule 280 (operator_name -> NOTSYM .)
    BANDOP          reduce using rule 280 (operator_name -> NOTSYM .)
    XOROP           reduce using rule 280 (operator_name -> NOTSYM .)
    OROP            reduce using rule 280 (operator_name -> NOTSYM .)
    ANDOP           reduce using rule 280 (operator_name -> NOTSYM .)
    QUESMARK        reduce using rule 280 (operator_name -> NOTSYM .)
    RSPAREN         reduce using rule 280 (operator_name -> NOTSYM .)
    RTEMPLATE       reduce using rule 280 (operator_name -> NOTSYM .)
    RCPAREN         reduce using rule 280 (operator_name -> NOTSYM .)
    COLON           reduce using rule 280 (operator_name -> NOTSYM .)


state 103

    (281) operator_name -> EQUAL .

    LPAREN          reduce using rule 281 (operator_name -> EQUAL .)
    LSPAREN         reduce using rule 281 (operator_name -> EQUAL .)
    EQUAL           reduce using rule 281 (operator_name -> EQUAL .)
    LCPAREN         reduce using rule 281 (operator_name -> EQUAL .)
    SEMICOLON       reduce using rule 281 (operator_name -> EQUAL .)
    COMMA           reduce using rule 281 (operator_name -> EQUAL .)
    RPAREN          reduce using rule 281 (operator_name -> EQUAL .)
    DOT             reduce using rule 281 (operator_name -> EQUAL .)
    ARROW           reduce using rule 281 (operator_name -> EQUAL .)
    DPLUSOP         reduce using rule 281 (operator_name -> EQUAL .)
    DMINUSOP        reduce using rule 281 (operator_name -> EQUAL .)
    LTEMPLATE       reduce using rule 281 (operator_name -> EQUAL .)
    MULTEQOP        reduce using rule 281 (operator_name -> EQUAL .)
    DIVEQOP         reduce using rule 281 (operator_name -> EQUAL .)
    MODEQOP         reduce using rule 281 (operator_name -> EQUAL .)
    PLUSEQOP        reduce using rule 281 (operator_name -> EQUAL .)
    MINUSEQOP       reduce using rule 281 (operator_name -> EQUAL .)
    LSHIFTEQOP      reduce using rule 281 (operator_name -> EQUAL .)
    RSHIFTEQOP      reduce using rule 281 (operator_name -> EQUAL .)
    BANDEQOP        reduce using rule 281 (operator_name -> EQUAL .)
    BOREQOP         reduce using rule 281 (operator_name -> EQUAL .)
    DOTSTAR         reduce using rule 281 (operator_name -> EQUAL .)
    ARROWSTAR       reduce using rule 281 (operator_name -> EQUAL .)
    MULTOP          reduce using rule 281 (operator_name -> EQUAL .)
    DIVOP           reduce using rule 281 (operator_name -> EQUAL .)
    MODOP           reduce using rule 281 (operator_name -> EQUAL .)
    PLUSOP          reduce using rule 281 (operator_name -> EQUAL .)
    MINUSOP         reduce using rule 281 (operator_name -> EQUAL .)
    LSHIFT          reduce using rule 281 (operator_name -> EQUAL .)
    RSHIFT          reduce using rule 281 (operator_name -> EQUAL .)
    LTCOMP          reduce using rule 281 (operator_name -> EQUAL .)
    GTCOMP          reduce using rule 281 (operator_name -> EQUAL .)
    LTECOMP         reduce using rule 281 (operator_name -> EQUAL .)
    GTECOMP         reduce using rule 281 (operator_name -> EQUAL .)
    EQCOMP          reduce using rule 281 (operator_name -> EQUAL .)
    NEQCOMP         reduce using rule 281 (operator_name -> EQUAL .)
    BANDOP          reduce using rule 281 (operator_name -> EQUAL .)
    XOROP           reduce using rule 281 (operator_name -> EQUAL .)
    OROP            reduce using rule 281 (operator_name -> EQUAL .)
    ANDOP           reduce using rule 281 (operator_name -> EQUAL .)
    QUESMARK        reduce using rule 281 (operator_name -> EQUAL .)
    RSPAREN         reduce using rule 281 (operator_name -> EQUAL .)
    RTEMPLATE       reduce using rule 281 (operator_name -> EQUAL .)
    RCPAREN         reduce using rule 281 (operator_name -> EQUAL .)
    COLON           reduce using rule 281 (operator_name -> EQUAL .)


state 104

    (282) operator_name -> LTCOMP .

    LPAREN          reduce using rule 282 (operator_name -> LTCOMP .)
    LSPAREN         reduce using rule 282 (operator_name -> LTCOMP .)
    EQUAL           reduce using rule 282 (operator_name -> LTCOMP .)
    LCPAREN         reduce using rule 282 (operator_name -> LTCOMP .)
    SEMICOLON       reduce using rule 282 (operator_name -> LTCOMP .)
    COMMA           reduce using rule 282 (operator_name -> LTCOMP .)
    RPAREN          reduce using rule 282 (operator_name -> LTCOMP .)
    DOT             reduce using rule 282 (operator_name -> LTCOMP .)
    ARROW           reduce using rule 282 (operator_name -> LTCOMP .)
    DPLUSOP         reduce using rule 282 (operator_name -> LTCOMP .)
    DMINUSOP        reduce using rule 282 (operator_name -> LTCOMP .)
    LTEMPLATE       reduce using rule 282 (operator_name -> LTCOMP .)
    MULTEQOP        reduce using rule 282 (operator_name -> LTCOMP .)
    DIVEQOP         reduce using rule 282 (operator_name -> LTCOMP .)
    MODEQOP         reduce using rule 282 (operator_name -> LTCOMP .)
    PLUSEQOP        reduce using rule 282 (operator_name -> LTCOMP .)
    MINUSEQOP       reduce using rule 282 (operator_name -> LTCOMP .)
    LSHIFTEQOP      reduce using rule 282 (operator_name -> LTCOMP .)
    RSHIFTEQOP      reduce using rule 282 (operator_name -> LTCOMP .)
    BANDEQOP        reduce using rule 282 (operator_name -> LTCOMP .)
    BOREQOP         reduce using rule 282 (operator_name -> LTCOMP .)
    DOTSTAR         reduce using rule 282 (operator_name -> LTCOMP .)
    ARROWSTAR       reduce using rule 282 (operator_name -> LTCOMP .)
    MULTOP          reduce using rule 282 (operator_name -> LTCOMP .)
    DIVOP           reduce using rule 282 (operator_name -> LTCOMP .)
    MODOP           reduce using rule 282 (operator_name -> LTCOMP .)
    PLUSOP          reduce using rule 282 (operator_name -> LTCOMP .)
    MINUSOP         reduce using rule 282 (operator_name -> LTCOMP .)
    LSHIFT          reduce using rule 282 (operator_name -> LTCOMP .)
    RSHIFT          reduce using rule 282 (operator_name -> LTCOMP .)
    LTCOMP          reduce using rule 282 (operator_name -> LTCOMP .)
    GTCOMP          reduce using rule 282 (operator_name -> LTCOMP .)
    LTECOMP         reduce using rule 282 (operator_name -> LTCOMP .)
    GTECOMP         reduce using rule 282 (operator_name -> LTCOMP .)
    EQCOMP          reduce using rule 282 (operator_name -> LTCOMP .)
    NEQCOMP         reduce using rule 282 (operator_name -> LTCOMP .)
    BANDOP          reduce using rule 282 (operator_name -> LTCOMP .)
    XOROP           reduce using rule 282 (operator_name -> LTCOMP .)
    OROP            reduce using rule 282 (operator_name -> LTCOMP .)
    ANDOP           reduce using rule 282 (operator_name -> LTCOMP .)
    QUESMARK        reduce using rule 282 (operator_name -> LTCOMP .)
    RSPAREN         reduce using rule 282 (operator_name -> LTCOMP .)
    RTEMPLATE       reduce using rule 282 (operator_name -> LTCOMP .)
    RCPAREN         reduce using rule 282 (operator_name -> LTCOMP .)
    COLON           reduce using rule 282 (operator_name -> LTCOMP .)


state 105

    (283) operator_name -> GTCOMP .

    LPAREN          reduce using rule 283 (operator_name -> GTCOMP .)
    LSPAREN         reduce using rule 283 (operator_name -> GTCOMP .)
    EQUAL           reduce using rule 283 (operator_name -> GTCOMP .)
    LCPAREN         reduce using rule 283 (operator_name -> GTCOMP .)
    SEMICOLON       reduce using rule 283 (operator_name -> GTCOMP .)
    COMMA           reduce using rule 283 (operator_name -> GTCOMP .)
    RPAREN          reduce using rule 283 (operator_name -> GTCOMP .)
    DOT             reduce using rule 283 (operator_name -> GTCOMP .)
    ARROW           reduce using rule 283 (operator_name -> GTCOMP .)
    DPLUSOP         reduce using rule 283 (operator_name -> GTCOMP .)
    DMINUSOP        reduce using rule 283 (operator_name -> GTCOMP .)
    LTEMPLATE       reduce using rule 283 (operator_name -> GTCOMP .)
    MULTEQOP        reduce using rule 283 (operator_name -> GTCOMP .)
    DIVEQOP         reduce using rule 283 (operator_name -> GTCOMP .)
    MODEQOP         reduce using rule 283 (operator_name -> GTCOMP .)
    PLUSEQOP        reduce using rule 283 (operator_name -> GTCOMP .)
    MINUSEQOP       reduce using rule 283 (operator_name -> GTCOMP .)
    LSHIFTEQOP      reduce using rule 283 (operator_name -> GTCOMP .)
    RSHIFTEQOP      reduce using rule 283 (operator_name -> GTCOMP .)
    BANDEQOP        reduce using rule 283 (operator_name -> GTCOMP .)
    BOREQOP         reduce using rule 283 (operator_name -> GTCOMP .)
    DOTSTAR         reduce using rule 283 (operator_name -> GTCOMP .)
    ARROWSTAR       reduce using rule 283 (operator_name -> GTCOMP .)
    MULTOP          reduce using rule 283 (operator_name -> GTCOMP .)
    DIVOP           reduce using rule 283 (operator_name -> GTCOMP .)
    MODOP           reduce using rule 283 (operator_name -> GTCOMP .)
    PLUSOP          reduce using rule 283 (operator_name -> GTCOMP .)
    MINUSOP         reduce using rule 283 (operator_name -> GTCOMP .)
    LSHIFT          reduce using rule 283 (operator_name -> GTCOMP .)
    RSHIFT          reduce using rule 283 (operator_name -> GTCOMP .)
    LTCOMP          reduce using rule 283 (operator_name -> GTCOMP .)
    GTCOMP          reduce using rule 283 (operator_name -> GTCOMP .)
    LTECOMP         reduce using rule 283 (operator_name -> GTCOMP .)
    GTECOMP         reduce using rule 283 (operator_name -> GTCOMP .)
    EQCOMP          reduce using rule 283 (operator_name -> GTCOMP .)
    NEQCOMP         reduce using rule 283 (operator_name -> GTCOMP .)
    BANDOP          reduce using rule 283 (operator_name -> GTCOMP .)
    XOROP           reduce using rule 283 (operator_name -> GTCOMP .)
    OROP            reduce using rule 283 (operator_name -> GTCOMP .)
    ANDOP           reduce using rule 283 (operator_name -> GTCOMP .)
    QUESMARK        reduce using rule 283 (operator_name -> GTCOMP .)
    RSPAREN         reduce using rule 283 (operator_name -> GTCOMP .)
    RTEMPLATE       reduce using rule 283 (operator_name -> GTCOMP .)
    RCPAREN         reduce using rule 283 (operator_name -> GTCOMP .)
    COLON           reduce using rule 283 (operator_name -> GTCOMP .)


state 106

    (284) operator_name -> PLUSEQOP .

    LPAREN          reduce using rule 284 (operator_name -> PLUSEQOP .)
    LSPAREN         reduce using rule 284 (operator_name -> PLUSEQOP .)
    EQUAL           reduce using rule 284 (operator_name -> PLUSEQOP .)
    LCPAREN         reduce using rule 284 (operator_name -> PLUSEQOP .)
    SEMICOLON       reduce using rule 284 (operator_name -> PLUSEQOP .)
    COMMA           reduce using rule 284 (operator_name -> PLUSEQOP .)
    RPAREN          reduce using rule 284 (operator_name -> PLUSEQOP .)
    DOT             reduce using rule 284 (operator_name -> PLUSEQOP .)
    ARROW           reduce using rule 284 (operator_name -> PLUSEQOP .)
    DPLUSOP         reduce using rule 284 (operator_name -> PLUSEQOP .)
    DMINUSOP        reduce using rule 284 (operator_name -> PLUSEQOP .)
    LTEMPLATE       reduce using rule 284 (operator_name -> PLUSEQOP .)
    MULTEQOP        reduce using rule 284 (operator_name -> PLUSEQOP .)
    DIVEQOP         reduce using rule 284 (operator_name -> PLUSEQOP .)
    MODEQOP         reduce using rule 284 (operator_name -> PLUSEQOP .)
    PLUSEQOP        reduce using rule 284 (operator_name -> PLUSEQOP .)
    MINUSEQOP       reduce using rule 284 (operator_name -> PLUSEQOP .)
    LSHIFTEQOP      reduce using rule 284 (operator_name -> PLUSEQOP .)
    RSHIFTEQOP      reduce using rule 284 (operator_name -> PLUSEQOP .)
    BANDEQOP        reduce using rule 284 (operator_name -> PLUSEQOP .)
    BOREQOP         reduce using rule 284 (operator_name -> PLUSEQOP .)
    DOTSTAR         reduce using rule 284 (operator_name -> PLUSEQOP .)
    ARROWSTAR       reduce using rule 284 (operator_name -> PLUSEQOP .)
    MULTOP          reduce using rule 284 (operator_name -> PLUSEQOP .)
    DIVOP           reduce using rule 284 (operator_name -> PLUSEQOP .)
    MODOP           reduce using rule 284 (operator_name -> PLUSEQOP .)
    PLUSOP          reduce using rule 284 (operator_name -> PLUSEQOP .)
    MINUSOP         reduce using rule 284 (operator_name -> PLUSEQOP .)
    LSHIFT          reduce using rule 284 (operator_name -> PLUSEQOP .)
    RSHIFT          reduce using rule 284 (operator_name -> PLUSEQOP .)
    LTCOMP          reduce using rule 284 (operator_name -> PLUSEQOP .)
    GTCOMP          reduce using rule 284 (operator_name -> PLUSEQOP .)
    LTECOMP         reduce using rule 284 (operator_name -> PLUSEQOP .)
    GTECOMP         reduce using rule 284 (operator_name -> PLUSEQOP .)
    EQCOMP          reduce using rule 284 (operator_name -> PLUSEQOP .)
    NEQCOMP         reduce using rule 284 (operator_name -> PLUSEQOP .)
    BANDOP          reduce using rule 284 (operator_name -> PLUSEQOP .)
    XOROP           reduce using rule 284 (operator_name -> PLUSEQOP .)
    OROP            reduce using rule 284 (operator_name -> PLUSEQOP .)
    ANDOP           reduce using rule 284 (operator_name -> PLUSEQOP .)
    QUESMARK        reduce using rule 284 (operator_name -> PLUSEQOP .)
    RSPAREN         reduce using rule 284 (operator_name -> PLUSEQOP .)
    RTEMPLATE       reduce using rule 284 (operator_name -> PLUSEQOP .)
    RCPAREN         reduce using rule 284 (operator_name -> PLUSEQOP .)
    COLON           reduce using rule 284 (operator_name -> PLUSEQOP .)


state 107

    (285) operator_name -> MINUSEQOP .

    LPAREN          reduce using rule 285 (operator_name -> MINUSEQOP .)
    LSPAREN         reduce using rule 285 (operator_name -> MINUSEQOP .)
    EQUAL           reduce using rule 285 (operator_name -> MINUSEQOP .)
    LCPAREN         reduce using rule 285 (operator_name -> MINUSEQOP .)
    SEMICOLON       reduce using rule 285 (operator_name -> MINUSEQOP .)
    COMMA           reduce using rule 285 (operator_name -> MINUSEQOP .)
    RPAREN          reduce using rule 285 (operator_name -> MINUSEQOP .)
    DOT             reduce using rule 285 (operator_name -> MINUSEQOP .)
    ARROW           reduce using rule 285 (operator_name -> MINUSEQOP .)
    DPLUSOP         reduce using rule 285 (operator_name -> MINUSEQOP .)
    DMINUSOP        reduce using rule 285 (operator_name -> MINUSEQOP .)
    LTEMPLATE       reduce using rule 285 (operator_name -> MINUSEQOP .)
    MULTEQOP        reduce using rule 285 (operator_name -> MINUSEQOP .)
    DIVEQOP         reduce using rule 285 (operator_name -> MINUSEQOP .)
    MODEQOP         reduce using rule 285 (operator_name -> MINUSEQOP .)
    PLUSEQOP        reduce using rule 285 (operator_name -> MINUSEQOP .)
    MINUSEQOP       reduce using rule 285 (operator_name -> MINUSEQOP .)
    LSHIFTEQOP      reduce using rule 285 (operator_name -> MINUSEQOP .)
    RSHIFTEQOP      reduce using rule 285 (operator_name -> MINUSEQOP .)
    BANDEQOP        reduce using rule 285 (operator_name -> MINUSEQOP .)
    BOREQOP         reduce using rule 285 (operator_name -> MINUSEQOP .)
    DOTSTAR         reduce using rule 285 (operator_name -> MINUSEQOP .)
    ARROWSTAR       reduce using rule 285 (operator_name -> MINUSEQOP .)
    MULTOP          reduce using rule 285 (operator_name -> MINUSEQOP .)
    DIVOP           reduce using rule 285 (operator_name -> MINUSEQOP .)
    MODOP           reduce using rule 285 (operator_name -> MINUSEQOP .)
    PLUSOP          reduce using rule 285 (operator_name -> MINUSEQOP .)
    MINUSOP         reduce using rule 285 (operator_name -> MINUSEQOP .)
    LSHIFT          reduce using rule 285 (operator_name -> MINUSEQOP .)
    RSHIFT          reduce using rule 285 (operator_name -> MINUSEQOP .)
    LTCOMP          reduce using rule 285 (operator_name -> MINUSEQOP .)
    GTCOMP          reduce using rule 285 (operator_name -> MINUSEQOP .)
    LTECOMP         reduce using rule 285 (operator_name -> MINUSEQOP .)
    GTECOMP         reduce using rule 285 (operator_name -> MINUSEQOP .)
    EQCOMP          reduce using rule 285 (operator_name -> MINUSEQOP .)
    NEQCOMP         reduce using rule 285 (operator_name -> MINUSEQOP .)
    BANDOP          reduce using rule 285 (operator_name -> MINUSEQOP .)
    XOROP           reduce using rule 285 (operator_name -> MINUSEQOP .)
    OROP            reduce using rule 285 (operator_name -> MINUSEQOP .)
    ANDOP           reduce using rule 285 (operator_name -> MINUSEQOP .)
    QUESMARK        reduce using rule 285 (operator_name -> MINUSEQOP .)
    RSPAREN         reduce using rule 285 (operator_name -> MINUSEQOP .)
    RTEMPLATE       reduce using rule 285 (operator_name -> MINUSEQOP .)
    RCPAREN         reduce using rule 285 (operator_name -> MINUSEQOP .)
    COLON           reduce using rule 285 (operator_name -> MINUSEQOP .)


state 108

    (286) operator_name -> MULTEQOP .

    LPAREN          reduce using rule 286 (operator_name -> MULTEQOP .)
    LSPAREN         reduce using rule 286 (operator_name -> MULTEQOP .)
    EQUAL           reduce using rule 286 (operator_name -> MULTEQOP .)
    LCPAREN         reduce using rule 286 (operator_name -> MULTEQOP .)
    SEMICOLON       reduce using rule 286 (operator_name -> MULTEQOP .)
    COMMA           reduce using rule 286 (operator_name -> MULTEQOP .)
    RPAREN          reduce using rule 286 (operator_name -> MULTEQOP .)
    DOT             reduce using rule 286 (operator_name -> MULTEQOP .)
    ARROW           reduce using rule 286 (operator_name -> MULTEQOP .)
    DPLUSOP         reduce using rule 286 (operator_name -> MULTEQOP .)
    DMINUSOP        reduce using rule 286 (operator_name -> MULTEQOP .)
    LTEMPLATE       reduce using rule 286 (operator_name -> MULTEQOP .)
    MULTEQOP        reduce using rule 286 (operator_name -> MULTEQOP .)
    DIVEQOP         reduce using rule 286 (operator_name -> MULTEQOP .)
    MODEQOP         reduce using rule 286 (operator_name -> MULTEQOP .)
    PLUSEQOP        reduce using rule 286 (operator_name -> MULTEQOP .)
    MINUSEQOP       reduce using rule 286 (operator_name -> MULTEQOP .)
    LSHIFTEQOP      reduce using rule 286 (operator_name -> MULTEQOP .)
    RSHIFTEQOP      reduce using rule 286 (operator_name -> MULTEQOP .)
    BANDEQOP        reduce using rule 286 (operator_name -> MULTEQOP .)
    BOREQOP         reduce using rule 286 (operator_name -> MULTEQOP .)
    DOTSTAR         reduce using rule 286 (operator_name -> MULTEQOP .)
    ARROWSTAR       reduce using rule 286 (operator_name -> MULTEQOP .)
    MULTOP          reduce using rule 286 (operator_name -> MULTEQOP .)
    DIVOP           reduce using rule 286 (operator_name -> MULTEQOP .)
    MODOP           reduce using rule 286 (operator_name -> MULTEQOP .)
    PLUSOP          reduce using rule 286 (operator_name -> MULTEQOP .)
    MINUSOP         reduce using rule 286 (operator_name -> MULTEQOP .)
    LSHIFT          reduce using rule 286 (operator_name -> MULTEQOP .)
    RSHIFT          reduce using rule 286 (operator_name -> MULTEQOP .)
    LTCOMP          reduce using rule 286 (operator_name -> MULTEQOP .)
    GTCOMP          reduce using rule 286 (operator_name -> MULTEQOP .)
    LTECOMP         reduce using rule 286 (operator_name -> MULTEQOP .)
    GTECOMP         reduce using rule 286 (operator_name -> MULTEQOP .)
    EQCOMP          reduce using rule 286 (operator_name -> MULTEQOP .)
    NEQCOMP         reduce using rule 286 (operator_name -> MULTEQOP .)
    BANDOP          reduce using rule 286 (operator_name -> MULTEQOP .)
    XOROP           reduce using rule 286 (operator_name -> MULTEQOP .)
    OROP            reduce using rule 286 (operator_name -> MULTEQOP .)
    ANDOP           reduce using rule 286 (operator_name -> MULTEQOP .)
    QUESMARK        reduce using rule 286 (operator_name -> MULTEQOP .)
    RSPAREN         reduce using rule 286 (operator_name -> MULTEQOP .)
    RTEMPLATE       reduce using rule 286 (operator_name -> MULTEQOP .)
    RCPAREN         reduce using rule 286 (operator_name -> MULTEQOP .)
    COLON           reduce using rule 286 (operator_name -> MULTEQOP .)


state 109

    (287) operator_name -> DIVEQOP .

    LPAREN          reduce using rule 287 (operator_name -> DIVEQOP .)
    LSPAREN         reduce using rule 287 (operator_name -> DIVEQOP .)
    EQUAL           reduce using rule 287 (operator_name -> DIVEQOP .)
    LCPAREN         reduce using rule 287 (operator_name -> DIVEQOP .)
    SEMICOLON       reduce using rule 287 (operator_name -> DIVEQOP .)
    COMMA           reduce using rule 287 (operator_name -> DIVEQOP .)
    RPAREN          reduce using rule 287 (operator_name -> DIVEQOP .)
    DOT             reduce using rule 287 (operator_name -> DIVEQOP .)
    ARROW           reduce using rule 287 (operator_name -> DIVEQOP .)
    DPLUSOP         reduce using rule 287 (operator_name -> DIVEQOP .)
    DMINUSOP        reduce using rule 287 (operator_name -> DIVEQOP .)
    LTEMPLATE       reduce using rule 287 (operator_name -> DIVEQOP .)
    MULTEQOP        reduce using rule 287 (operator_name -> DIVEQOP .)
    DIVEQOP         reduce using rule 287 (operator_name -> DIVEQOP .)
    MODEQOP         reduce using rule 287 (operator_name -> DIVEQOP .)
    PLUSEQOP        reduce using rule 287 (operator_name -> DIVEQOP .)
    MINUSEQOP       reduce using rule 287 (operator_name -> DIVEQOP .)
    LSHIFTEQOP      reduce using rule 287 (operator_name -> DIVEQOP .)
    RSHIFTEQOP      reduce using rule 287 (operator_name -> DIVEQOP .)
    BANDEQOP        reduce using rule 287 (operator_name -> DIVEQOP .)
    BOREQOP         reduce using rule 287 (operator_name -> DIVEQOP .)
    DOTSTAR         reduce using rule 287 (operator_name -> DIVEQOP .)
    ARROWSTAR       reduce using rule 287 (operator_name -> DIVEQOP .)
    MULTOP          reduce using rule 287 (operator_name -> DIVEQOP .)
    DIVOP           reduce using rule 287 (operator_name -> DIVEQOP .)
    MODOP           reduce using rule 287 (operator_name -> DIVEQOP .)
    PLUSOP          reduce using rule 287 (operator_name -> DIVEQOP .)
    MINUSOP         reduce using rule 287 (operator_name -> DIVEQOP .)
    LSHIFT          reduce using rule 287 (operator_name -> DIVEQOP .)
    RSHIFT          reduce using rule 287 (operator_name -> DIVEQOP .)
    LTCOMP          reduce using rule 287 (operator_name -> DIVEQOP .)
    GTCOMP          reduce using rule 287 (operator_name -> DIVEQOP .)
    LTECOMP         reduce using rule 287 (operator_name -> DIVEQOP .)
    GTECOMP         reduce using rule 287 (operator_name -> DIVEQOP .)
    EQCOMP          reduce using rule 287 (operator_name -> DIVEQOP .)
    NEQCOMP         reduce using rule 287 (operator_name -> DIVEQOP .)
    BANDOP          reduce using rule 287 (operator_name -> DIVEQOP .)
    XOROP           reduce using rule 287 (operator_name -> DIVEQOP .)
    OROP            reduce using rule 287 (operator_name -> DIVEQOP .)
    ANDOP           reduce using rule 287 (operator_name -> DIVEQOP .)
    QUESMARK        reduce using rule 287 (operator_name -> DIVEQOP .)
    RSPAREN         reduce using rule 287 (operator_name -> DIVEQOP .)
    RTEMPLATE       reduce using rule 287 (operator_name -> DIVEQOP .)
    RCPAREN         reduce using rule 287 (operator_name -> DIVEQOP .)
    COLON           reduce using rule 287 (operator_name -> DIVEQOP .)


state 110

    (288) operator_name -> MODEQOP .

    LPAREN          reduce using rule 288 (operator_name -> MODEQOP .)
    LSPAREN         reduce using rule 288 (operator_name -> MODEQOP .)
    EQUAL           reduce using rule 288 (operator_name -> MODEQOP .)
    LCPAREN         reduce using rule 288 (operator_name -> MODEQOP .)
    SEMICOLON       reduce using rule 288 (operator_name -> MODEQOP .)
    COMMA           reduce using rule 288 (operator_name -> MODEQOP .)
    RPAREN          reduce using rule 288 (operator_name -> MODEQOP .)
    DOT             reduce using rule 288 (operator_name -> MODEQOP .)
    ARROW           reduce using rule 288 (operator_name -> MODEQOP .)
    DPLUSOP         reduce using rule 288 (operator_name -> MODEQOP .)
    DMINUSOP        reduce using rule 288 (operator_name -> MODEQOP .)
    LTEMPLATE       reduce using rule 288 (operator_name -> MODEQOP .)
    MULTEQOP        reduce using rule 288 (operator_name -> MODEQOP .)
    DIVEQOP         reduce using rule 288 (operator_name -> MODEQOP .)
    MODEQOP         reduce using rule 288 (operator_name -> MODEQOP .)
    PLUSEQOP        reduce using rule 288 (operator_name -> MODEQOP .)
    MINUSEQOP       reduce using rule 288 (operator_name -> MODEQOP .)
    LSHIFTEQOP      reduce using rule 288 (operator_name -> MODEQOP .)
    RSHIFTEQOP      reduce using rule 288 (operator_name -> MODEQOP .)
    BANDEQOP        reduce using rule 288 (operator_name -> MODEQOP .)
    BOREQOP         reduce using rule 288 (operator_name -> MODEQOP .)
    DOTSTAR         reduce using rule 288 (operator_name -> MODEQOP .)
    ARROWSTAR       reduce using rule 288 (operator_name -> MODEQOP .)
    MULTOP          reduce using rule 288 (operator_name -> MODEQOP .)
    DIVOP           reduce using rule 288 (operator_name -> MODEQOP .)
    MODOP           reduce using rule 288 (operator_name -> MODEQOP .)
    PLUSOP          reduce using rule 288 (operator_name -> MODEQOP .)
    MINUSOP         reduce using rule 288 (operator_name -> MODEQOP .)
    LSHIFT          reduce using rule 288 (operator_name -> MODEQOP .)
    RSHIFT          reduce using rule 288 (operator_name -> MODEQOP .)
    LTCOMP          reduce using rule 288 (operator_name -> MODEQOP .)
    GTCOMP          reduce using rule 288 (operator_name -> MODEQOP .)
    LTECOMP         reduce using rule 288 (operator_name -> MODEQOP .)
    GTECOMP         reduce using rule 288 (operator_name -> MODEQOP .)
    EQCOMP          reduce using rule 288 (operator_name -> MODEQOP .)
    NEQCOMP         reduce using rule 288 (operator_name -> MODEQOP .)
    BANDOP          reduce using rule 288 (operator_name -> MODEQOP .)
    XOROP           reduce using rule 288 (operator_name -> MODEQOP .)
    OROP            reduce using rule 288 (operator_name -> MODEQOP .)
    ANDOP           reduce using rule 288 (operator_name -> MODEQOP .)
    QUESMARK        reduce using rule 288 (operator_name -> MODEQOP .)
    RSPAREN         reduce using rule 288 (operator_name -> MODEQOP .)
    RTEMPLATE       reduce using rule 288 (operator_name -> MODEQOP .)
    RCPAREN         reduce using rule 288 (operator_name -> MODEQOP .)
    COLON           reduce using rule 288 (operator_name -> MODEQOP .)


state 111

    (289) operator_name -> XOREQOP .

    LPAREN          reduce using rule 289 (operator_name -> XOREQOP .)
    LSPAREN         reduce using rule 289 (operator_name -> XOREQOP .)
    EQUAL           reduce using rule 289 (operator_name -> XOREQOP .)
    LCPAREN         reduce using rule 289 (operator_name -> XOREQOP .)
    SEMICOLON       reduce using rule 289 (operator_name -> XOREQOP .)
    COMMA           reduce using rule 289 (operator_name -> XOREQOP .)
    RPAREN          reduce using rule 289 (operator_name -> XOREQOP .)
    DOT             reduce using rule 289 (operator_name -> XOREQOP .)
    ARROW           reduce using rule 289 (operator_name -> XOREQOP .)
    DPLUSOP         reduce using rule 289 (operator_name -> XOREQOP .)
    DMINUSOP        reduce using rule 289 (operator_name -> XOREQOP .)
    LTEMPLATE       reduce using rule 289 (operator_name -> XOREQOP .)
    MULTEQOP        reduce using rule 289 (operator_name -> XOREQOP .)
    DIVEQOP         reduce using rule 289 (operator_name -> XOREQOP .)
    MODEQOP         reduce using rule 289 (operator_name -> XOREQOP .)
    PLUSEQOP        reduce using rule 289 (operator_name -> XOREQOP .)
    MINUSEQOP       reduce using rule 289 (operator_name -> XOREQOP .)
    LSHIFTEQOP      reduce using rule 289 (operator_name -> XOREQOP .)
    RSHIFTEQOP      reduce using rule 289 (operator_name -> XOREQOP .)
    BANDEQOP        reduce using rule 289 (operator_name -> XOREQOP .)
    BOREQOP         reduce using rule 289 (operator_name -> XOREQOP .)
    DOTSTAR         reduce using rule 289 (operator_name -> XOREQOP .)
    ARROWSTAR       reduce using rule 289 (operator_name -> XOREQOP .)
    MULTOP          reduce using rule 289 (operator_name -> XOREQOP .)
    DIVOP           reduce using rule 289 (operator_name -> XOREQOP .)
    MODOP           reduce using rule 289 (operator_name -> XOREQOP .)
    PLUSOP          reduce using rule 289 (operator_name -> XOREQOP .)
    MINUSOP         reduce using rule 289 (operator_name -> XOREQOP .)
    LSHIFT          reduce using rule 289 (operator_name -> XOREQOP .)
    RSHIFT          reduce using rule 289 (operator_name -> XOREQOP .)
    LTCOMP          reduce using rule 289 (operator_name -> XOREQOP .)
    GTCOMP          reduce using rule 289 (operator_name -> XOREQOP .)
    LTECOMP         reduce using rule 289 (operator_name -> XOREQOP .)
    GTECOMP         reduce using rule 289 (operator_name -> XOREQOP .)
    EQCOMP          reduce using rule 289 (operator_name -> XOREQOP .)
    NEQCOMP         reduce using rule 289 (operator_name -> XOREQOP .)
    BANDOP          reduce using rule 289 (operator_name -> XOREQOP .)
    XOROP           reduce using rule 289 (operator_name -> XOREQOP .)
    OROP            reduce using rule 289 (operator_name -> XOREQOP .)
    ANDOP           reduce using rule 289 (operator_name -> XOREQOP .)
    QUESMARK        reduce using rule 289 (operator_name -> XOREQOP .)
    RSPAREN         reduce using rule 289 (operator_name -> XOREQOP .)
    RTEMPLATE       reduce using rule 289 (operator_name -> XOREQOP .)
    RCPAREN         reduce using rule 289 (operator_name -> XOREQOP .)
    COLON           reduce using rule 289 (operator_name -> XOREQOP .)


state 112

    (290) operator_name -> BANDEQOP .

    LPAREN          reduce using rule 290 (operator_name -> BANDEQOP .)
    LSPAREN         reduce using rule 290 (operator_name -> BANDEQOP .)
    EQUAL           reduce using rule 290 (operator_name -> BANDEQOP .)
    LCPAREN         reduce using rule 290 (operator_name -> BANDEQOP .)
    SEMICOLON       reduce using rule 290 (operator_name -> BANDEQOP .)
    COMMA           reduce using rule 290 (operator_name -> BANDEQOP .)
    RPAREN          reduce using rule 290 (operator_name -> BANDEQOP .)
    DOT             reduce using rule 290 (operator_name -> BANDEQOP .)
    ARROW           reduce using rule 290 (operator_name -> BANDEQOP .)
    DPLUSOP         reduce using rule 290 (operator_name -> BANDEQOP .)
    DMINUSOP        reduce using rule 290 (operator_name -> BANDEQOP .)
    LTEMPLATE       reduce using rule 290 (operator_name -> BANDEQOP .)
    MULTEQOP        reduce using rule 290 (operator_name -> BANDEQOP .)
    DIVEQOP         reduce using rule 290 (operator_name -> BANDEQOP .)
    MODEQOP         reduce using rule 290 (operator_name -> BANDEQOP .)
    PLUSEQOP        reduce using rule 290 (operator_name -> BANDEQOP .)
    MINUSEQOP       reduce using rule 290 (operator_name -> BANDEQOP .)
    LSHIFTEQOP      reduce using rule 290 (operator_name -> BANDEQOP .)
    RSHIFTEQOP      reduce using rule 290 (operator_name -> BANDEQOP .)
    BANDEQOP        reduce using rule 290 (operator_name -> BANDEQOP .)
    BOREQOP         reduce using rule 290 (operator_name -> BANDEQOP .)
    DOTSTAR         reduce using rule 290 (operator_name -> BANDEQOP .)
    ARROWSTAR       reduce using rule 290 (operator_name -> BANDEQOP .)
    MULTOP          reduce using rule 290 (operator_name -> BANDEQOP .)
    DIVOP           reduce using rule 290 (operator_name -> BANDEQOP .)
    MODOP           reduce using rule 290 (operator_name -> BANDEQOP .)
    PLUSOP          reduce using rule 290 (operator_name -> BANDEQOP .)
    MINUSOP         reduce using rule 290 (operator_name -> BANDEQOP .)
    LSHIFT          reduce using rule 290 (operator_name -> BANDEQOP .)
    RSHIFT          reduce using rule 290 (operator_name -> BANDEQOP .)
    LTCOMP          reduce using rule 290 (operator_name -> BANDEQOP .)
    GTCOMP          reduce using rule 290 (operator_name -> BANDEQOP .)
    LTECOMP         reduce using rule 290 (operator_name -> BANDEQOP .)
    GTECOMP         reduce using rule 290 (operator_name -> BANDEQOP .)
    EQCOMP          reduce using rule 290 (operator_name -> BANDEQOP .)
    NEQCOMP         reduce using rule 290 (operator_name -> BANDEQOP .)
    BANDOP          reduce using rule 290 (operator_name -> BANDEQOP .)
    XOROP           reduce using rule 290 (operator_name -> BANDEQOP .)
    OROP            reduce using rule 290 (operator_name -> BANDEQOP .)
    ANDOP           reduce using rule 290 (operator_name -> BANDEQOP .)
    QUESMARK        reduce using rule 290 (operator_name -> BANDEQOP .)
    RSPAREN         reduce using rule 290 (operator_name -> BANDEQOP .)
    RTEMPLATE       reduce using rule 290 (operator_name -> BANDEQOP .)
    RCPAREN         reduce using rule 290 (operator_name -> BANDEQOP .)
    COLON           reduce using rule 290 (operator_name -> BANDEQOP .)


state 113

    (291) operator_name -> LSHIFT .

    LPAREN          reduce using rule 291 (operator_name -> LSHIFT .)
    LSPAREN         reduce using rule 291 (operator_name -> LSHIFT .)
    EQUAL           reduce using rule 291 (operator_name -> LSHIFT .)
    LCPAREN         reduce using rule 291 (operator_name -> LSHIFT .)
    SEMICOLON       reduce using rule 291 (operator_name -> LSHIFT .)
    COMMA           reduce using rule 291 (operator_name -> LSHIFT .)
    RPAREN          reduce using rule 291 (operator_name -> LSHIFT .)
    DOT             reduce using rule 291 (operator_name -> LSHIFT .)
    ARROW           reduce using rule 291 (operator_name -> LSHIFT .)
    DPLUSOP         reduce using rule 291 (operator_name -> LSHIFT .)
    DMINUSOP        reduce using rule 291 (operator_name -> LSHIFT .)
    LTEMPLATE       reduce using rule 291 (operator_name -> LSHIFT .)
    MULTEQOP        reduce using rule 291 (operator_name -> LSHIFT .)
    DIVEQOP         reduce using rule 291 (operator_name -> LSHIFT .)
    MODEQOP         reduce using rule 291 (operator_name -> LSHIFT .)
    PLUSEQOP        reduce using rule 291 (operator_name -> LSHIFT .)
    MINUSEQOP       reduce using rule 291 (operator_name -> LSHIFT .)
    LSHIFTEQOP      reduce using rule 291 (operator_name -> LSHIFT .)
    RSHIFTEQOP      reduce using rule 291 (operator_name -> LSHIFT .)
    BANDEQOP        reduce using rule 291 (operator_name -> LSHIFT .)
    BOREQOP         reduce using rule 291 (operator_name -> LSHIFT .)
    DOTSTAR         reduce using rule 291 (operator_name -> LSHIFT .)
    ARROWSTAR       reduce using rule 291 (operator_name -> LSHIFT .)
    MULTOP          reduce using rule 291 (operator_name -> LSHIFT .)
    DIVOP           reduce using rule 291 (operator_name -> LSHIFT .)
    MODOP           reduce using rule 291 (operator_name -> LSHIFT .)
    PLUSOP          reduce using rule 291 (operator_name -> LSHIFT .)
    MINUSOP         reduce using rule 291 (operator_name -> LSHIFT .)
    LSHIFT          reduce using rule 291 (operator_name -> LSHIFT .)
    RSHIFT          reduce using rule 291 (operator_name -> LSHIFT .)
    LTCOMP          reduce using rule 291 (operator_name -> LSHIFT .)
    GTCOMP          reduce using rule 291 (operator_name -> LSHIFT .)
    LTECOMP         reduce using rule 291 (operator_name -> LSHIFT .)
    GTECOMP         reduce using rule 291 (operator_name -> LSHIFT .)
    EQCOMP          reduce using rule 291 (operator_name -> LSHIFT .)
    NEQCOMP         reduce using rule 291 (operator_name -> LSHIFT .)
    BANDOP          reduce using rule 291 (operator_name -> LSHIFT .)
    XOROP           reduce using rule 291 (operator_name -> LSHIFT .)
    OROP            reduce using rule 291 (operator_name -> LSHIFT .)
    ANDOP           reduce using rule 291 (operator_name -> LSHIFT .)
    QUESMARK        reduce using rule 291 (operator_name -> LSHIFT .)
    RSPAREN         reduce using rule 291 (operator_name -> LSHIFT .)
    RTEMPLATE       reduce using rule 291 (operator_name -> LSHIFT .)
    RCPAREN         reduce using rule 291 (operator_name -> LSHIFT .)
    COLON           reduce using rule 291 (operator_name -> LSHIFT .)


state 114

    (292) operator_name -> RSHIFT .

    LPAREN          reduce using rule 292 (operator_name -> RSHIFT .)
    LSPAREN         reduce using rule 292 (operator_name -> RSHIFT .)
    EQUAL           reduce using rule 292 (operator_name -> RSHIFT .)
    LCPAREN         reduce using rule 292 (operator_name -> RSHIFT .)
    SEMICOLON       reduce using rule 292 (operator_name -> RSHIFT .)
    COMMA           reduce using rule 292 (operator_name -> RSHIFT .)
    RPAREN          reduce using rule 292 (operator_name -> RSHIFT .)
    DOT             reduce using rule 292 (operator_name -> RSHIFT .)
    ARROW           reduce using rule 292 (operator_name -> RSHIFT .)
    DPLUSOP         reduce using rule 292 (operator_name -> RSHIFT .)
    DMINUSOP        reduce using rule 292 (operator_name -> RSHIFT .)
    LTEMPLATE       reduce using rule 292 (operator_name -> RSHIFT .)
    MULTEQOP        reduce using rule 292 (operator_name -> RSHIFT .)
    DIVEQOP         reduce using rule 292 (operator_name -> RSHIFT .)
    MODEQOP         reduce using rule 292 (operator_name -> RSHIFT .)
    PLUSEQOP        reduce using rule 292 (operator_name -> RSHIFT .)
    MINUSEQOP       reduce using rule 292 (operator_name -> RSHIFT .)
    LSHIFTEQOP      reduce using rule 292 (operator_name -> RSHIFT .)
    RSHIFTEQOP      reduce using rule 292 (operator_name -> RSHIFT .)
    BANDEQOP        reduce using rule 292 (operator_name -> RSHIFT .)
    BOREQOP         reduce using rule 292 (operator_name -> RSHIFT .)
    DOTSTAR         reduce using rule 292 (operator_name -> RSHIFT .)
    ARROWSTAR       reduce using rule 292 (operator_name -> RSHIFT .)
    MULTOP          reduce using rule 292 (operator_name -> RSHIFT .)
    DIVOP           reduce using rule 292 (operator_name -> RSHIFT .)
    MODOP           reduce using rule 292 (operator_name -> RSHIFT .)
    PLUSOP          reduce using rule 292 (operator_name -> RSHIFT .)
    MINUSOP         reduce using rule 292 (operator_name -> RSHIFT .)
    LSHIFT          reduce using rule 292 (operator_name -> RSHIFT .)
    RSHIFT          reduce using rule 292 (operator_name -> RSHIFT .)
    LTCOMP          reduce using rule 292 (operator_name -> RSHIFT .)
    GTCOMP          reduce using rule 292 (operator_name -> RSHIFT .)
    LTECOMP         reduce using rule 292 (operator_name -> RSHIFT .)
    GTECOMP         reduce using rule 292 (operator_name -> RSHIFT .)
    EQCOMP          reduce using rule 292 (operator_name -> RSHIFT .)
    NEQCOMP         reduce using rule 292 (operator_name -> RSHIFT .)
    BANDOP          reduce using rule 292 (operator_name -> RSHIFT .)
    XOROP           reduce using rule 292 (operator_name -> RSHIFT .)
    OROP            reduce using rule 292 (operator_name -> RSHIFT .)
    ANDOP           reduce using rule 292 (operator_name -> RSHIFT .)
    QUESMARK        reduce using rule 292 (operator_name -> RSHIFT .)
    RSPAREN         reduce using rule 292 (operator_name -> RSHIFT .)
    RTEMPLATE       reduce using rule 292 (operator_name -> RSHIFT .)
    RCPAREN         reduce using rule 292 (operator_name -> RSHIFT .)
    COLON           reduce using rule 292 (operator_name -> RSHIFT .)


state 115

    (293) operator_name -> RSHIFTEQOP .

    LPAREN          reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    LSPAREN         reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    EQUAL           reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    LCPAREN         reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    SEMICOLON       reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    COMMA           reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    RPAREN          reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    DOT             reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    ARROW           reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    DPLUSOP         reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    DMINUSOP        reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    LTEMPLATE       reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    MULTEQOP        reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    DIVEQOP         reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    MODEQOP         reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    PLUSEQOP        reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    MINUSEQOP       reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    LSHIFTEQOP      reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    RSHIFTEQOP      reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    BANDEQOP        reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    BOREQOP         reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    DOTSTAR         reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    ARROWSTAR       reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    MULTOP          reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    DIVOP           reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    MODOP           reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    PLUSOP          reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    MINUSOP         reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    LSHIFT          reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    RSHIFT          reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    LTCOMP          reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    GTCOMP          reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    LTECOMP         reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    GTECOMP         reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    EQCOMP          reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    NEQCOMP         reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    BANDOP          reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    XOROP           reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    OROP            reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    ANDOP           reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    QUESMARK        reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    RSPAREN         reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    RTEMPLATE       reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    RCPAREN         reduce using rule 293 (operator_name -> RSHIFTEQOP .)
    COLON           reduce using rule 293 (operator_name -> RSHIFTEQOP .)


state 116

    (294) operator_name -> LSHIFTEQOP .

    LPAREN          reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    LSPAREN         reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    EQUAL           reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    LCPAREN         reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    SEMICOLON       reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    COMMA           reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    RPAREN          reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    DOT             reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    ARROW           reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    DPLUSOP         reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    DMINUSOP        reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    LTEMPLATE       reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    MULTEQOP        reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    DIVEQOP         reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    MODEQOP         reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    PLUSEQOP        reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    MINUSEQOP       reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    LSHIFTEQOP      reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    RSHIFTEQOP      reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    BANDEQOP        reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    BOREQOP         reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    DOTSTAR         reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    ARROWSTAR       reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    MULTOP          reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    DIVOP           reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    MODOP           reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    PLUSOP          reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    MINUSOP         reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    LSHIFT          reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    RSHIFT          reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    LTCOMP          reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    GTCOMP          reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    LTECOMP         reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    GTECOMP         reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    EQCOMP          reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    NEQCOMP         reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    BANDOP          reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    XOROP           reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    OROP            reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    ANDOP           reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    QUESMARK        reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    RSPAREN         reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    RTEMPLATE       reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    RCPAREN         reduce using rule 294 (operator_name -> LSHIFTEQOP .)
    COLON           reduce using rule 294 (operator_name -> LSHIFTEQOP .)


state 117

    (295) operator_name -> EQCOMP .

    LPAREN          reduce using rule 295 (operator_name -> EQCOMP .)
    LSPAREN         reduce using rule 295 (operator_name -> EQCOMP .)
    EQUAL           reduce using rule 295 (operator_name -> EQCOMP .)
    LCPAREN         reduce using rule 295 (operator_name -> EQCOMP .)
    SEMICOLON       reduce using rule 295 (operator_name -> EQCOMP .)
    COMMA           reduce using rule 295 (operator_name -> EQCOMP .)
    RPAREN          reduce using rule 295 (operator_name -> EQCOMP .)
    DOT             reduce using rule 295 (operator_name -> EQCOMP .)
    ARROW           reduce using rule 295 (operator_name -> EQCOMP .)
    DPLUSOP         reduce using rule 295 (operator_name -> EQCOMP .)
    DMINUSOP        reduce using rule 295 (operator_name -> EQCOMP .)
    LTEMPLATE       reduce using rule 295 (operator_name -> EQCOMP .)
    MULTEQOP        reduce using rule 295 (operator_name -> EQCOMP .)
    DIVEQOP         reduce using rule 295 (operator_name -> EQCOMP .)
    MODEQOP         reduce using rule 295 (operator_name -> EQCOMP .)
    PLUSEQOP        reduce using rule 295 (operator_name -> EQCOMP .)
    MINUSEQOP       reduce using rule 295 (operator_name -> EQCOMP .)
    LSHIFTEQOP      reduce using rule 295 (operator_name -> EQCOMP .)
    RSHIFTEQOP      reduce using rule 295 (operator_name -> EQCOMP .)
    BANDEQOP        reduce using rule 295 (operator_name -> EQCOMP .)
    BOREQOP         reduce using rule 295 (operator_name -> EQCOMP .)
    DOTSTAR         reduce using rule 295 (operator_name -> EQCOMP .)
    ARROWSTAR       reduce using rule 295 (operator_name -> EQCOMP .)
    MULTOP          reduce using rule 295 (operator_name -> EQCOMP .)
    DIVOP           reduce using rule 295 (operator_name -> EQCOMP .)
    MODOP           reduce using rule 295 (operator_name -> EQCOMP .)
    PLUSOP          reduce using rule 295 (operator_name -> EQCOMP .)
    MINUSOP         reduce using rule 295 (operator_name -> EQCOMP .)
    LSHIFT          reduce using rule 295 (operator_name -> EQCOMP .)
    RSHIFT          reduce using rule 295 (operator_name -> EQCOMP .)
    LTCOMP          reduce using rule 295 (operator_name -> EQCOMP .)
    GTCOMP          reduce using rule 295 (operator_name -> EQCOMP .)
    LTECOMP         reduce using rule 295 (operator_name -> EQCOMP .)
    GTECOMP         reduce using rule 295 (operator_name -> EQCOMP .)
    EQCOMP          reduce using rule 295 (operator_name -> EQCOMP .)
    NEQCOMP         reduce using rule 295 (operator_name -> EQCOMP .)
    BANDOP          reduce using rule 295 (operator_name -> EQCOMP .)
    XOROP           reduce using rule 295 (operator_name -> EQCOMP .)
    OROP            reduce using rule 295 (operator_name -> EQCOMP .)
    ANDOP           reduce using rule 295 (operator_name -> EQCOMP .)
    QUESMARK        reduce using rule 295 (operator_name -> EQCOMP .)
    RSPAREN         reduce using rule 295 (operator_name -> EQCOMP .)
    RTEMPLATE       reduce using rule 295 (operator_name -> EQCOMP .)
    RCPAREN         reduce using rule 295 (operator_name -> EQCOMP .)
    COLON           reduce using rule 295 (operator_name -> EQCOMP .)


state 118

    (296) operator_name -> NEQCOMP .

    LPAREN          reduce using rule 296 (operator_name -> NEQCOMP .)
    LSPAREN         reduce using rule 296 (operator_name -> NEQCOMP .)
    EQUAL           reduce using rule 296 (operator_name -> NEQCOMP .)
    LCPAREN         reduce using rule 296 (operator_name -> NEQCOMP .)
    SEMICOLON       reduce using rule 296 (operator_name -> NEQCOMP .)
    COMMA           reduce using rule 296 (operator_name -> NEQCOMP .)
    RPAREN          reduce using rule 296 (operator_name -> NEQCOMP .)
    DOT             reduce using rule 296 (operator_name -> NEQCOMP .)
    ARROW           reduce using rule 296 (operator_name -> NEQCOMP .)
    DPLUSOP         reduce using rule 296 (operator_name -> NEQCOMP .)
    DMINUSOP        reduce using rule 296 (operator_name -> NEQCOMP .)
    LTEMPLATE       reduce using rule 296 (operator_name -> NEQCOMP .)
    MULTEQOP        reduce using rule 296 (operator_name -> NEQCOMP .)
    DIVEQOP         reduce using rule 296 (operator_name -> NEQCOMP .)
    MODEQOP         reduce using rule 296 (operator_name -> NEQCOMP .)
    PLUSEQOP        reduce using rule 296 (operator_name -> NEQCOMP .)
    MINUSEQOP       reduce using rule 296 (operator_name -> NEQCOMP .)
    LSHIFTEQOP      reduce using rule 296 (operator_name -> NEQCOMP .)
    RSHIFTEQOP      reduce using rule 296 (operator_name -> NEQCOMP .)
    BANDEQOP        reduce using rule 296 (operator_name -> NEQCOMP .)
    BOREQOP         reduce using rule 296 (operator_name -> NEQCOMP .)
    DOTSTAR         reduce using rule 296 (operator_name -> NEQCOMP .)
    ARROWSTAR       reduce using rule 296 (operator_name -> NEQCOMP .)
    MULTOP          reduce using rule 296 (operator_name -> NEQCOMP .)
    DIVOP           reduce using rule 296 (operator_name -> NEQCOMP .)
    MODOP           reduce using rule 296 (operator_name -> NEQCOMP .)
    PLUSOP          reduce using rule 296 (operator_name -> NEQCOMP .)
    MINUSOP         reduce using rule 296 (operator_name -> NEQCOMP .)
    LSHIFT          reduce using rule 296 (operator_name -> NEQCOMP .)
    RSHIFT          reduce using rule 296 (operator_name -> NEQCOMP .)
    LTCOMP          reduce using rule 296 (operator_name -> NEQCOMP .)
    GTCOMP          reduce using rule 296 (operator_name -> NEQCOMP .)
    LTECOMP         reduce using rule 296 (operator_name -> NEQCOMP .)
    GTECOMP         reduce using rule 296 (operator_name -> NEQCOMP .)
    EQCOMP          reduce using rule 296 (operator_name -> NEQCOMP .)
    NEQCOMP         reduce using rule 296 (operator_name -> NEQCOMP .)
    BANDOP          reduce using rule 296 (operator_name -> NEQCOMP .)
    XOROP           reduce using rule 296 (operator_name -> NEQCOMP .)
    OROP            reduce using rule 296 (operator_name -> NEQCOMP .)
    ANDOP           reduce using rule 296 (operator_name -> NEQCOMP .)
    QUESMARK        reduce using rule 296 (operator_name -> NEQCOMP .)
    RSPAREN         reduce using rule 296 (operator_name -> NEQCOMP .)
    RTEMPLATE       reduce using rule 296 (operator_name -> NEQCOMP .)
    RCPAREN         reduce using rule 296 (operator_name -> NEQCOMP .)
    COLON           reduce using rule 296 (operator_name -> NEQCOMP .)


state 119

    (297) operator_name -> LTECOMP .

    LPAREN          reduce using rule 297 (operator_name -> LTECOMP .)
    LSPAREN         reduce using rule 297 (operator_name -> LTECOMP .)
    EQUAL           reduce using rule 297 (operator_name -> LTECOMP .)
    LCPAREN         reduce using rule 297 (operator_name -> LTECOMP .)
    SEMICOLON       reduce using rule 297 (operator_name -> LTECOMP .)
    COMMA           reduce using rule 297 (operator_name -> LTECOMP .)
    RPAREN          reduce using rule 297 (operator_name -> LTECOMP .)
    DOT             reduce using rule 297 (operator_name -> LTECOMP .)
    ARROW           reduce using rule 297 (operator_name -> LTECOMP .)
    DPLUSOP         reduce using rule 297 (operator_name -> LTECOMP .)
    DMINUSOP        reduce using rule 297 (operator_name -> LTECOMP .)
    LTEMPLATE       reduce using rule 297 (operator_name -> LTECOMP .)
    MULTEQOP        reduce using rule 297 (operator_name -> LTECOMP .)
    DIVEQOP         reduce using rule 297 (operator_name -> LTECOMP .)
    MODEQOP         reduce using rule 297 (operator_name -> LTECOMP .)
    PLUSEQOP        reduce using rule 297 (operator_name -> LTECOMP .)
    MINUSEQOP       reduce using rule 297 (operator_name -> LTECOMP .)
    LSHIFTEQOP      reduce using rule 297 (operator_name -> LTECOMP .)
    RSHIFTEQOP      reduce using rule 297 (operator_name -> LTECOMP .)
    BANDEQOP        reduce using rule 297 (operator_name -> LTECOMP .)
    BOREQOP         reduce using rule 297 (operator_name -> LTECOMP .)
    DOTSTAR         reduce using rule 297 (operator_name -> LTECOMP .)
    ARROWSTAR       reduce using rule 297 (operator_name -> LTECOMP .)
    MULTOP          reduce using rule 297 (operator_name -> LTECOMP .)
    DIVOP           reduce using rule 297 (operator_name -> LTECOMP .)
    MODOP           reduce using rule 297 (operator_name -> LTECOMP .)
    PLUSOP          reduce using rule 297 (operator_name -> LTECOMP .)
    MINUSOP         reduce using rule 297 (operator_name -> LTECOMP .)
    LSHIFT          reduce using rule 297 (operator_name -> LTECOMP .)
    RSHIFT          reduce using rule 297 (operator_name -> LTECOMP .)
    LTCOMP          reduce using rule 297 (operator_name -> LTECOMP .)
    GTCOMP          reduce using rule 297 (operator_name -> LTECOMP .)
    LTECOMP         reduce using rule 297 (operator_name -> LTECOMP .)
    GTECOMP         reduce using rule 297 (operator_name -> LTECOMP .)
    EQCOMP          reduce using rule 297 (operator_name -> LTECOMP .)
    NEQCOMP         reduce using rule 297 (operator_name -> LTECOMP .)
    BANDOP          reduce using rule 297 (operator_name -> LTECOMP .)
    XOROP           reduce using rule 297 (operator_name -> LTECOMP .)
    OROP            reduce using rule 297 (operator_name -> LTECOMP .)
    ANDOP           reduce using rule 297 (operator_name -> LTECOMP .)
    QUESMARK        reduce using rule 297 (operator_name -> LTECOMP .)
    RSPAREN         reduce using rule 297 (operator_name -> LTECOMP .)
    RTEMPLATE       reduce using rule 297 (operator_name -> LTECOMP .)
    RCPAREN         reduce using rule 297 (operator_name -> LTECOMP .)
    COLON           reduce using rule 297 (operator_name -> LTECOMP .)


state 120

    (298) operator_name -> GTECOMP .

    LPAREN          reduce using rule 298 (operator_name -> GTECOMP .)
    LSPAREN         reduce using rule 298 (operator_name -> GTECOMP .)
    EQUAL           reduce using rule 298 (operator_name -> GTECOMP .)
    LCPAREN         reduce using rule 298 (operator_name -> GTECOMP .)
    SEMICOLON       reduce using rule 298 (operator_name -> GTECOMP .)
    COMMA           reduce using rule 298 (operator_name -> GTECOMP .)
    RPAREN          reduce using rule 298 (operator_name -> GTECOMP .)
    DOT             reduce using rule 298 (operator_name -> GTECOMP .)
    ARROW           reduce using rule 298 (operator_name -> GTECOMP .)
    DPLUSOP         reduce using rule 298 (operator_name -> GTECOMP .)
    DMINUSOP        reduce using rule 298 (operator_name -> GTECOMP .)
    LTEMPLATE       reduce using rule 298 (operator_name -> GTECOMP .)
    MULTEQOP        reduce using rule 298 (operator_name -> GTECOMP .)
    DIVEQOP         reduce using rule 298 (operator_name -> GTECOMP .)
    MODEQOP         reduce using rule 298 (operator_name -> GTECOMP .)
    PLUSEQOP        reduce using rule 298 (operator_name -> GTECOMP .)
    MINUSEQOP       reduce using rule 298 (operator_name -> GTECOMP .)
    LSHIFTEQOP      reduce using rule 298 (operator_name -> GTECOMP .)
    RSHIFTEQOP      reduce using rule 298 (operator_name -> GTECOMP .)
    BANDEQOP        reduce using rule 298 (operator_name -> GTECOMP .)
    BOREQOP         reduce using rule 298 (operator_name -> GTECOMP .)
    DOTSTAR         reduce using rule 298 (operator_name -> GTECOMP .)
    ARROWSTAR       reduce using rule 298 (operator_name -> GTECOMP .)
    MULTOP          reduce using rule 298 (operator_name -> GTECOMP .)
    DIVOP           reduce using rule 298 (operator_name -> GTECOMP .)
    MODOP           reduce using rule 298 (operator_name -> GTECOMP .)
    PLUSOP          reduce using rule 298 (operator_name -> GTECOMP .)
    MINUSOP         reduce using rule 298 (operator_name -> GTECOMP .)
    LSHIFT          reduce using rule 298 (operator_name -> GTECOMP .)
    RSHIFT          reduce using rule 298 (operator_name -> GTECOMP .)
    LTCOMP          reduce using rule 298 (operator_name -> GTECOMP .)
    GTCOMP          reduce using rule 298 (operator_name -> GTECOMP .)
    LTECOMP         reduce using rule 298 (operator_name -> GTECOMP .)
    GTECOMP         reduce using rule 298 (operator_name -> GTECOMP .)
    EQCOMP          reduce using rule 298 (operator_name -> GTECOMP .)
    NEQCOMP         reduce using rule 298 (operator_name -> GTECOMP .)
    BANDOP          reduce using rule 298 (operator_name -> GTECOMP .)
    XOROP           reduce using rule 298 (operator_name -> GTECOMP .)
    OROP            reduce using rule 298 (operator_name -> GTECOMP .)
    ANDOP           reduce using rule 298 (operator_name -> GTECOMP .)
    QUESMARK        reduce using rule 298 (operator_name -> GTECOMP .)
    RSPAREN         reduce using rule 298 (operator_name -> GTECOMP .)
    RTEMPLATE       reduce using rule 298 (operator_name -> GTECOMP .)
    RCPAREN         reduce using rule 298 (operator_name -> GTECOMP .)
    COLON           reduce using rule 298 (operator_name -> GTECOMP .)


state 121

    (299) operator_name -> ANDOP .

    LPAREN          reduce using rule 299 (operator_name -> ANDOP .)
    LSPAREN         reduce using rule 299 (operator_name -> ANDOP .)
    EQUAL           reduce using rule 299 (operator_name -> ANDOP .)
    LCPAREN         reduce using rule 299 (operator_name -> ANDOP .)
    SEMICOLON       reduce using rule 299 (operator_name -> ANDOP .)
    COMMA           reduce using rule 299 (operator_name -> ANDOP .)
    RPAREN          reduce using rule 299 (operator_name -> ANDOP .)
    DOT             reduce using rule 299 (operator_name -> ANDOP .)
    ARROW           reduce using rule 299 (operator_name -> ANDOP .)
    DPLUSOP         reduce using rule 299 (operator_name -> ANDOP .)
    DMINUSOP        reduce using rule 299 (operator_name -> ANDOP .)
    LTEMPLATE       reduce using rule 299 (operator_name -> ANDOP .)
    MULTEQOP        reduce using rule 299 (operator_name -> ANDOP .)
    DIVEQOP         reduce using rule 299 (operator_name -> ANDOP .)
    MODEQOP         reduce using rule 299 (operator_name -> ANDOP .)
    PLUSEQOP        reduce using rule 299 (operator_name -> ANDOP .)
    MINUSEQOP       reduce using rule 299 (operator_name -> ANDOP .)
    LSHIFTEQOP      reduce using rule 299 (operator_name -> ANDOP .)
    RSHIFTEQOP      reduce using rule 299 (operator_name -> ANDOP .)
    BANDEQOP        reduce using rule 299 (operator_name -> ANDOP .)
    BOREQOP         reduce using rule 299 (operator_name -> ANDOP .)
    DOTSTAR         reduce using rule 299 (operator_name -> ANDOP .)
    ARROWSTAR       reduce using rule 299 (operator_name -> ANDOP .)
    MULTOP          reduce using rule 299 (operator_name -> ANDOP .)
    DIVOP           reduce using rule 299 (operator_name -> ANDOP .)
    MODOP           reduce using rule 299 (operator_name -> ANDOP .)
    PLUSOP          reduce using rule 299 (operator_name -> ANDOP .)
    MINUSOP         reduce using rule 299 (operator_name -> ANDOP .)
    LSHIFT          reduce using rule 299 (operator_name -> ANDOP .)
    RSHIFT          reduce using rule 299 (operator_name -> ANDOP .)
    LTCOMP          reduce using rule 299 (operator_name -> ANDOP .)
    GTCOMP          reduce using rule 299 (operator_name -> ANDOP .)
    LTECOMP         reduce using rule 299 (operator_name -> ANDOP .)
    GTECOMP         reduce using rule 299 (operator_name -> ANDOP .)
    EQCOMP          reduce using rule 299 (operator_name -> ANDOP .)
    NEQCOMP         reduce using rule 299 (operator_name -> ANDOP .)
    BANDOP          reduce using rule 299 (operator_name -> ANDOP .)
    XOROP           reduce using rule 299 (operator_name -> ANDOP .)
    OROP            reduce using rule 299 (operator_name -> ANDOP .)
    ANDOP           reduce using rule 299 (operator_name -> ANDOP .)
    QUESMARK        reduce using rule 299 (operator_name -> ANDOP .)
    RSPAREN         reduce using rule 299 (operator_name -> ANDOP .)
    RTEMPLATE       reduce using rule 299 (operator_name -> ANDOP .)
    RCPAREN         reduce using rule 299 (operator_name -> ANDOP .)
    COLON           reduce using rule 299 (operator_name -> ANDOP .)


state 122

    (300) operator_name -> OROP .

    LPAREN          reduce using rule 300 (operator_name -> OROP .)
    LSPAREN         reduce using rule 300 (operator_name -> OROP .)
    EQUAL           reduce using rule 300 (operator_name -> OROP .)
    LCPAREN         reduce using rule 300 (operator_name -> OROP .)
    SEMICOLON       reduce using rule 300 (operator_name -> OROP .)
    COMMA           reduce using rule 300 (operator_name -> OROP .)
    RPAREN          reduce using rule 300 (operator_name -> OROP .)
    DOT             reduce using rule 300 (operator_name -> OROP .)
    ARROW           reduce using rule 300 (operator_name -> OROP .)
    DPLUSOP         reduce using rule 300 (operator_name -> OROP .)
    DMINUSOP        reduce using rule 300 (operator_name -> OROP .)
    LTEMPLATE       reduce using rule 300 (operator_name -> OROP .)
    MULTEQOP        reduce using rule 300 (operator_name -> OROP .)
    DIVEQOP         reduce using rule 300 (operator_name -> OROP .)
    MODEQOP         reduce using rule 300 (operator_name -> OROP .)
    PLUSEQOP        reduce using rule 300 (operator_name -> OROP .)
    MINUSEQOP       reduce using rule 300 (operator_name -> OROP .)
    LSHIFTEQOP      reduce using rule 300 (operator_name -> OROP .)
    RSHIFTEQOP      reduce using rule 300 (operator_name -> OROP .)
    BANDEQOP        reduce using rule 300 (operator_name -> OROP .)
    BOREQOP         reduce using rule 300 (operator_name -> OROP .)
    DOTSTAR         reduce using rule 300 (operator_name -> OROP .)
    ARROWSTAR       reduce using rule 300 (operator_name -> OROP .)
    MULTOP          reduce using rule 300 (operator_name -> OROP .)
    DIVOP           reduce using rule 300 (operator_name -> OROP .)
    MODOP           reduce using rule 300 (operator_name -> OROP .)
    PLUSOP          reduce using rule 300 (operator_name -> OROP .)
    MINUSOP         reduce using rule 300 (operator_name -> OROP .)
    LSHIFT          reduce using rule 300 (operator_name -> OROP .)
    RSHIFT          reduce using rule 300 (operator_name -> OROP .)
    LTCOMP          reduce using rule 300 (operator_name -> OROP .)
    GTCOMP          reduce using rule 300 (operator_name -> OROP .)
    LTECOMP         reduce using rule 300 (operator_name -> OROP .)
    GTECOMP         reduce using rule 300 (operator_name -> OROP .)
    EQCOMP          reduce using rule 300 (operator_name -> OROP .)
    NEQCOMP         reduce using rule 300 (operator_name -> OROP .)
    BANDOP          reduce using rule 300 (operator_name -> OROP .)
    XOROP           reduce using rule 300 (operator_name -> OROP .)
    OROP            reduce using rule 300 (operator_name -> OROP .)
    ANDOP           reduce using rule 300 (operator_name -> OROP .)
    QUESMARK        reduce using rule 300 (operator_name -> OROP .)
    RSPAREN         reduce using rule 300 (operator_name -> OROP .)
    RTEMPLATE       reduce using rule 300 (operator_name -> OROP .)
    RCPAREN         reduce using rule 300 (operator_name -> OROP .)
    COLON           reduce using rule 300 (operator_name -> OROP .)


state 123

    (301) operator_name -> DPLUSOP .

    LPAREN          reduce using rule 301 (operator_name -> DPLUSOP .)
    LSPAREN         reduce using rule 301 (operator_name -> DPLUSOP .)
    EQUAL           reduce using rule 301 (operator_name -> DPLUSOP .)
    LCPAREN         reduce using rule 301 (operator_name -> DPLUSOP .)
    SEMICOLON       reduce using rule 301 (operator_name -> DPLUSOP .)
    COMMA           reduce using rule 301 (operator_name -> DPLUSOP .)
    RPAREN          reduce using rule 301 (operator_name -> DPLUSOP .)
    DOT             reduce using rule 301 (operator_name -> DPLUSOP .)
    ARROW           reduce using rule 301 (operator_name -> DPLUSOP .)
    DPLUSOP         reduce using rule 301 (operator_name -> DPLUSOP .)
    DMINUSOP        reduce using rule 301 (operator_name -> DPLUSOP .)
    LTEMPLATE       reduce using rule 301 (operator_name -> DPLUSOP .)
    MULTEQOP        reduce using rule 301 (operator_name -> DPLUSOP .)
    DIVEQOP         reduce using rule 301 (operator_name -> DPLUSOP .)
    MODEQOP         reduce using rule 301 (operator_name -> DPLUSOP .)
    PLUSEQOP        reduce using rule 301 (operator_name -> DPLUSOP .)
    MINUSEQOP       reduce using rule 301 (operator_name -> DPLUSOP .)
    LSHIFTEQOP      reduce using rule 301 (operator_name -> DPLUSOP .)
    RSHIFTEQOP      reduce using rule 301 (operator_name -> DPLUSOP .)
    BANDEQOP        reduce using rule 301 (operator_name -> DPLUSOP .)
    BOREQOP         reduce using rule 301 (operator_name -> DPLUSOP .)
    DOTSTAR         reduce using rule 301 (operator_name -> DPLUSOP .)
    ARROWSTAR       reduce using rule 301 (operator_name -> DPLUSOP .)
    MULTOP          reduce using rule 301 (operator_name -> DPLUSOP .)
    DIVOP           reduce using rule 301 (operator_name -> DPLUSOP .)
    MODOP           reduce using rule 301 (operator_name -> DPLUSOP .)
    PLUSOP          reduce using rule 301 (operator_name -> DPLUSOP .)
    MINUSOP         reduce using rule 301 (operator_name -> DPLUSOP .)
    LSHIFT          reduce using rule 301 (operator_name -> DPLUSOP .)
    RSHIFT          reduce using rule 301 (operator_name -> DPLUSOP .)
    LTCOMP          reduce using rule 301 (operator_name -> DPLUSOP .)
    GTCOMP          reduce using rule 301 (operator_name -> DPLUSOP .)
    LTECOMP         reduce using rule 301 (operator_name -> DPLUSOP .)
    GTECOMP         reduce using rule 301 (operator_name -> DPLUSOP .)
    EQCOMP          reduce using rule 301 (operator_name -> DPLUSOP .)
    NEQCOMP         reduce using rule 301 (operator_name -> DPLUSOP .)
    BANDOP          reduce using rule 301 (operator_name -> DPLUSOP .)
    XOROP           reduce using rule 301 (operator_name -> DPLUSOP .)
    OROP            reduce using rule 301 (operator_name -> DPLUSOP .)
    ANDOP           reduce using rule 301 (operator_name -> DPLUSOP .)
    QUESMARK        reduce using rule 301 (operator_name -> DPLUSOP .)
    RSPAREN         reduce using rule 301 (operator_name -> DPLUSOP .)
    RTEMPLATE       reduce using rule 301 (operator_name -> DPLUSOP .)
    RCPAREN         reduce using rule 301 (operator_name -> DPLUSOP .)
    COLON           reduce using rule 301 (operator_name -> DPLUSOP .)


state 124

    (302) operator_name -> DMINUSOP .

    LPAREN          reduce using rule 302 (operator_name -> DMINUSOP .)
    LSPAREN         reduce using rule 302 (operator_name -> DMINUSOP .)
    EQUAL           reduce using rule 302 (operator_name -> DMINUSOP .)
    LCPAREN         reduce using rule 302 (operator_name -> DMINUSOP .)
    SEMICOLON       reduce using rule 302 (operator_name -> DMINUSOP .)
    COMMA           reduce using rule 302 (operator_name -> DMINUSOP .)
    RPAREN          reduce using rule 302 (operator_name -> DMINUSOP .)
    DOT             reduce using rule 302 (operator_name -> DMINUSOP .)
    ARROW           reduce using rule 302 (operator_name -> DMINUSOP .)
    DPLUSOP         reduce using rule 302 (operator_name -> DMINUSOP .)
    DMINUSOP        reduce using rule 302 (operator_name -> DMINUSOP .)
    LTEMPLATE       reduce using rule 302 (operator_name -> DMINUSOP .)
    MULTEQOP        reduce using rule 302 (operator_name -> DMINUSOP .)
    DIVEQOP         reduce using rule 302 (operator_name -> DMINUSOP .)
    MODEQOP         reduce using rule 302 (operator_name -> DMINUSOP .)
    PLUSEQOP        reduce using rule 302 (operator_name -> DMINUSOP .)
    MINUSEQOP       reduce using rule 302 (operator_name -> DMINUSOP .)
    LSHIFTEQOP      reduce using rule 302 (operator_name -> DMINUSOP .)
    RSHIFTEQOP      reduce using rule 302 (operator_name -> DMINUSOP .)
    BANDEQOP        reduce using rule 302 (operator_name -> DMINUSOP .)
    BOREQOP         reduce using rule 302 (operator_name -> DMINUSOP .)
    DOTSTAR         reduce using rule 302 (operator_name -> DMINUSOP .)
    ARROWSTAR       reduce using rule 302 (operator_name -> DMINUSOP .)
    MULTOP          reduce using rule 302 (operator_name -> DMINUSOP .)
    DIVOP           reduce using rule 302 (operator_name -> DMINUSOP .)
    MODOP           reduce using rule 302 (operator_name -> DMINUSOP .)
    PLUSOP          reduce using rule 302 (operator_name -> DMINUSOP .)
    MINUSOP         reduce using rule 302 (operator_name -> DMINUSOP .)
    LSHIFT          reduce using rule 302 (operator_name -> DMINUSOP .)
    RSHIFT          reduce using rule 302 (operator_name -> DMINUSOP .)
    LTCOMP          reduce using rule 302 (operator_name -> DMINUSOP .)
    GTCOMP          reduce using rule 302 (operator_name -> DMINUSOP .)
    LTECOMP         reduce using rule 302 (operator_name -> DMINUSOP .)
    GTECOMP         reduce using rule 302 (operator_name -> DMINUSOP .)
    EQCOMP          reduce using rule 302 (operator_name -> DMINUSOP .)
    NEQCOMP         reduce using rule 302 (operator_name -> DMINUSOP .)
    BANDOP          reduce using rule 302 (operator_name -> DMINUSOP .)
    XOROP           reduce using rule 302 (operator_name -> DMINUSOP .)
    OROP            reduce using rule 302 (operator_name -> DMINUSOP .)
    ANDOP           reduce using rule 302 (operator_name -> DMINUSOP .)
    QUESMARK        reduce using rule 302 (operator_name -> DMINUSOP .)
    RSPAREN         reduce using rule 302 (operator_name -> DMINUSOP .)
    RTEMPLATE       reduce using rule 302 (operator_name -> DMINUSOP .)
    RCPAREN         reduce using rule 302 (operator_name -> DMINUSOP .)
    COLON           reduce using rule 302 (operator_name -> DMINUSOP .)


state 125

    (303) operator_name -> COMMA .

    LPAREN          reduce using rule 303 (operator_name -> COMMA .)
    LSPAREN         reduce using rule 303 (operator_name -> COMMA .)
    EQUAL           reduce using rule 303 (operator_name -> COMMA .)
    LCPAREN         reduce using rule 303 (operator_name -> COMMA .)
    SEMICOLON       reduce using rule 303 (operator_name -> COMMA .)
    COMMA           reduce using rule 303 (operator_name -> COMMA .)
    RPAREN          reduce using rule 303 (operator_name -> COMMA .)
    DOT             reduce using rule 303 (operator_name -> COMMA .)
    ARROW           reduce using rule 303 (operator_name -> COMMA .)
    DPLUSOP         reduce using rule 303 (operator_name -> COMMA .)
    DMINUSOP        reduce using rule 303 (operator_name -> COMMA .)
    LTEMPLATE       reduce using rule 303 (operator_name -> COMMA .)
    MULTEQOP        reduce using rule 303 (operator_name -> COMMA .)
    DIVEQOP         reduce using rule 303 (operator_name -> COMMA .)
    MODEQOP         reduce using rule 303 (operator_name -> COMMA .)
    PLUSEQOP        reduce using rule 303 (operator_name -> COMMA .)
    MINUSEQOP       reduce using rule 303 (operator_name -> COMMA .)
    LSHIFTEQOP      reduce using rule 303 (operator_name -> COMMA .)
    RSHIFTEQOP      reduce using rule 303 (operator_name -> COMMA .)
    BANDEQOP        reduce using rule 303 (operator_name -> COMMA .)
    BOREQOP         reduce using rule 303 (operator_name -> COMMA .)
    DOTSTAR         reduce using rule 303 (operator_name -> COMMA .)
    ARROWSTAR       reduce using rule 303 (operator_name -> COMMA .)
    MULTOP          reduce using rule 303 (operator_name -> COMMA .)
    DIVOP           reduce using rule 303 (operator_name -> COMMA .)
    MODOP           reduce using rule 303 (operator_name -> COMMA .)
    PLUSOP          reduce using rule 303 (operator_name -> COMMA .)
    MINUSOP         reduce using rule 303 (operator_name -> COMMA .)
    LSHIFT          reduce using rule 303 (operator_name -> COMMA .)
    RSHIFT          reduce using rule 303 (operator_name -> COMMA .)
    LTCOMP          reduce using rule 303 (operator_name -> COMMA .)
    GTCOMP          reduce using rule 303 (operator_name -> COMMA .)
    LTECOMP         reduce using rule 303 (operator_name -> COMMA .)
    GTECOMP         reduce using rule 303 (operator_name -> COMMA .)
    EQCOMP          reduce using rule 303 (operator_name -> COMMA .)
    NEQCOMP         reduce using rule 303 (operator_name -> COMMA .)
    BANDOP          reduce using rule 303 (operator_name -> COMMA .)
    XOROP           reduce using rule 303 (operator_name -> COMMA .)
    OROP            reduce using rule 303 (operator_name -> COMMA .)
    ANDOP           reduce using rule 303 (operator_name -> COMMA .)
    QUESMARK        reduce using rule 303 (operator_name -> COMMA .)
    RSPAREN         reduce using rule 303 (operator_name -> COMMA .)
    RTEMPLATE       reduce using rule 303 (operator_name -> COMMA .)
    RCPAREN         reduce using rule 303 (operator_name -> COMMA .)
    COLON           reduce using rule 303 (operator_name -> COMMA .)


state 126

    (304) operator_name -> ARROWSTAR .

    LPAREN          reduce using rule 304 (operator_name -> ARROWSTAR .)
    LSPAREN         reduce using rule 304 (operator_name -> ARROWSTAR .)
    EQUAL           reduce using rule 304 (operator_name -> ARROWSTAR .)
    LCPAREN         reduce using rule 304 (operator_name -> ARROWSTAR .)
    SEMICOLON       reduce using rule 304 (operator_name -> ARROWSTAR .)
    COMMA           reduce using rule 304 (operator_name -> ARROWSTAR .)
    RPAREN          reduce using rule 304 (operator_name -> ARROWSTAR .)
    DOT             reduce using rule 304 (operator_name -> ARROWSTAR .)
    ARROW           reduce using rule 304 (operator_name -> ARROWSTAR .)
    DPLUSOP         reduce using rule 304 (operator_name -> ARROWSTAR .)
    DMINUSOP        reduce using rule 304 (operator_name -> ARROWSTAR .)
    LTEMPLATE       reduce using rule 304 (operator_name -> ARROWSTAR .)
    MULTEQOP        reduce using rule 304 (operator_name -> ARROWSTAR .)
    DIVEQOP         reduce using rule 304 (operator_name -> ARROWSTAR .)
    MODEQOP         reduce using rule 304 (operator_name -> ARROWSTAR .)
    PLUSEQOP        reduce using rule 304 (operator_name -> ARROWSTAR .)
    MINUSEQOP       reduce using rule 304 (operator_name -> ARROWSTAR .)
    LSHIFTEQOP      reduce using rule 304 (operator_name -> ARROWSTAR .)
    RSHIFTEQOP      reduce using rule 304 (operator_name -> ARROWSTAR .)
    BANDEQOP        reduce using rule 304 (operator_name -> ARROWSTAR .)
    BOREQOP         reduce using rule 304 (operator_name -> ARROWSTAR .)
    DOTSTAR         reduce using rule 304 (operator_name -> ARROWSTAR .)
    ARROWSTAR       reduce using rule 304 (operator_name -> ARROWSTAR .)
    MULTOP          reduce using rule 304 (operator_name -> ARROWSTAR .)
    DIVOP           reduce using rule 304 (operator_name -> ARROWSTAR .)
    MODOP           reduce using rule 304 (operator_name -> ARROWSTAR .)
    PLUSOP          reduce using rule 304 (operator_name -> ARROWSTAR .)
    MINUSOP         reduce using rule 304 (operator_name -> ARROWSTAR .)
    LSHIFT          reduce using rule 304 (operator_name -> ARROWSTAR .)
    RSHIFT          reduce using rule 304 (operator_name -> ARROWSTAR .)
    LTCOMP          reduce using rule 304 (operator_name -> ARROWSTAR .)
    GTCOMP          reduce using rule 304 (operator_name -> ARROWSTAR .)
    LTECOMP         reduce using rule 304 (operator_name -> ARROWSTAR .)
    GTECOMP         reduce using rule 304 (operator_name -> ARROWSTAR .)
    EQCOMP          reduce using rule 304 (operator_name -> ARROWSTAR .)
    NEQCOMP         reduce using rule 304 (operator_name -> ARROWSTAR .)
    BANDOP          reduce using rule 304 (operator_name -> ARROWSTAR .)
    XOROP           reduce using rule 304 (operator_name -> ARROWSTAR .)
    OROP            reduce using rule 304 (operator_name -> ARROWSTAR .)
    ANDOP           reduce using rule 304 (operator_name -> ARROWSTAR .)
    QUESMARK        reduce using rule 304 (operator_name -> ARROWSTAR .)
    RSPAREN         reduce using rule 304 (operator_name -> ARROWSTAR .)
    RTEMPLATE       reduce using rule 304 (operator_name -> ARROWSTAR .)
    RCPAREN         reduce using rule 304 (operator_name -> ARROWSTAR .)
    COLON           reduce using rule 304 (operator_name -> ARROWSTAR .)


state 127

    (305) operator_name -> ARROW .

    LPAREN          reduce using rule 305 (operator_name -> ARROW .)
    LSPAREN         reduce using rule 305 (operator_name -> ARROW .)
    EQUAL           reduce using rule 305 (operator_name -> ARROW .)
    LCPAREN         reduce using rule 305 (operator_name -> ARROW .)
    SEMICOLON       reduce using rule 305 (operator_name -> ARROW .)
    COMMA           reduce using rule 305 (operator_name -> ARROW .)
    RPAREN          reduce using rule 305 (operator_name -> ARROW .)
    DOT             reduce using rule 305 (operator_name -> ARROW .)
    ARROW           reduce using rule 305 (operator_name -> ARROW .)
    DPLUSOP         reduce using rule 305 (operator_name -> ARROW .)
    DMINUSOP        reduce using rule 305 (operator_name -> ARROW .)
    LTEMPLATE       reduce using rule 305 (operator_name -> ARROW .)
    MULTEQOP        reduce using rule 305 (operator_name -> ARROW .)
    DIVEQOP         reduce using rule 305 (operator_name -> ARROW .)
    MODEQOP         reduce using rule 305 (operator_name -> ARROW .)
    PLUSEQOP        reduce using rule 305 (operator_name -> ARROW .)
    MINUSEQOP       reduce using rule 305 (operator_name -> ARROW .)
    LSHIFTEQOP      reduce using rule 305 (operator_name -> ARROW .)
    RSHIFTEQOP      reduce using rule 305 (operator_name -> ARROW .)
    BANDEQOP        reduce using rule 305 (operator_name -> ARROW .)
    BOREQOP         reduce using rule 305 (operator_name -> ARROW .)
    DOTSTAR         reduce using rule 305 (operator_name -> ARROW .)
    ARROWSTAR       reduce using rule 305 (operator_name -> ARROW .)
    MULTOP          reduce using rule 305 (operator_name -> ARROW .)
    DIVOP           reduce using rule 305 (operator_name -> ARROW .)
    MODOP           reduce using rule 305 (operator_name -> ARROW .)
    PLUSOP          reduce using rule 305 (operator_name -> ARROW .)
    MINUSOP         reduce using rule 305 (operator_name -> ARROW .)
    LSHIFT          reduce using rule 305 (operator_name -> ARROW .)
    RSHIFT          reduce using rule 305 (operator_name -> ARROW .)
    LTCOMP          reduce using rule 305 (operator_name -> ARROW .)
    GTCOMP          reduce using rule 305 (operator_name -> ARROW .)
    LTECOMP         reduce using rule 305 (operator_name -> ARROW .)
    GTECOMP         reduce using rule 305 (operator_name -> ARROW .)
    EQCOMP          reduce using rule 305 (operator_name -> ARROW .)
    NEQCOMP         reduce using rule 305 (operator_name -> ARROW .)
    BANDOP          reduce using rule 305 (operator_name -> ARROW .)
    XOROP           reduce using rule 305 (operator_name -> ARROW .)
    OROP            reduce using rule 305 (operator_name -> ARROW .)
    ANDOP           reduce using rule 305 (operator_name -> ARROW .)
    QUESMARK        reduce using rule 305 (operator_name -> ARROW .)
    RSPAREN         reduce using rule 305 (operator_name -> ARROW .)
    RTEMPLATE       reduce using rule 305 (operator_name -> ARROW .)
    RCPAREN         reduce using rule 305 (operator_name -> ARROW .)
    COLON           reduce using rule 305 (operator_name -> ARROW .)


state 128

    (306) operator_name -> LPAREN . RPAREN

    RPAREN          shift and go to state 256


state 129

    (307) operator_name -> LSPAREN . RSPAREN

    RSPAREN         shift and go to state 257


state 130

    (4) control_line_stmt -> include_control LTCOMP STRING_L . GTCOMP

    GTCOMP          shift and go to state 258


state 131

    (226) declaration -> decl_specifiers declarator_list SEMICOLON .

    ASM             reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    LPAREN          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    AUTO            reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    STATIC          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    EXTERN          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CONST           reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    BNOP            reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    MULTOP          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    BANDOP          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CHAR            reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SHORT           reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    INT             reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    LONG            reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SIGNED          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    FLOAT           reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    VOID            reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    STRING          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    ENUM            reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    TYPE            reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CLASS           reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    STRUCT          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    UNION           reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    $end            reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CASE            reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    LCPAREN         reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    IF              reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SWITCH          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    WHILE           reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DO              reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    FOR             reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    BREAK           reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    RETURN          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    GOTO            reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    TRY             reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    THROW           reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DPLUSOP         reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DMINUSOP        reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    PLUSOP          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    MINUSOP         reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    NOTSYM          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    NEW             reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DELETE          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    THIS            reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    NUMBER          reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    STRING_L        reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SCHAR           reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    ELSE            reduce using rule 226 (declaration -> decl_specifiers declarator_list SEMICOLON .)


state 132

    (182) function_definition -> decl_specifiers declarator fct_body .

    ASM             reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    TEMPLATE        reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    TYPEDEF         reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    LPAREN          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    AUTO            reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    STATIC          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    EXTERN          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    VIRTUAL         reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    CONST           reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    VOLATILE        reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    IDENTIFIER      reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    BNOP            reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    MULTOP          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    BANDOP          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    CHAR            reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    SHORT           reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    INT             reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    LONG            reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    SIGNED          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    UNSIGNED        reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    FLOAT           reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    DOUBLE          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    VOID            reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    STRING          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    ENUM            reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    TYPE            reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    OPERATOR        reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    CLASS           reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    STRUCT          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    UNION           reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    $end            reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    RCPAREN         reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    CASE            reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    DEFAULT         reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    SEMICOLON       reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    LCPAREN         reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    IF              reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    SWITCH          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    WHILE           reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    DO              reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    FOR             reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    BREAK           reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    CONTINUE        reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    RETURN          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    GOTO            reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    TRY             reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    THROW           reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    DPLUSOP         reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    DMINUSOP        reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    SIZEOF          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    PLUSOP          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    MINUSOP         reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    NOTSYM          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    NEW             reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    DELETE          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    THIS            reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    NUMBER          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    STRING_L        reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    SCHAR           reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    COLON           reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    PRIVATE         reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    PROTECTED       reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    PUBLIC          reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)
    ELSE            reduce using rule 182 (function_definition -> decl_specifiers declarator fct_body .)


state 133

    (236) declarator_list -> declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 236 (declarator_list -> declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 236 (declarator_list -> declarator_list COMMA init_declarator .)


state 134

    (237) init_declarator -> declarator . initializer
    (238) init_declarator -> declarator .
    (260) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (261) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (262) declarator -> declarator . LSPAREN RSPAREN
    (239) initializer -> . EQUAL assignment_expression
    (240) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (241) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (242) initializer -> . LPAREN expression_list RPAREN

    SEMICOLON       reduce using rule 238 (init_declarator -> declarator .)
    COMMA           reduce using rule 238 (init_declarator -> declarator .)
    LPAREN          shift and go to state 75
    LSPAREN         shift and go to state 76
    EQUAL           shift and go to state 78

    initializer                    shift and go to state 74

state 135

    (247) asm_declaration -> ASM LPAREN STRING_L . RPAREN SEMICOLON

    RPAREN          shift and go to state 259


state 136

    (260) declarator -> declarator LPAREN . argument_declaration_list RPAREN
    (142) argument_declaration_list -> . arg_declaration_list
    (143) argument_declaration_list -> . empty
    (144) arg_declaration_list -> . argument_declaration
    (145) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (15) empty -> .
    (146) argument_declaration -> . decl_specifiers declarator
    (147) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (148) argument_declaration -> . decl_specifiers abstract_declarator
    (149) argument_declaration -> . decl_specifiers
    (150) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (151) argument_declaration -> . decl_specifiers EQUAL expression
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    RPAREN          reduce using rule 15 (empty -> .)
    TYPEDEF         shift and go to state 22
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    argument_declaration_list      shift and go to state 139
    arg_declaration_list           shift and go to state 141
    empty                          shift and go to state 142
    argument_declaration           shift and go to state 144
    decl_specifiers                shift and go to state 147
    decl_specifier                 shift and go to state 14
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 137

    (263) declarator -> LPAREN declarator RPAREN .

    LPAREN          reduce using rule 263 (declarator -> LPAREN declarator RPAREN .)
    LSPAREN         reduce using rule 263 (declarator -> LPAREN declarator RPAREN .)
    EQUAL           reduce using rule 263 (declarator -> LPAREN declarator RPAREN .)
    LCPAREN         reduce using rule 263 (declarator -> LPAREN declarator RPAREN .)
    SEMICOLON       reduce using rule 263 (declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 263 (declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 263 (declarator -> LPAREN declarator RPAREN .)
    RTEMPLATE       reduce using rule 263 (declarator -> LPAREN declarator RPAREN .)


state 138

    (124) primary_expression -> LPAREN . expression RPAREN
    (130) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (131) type_name -> . type_specifier_list abstract_declarator
    (132) type_name -> . type_specifier_list
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (267) type_specifier_list -> . type_specifier type_specifier_list
    (268) type_specifier_list -> . type_specifier
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 260
    type_name                      shift and go to state 261
    cast_expression                shift and go to state 153
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    type_specifier_list            shift and go to state 262
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    type_specifier                 shift and go to state 263
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    simple_type_name               shift and go to state 264
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    name                           shift and go to state 161
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 139

    (260) declarator -> declarator LPAREN argument_declaration_list . RPAREN

    RPAREN          shift and go to state 265


state 140

    (242) initializer -> LPAREN expression_list . RPAREN
    (251) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 266
    COMMA           shift and go to state 267


state 141

    (142) argument_declaration_list -> arg_declaration_list .

    RPAREN          reduce using rule 142 (argument_declaration_list -> arg_declaration_list .)


state 142

    (143) argument_declaration_list -> empty .

    RPAREN          reduce using rule 143 (argument_declaration_list -> empty .)


state 143

    (250) expression_list -> assignment_expression .

    RPAREN          reduce using rule 250 (expression_list -> assignment_expression .)
    COMMA           reduce using rule 250 (expression_list -> assignment_expression .)


state 144

    (144) arg_declaration_list -> argument_declaration .
    (145) arg_declaration_list -> argument_declaration . COMMA arg_declaration_list

    RPAREN          reduce using rule 144 (arg_declaration_list -> argument_declaration .)
    COMMA           shift and go to state 268


state 145

    (66) assignment_expression -> conditional_expression .

    RPAREN          reduce using rule 66 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 66 (assignment_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 66 (assignment_expression -> conditional_expression .)
    RCPAREN         reduce using rule 66 (assignment_expression -> conditional_expression .)
    RTEMPLATE       reduce using rule 66 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 66 (assignment_expression -> conditional_expression .)
    RSPAREN         reduce using rule 66 (assignment_expression -> conditional_expression .)


state 146

    (67) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (129) cast_expression -> unary_expression .
    (68) assignment_operator -> . EQUAL
    (69) assignment_operator -> . MULTEQOP
    (70) assignment_operator -> . DIVEQOP
    (71) assignment_operator -> . MODEQOP
    (72) assignment_operator -> . PLUSEQOP
    (73) assignment_operator -> . MINUSEQOP
    (74) assignment_operator -> . LSHIFTEQOP
    (75) assignment_operator -> . RSHIFTEQOP
    (76) assignment_operator -> . BANDEQOP
    (77) assignment_operator -> . BOREQOP

    DOTSTAR         reduce using rule 129 (cast_expression -> unary_expression .)
    ARROWSTAR       reduce using rule 129 (cast_expression -> unary_expression .)
    MULTOP          reduce using rule 129 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 129 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 129 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 129 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 129 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 129 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 129 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 129 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 129 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 129 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 129 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 129 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 129 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 129 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 129 (cast_expression -> unary_expression .)
    OROP            reduce using rule 129 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 129 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 129 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 129 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 129 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 129 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 129 (cast_expression -> unary_expression .)
    RTEMPLATE       reduce using rule 129 (cast_expression -> unary_expression .)
    COLON           reduce using rule 129 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 129 (cast_expression -> unary_expression .)
    EQUAL           shift and go to state 270
    MULTEQOP        shift and go to state 271
    DIVEQOP         shift and go to state 272
    MODEQOP         shift and go to state 273
    PLUSEQOP        shift and go to state 274
    MINUSEQOP       shift and go to state 275
    LSHIFTEQOP      shift and go to state 276
    RSHIFTEQOP      shift and go to state 277
    BANDEQOP        shift and go to state 278
    BOREQOP         shift and go to state 279

    assignment_operator            shift and go to state 269

state 147

    (146) argument_declaration -> decl_specifiers . declarator
    (147) argument_declaration -> decl_specifiers . declarator EQUAL expression
    (148) argument_declaration -> decl_specifiers . abstract_declarator
    (149) argument_declaration -> decl_specifiers .
    (150) argument_declaration -> decl_specifiers . abstract_declarator EQUAL expression
    (151) argument_declaration -> decl_specifiers . EQUAL expression
    (152) decl_specifiers -> decl_specifiers . decl_specifier
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (133) abstract_declarator -> . unary2_operator abstract_declarator
    (134) abstract_declarator -> . unary2_operator
    (135) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (136) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (137) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (138) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (139) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (140) abstract_declarator -> . LSPAREN RSPAREN
    (141) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (269) operator_function_name -> . OPERATOR operator_name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    COMMA           reduce using rule 149 (argument_declaration -> decl_specifiers .)
    RPAREN          reduce using rule 149 (argument_declaration -> decl_specifiers .)
    RTEMPLATE       reduce using rule 149 (argument_declaration -> decl_specifiers .)
    EQUAL           shift and go to state 281
    LPAREN          shift and go to state 284
    LSPAREN         shift and go to state 285
    TYPEDEF         shift and go to state 22
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    OPERATOR        shift and go to state 54
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    declarator                     shift and go to state 280
    abstract_declarator            shift and go to state 282
    decl_specifier                 shift and go to state 66
    name                           shift and go to state 23
    unary2_operator                shift and go to state 283
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    operator_function_name         shift and go to state 36
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 148

    (30) conditional_expression -> logical_OR_expression .
    (31) conditional_expression -> logical_OR_expression . QUESMARK expression COLON conditional_expression
    (33) logical_OR_expression -> logical_OR_expression . OROP logical_AND_expression

    RPAREN          reduce using rule 30 (conditional_expression -> logical_OR_expression .)
    COMMA           reduce using rule 30 (conditional_expression -> logical_OR_expression .)
    RSPAREN         reduce using rule 30 (conditional_expression -> logical_OR_expression .)
    SEMICOLON       reduce using rule 30 (conditional_expression -> logical_OR_expression .)
    RCPAREN         reduce using rule 30 (conditional_expression -> logical_OR_expression .)
    COLON           reduce using rule 30 (conditional_expression -> logical_OR_expression .)
    RTEMPLATE       reduce using rule 30 (conditional_expression -> logical_OR_expression .)
    QUESMARK        shift and go to state 286
    OROP            shift and go to state 287


state 149

    (78) unary_expression -> postfix_expression .
    (112) postfix_expression -> postfix_expression . LSPAREN expression RSPAREN
    (113) postfix_expression -> postfix_expression . LPAREN expression_list RPAREN
    (114) postfix_expression -> postfix_expression . template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> postfix_expression . LPAREN RPAREN
    (118) postfix_expression -> postfix_expression . DOT name
    (119) postfix_expression -> postfix_expression . ARROW name
    (120) postfix_expression -> postfix_expression . DPLUSOP
    (121) postfix_expression -> postfix_expression . DMINUSOP
    (16) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    EQUAL           reduce using rule 78 (unary_expression -> postfix_expression .)
    MULTEQOP        reduce using rule 78 (unary_expression -> postfix_expression .)
    DIVEQOP         reduce using rule 78 (unary_expression -> postfix_expression .)
    MODEQOP         reduce using rule 78 (unary_expression -> postfix_expression .)
    PLUSEQOP        reduce using rule 78 (unary_expression -> postfix_expression .)
    MINUSEQOP       reduce using rule 78 (unary_expression -> postfix_expression .)
    LSHIFTEQOP      reduce using rule 78 (unary_expression -> postfix_expression .)
    RSHIFTEQOP      reduce using rule 78 (unary_expression -> postfix_expression .)
    BANDEQOP        reduce using rule 78 (unary_expression -> postfix_expression .)
    BOREQOP         reduce using rule 78 (unary_expression -> postfix_expression .)
    DOTSTAR         reduce using rule 78 (unary_expression -> postfix_expression .)
    ARROWSTAR       reduce using rule 78 (unary_expression -> postfix_expression .)
    MULTOP          reduce using rule 78 (unary_expression -> postfix_expression .)
    DIVOP           reduce using rule 78 (unary_expression -> postfix_expression .)
    MODOP           reduce using rule 78 (unary_expression -> postfix_expression .)
    PLUSOP          reduce using rule 78 (unary_expression -> postfix_expression .)
    MINUSOP         reduce using rule 78 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 78 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 78 (unary_expression -> postfix_expression .)
    LTCOMP          reduce using rule 78 (unary_expression -> postfix_expression .)
    GTCOMP          reduce using rule 78 (unary_expression -> postfix_expression .)
    LTECOMP         reduce using rule 78 (unary_expression -> postfix_expression .)
    GTECOMP         reduce using rule 78 (unary_expression -> postfix_expression .)
    EQCOMP          reduce using rule 78 (unary_expression -> postfix_expression .)
    NEQCOMP         reduce using rule 78 (unary_expression -> postfix_expression .)
    BANDOP          reduce using rule 78 (unary_expression -> postfix_expression .)
    XOROP           reduce using rule 78 (unary_expression -> postfix_expression .)
    OROP            reduce using rule 78 (unary_expression -> postfix_expression .)
    ANDOP           reduce using rule 78 (unary_expression -> postfix_expression .)
    QUESMARK        reduce using rule 78 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 78 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 78 (unary_expression -> postfix_expression .)
    RSPAREN         reduce using rule 78 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 78 (unary_expression -> postfix_expression .)
    RCPAREN         reduce using rule 78 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 78 (unary_expression -> postfix_expression .)
    RTEMPLATE       reduce using rule 78 (unary_expression -> postfix_expression .)
    LSPAREN         shift and go to state 288
    LPAREN          shift and go to state 289
    DOT             shift and go to state 291
    ARROW           shift and go to state 292
    DPLUSOP         shift and go to state 293
    DMINUSOP        shift and go to state 294
    LTEMPLATE       shift and go to state 249

    template_class_name            shift and go to state 290

state 150

    (79) unary_expression -> DPLUSOP . unary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 296
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    unary_expression               shift and go to state 295
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 151

    (80) unary_expression -> DMINUSOP . unary_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 296
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    unary_expression               shift and go to state 297
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 152

    (81) unary_expression -> unary1_operator . cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 298
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 153

    (60) pm_expression -> cast_expression .

    DOTSTAR         reduce using rule 60 (pm_expression -> cast_expression .)
    ARROWSTAR       reduce using rule 60 (pm_expression -> cast_expression .)
    MULTOP          reduce using rule 60 (pm_expression -> cast_expression .)
    DIVOP           reduce using rule 60 (pm_expression -> cast_expression .)
    MODOP           reduce using rule 60 (pm_expression -> cast_expression .)
    PLUSOP          reduce using rule 60 (pm_expression -> cast_expression .)
    MINUSOP         reduce using rule 60 (pm_expression -> cast_expression .)
    LSHIFT          reduce using rule 60 (pm_expression -> cast_expression .)
    RSHIFT          reduce using rule 60 (pm_expression -> cast_expression .)
    LTCOMP          reduce using rule 60 (pm_expression -> cast_expression .)
    GTCOMP          reduce using rule 60 (pm_expression -> cast_expression .)
    LTECOMP         reduce using rule 60 (pm_expression -> cast_expression .)
    GTECOMP         reduce using rule 60 (pm_expression -> cast_expression .)
    EQCOMP          reduce using rule 60 (pm_expression -> cast_expression .)
    NEQCOMP         reduce using rule 60 (pm_expression -> cast_expression .)
    BANDOP          reduce using rule 60 (pm_expression -> cast_expression .)
    XOROP           reduce using rule 60 (pm_expression -> cast_expression .)
    OROP            reduce using rule 60 (pm_expression -> cast_expression .)
    ANDOP           reduce using rule 60 (pm_expression -> cast_expression .)
    QUESMARK        reduce using rule 60 (pm_expression -> cast_expression .)
    RPAREN          reduce using rule 60 (pm_expression -> cast_expression .)
    COMMA           reduce using rule 60 (pm_expression -> cast_expression .)
    RSPAREN         reduce using rule 60 (pm_expression -> cast_expression .)
    SEMICOLON       reduce using rule 60 (pm_expression -> cast_expression .)
    RCPAREN         reduce using rule 60 (pm_expression -> cast_expression .)
    COLON           reduce using rule 60 (pm_expression -> cast_expression .)
    RTEMPLATE       reduce using rule 60 (pm_expression -> cast_expression .)


state 154

    (82) unary_expression -> unary2_operator . cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    unary2_operator                shift and go to state 154
    cast_expression                shift and go to state 299
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 155

    (83) unary_expression -> SIZEOF . unary_expression
    (84) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 301
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    unary_expression               shift and go to state 300
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 156

    (85) unary_expression -> allocation_expression .

    EQUAL           reduce using rule 85 (unary_expression -> allocation_expression .)
    MULTEQOP        reduce using rule 85 (unary_expression -> allocation_expression .)
    DIVEQOP         reduce using rule 85 (unary_expression -> allocation_expression .)
    MODEQOP         reduce using rule 85 (unary_expression -> allocation_expression .)
    PLUSEQOP        reduce using rule 85 (unary_expression -> allocation_expression .)
    MINUSEQOP       reduce using rule 85 (unary_expression -> allocation_expression .)
    LSHIFTEQOP      reduce using rule 85 (unary_expression -> allocation_expression .)
    RSHIFTEQOP      reduce using rule 85 (unary_expression -> allocation_expression .)
    BANDEQOP        reduce using rule 85 (unary_expression -> allocation_expression .)
    BOREQOP         reduce using rule 85 (unary_expression -> allocation_expression .)
    DOTSTAR         reduce using rule 85 (unary_expression -> allocation_expression .)
    ARROWSTAR       reduce using rule 85 (unary_expression -> allocation_expression .)
    MULTOP          reduce using rule 85 (unary_expression -> allocation_expression .)
    DIVOP           reduce using rule 85 (unary_expression -> allocation_expression .)
    MODOP           reduce using rule 85 (unary_expression -> allocation_expression .)
    PLUSOP          reduce using rule 85 (unary_expression -> allocation_expression .)
    MINUSOP         reduce using rule 85 (unary_expression -> allocation_expression .)
    LSHIFT          reduce using rule 85 (unary_expression -> allocation_expression .)
    RSHIFT          reduce using rule 85 (unary_expression -> allocation_expression .)
    LTCOMP          reduce using rule 85 (unary_expression -> allocation_expression .)
    GTCOMP          reduce using rule 85 (unary_expression -> allocation_expression .)
    LTECOMP         reduce using rule 85 (unary_expression -> allocation_expression .)
    GTECOMP         reduce using rule 85 (unary_expression -> allocation_expression .)
    EQCOMP          reduce using rule 85 (unary_expression -> allocation_expression .)
    NEQCOMP         reduce using rule 85 (unary_expression -> allocation_expression .)
    BANDOP          reduce using rule 85 (unary_expression -> allocation_expression .)
    XOROP           reduce using rule 85 (unary_expression -> allocation_expression .)
    OROP            reduce using rule 85 (unary_expression -> allocation_expression .)
    ANDOP           reduce using rule 85 (unary_expression -> allocation_expression .)
    QUESMARK        reduce using rule 85 (unary_expression -> allocation_expression .)
    RPAREN          reduce using rule 85 (unary_expression -> allocation_expression .)
    COMMA           reduce using rule 85 (unary_expression -> allocation_expression .)
    RSPAREN         reduce using rule 85 (unary_expression -> allocation_expression .)
    SEMICOLON       reduce using rule 85 (unary_expression -> allocation_expression .)
    RCPAREN         reduce using rule 85 (unary_expression -> allocation_expression .)
    COLON           reduce using rule 85 (unary_expression -> allocation_expression .)
    RTEMPLATE       reduce using rule 85 (unary_expression -> allocation_expression .)


state 157

    (86) unary_expression -> deallocation_expression .

    EQUAL           reduce using rule 86 (unary_expression -> deallocation_expression .)
    MULTEQOP        reduce using rule 86 (unary_expression -> deallocation_expression .)
    DIVEQOP         reduce using rule 86 (unary_expression -> deallocation_expression .)
    MODEQOP         reduce using rule 86 (unary_expression -> deallocation_expression .)
    PLUSEQOP        reduce using rule 86 (unary_expression -> deallocation_expression .)
    MINUSEQOP       reduce using rule 86 (unary_expression -> deallocation_expression .)
    LSHIFTEQOP      reduce using rule 86 (unary_expression -> deallocation_expression .)
    RSHIFTEQOP      reduce using rule 86 (unary_expression -> deallocation_expression .)
    BANDEQOP        reduce using rule 86 (unary_expression -> deallocation_expression .)
    BOREQOP         reduce using rule 86 (unary_expression -> deallocation_expression .)
    DOTSTAR         reduce using rule 86 (unary_expression -> deallocation_expression .)
    ARROWSTAR       reduce using rule 86 (unary_expression -> deallocation_expression .)
    MULTOP          reduce using rule 86 (unary_expression -> deallocation_expression .)
    DIVOP           reduce using rule 86 (unary_expression -> deallocation_expression .)
    MODOP           reduce using rule 86 (unary_expression -> deallocation_expression .)
    PLUSOP          reduce using rule 86 (unary_expression -> deallocation_expression .)
    MINUSOP         reduce using rule 86 (unary_expression -> deallocation_expression .)
    LSHIFT          reduce using rule 86 (unary_expression -> deallocation_expression .)
    RSHIFT          reduce using rule 86 (unary_expression -> deallocation_expression .)
    LTCOMP          reduce using rule 86 (unary_expression -> deallocation_expression .)
    GTCOMP          reduce using rule 86 (unary_expression -> deallocation_expression .)
    LTECOMP         reduce using rule 86 (unary_expression -> deallocation_expression .)
    GTECOMP         reduce using rule 86 (unary_expression -> deallocation_expression .)
    EQCOMP          reduce using rule 86 (unary_expression -> deallocation_expression .)
    NEQCOMP         reduce using rule 86 (unary_expression -> deallocation_expression .)
    BANDOP          reduce using rule 86 (unary_expression -> deallocation_expression .)
    XOROP           reduce using rule 86 (unary_expression -> deallocation_expression .)
    OROP            reduce using rule 86 (unary_expression -> deallocation_expression .)
    ANDOP           reduce using rule 86 (unary_expression -> deallocation_expression .)
    QUESMARK        reduce using rule 86 (unary_expression -> deallocation_expression .)
    RPAREN          reduce using rule 86 (unary_expression -> deallocation_expression .)
    COMMA           reduce using rule 86 (unary_expression -> deallocation_expression .)
    RSPAREN         reduce using rule 86 (unary_expression -> deallocation_expression .)
    SEMICOLON       reduce using rule 86 (unary_expression -> deallocation_expression .)
    RCPAREN         reduce using rule 86 (unary_expression -> deallocation_expression .)
    COLON           reduce using rule 86 (unary_expression -> deallocation_expression .)
    RTEMPLATE       reduce using rule 86 (unary_expression -> deallocation_expression .)


state 158

    (32) logical_OR_expression -> logical_AND_expression .
    (35) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 32 (logical_OR_expression -> logical_AND_expression .)
    OROP            reduce using rule 32 (logical_OR_expression -> logical_AND_expression .)
    RPAREN          reduce using rule 32 (logical_OR_expression -> logical_AND_expression .)
    COMMA           reduce using rule 32 (logical_OR_expression -> logical_AND_expression .)
    RSPAREN         reduce using rule 32 (logical_OR_expression -> logical_AND_expression .)
    SEMICOLON       reduce using rule 32 (logical_OR_expression -> logical_AND_expression .)
    RCPAREN         reduce using rule 32 (logical_OR_expression -> logical_AND_expression .)
    COLON           reduce using rule 32 (logical_OR_expression -> logical_AND_expression .)
    RTEMPLATE       reduce using rule 32 (logical_OR_expression -> logical_AND_expression .)
    ANDOP           shift and go to state 302


state 159

    (111) postfix_expression -> primary_expression .

    LSPAREN         reduce using rule 111 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 111 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 111 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 111 (postfix_expression -> primary_expression .)
    DPLUSOP         reduce using rule 111 (postfix_expression -> primary_expression .)
    DMINUSOP        reduce using rule 111 (postfix_expression -> primary_expression .)
    LTEMPLATE       reduce using rule 111 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 111 (postfix_expression -> primary_expression .)
    MULTEQOP        reduce using rule 111 (postfix_expression -> primary_expression .)
    DIVEQOP         reduce using rule 111 (postfix_expression -> primary_expression .)
    MODEQOP         reduce using rule 111 (postfix_expression -> primary_expression .)
    PLUSEQOP        reduce using rule 111 (postfix_expression -> primary_expression .)
    MINUSEQOP       reduce using rule 111 (postfix_expression -> primary_expression .)
    LSHIFTEQOP      reduce using rule 111 (postfix_expression -> primary_expression .)
    RSHIFTEQOP      reduce using rule 111 (postfix_expression -> primary_expression .)
    BANDEQOP        reduce using rule 111 (postfix_expression -> primary_expression .)
    BOREQOP         reduce using rule 111 (postfix_expression -> primary_expression .)
    DOTSTAR         reduce using rule 111 (postfix_expression -> primary_expression .)
    ARROWSTAR       reduce using rule 111 (postfix_expression -> primary_expression .)
    MULTOP          reduce using rule 111 (postfix_expression -> primary_expression .)
    DIVOP           reduce using rule 111 (postfix_expression -> primary_expression .)
    MODOP           reduce using rule 111 (postfix_expression -> primary_expression .)
    PLUSOP          reduce using rule 111 (postfix_expression -> primary_expression .)
    MINUSOP         reduce using rule 111 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 111 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 111 (postfix_expression -> primary_expression .)
    LTCOMP          reduce using rule 111 (postfix_expression -> primary_expression .)
    GTCOMP          reduce using rule 111 (postfix_expression -> primary_expression .)
    LTECOMP         reduce using rule 111 (postfix_expression -> primary_expression .)
    GTECOMP         reduce using rule 111 (postfix_expression -> primary_expression .)
    EQCOMP          reduce using rule 111 (postfix_expression -> primary_expression .)
    NEQCOMP         reduce using rule 111 (postfix_expression -> primary_expression .)
    BANDOP          reduce using rule 111 (postfix_expression -> primary_expression .)
    XOROP           reduce using rule 111 (postfix_expression -> primary_expression .)
    OROP            reduce using rule 111 (postfix_expression -> primary_expression .)
    ANDOP           reduce using rule 111 (postfix_expression -> primary_expression .)
    QUESMARK        reduce using rule 111 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 111 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 111 (postfix_expression -> primary_expression .)
    RSPAREN         reduce using rule 111 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 111 (postfix_expression -> primary_expression .)
    RCPAREN         reduce using rule 111 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 111 (postfix_expression -> primary_expression .)
    RTEMPLATE       reduce using rule 111 (postfix_expression -> primary_expression .)


state 160

    (116) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (117) postfix_expression -> simple_type_name . LPAREN RPAREN
    (161) type_specifier -> simple_type_name .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 303
    EQUAL           reduce using rule 161 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 161 (type_specifier -> simple_type_name .)
    TYPEDEF         reduce using rule 161 (type_specifier -> simple_type_name .)
    IDENTIFIER      reduce using rule 161 (type_specifier -> simple_type_name .)
    BNOP            reduce using rule 161 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 161 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 161 (type_specifier -> simple_type_name .)
    AUTO            reduce using rule 161 (type_specifier -> simple_type_name .)
    STATIC          reduce using rule 161 (type_specifier -> simple_type_name .)
    EXTERN          reduce using rule 161 (type_specifier -> simple_type_name .)
    VIRTUAL         reduce using rule 161 (type_specifier -> simple_type_name .)
    CONST           reduce using rule 161 (type_specifier -> simple_type_name .)
    VOLATILE        reduce using rule 161 (type_specifier -> simple_type_name .)
    OPERATOR        reduce using rule 161 (type_specifier -> simple_type_name .)
    CHAR            reduce using rule 161 (type_specifier -> simple_type_name .)
    SHORT           reduce using rule 161 (type_specifier -> simple_type_name .)
    INT             reduce using rule 161 (type_specifier -> simple_type_name .)
    LONG            reduce using rule 161 (type_specifier -> simple_type_name .)
    SIGNED          reduce using rule 161 (type_specifier -> simple_type_name .)
    UNSIGNED        reduce using rule 161 (type_specifier -> simple_type_name .)
    FLOAT           reduce using rule 161 (type_specifier -> simple_type_name .)
    DOUBLE          reduce using rule 161 (type_specifier -> simple_type_name .)
    VOID            reduce using rule 161 (type_specifier -> simple_type_name .)
    STRING          reduce using rule 161 (type_specifier -> simple_type_name .)
    ENUM            reduce using rule 161 (type_specifier -> simple_type_name .)
    TYPE            reduce using rule 161 (type_specifier -> simple_type_name .)
    CLASS           reduce using rule 161 (type_specifier -> simple_type_name .)
    STRUCT          reduce using rule 161 (type_specifier -> simple_type_name .)
    UNION           reduce using rule 161 (type_specifier -> simple_type_name .)
    TEMPLATE        reduce using rule 161 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 161 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 161 (type_specifier -> simple_type_name .)
    SEMICOLON       reduce using rule 161 (type_specifier -> simple_type_name .)

  ! LPAREN          [ reduce using rule 161 (type_specifier -> simple_type_name .) ]


state 161

    (125) primary_expression -> name .

    LSPAREN         reduce using rule 125 (primary_expression -> name .)
    LPAREN          reduce using rule 125 (primary_expression -> name .)
    DOT             reduce using rule 125 (primary_expression -> name .)
    ARROW           reduce using rule 125 (primary_expression -> name .)
    DPLUSOP         reduce using rule 125 (primary_expression -> name .)
    DMINUSOP        reduce using rule 125 (primary_expression -> name .)
    LTEMPLATE       reduce using rule 125 (primary_expression -> name .)
    EQUAL           reduce using rule 125 (primary_expression -> name .)
    MULTEQOP        reduce using rule 125 (primary_expression -> name .)
    DIVEQOP         reduce using rule 125 (primary_expression -> name .)
    MODEQOP         reduce using rule 125 (primary_expression -> name .)
    PLUSEQOP        reduce using rule 125 (primary_expression -> name .)
    MINUSEQOP       reduce using rule 125 (primary_expression -> name .)
    LSHIFTEQOP      reduce using rule 125 (primary_expression -> name .)
    RSHIFTEQOP      reduce using rule 125 (primary_expression -> name .)
    BANDEQOP        reduce using rule 125 (primary_expression -> name .)
    BOREQOP         reduce using rule 125 (primary_expression -> name .)
    DOTSTAR         reduce using rule 125 (primary_expression -> name .)
    ARROWSTAR       reduce using rule 125 (primary_expression -> name .)
    MULTOP          reduce using rule 125 (primary_expression -> name .)
    DIVOP           reduce using rule 125 (primary_expression -> name .)
    MODOP           reduce using rule 125 (primary_expression -> name .)
    PLUSOP          reduce using rule 125 (primary_expression -> name .)
    MINUSOP         reduce using rule 125 (primary_expression -> name .)
    LSHIFT          reduce using rule 125 (primary_expression -> name .)
    RSHIFT          reduce using rule 125 (primary_expression -> name .)
    LTCOMP          reduce using rule 125 (primary_expression -> name .)
    GTCOMP          reduce using rule 125 (primary_expression -> name .)
    LTECOMP         reduce using rule 125 (primary_expression -> name .)
    GTECOMP         reduce using rule 125 (primary_expression -> name .)
    EQCOMP          reduce using rule 125 (primary_expression -> name .)
    NEQCOMP         reduce using rule 125 (primary_expression -> name .)
    BANDOP          reduce using rule 125 (primary_expression -> name .)
    XOROP           reduce using rule 125 (primary_expression -> name .)
    OROP            reduce using rule 125 (primary_expression -> name .)
    ANDOP           reduce using rule 125 (primary_expression -> name .)
    QUESMARK        reduce using rule 125 (primary_expression -> name .)
    RPAREN          reduce using rule 125 (primary_expression -> name .)
    COMMA           reduce using rule 125 (primary_expression -> name .)
    RSPAREN         reduce using rule 125 (primary_expression -> name .)
    SEMICOLON       reduce using rule 125 (primary_expression -> name .)
    RCPAREN         reduce using rule 125 (primary_expression -> name .)
    COLON           reduce using rule 125 (primary_expression -> name .)
    RTEMPLATE       reduce using rule 125 (primary_expression -> name .)


state 162

    (105) unary1_operator -> PLUSOP .

    LPAREN          reduce using rule 105 (unary1_operator -> PLUSOP .)
    DPLUSOP         reduce using rule 105 (unary1_operator -> PLUSOP .)
    DMINUSOP        reduce using rule 105 (unary1_operator -> PLUSOP .)
    SIZEOF          reduce using rule 105 (unary1_operator -> PLUSOP .)
    PLUSOP          reduce using rule 105 (unary1_operator -> PLUSOP .)
    MINUSOP         reduce using rule 105 (unary1_operator -> PLUSOP .)
    NOTSYM          reduce using rule 105 (unary1_operator -> PLUSOP .)
    BNOP            reduce using rule 105 (unary1_operator -> PLUSOP .)
    MULTOP          reduce using rule 105 (unary1_operator -> PLUSOP .)
    BANDOP          reduce using rule 105 (unary1_operator -> PLUSOP .)
    NEW             reduce using rule 105 (unary1_operator -> PLUSOP .)
    DELETE          reduce using rule 105 (unary1_operator -> PLUSOP .)
    THIS            reduce using rule 105 (unary1_operator -> PLUSOP .)
    CHAR            reduce using rule 105 (unary1_operator -> PLUSOP .)
    SHORT           reduce using rule 105 (unary1_operator -> PLUSOP .)
    INT             reduce using rule 105 (unary1_operator -> PLUSOP .)
    LONG            reduce using rule 105 (unary1_operator -> PLUSOP .)
    SIGNED          reduce using rule 105 (unary1_operator -> PLUSOP .)
    UNSIGNED        reduce using rule 105 (unary1_operator -> PLUSOP .)
    FLOAT           reduce using rule 105 (unary1_operator -> PLUSOP .)
    DOUBLE          reduce using rule 105 (unary1_operator -> PLUSOP .)
    VOID            reduce using rule 105 (unary1_operator -> PLUSOP .)
    STRING          reduce using rule 105 (unary1_operator -> PLUSOP .)
    NUMBER          reduce using rule 105 (unary1_operator -> PLUSOP .)
    STRING_L        reduce using rule 105 (unary1_operator -> PLUSOP .)
    SCHAR           reduce using rule 105 (unary1_operator -> PLUSOP .)
    IDENTIFIER      reduce using rule 105 (unary1_operator -> PLUSOP .)
    OPERATOR        reduce using rule 105 (unary1_operator -> PLUSOP .)


state 163

    (106) unary1_operator -> MINUSOP .

    LPAREN          reduce using rule 106 (unary1_operator -> MINUSOP .)
    DPLUSOP         reduce using rule 106 (unary1_operator -> MINUSOP .)
    DMINUSOP        reduce using rule 106 (unary1_operator -> MINUSOP .)
    SIZEOF          reduce using rule 106 (unary1_operator -> MINUSOP .)
    PLUSOP          reduce using rule 106 (unary1_operator -> MINUSOP .)
    MINUSOP         reduce using rule 106 (unary1_operator -> MINUSOP .)
    NOTSYM          reduce using rule 106 (unary1_operator -> MINUSOP .)
    BNOP            reduce using rule 106 (unary1_operator -> MINUSOP .)
    MULTOP          reduce using rule 106 (unary1_operator -> MINUSOP .)
    BANDOP          reduce using rule 106 (unary1_operator -> MINUSOP .)
    NEW             reduce using rule 106 (unary1_operator -> MINUSOP .)
    DELETE          reduce using rule 106 (unary1_operator -> MINUSOP .)
    THIS            reduce using rule 106 (unary1_operator -> MINUSOP .)
    CHAR            reduce using rule 106 (unary1_operator -> MINUSOP .)
    SHORT           reduce using rule 106 (unary1_operator -> MINUSOP .)
    INT             reduce using rule 106 (unary1_operator -> MINUSOP .)
    LONG            reduce using rule 106 (unary1_operator -> MINUSOP .)
    SIGNED          reduce using rule 106 (unary1_operator -> MINUSOP .)
    UNSIGNED        reduce using rule 106 (unary1_operator -> MINUSOP .)
    FLOAT           reduce using rule 106 (unary1_operator -> MINUSOP .)
    DOUBLE          reduce using rule 106 (unary1_operator -> MINUSOP .)
    VOID            reduce using rule 106 (unary1_operator -> MINUSOP .)
    STRING          reduce using rule 106 (unary1_operator -> MINUSOP .)
    NUMBER          reduce using rule 106 (unary1_operator -> MINUSOP .)
    STRING_L        reduce using rule 106 (unary1_operator -> MINUSOP .)
    SCHAR           reduce using rule 106 (unary1_operator -> MINUSOP .)
    IDENTIFIER      reduce using rule 106 (unary1_operator -> MINUSOP .)
    OPERATOR        reduce using rule 106 (unary1_operator -> MINUSOP .)


state 164

    (107) unary1_operator -> NOTSYM .

    LPAREN          reduce using rule 107 (unary1_operator -> NOTSYM .)
    DPLUSOP         reduce using rule 107 (unary1_operator -> NOTSYM .)
    DMINUSOP        reduce using rule 107 (unary1_operator -> NOTSYM .)
    SIZEOF          reduce using rule 107 (unary1_operator -> NOTSYM .)
    PLUSOP          reduce using rule 107 (unary1_operator -> NOTSYM .)
    MINUSOP         reduce using rule 107 (unary1_operator -> NOTSYM .)
    NOTSYM          reduce using rule 107 (unary1_operator -> NOTSYM .)
    BNOP            reduce using rule 107 (unary1_operator -> NOTSYM .)
    MULTOP          reduce using rule 107 (unary1_operator -> NOTSYM .)
    BANDOP          reduce using rule 107 (unary1_operator -> NOTSYM .)
    NEW             reduce using rule 107 (unary1_operator -> NOTSYM .)
    DELETE          reduce using rule 107 (unary1_operator -> NOTSYM .)
    THIS            reduce using rule 107 (unary1_operator -> NOTSYM .)
    CHAR            reduce using rule 107 (unary1_operator -> NOTSYM .)
    SHORT           reduce using rule 107 (unary1_operator -> NOTSYM .)
    INT             reduce using rule 107 (unary1_operator -> NOTSYM .)
    LONG            reduce using rule 107 (unary1_operator -> NOTSYM .)
    SIGNED          reduce using rule 107 (unary1_operator -> NOTSYM .)
    UNSIGNED        reduce using rule 107 (unary1_operator -> NOTSYM .)
    FLOAT           reduce using rule 107 (unary1_operator -> NOTSYM .)
    DOUBLE          reduce using rule 107 (unary1_operator -> NOTSYM .)
    VOID            reduce using rule 107 (unary1_operator -> NOTSYM .)
    STRING          reduce using rule 107 (unary1_operator -> NOTSYM .)
    NUMBER          reduce using rule 107 (unary1_operator -> NOTSYM .)
    STRING_L        reduce using rule 107 (unary1_operator -> NOTSYM .)
    SCHAR           reduce using rule 107 (unary1_operator -> NOTSYM .)
    IDENTIFIER      reduce using rule 107 (unary1_operator -> NOTSYM .)
    OPERATOR        reduce using rule 107 (unary1_operator -> NOTSYM .)


state 165

    (108) unary1_operator -> BNOP .
    (266) name -> BNOP . IDENTIFIER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LPAREN          reduce using rule 108 (unary1_operator -> BNOP .)
    DPLUSOP         reduce using rule 108 (unary1_operator -> BNOP .)
    DMINUSOP        reduce using rule 108 (unary1_operator -> BNOP .)
    SIZEOF          reduce using rule 108 (unary1_operator -> BNOP .)
    PLUSOP          reduce using rule 108 (unary1_operator -> BNOP .)
    MINUSOP         reduce using rule 108 (unary1_operator -> BNOP .)
    NOTSYM          reduce using rule 108 (unary1_operator -> BNOP .)
    BNOP            reduce using rule 108 (unary1_operator -> BNOP .)
    MULTOP          reduce using rule 108 (unary1_operator -> BNOP .)
    BANDOP          reduce using rule 108 (unary1_operator -> BNOP .)
    NEW             reduce using rule 108 (unary1_operator -> BNOP .)
    DELETE          reduce using rule 108 (unary1_operator -> BNOP .)
    THIS            reduce using rule 108 (unary1_operator -> BNOP .)
    CHAR            reduce using rule 108 (unary1_operator -> BNOP .)
    SHORT           reduce using rule 108 (unary1_operator -> BNOP .)
    INT             reduce using rule 108 (unary1_operator -> BNOP .)
    LONG            reduce using rule 108 (unary1_operator -> BNOP .)
    SIGNED          reduce using rule 108 (unary1_operator -> BNOP .)
    UNSIGNED        reduce using rule 108 (unary1_operator -> BNOP .)
    FLOAT           reduce using rule 108 (unary1_operator -> BNOP .)
    DOUBLE          reduce using rule 108 (unary1_operator -> BNOP .)
    VOID            reduce using rule 108 (unary1_operator -> BNOP .)
    STRING          reduce using rule 108 (unary1_operator -> BNOP .)
    NUMBER          reduce using rule 108 (unary1_operator -> BNOP .)
    STRING_L        reduce using rule 108 (unary1_operator -> BNOP .)
    SCHAR           reduce using rule 108 (unary1_operator -> BNOP .)
    OPERATOR        reduce using rule 108 (unary1_operator -> BNOP .)
    IDENTIFIER      shift and go to state 82

  ! IDENTIFIER      [ reduce using rule 108 (unary1_operator -> BNOP .) ]


state 166

    (88) allocation_expression -> NEW . placement new_type_name new_initializer
    (89) allocation_expression -> NEW . new_type_name new_initializer
    (90) allocation_expression -> NEW . placement new_type_name
    (91) allocation_expression -> NEW . new_type_name
    (92) allocation_expression -> NEW . placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> NEW . LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> NEW . placement LPAREN type_name RPAREN
    (95) allocation_expression -> NEW . LPAREN type_name RPAREN
    (102) placement -> . LPAREN expression_list RPAREN
    (96) new_type_name -> . type_specifier_list new_declarator
    (97) new_type_name -> . type_specifier_list
    (267) type_specifier_list -> . type_specifier type_specifier_list
    (268) type_specifier_list -> . type_specifier
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    LPAREN          shift and go to state 306
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    placement                      shift and go to state 304
    new_type_name                  shift and go to state 305
    type_specifier_list            shift and go to state 307
    type_specifier                 shift and go to state 263
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 167

    (87) deallocation_expression -> DELETE . cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    cast_expression                shift and go to state 308
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 168

    (34) logical_AND_expression -> inclusive_OR_expression .
    (37) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

  ! shift/reduce conflict for OROP resolved as shift
    ANDOP           reduce using rule 34 (logical_AND_expression -> inclusive_OR_expression .)
    QUESMARK        reduce using rule 34 (logical_AND_expression -> inclusive_OR_expression .)
    RPAREN          reduce using rule 34 (logical_AND_expression -> inclusive_OR_expression .)
    COMMA           reduce using rule 34 (logical_AND_expression -> inclusive_OR_expression .)
    RSPAREN         reduce using rule 34 (logical_AND_expression -> inclusive_OR_expression .)
    SEMICOLON       reduce using rule 34 (logical_AND_expression -> inclusive_OR_expression .)
    RCPAREN         reduce using rule 34 (logical_AND_expression -> inclusive_OR_expression .)
    COLON           reduce using rule 34 (logical_AND_expression -> inclusive_OR_expression .)
    RTEMPLATE       reduce using rule 34 (logical_AND_expression -> inclusive_OR_expression .)
    OROP            shift and go to state 309

  ! OROP            [ reduce using rule 34 (logical_AND_expression -> inclusive_OR_expression .) ]


state 169

    (122) primary_expression -> literal .

    LSPAREN         reduce using rule 122 (primary_expression -> literal .)
    LPAREN          reduce using rule 122 (primary_expression -> literal .)
    DOT             reduce using rule 122 (primary_expression -> literal .)
    ARROW           reduce using rule 122 (primary_expression -> literal .)
    DPLUSOP         reduce using rule 122 (primary_expression -> literal .)
    DMINUSOP        reduce using rule 122 (primary_expression -> literal .)
    LTEMPLATE       reduce using rule 122 (primary_expression -> literal .)
    EQUAL           reduce using rule 122 (primary_expression -> literal .)
    MULTEQOP        reduce using rule 122 (primary_expression -> literal .)
    DIVEQOP         reduce using rule 122 (primary_expression -> literal .)
    MODEQOP         reduce using rule 122 (primary_expression -> literal .)
    PLUSEQOP        reduce using rule 122 (primary_expression -> literal .)
    MINUSEQOP       reduce using rule 122 (primary_expression -> literal .)
    LSHIFTEQOP      reduce using rule 122 (primary_expression -> literal .)
    RSHIFTEQOP      reduce using rule 122 (primary_expression -> literal .)
    BANDEQOP        reduce using rule 122 (primary_expression -> literal .)
    BOREQOP         reduce using rule 122 (primary_expression -> literal .)
    DOTSTAR         reduce using rule 122 (primary_expression -> literal .)
    ARROWSTAR       reduce using rule 122 (primary_expression -> literal .)
    MULTOP          reduce using rule 122 (primary_expression -> literal .)
    DIVOP           reduce using rule 122 (primary_expression -> literal .)
    MODOP           reduce using rule 122 (primary_expression -> literal .)
    PLUSOP          reduce using rule 122 (primary_expression -> literal .)
    MINUSOP         reduce using rule 122 (primary_expression -> literal .)
    LSHIFT          reduce using rule 122 (primary_expression -> literal .)
    RSHIFT          reduce using rule 122 (primary_expression -> literal .)
    LTCOMP          reduce using rule 122 (primary_expression -> literal .)
    GTCOMP          reduce using rule 122 (primary_expression -> literal .)
    LTECOMP         reduce using rule 122 (primary_expression -> literal .)
    GTECOMP         reduce using rule 122 (primary_expression -> literal .)
    EQCOMP          reduce using rule 122 (primary_expression -> literal .)
    NEQCOMP         reduce using rule 122 (primary_expression -> literal .)
    BANDOP          reduce using rule 122 (primary_expression -> literal .)
    XOROP           reduce using rule 122 (primary_expression -> literal .)
    OROP            reduce using rule 122 (primary_expression -> literal .)
    ANDOP           reduce using rule 122 (primary_expression -> literal .)
    QUESMARK        reduce using rule 122 (primary_expression -> literal .)
    RPAREN          reduce using rule 122 (primary_expression -> literal .)
    COMMA           reduce using rule 122 (primary_expression -> literal .)
    RSPAREN         reduce using rule 122 (primary_expression -> literal .)
    SEMICOLON       reduce using rule 122 (primary_expression -> literal .)
    RCPAREN         reduce using rule 122 (primary_expression -> literal .)
    COLON           reduce using rule 122 (primary_expression -> literal .)
    RTEMPLATE       reduce using rule 122 (primary_expression -> literal .)


state 170

    (123) primary_expression -> THIS .

    LSPAREN         reduce using rule 123 (primary_expression -> THIS .)
    LPAREN          reduce using rule 123 (primary_expression -> THIS .)
    DOT             reduce using rule 123 (primary_expression -> THIS .)
    ARROW           reduce using rule 123 (primary_expression -> THIS .)
    DPLUSOP         reduce using rule 123 (primary_expression -> THIS .)
    DMINUSOP        reduce using rule 123 (primary_expression -> THIS .)
    LTEMPLATE       reduce using rule 123 (primary_expression -> THIS .)
    EQUAL           reduce using rule 123 (primary_expression -> THIS .)
    MULTEQOP        reduce using rule 123 (primary_expression -> THIS .)
    DIVEQOP         reduce using rule 123 (primary_expression -> THIS .)
    MODEQOP         reduce using rule 123 (primary_expression -> THIS .)
    PLUSEQOP        reduce using rule 123 (primary_expression -> THIS .)
    MINUSEQOP       reduce using rule 123 (primary_expression -> THIS .)
    LSHIFTEQOP      reduce using rule 123 (primary_expression -> THIS .)
    RSHIFTEQOP      reduce using rule 123 (primary_expression -> THIS .)
    BANDEQOP        reduce using rule 123 (primary_expression -> THIS .)
    BOREQOP         reduce using rule 123 (primary_expression -> THIS .)
    DOTSTAR         reduce using rule 123 (primary_expression -> THIS .)
    ARROWSTAR       reduce using rule 123 (primary_expression -> THIS .)
    MULTOP          reduce using rule 123 (primary_expression -> THIS .)
    DIVOP           reduce using rule 123 (primary_expression -> THIS .)
    MODOP           reduce using rule 123 (primary_expression -> THIS .)
    PLUSOP          reduce using rule 123 (primary_expression -> THIS .)
    MINUSOP         reduce using rule 123 (primary_expression -> THIS .)
    LSHIFT          reduce using rule 123 (primary_expression -> THIS .)
    RSHIFT          reduce using rule 123 (primary_expression -> THIS .)
    LTCOMP          reduce using rule 123 (primary_expression -> THIS .)
    GTCOMP          reduce using rule 123 (primary_expression -> THIS .)
    LTECOMP         reduce using rule 123 (primary_expression -> THIS .)
    GTECOMP         reduce using rule 123 (primary_expression -> THIS .)
    EQCOMP          reduce using rule 123 (primary_expression -> THIS .)
    NEQCOMP         reduce using rule 123 (primary_expression -> THIS .)
    BANDOP          reduce using rule 123 (primary_expression -> THIS .)
    XOROP           reduce using rule 123 (primary_expression -> THIS .)
    OROP            reduce using rule 123 (primary_expression -> THIS .)
    ANDOP           reduce using rule 123 (primary_expression -> THIS .)
    QUESMARK        reduce using rule 123 (primary_expression -> THIS .)
    RPAREN          reduce using rule 123 (primary_expression -> THIS .)
    COMMA           reduce using rule 123 (primary_expression -> THIS .)
    RSPAREN         reduce using rule 123 (primary_expression -> THIS .)
    SEMICOLON       reduce using rule 123 (primary_expression -> THIS .)
    RCPAREN         reduce using rule 123 (primary_expression -> THIS .)
    COLON           reduce using rule 123 (primary_expression -> THIS .)
    RTEMPLATE       reduce using rule 123 (primary_expression -> THIS .)


state 171

    (36) inclusive_OR_expression -> exclusive_OR_expression .
    (39) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 36 (inclusive_OR_expression -> exclusive_OR_expression .)
    ANDOP           reduce using rule 36 (inclusive_OR_expression -> exclusive_OR_expression .)
    QUESMARK        reduce using rule 36 (inclusive_OR_expression -> exclusive_OR_expression .)
    RPAREN          reduce using rule 36 (inclusive_OR_expression -> exclusive_OR_expression .)
    COMMA           reduce using rule 36 (inclusive_OR_expression -> exclusive_OR_expression .)
    RSPAREN         reduce using rule 36 (inclusive_OR_expression -> exclusive_OR_expression .)
    SEMICOLON       reduce using rule 36 (inclusive_OR_expression -> exclusive_OR_expression .)
    RCPAREN         reduce using rule 36 (inclusive_OR_expression -> exclusive_OR_expression .)
    COLON           reduce using rule 36 (inclusive_OR_expression -> exclusive_OR_expression .)
    RTEMPLATE       reduce using rule 36 (inclusive_OR_expression -> exclusive_OR_expression .)
    XOROP           shift and go to state 310


state 172

    (126) literal -> NUMBER .

    LSPAREN         reduce using rule 126 (literal -> NUMBER .)
    LPAREN          reduce using rule 126 (literal -> NUMBER .)
    DOT             reduce using rule 126 (literal -> NUMBER .)
    ARROW           reduce using rule 126 (literal -> NUMBER .)
    DPLUSOP         reduce using rule 126 (literal -> NUMBER .)
    DMINUSOP        reduce using rule 126 (literal -> NUMBER .)
    LTEMPLATE       reduce using rule 126 (literal -> NUMBER .)
    EQUAL           reduce using rule 126 (literal -> NUMBER .)
    MULTEQOP        reduce using rule 126 (literal -> NUMBER .)
    DIVEQOP         reduce using rule 126 (literal -> NUMBER .)
    MODEQOP         reduce using rule 126 (literal -> NUMBER .)
    PLUSEQOP        reduce using rule 126 (literal -> NUMBER .)
    MINUSEQOP       reduce using rule 126 (literal -> NUMBER .)
    LSHIFTEQOP      reduce using rule 126 (literal -> NUMBER .)
    RSHIFTEQOP      reduce using rule 126 (literal -> NUMBER .)
    BANDEQOP        reduce using rule 126 (literal -> NUMBER .)
    BOREQOP         reduce using rule 126 (literal -> NUMBER .)
    DOTSTAR         reduce using rule 126 (literal -> NUMBER .)
    ARROWSTAR       reduce using rule 126 (literal -> NUMBER .)
    MULTOP          reduce using rule 126 (literal -> NUMBER .)
    DIVOP           reduce using rule 126 (literal -> NUMBER .)
    MODOP           reduce using rule 126 (literal -> NUMBER .)
    PLUSOP          reduce using rule 126 (literal -> NUMBER .)
    MINUSOP         reduce using rule 126 (literal -> NUMBER .)
    LSHIFT          reduce using rule 126 (literal -> NUMBER .)
    RSHIFT          reduce using rule 126 (literal -> NUMBER .)
    LTCOMP          reduce using rule 126 (literal -> NUMBER .)
    GTCOMP          reduce using rule 126 (literal -> NUMBER .)
    LTECOMP         reduce using rule 126 (literal -> NUMBER .)
    GTECOMP         reduce using rule 126 (literal -> NUMBER .)
    EQCOMP          reduce using rule 126 (literal -> NUMBER .)
    NEQCOMP         reduce using rule 126 (literal -> NUMBER .)
    BANDOP          reduce using rule 126 (literal -> NUMBER .)
    XOROP           reduce using rule 126 (literal -> NUMBER .)
    OROP            reduce using rule 126 (literal -> NUMBER .)
    ANDOP           reduce using rule 126 (literal -> NUMBER .)
    QUESMARK        reduce using rule 126 (literal -> NUMBER .)
    RPAREN          reduce using rule 126 (literal -> NUMBER .)
    COMMA           reduce using rule 126 (literal -> NUMBER .)
    RSPAREN         reduce using rule 126 (literal -> NUMBER .)
    SEMICOLON       reduce using rule 126 (literal -> NUMBER .)
    RCPAREN         reduce using rule 126 (literal -> NUMBER .)
    COLON           reduce using rule 126 (literal -> NUMBER .)
    RTEMPLATE       reduce using rule 126 (literal -> NUMBER .)


state 173

    (127) literal -> STRING_L .

    LSPAREN         reduce using rule 127 (literal -> STRING_L .)
    LPAREN          reduce using rule 127 (literal -> STRING_L .)
    DOT             reduce using rule 127 (literal -> STRING_L .)
    ARROW           reduce using rule 127 (literal -> STRING_L .)
    DPLUSOP         reduce using rule 127 (literal -> STRING_L .)
    DMINUSOP        reduce using rule 127 (literal -> STRING_L .)
    LTEMPLATE       reduce using rule 127 (literal -> STRING_L .)
    EQUAL           reduce using rule 127 (literal -> STRING_L .)
    MULTEQOP        reduce using rule 127 (literal -> STRING_L .)
    DIVEQOP         reduce using rule 127 (literal -> STRING_L .)
    MODEQOP         reduce using rule 127 (literal -> STRING_L .)
    PLUSEQOP        reduce using rule 127 (literal -> STRING_L .)
    MINUSEQOP       reduce using rule 127 (literal -> STRING_L .)
    LSHIFTEQOP      reduce using rule 127 (literal -> STRING_L .)
    RSHIFTEQOP      reduce using rule 127 (literal -> STRING_L .)
    BANDEQOP        reduce using rule 127 (literal -> STRING_L .)
    BOREQOP         reduce using rule 127 (literal -> STRING_L .)
    DOTSTAR         reduce using rule 127 (literal -> STRING_L .)
    ARROWSTAR       reduce using rule 127 (literal -> STRING_L .)
    MULTOP          reduce using rule 127 (literal -> STRING_L .)
    DIVOP           reduce using rule 127 (literal -> STRING_L .)
    MODOP           reduce using rule 127 (literal -> STRING_L .)
    PLUSOP          reduce using rule 127 (literal -> STRING_L .)
    MINUSOP         reduce using rule 127 (literal -> STRING_L .)
    LSHIFT          reduce using rule 127 (literal -> STRING_L .)
    RSHIFT          reduce using rule 127 (literal -> STRING_L .)
    LTCOMP          reduce using rule 127 (literal -> STRING_L .)
    GTCOMP          reduce using rule 127 (literal -> STRING_L .)
    LTECOMP         reduce using rule 127 (literal -> STRING_L .)
    GTECOMP         reduce using rule 127 (literal -> STRING_L .)
    EQCOMP          reduce using rule 127 (literal -> STRING_L .)
    NEQCOMP         reduce using rule 127 (literal -> STRING_L .)
    BANDOP          reduce using rule 127 (literal -> STRING_L .)
    XOROP           reduce using rule 127 (literal -> STRING_L .)
    OROP            reduce using rule 127 (literal -> STRING_L .)
    ANDOP           reduce using rule 127 (literal -> STRING_L .)
    QUESMARK        reduce using rule 127 (literal -> STRING_L .)
    RPAREN          reduce using rule 127 (literal -> STRING_L .)
    COMMA           reduce using rule 127 (literal -> STRING_L .)
    RSPAREN         reduce using rule 127 (literal -> STRING_L .)
    SEMICOLON       reduce using rule 127 (literal -> STRING_L .)
    RCPAREN         reduce using rule 127 (literal -> STRING_L .)
    COLON           reduce using rule 127 (literal -> STRING_L .)
    RTEMPLATE       reduce using rule 127 (literal -> STRING_L .)


state 174

    (128) literal -> SCHAR .

    LSPAREN         reduce using rule 128 (literal -> SCHAR .)
    LPAREN          reduce using rule 128 (literal -> SCHAR .)
    DOT             reduce using rule 128 (literal -> SCHAR .)
    ARROW           reduce using rule 128 (literal -> SCHAR .)
    DPLUSOP         reduce using rule 128 (literal -> SCHAR .)
    DMINUSOP        reduce using rule 128 (literal -> SCHAR .)
    LTEMPLATE       reduce using rule 128 (literal -> SCHAR .)
    EQUAL           reduce using rule 128 (literal -> SCHAR .)
    MULTEQOP        reduce using rule 128 (literal -> SCHAR .)
    DIVEQOP         reduce using rule 128 (literal -> SCHAR .)
    MODEQOP         reduce using rule 128 (literal -> SCHAR .)
    PLUSEQOP        reduce using rule 128 (literal -> SCHAR .)
    MINUSEQOP       reduce using rule 128 (literal -> SCHAR .)
    LSHIFTEQOP      reduce using rule 128 (literal -> SCHAR .)
    RSHIFTEQOP      reduce using rule 128 (literal -> SCHAR .)
    BANDEQOP        reduce using rule 128 (literal -> SCHAR .)
    BOREQOP         reduce using rule 128 (literal -> SCHAR .)
    DOTSTAR         reduce using rule 128 (literal -> SCHAR .)
    ARROWSTAR       reduce using rule 128 (literal -> SCHAR .)
    MULTOP          reduce using rule 128 (literal -> SCHAR .)
    DIVOP           reduce using rule 128 (literal -> SCHAR .)
    MODOP           reduce using rule 128 (literal -> SCHAR .)
    PLUSOP          reduce using rule 128 (literal -> SCHAR .)
    MINUSOP         reduce using rule 128 (literal -> SCHAR .)
    LSHIFT          reduce using rule 128 (literal -> SCHAR .)
    RSHIFT          reduce using rule 128 (literal -> SCHAR .)
    LTCOMP          reduce using rule 128 (literal -> SCHAR .)
    GTCOMP          reduce using rule 128 (literal -> SCHAR .)
    LTECOMP         reduce using rule 128 (literal -> SCHAR .)
    GTECOMP         reduce using rule 128 (literal -> SCHAR .)
    EQCOMP          reduce using rule 128 (literal -> SCHAR .)
    NEQCOMP         reduce using rule 128 (literal -> SCHAR .)
    BANDOP          reduce using rule 128 (literal -> SCHAR .)
    XOROP           reduce using rule 128 (literal -> SCHAR .)
    OROP            reduce using rule 128 (literal -> SCHAR .)
    ANDOP           reduce using rule 128 (literal -> SCHAR .)
    QUESMARK        reduce using rule 128 (literal -> SCHAR .)
    RPAREN          reduce using rule 128 (literal -> SCHAR .)
    COMMA           reduce using rule 128 (literal -> SCHAR .)
    RSPAREN         reduce using rule 128 (literal -> SCHAR .)
    SEMICOLON       reduce using rule 128 (literal -> SCHAR .)
    RCPAREN         reduce using rule 128 (literal -> SCHAR .)
    COLON           reduce using rule 128 (literal -> SCHAR .)
    RTEMPLATE       reduce using rule 128 (literal -> SCHAR .)


state 175

    (38) exclusive_OR_expression -> AND_expression .
    (41) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 38 (exclusive_OR_expression -> AND_expression .)
    OROP            reduce using rule 38 (exclusive_OR_expression -> AND_expression .)
    ANDOP           reduce using rule 38 (exclusive_OR_expression -> AND_expression .)
    QUESMARK        reduce using rule 38 (exclusive_OR_expression -> AND_expression .)
    RPAREN          reduce using rule 38 (exclusive_OR_expression -> AND_expression .)
    COMMA           reduce using rule 38 (exclusive_OR_expression -> AND_expression .)
    RSPAREN         reduce using rule 38 (exclusive_OR_expression -> AND_expression .)
    SEMICOLON       reduce using rule 38 (exclusive_OR_expression -> AND_expression .)
    RCPAREN         reduce using rule 38 (exclusive_OR_expression -> AND_expression .)
    COLON           reduce using rule 38 (exclusive_OR_expression -> AND_expression .)
    RTEMPLATE       reduce using rule 38 (exclusive_OR_expression -> AND_expression .)
    BANDOP          shift and go to state 311


state 176

    (40) AND_expression -> equality_expression .
    (43) equality_expression -> equality_expression . EQCOMP relational_expression
    (44) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 40 (AND_expression -> equality_expression .)
    XOROP           reduce using rule 40 (AND_expression -> equality_expression .)
    OROP            reduce using rule 40 (AND_expression -> equality_expression .)
    ANDOP           reduce using rule 40 (AND_expression -> equality_expression .)
    QUESMARK        reduce using rule 40 (AND_expression -> equality_expression .)
    RPAREN          reduce using rule 40 (AND_expression -> equality_expression .)
    COMMA           reduce using rule 40 (AND_expression -> equality_expression .)
    RSPAREN         reduce using rule 40 (AND_expression -> equality_expression .)
    SEMICOLON       reduce using rule 40 (AND_expression -> equality_expression .)
    RCPAREN         reduce using rule 40 (AND_expression -> equality_expression .)
    COLON           reduce using rule 40 (AND_expression -> equality_expression .)
    RTEMPLATE       reduce using rule 40 (AND_expression -> equality_expression .)
    EQCOMP          shift and go to state 312
    NEQCOMP         shift and go to state 313


state 177

    (42) equality_expression -> relational_expression .
    (46) relational_expression -> relational_expression . LTCOMP shift_expression
    (47) relational_expression -> relational_expression . GTCOMP shift_expression
    (48) relational_expression -> relational_expression . LTECOMP shift_expression
    (49) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 42 (equality_expression -> relational_expression .)
    NEQCOMP         reduce using rule 42 (equality_expression -> relational_expression .)
    BANDOP          reduce using rule 42 (equality_expression -> relational_expression .)
    XOROP           reduce using rule 42 (equality_expression -> relational_expression .)
    OROP            reduce using rule 42 (equality_expression -> relational_expression .)
    ANDOP           reduce using rule 42 (equality_expression -> relational_expression .)
    QUESMARK        reduce using rule 42 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 42 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 42 (equality_expression -> relational_expression .)
    RSPAREN         reduce using rule 42 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 42 (equality_expression -> relational_expression .)
    RCPAREN         reduce using rule 42 (equality_expression -> relational_expression .)
    COLON           reduce using rule 42 (equality_expression -> relational_expression .)
    RTEMPLATE       reduce using rule 42 (equality_expression -> relational_expression .)
    LTCOMP          shift and go to state 314
    GTCOMP          shift and go to state 315
    LTECOMP         shift and go to state 316
    GTECOMP         shift and go to state 317


state 178

    (45) relational_expression -> shift_expression .
    (51) shift_expression -> shift_expression . LSHIFT additive_expression
    (52) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 45 (relational_expression -> shift_expression .)
    GTCOMP          reduce using rule 45 (relational_expression -> shift_expression .)
    LTECOMP         reduce using rule 45 (relational_expression -> shift_expression .)
    GTECOMP         reduce using rule 45 (relational_expression -> shift_expression .)
    EQCOMP          reduce using rule 45 (relational_expression -> shift_expression .)
    NEQCOMP         reduce using rule 45 (relational_expression -> shift_expression .)
    BANDOP          reduce using rule 45 (relational_expression -> shift_expression .)
    XOROP           reduce using rule 45 (relational_expression -> shift_expression .)
    OROP            reduce using rule 45 (relational_expression -> shift_expression .)
    ANDOP           reduce using rule 45 (relational_expression -> shift_expression .)
    QUESMARK        reduce using rule 45 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 45 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 45 (relational_expression -> shift_expression .)
    RSPAREN         reduce using rule 45 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 45 (relational_expression -> shift_expression .)
    RCPAREN         reduce using rule 45 (relational_expression -> shift_expression .)
    COLON           reduce using rule 45 (relational_expression -> shift_expression .)
    RTEMPLATE       reduce using rule 45 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 318
    RSHIFT          shift and go to state 319


state 179

    (50) shift_expression -> additive_expression .
    (54) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (55) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 50 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 50 (shift_expression -> additive_expression .)
    LTCOMP          reduce using rule 50 (shift_expression -> additive_expression .)
    GTCOMP          reduce using rule 50 (shift_expression -> additive_expression .)
    LTECOMP         reduce using rule 50 (shift_expression -> additive_expression .)
    GTECOMP         reduce using rule 50 (shift_expression -> additive_expression .)
    EQCOMP          reduce using rule 50 (shift_expression -> additive_expression .)
    NEQCOMP         reduce using rule 50 (shift_expression -> additive_expression .)
    BANDOP          reduce using rule 50 (shift_expression -> additive_expression .)
    XOROP           reduce using rule 50 (shift_expression -> additive_expression .)
    OROP            reduce using rule 50 (shift_expression -> additive_expression .)
    ANDOP           reduce using rule 50 (shift_expression -> additive_expression .)
    QUESMARK        reduce using rule 50 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 50 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 50 (shift_expression -> additive_expression .)
    RSPAREN         reduce using rule 50 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 50 (shift_expression -> additive_expression .)
    RCPAREN         reduce using rule 50 (shift_expression -> additive_expression .)
    COLON           reduce using rule 50 (shift_expression -> additive_expression .)
    RTEMPLATE       reduce using rule 50 (shift_expression -> additive_expression .)
    PLUSOP          shift and go to state 320
    MINUSOP         shift and go to state 321


state 180

    (53) additive_expression -> multiplicative_expression .
    (57) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (58) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (59) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 53 (additive_expression -> multiplicative_expression .)
    MINUSOP         reduce using rule 53 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 53 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 53 (additive_expression -> multiplicative_expression .)
    LTCOMP          reduce using rule 53 (additive_expression -> multiplicative_expression .)
    GTCOMP          reduce using rule 53 (additive_expression -> multiplicative_expression .)
    LTECOMP         reduce using rule 53 (additive_expression -> multiplicative_expression .)
    GTECOMP         reduce using rule 53 (additive_expression -> multiplicative_expression .)
    EQCOMP          reduce using rule 53 (additive_expression -> multiplicative_expression .)
    NEQCOMP         reduce using rule 53 (additive_expression -> multiplicative_expression .)
    BANDOP          reduce using rule 53 (additive_expression -> multiplicative_expression .)
    XOROP           reduce using rule 53 (additive_expression -> multiplicative_expression .)
    OROP            reduce using rule 53 (additive_expression -> multiplicative_expression .)
    ANDOP           reduce using rule 53 (additive_expression -> multiplicative_expression .)
    QUESMARK        reduce using rule 53 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 53 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 53 (additive_expression -> multiplicative_expression .)
    RSPAREN         reduce using rule 53 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 53 (additive_expression -> multiplicative_expression .)
    RCPAREN         reduce using rule 53 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 53 (additive_expression -> multiplicative_expression .)
    RTEMPLATE       reduce using rule 53 (additive_expression -> multiplicative_expression .)
    MULTOP          shift and go to state 322
    DIVOP           shift and go to state 323
    MODOP           shift and go to state 324


state 181

    (56) multiplicative_expression -> pm_expression .
    (61) pm_expression -> pm_expression . DOTSTAR cast_expression
    (62) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 56 (multiplicative_expression -> pm_expression .)
    DIVOP           reduce using rule 56 (multiplicative_expression -> pm_expression .)
    MODOP           reduce using rule 56 (multiplicative_expression -> pm_expression .)
    PLUSOP          reduce using rule 56 (multiplicative_expression -> pm_expression .)
    MINUSOP         reduce using rule 56 (multiplicative_expression -> pm_expression .)
    LSHIFT          reduce using rule 56 (multiplicative_expression -> pm_expression .)
    RSHIFT          reduce using rule 56 (multiplicative_expression -> pm_expression .)
    LTCOMP          reduce using rule 56 (multiplicative_expression -> pm_expression .)
    GTCOMP          reduce using rule 56 (multiplicative_expression -> pm_expression .)
    LTECOMP         reduce using rule 56 (multiplicative_expression -> pm_expression .)
    GTECOMP         reduce using rule 56 (multiplicative_expression -> pm_expression .)
    EQCOMP          reduce using rule 56 (multiplicative_expression -> pm_expression .)
    NEQCOMP         reduce using rule 56 (multiplicative_expression -> pm_expression .)
    BANDOP          reduce using rule 56 (multiplicative_expression -> pm_expression .)
    XOROP           reduce using rule 56 (multiplicative_expression -> pm_expression .)
    OROP            reduce using rule 56 (multiplicative_expression -> pm_expression .)
    ANDOP           reduce using rule 56 (multiplicative_expression -> pm_expression .)
    QUESMARK        reduce using rule 56 (multiplicative_expression -> pm_expression .)
    RPAREN          reduce using rule 56 (multiplicative_expression -> pm_expression .)
    COMMA           reduce using rule 56 (multiplicative_expression -> pm_expression .)
    RSPAREN         reduce using rule 56 (multiplicative_expression -> pm_expression .)
    SEMICOLON       reduce using rule 56 (multiplicative_expression -> pm_expression .)
    RCPAREN         reduce using rule 56 (multiplicative_expression -> pm_expression .)
    COLON           reduce using rule 56 (multiplicative_expression -> pm_expression .)
    RTEMPLATE       reduce using rule 56 (multiplicative_expression -> pm_expression .)
    DOTSTAR         shift and go to state 325
    ARROWSTAR       shift and go to state 326


state 182

    (261) declarator -> declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 327


state 183

    (262) declarator -> declarator LSPAREN RSPAREN .

    LPAREN          reduce using rule 262 (declarator -> declarator LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 262 (declarator -> declarator LSPAREN RSPAREN .)
    EQUAL           reduce using rule 262 (declarator -> declarator LSPAREN RSPAREN .)
    LCPAREN         reduce using rule 262 (declarator -> declarator LSPAREN RSPAREN .)
    SEMICOLON       reduce using rule 262 (declarator -> declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 262 (declarator -> declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 262 (declarator -> declarator LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 262 (declarator -> declarator LSPAREN RSPAREN .)


state 184

    (29) constant_expression -> conditional_expression .

    RSPAREN         reduce using rule 29 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 29 (constant_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 29 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 29 (constant_expression -> conditional_expression .)
    RCPAREN         reduce using rule 29 (constant_expression -> conditional_expression .)


state 185

    (129) cast_expression -> unary_expression .

    DOTSTAR         reduce using rule 129 (cast_expression -> unary_expression .)
    ARROWSTAR       reduce using rule 129 (cast_expression -> unary_expression .)
    MULTOP          reduce using rule 129 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 129 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 129 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 129 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 129 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 129 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 129 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 129 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 129 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 129 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 129 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 129 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 129 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 129 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 129 (cast_expression -> unary_expression .)
    OROP            reduce using rule 129 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 129 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 129 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 129 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 129 (cast_expression -> unary_expression .)
    MULTEQOP        reduce using rule 129 (cast_expression -> unary_expression .)
    DIVEQOP         reduce using rule 129 (cast_expression -> unary_expression .)
    MODEQOP         reduce using rule 129 (cast_expression -> unary_expression .)
    PLUSEQOP        reduce using rule 129 (cast_expression -> unary_expression .)
    MINUSEQOP       reduce using rule 129 (cast_expression -> unary_expression .)
    LSHIFTEQOP      reduce using rule 129 (cast_expression -> unary_expression .)
    RSHIFTEQOP      reduce using rule 129 (cast_expression -> unary_expression .)
    BANDEQOP        reduce using rule 129 (cast_expression -> unary_expression .)
    BOREQOP         reduce using rule 129 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 129 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 129 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 129 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 129 (cast_expression -> unary_expression .)
    COLON           reduce using rule 129 (cast_expression -> unary_expression .)
    RTEMPLATE       reduce using rule 129 (cast_expression -> unary_expression .)


state 186

    (130) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (124) primary_expression -> LPAREN . expression RPAREN
    (131) type_name -> . type_specifier_list abstract_declarator
    (132) type_name -> . type_specifier_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (267) type_specifier_list -> . type_specifier type_specifier_list
    (268) type_specifier_list -> . type_specifier
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    type_name                      shift and go to state 261
    cast_expression                shift and go to state 153
    expression                     shift and go to state 260
    type_specifier_list            shift and go to state 262
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    type_specifier                 shift and go to state 263
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    simple_type_name               shift and go to state 264
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 187

    (116) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (117) postfix_expression -> simple_type_name . LPAREN RPAREN

    LPAREN          shift and go to state 303


state 188

    (239) initializer -> EQUAL assignment_expression .

    SEMICOLON       reduce using rule 239 (initializer -> EQUAL assignment_expression .)
    COMMA           reduce using rule 239 (initializer -> EQUAL assignment_expression .)


state 189

    (240) initializer -> EQUAL LCPAREN . initializer_list RCPAREN
    (241) initializer -> EQUAL LCPAREN . initializer_list COMMA RCPAREN
    (243) initializer_list -> . assignment_expression
    (244) initializer_list -> . initializer_list COMMA assignment_expression
    (245) initializer_list -> . LCPAREN initializer_list RCPAREN
    (246) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 328
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    initializer_list               shift and go to state 329
    assignment_expression          shift and go to state 330
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 190

    (185) compound_statement -> LCPAREN statement_list . RCPAREN
    (188) statement_list -> statement_list . statement
    (189) statement -> . labeled_statement
    (190) statement -> . expression_statement
    (191) statement -> . compound_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) statement -> . declaration_statement
    (196) statement -> . try_block
    (212) labeled_statement -> . IDENTIFIER COLON statement
    (213) labeled_statement -> . CASE constant_expression COLON statement
    (214) labeled_statement -> . DEFAULT COLON statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN
    (202) selection_statement -> . IF LPAREN expression RPAREN statement
    (203) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (204) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (215) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (216) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (217) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (197) jump_statement -> . BREAK SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . RETURN expression SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (225) declaration_statement -> . declaration
    (205) try_block -> . TRY compound_statement handler_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 331
    IDENTIFIER      shift and go to state 201
    CASE            shift and go to state 202
    DEFAULT         shift and go to state 203
    SEMICOLON       shift and go to state 205
    LCPAREN         shift and go to state 79
    IF              shift and go to state 206
    SWITCH          shift and go to state 208
    WHILE           shift and go to state 209
    DO              shift and go to state 210
    FOR             shift and go to state 211
    BREAK           shift and go to state 212
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 214
    GOTO            shift and go to state 215
    TRY             shift and go to state 217
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    statement                      shift and go to state 332
    labeled_statement              shift and go to state 193
    expression_statement           shift and go to state 194
    compound_statement             shift and go to state 195
    selection_statement            shift and go to state 196
    iteration_statement            shift and go to state 197
    jump_statement                 shift and go to state 198
    declaration_statement          shift and go to state 199
    try_block                      shift and go to state 200
    expression                     shift and go to state 204
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 191

    (186) compound_statement -> LCPAREN RCPAREN .

    ASM             reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    LPAREN          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    AUTO            reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    STATIC          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    EXTERN          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    CONST           reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    BNOP            reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    MULTOP          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    BANDOP          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    CHAR            reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    SHORT           reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    INT             reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    LONG            reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    SIGNED          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    FLOAT           reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    VOID            reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    STRING          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    ENUM            reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    TYPE            reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    CLASS           reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    STRUCT          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    UNION           reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    $end            reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    CASE            reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    DEFAULT         reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    SEMICOLON       reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    IF              reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    SWITCH          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    WHILE           reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    DO              reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    FOR             reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    BREAK           reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    CONTINUE        reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    RETURN          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    GOTO            reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    TRY             reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    THROW           reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    SIZEOF          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    NOTSYM          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    NEW             reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    DELETE          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    THIS            reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    NUMBER          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    STRING_L        reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    SCHAR           reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    ELSE            reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    CATCH           reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    COLON           reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    PRIVATE         reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    PROTECTED       reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)
    PUBLIC          reduce using rule 186 (compound_statement -> LCPAREN RCPAREN .)


state 192

    (187) statement_list -> statement .

    RCPAREN         reduce using rule 187 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 187 (statement_list -> statement .)
    CASE            reduce using rule 187 (statement_list -> statement .)
    DEFAULT         reduce using rule 187 (statement_list -> statement .)
    SEMICOLON       reduce using rule 187 (statement_list -> statement .)
    LCPAREN         reduce using rule 187 (statement_list -> statement .)
    IF              reduce using rule 187 (statement_list -> statement .)
    SWITCH          reduce using rule 187 (statement_list -> statement .)
    WHILE           reduce using rule 187 (statement_list -> statement .)
    DO              reduce using rule 187 (statement_list -> statement .)
    FOR             reduce using rule 187 (statement_list -> statement .)
    BREAK           reduce using rule 187 (statement_list -> statement .)
    CONTINUE        reduce using rule 187 (statement_list -> statement .)
    RETURN          reduce using rule 187 (statement_list -> statement .)
    GOTO            reduce using rule 187 (statement_list -> statement .)
    TRY             reduce using rule 187 (statement_list -> statement .)
    THROW           reduce using rule 187 (statement_list -> statement .)
    ASM             reduce using rule 187 (statement_list -> statement .)
    TEMPLATE        reduce using rule 187 (statement_list -> statement .)
    DPLUSOP         reduce using rule 187 (statement_list -> statement .)
    DMINUSOP        reduce using rule 187 (statement_list -> statement .)
    SIZEOF          reduce using rule 187 (statement_list -> statement .)
    TYPEDEF         reduce using rule 187 (statement_list -> statement .)
    LPAREN          reduce using rule 187 (statement_list -> statement .)
    PLUSOP          reduce using rule 187 (statement_list -> statement .)
    MINUSOP         reduce using rule 187 (statement_list -> statement .)
    NOTSYM          reduce using rule 187 (statement_list -> statement .)
    BNOP            reduce using rule 187 (statement_list -> statement .)
    MULTOP          reduce using rule 187 (statement_list -> statement .)
    BANDOP          reduce using rule 187 (statement_list -> statement .)
    NEW             reduce using rule 187 (statement_list -> statement .)
    DELETE          reduce using rule 187 (statement_list -> statement .)
    AUTO            reduce using rule 187 (statement_list -> statement .)
    STATIC          reduce using rule 187 (statement_list -> statement .)
    EXTERN          reduce using rule 187 (statement_list -> statement .)
    VIRTUAL         reduce using rule 187 (statement_list -> statement .)
    CONST           reduce using rule 187 (statement_list -> statement .)
    VOLATILE        reduce using rule 187 (statement_list -> statement .)
    THIS            reduce using rule 187 (statement_list -> statement .)
    CHAR            reduce using rule 187 (statement_list -> statement .)
    SHORT           reduce using rule 187 (statement_list -> statement .)
    INT             reduce using rule 187 (statement_list -> statement .)
    LONG            reduce using rule 187 (statement_list -> statement .)
    SIGNED          reduce using rule 187 (statement_list -> statement .)
    UNSIGNED        reduce using rule 187 (statement_list -> statement .)
    FLOAT           reduce using rule 187 (statement_list -> statement .)
    DOUBLE          reduce using rule 187 (statement_list -> statement .)
    VOID            reduce using rule 187 (statement_list -> statement .)
    STRING          reduce using rule 187 (statement_list -> statement .)
    ENUM            reduce using rule 187 (statement_list -> statement .)
    TYPE            reduce using rule 187 (statement_list -> statement .)
    OPERATOR        reduce using rule 187 (statement_list -> statement .)
    NUMBER          reduce using rule 187 (statement_list -> statement .)
    STRING_L        reduce using rule 187 (statement_list -> statement .)
    SCHAR           reduce using rule 187 (statement_list -> statement .)
    CLASS           reduce using rule 187 (statement_list -> statement .)
    STRUCT          reduce using rule 187 (statement_list -> statement .)
    UNION           reduce using rule 187 (statement_list -> statement .)


state 193

    (189) statement -> labeled_statement .

    RCPAREN         reduce using rule 189 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 189 (statement -> labeled_statement .)
    CASE            reduce using rule 189 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 189 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 189 (statement -> labeled_statement .)
    LCPAREN         reduce using rule 189 (statement -> labeled_statement .)
    IF              reduce using rule 189 (statement -> labeled_statement .)
    SWITCH          reduce using rule 189 (statement -> labeled_statement .)
    WHILE           reduce using rule 189 (statement -> labeled_statement .)
    DO              reduce using rule 189 (statement -> labeled_statement .)
    FOR             reduce using rule 189 (statement -> labeled_statement .)
    BREAK           reduce using rule 189 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 189 (statement -> labeled_statement .)
    RETURN          reduce using rule 189 (statement -> labeled_statement .)
    GOTO            reduce using rule 189 (statement -> labeled_statement .)
    TRY             reduce using rule 189 (statement -> labeled_statement .)
    THROW           reduce using rule 189 (statement -> labeled_statement .)
    ASM             reduce using rule 189 (statement -> labeled_statement .)
    TEMPLATE        reduce using rule 189 (statement -> labeled_statement .)
    DPLUSOP         reduce using rule 189 (statement -> labeled_statement .)
    DMINUSOP        reduce using rule 189 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 189 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 189 (statement -> labeled_statement .)
    LPAREN          reduce using rule 189 (statement -> labeled_statement .)
    PLUSOP          reduce using rule 189 (statement -> labeled_statement .)
    MINUSOP         reduce using rule 189 (statement -> labeled_statement .)
    NOTSYM          reduce using rule 189 (statement -> labeled_statement .)
    BNOP            reduce using rule 189 (statement -> labeled_statement .)
    MULTOP          reduce using rule 189 (statement -> labeled_statement .)
    BANDOP          reduce using rule 189 (statement -> labeled_statement .)
    NEW             reduce using rule 189 (statement -> labeled_statement .)
    DELETE          reduce using rule 189 (statement -> labeled_statement .)
    AUTO            reduce using rule 189 (statement -> labeled_statement .)
    STATIC          reduce using rule 189 (statement -> labeled_statement .)
    EXTERN          reduce using rule 189 (statement -> labeled_statement .)
    VIRTUAL         reduce using rule 189 (statement -> labeled_statement .)
    CONST           reduce using rule 189 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 189 (statement -> labeled_statement .)
    THIS            reduce using rule 189 (statement -> labeled_statement .)
    CHAR            reduce using rule 189 (statement -> labeled_statement .)
    SHORT           reduce using rule 189 (statement -> labeled_statement .)
    INT             reduce using rule 189 (statement -> labeled_statement .)
    LONG            reduce using rule 189 (statement -> labeled_statement .)
    SIGNED          reduce using rule 189 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 189 (statement -> labeled_statement .)
    FLOAT           reduce using rule 189 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 189 (statement -> labeled_statement .)
    VOID            reduce using rule 189 (statement -> labeled_statement .)
    STRING          reduce using rule 189 (statement -> labeled_statement .)
    ENUM            reduce using rule 189 (statement -> labeled_statement .)
    TYPE            reduce using rule 189 (statement -> labeled_statement .)
    OPERATOR        reduce using rule 189 (statement -> labeled_statement .)
    NUMBER          reduce using rule 189 (statement -> labeled_statement .)
    STRING_L        reduce using rule 189 (statement -> labeled_statement .)
    SCHAR           reduce using rule 189 (statement -> labeled_statement .)
    CLASS           reduce using rule 189 (statement -> labeled_statement .)
    STRUCT          reduce using rule 189 (statement -> labeled_statement .)
    UNION           reduce using rule 189 (statement -> labeled_statement .)
    ELSE            reduce using rule 189 (statement -> labeled_statement .)


state 194

    (190) statement -> expression_statement .

    RCPAREN         reduce using rule 190 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 190 (statement -> expression_statement .)
    CASE            reduce using rule 190 (statement -> expression_statement .)
    DEFAULT         reduce using rule 190 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 190 (statement -> expression_statement .)
    LCPAREN         reduce using rule 190 (statement -> expression_statement .)
    IF              reduce using rule 190 (statement -> expression_statement .)
    SWITCH          reduce using rule 190 (statement -> expression_statement .)
    WHILE           reduce using rule 190 (statement -> expression_statement .)
    DO              reduce using rule 190 (statement -> expression_statement .)
    FOR             reduce using rule 190 (statement -> expression_statement .)
    BREAK           reduce using rule 190 (statement -> expression_statement .)
    CONTINUE        reduce using rule 190 (statement -> expression_statement .)
    RETURN          reduce using rule 190 (statement -> expression_statement .)
    GOTO            reduce using rule 190 (statement -> expression_statement .)
    TRY             reduce using rule 190 (statement -> expression_statement .)
    THROW           reduce using rule 190 (statement -> expression_statement .)
    ASM             reduce using rule 190 (statement -> expression_statement .)
    TEMPLATE        reduce using rule 190 (statement -> expression_statement .)
    DPLUSOP         reduce using rule 190 (statement -> expression_statement .)
    DMINUSOP        reduce using rule 190 (statement -> expression_statement .)
    SIZEOF          reduce using rule 190 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 190 (statement -> expression_statement .)
    LPAREN          reduce using rule 190 (statement -> expression_statement .)
    PLUSOP          reduce using rule 190 (statement -> expression_statement .)
    MINUSOP         reduce using rule 190 (statement -> expression_statement .)
    NOTSYM          reduce using rule 190 (statement -> expression_statement .)
    BNOP            reduce using rule 190 (statement -> expression_statement .)
    MULTOP          reduce using rule 190 (statement -> expression_statement .)
    BANDOP          reduce using rule 190 (statement -> expression_statement .)
    NEW             reduce using rule 190 (statement -> expression_statement .)
    DELETE          reduce using rule 190 (statement -> expression_statement .)
    AUTO            reduce using rule 190 (statement -> expression_statement .)
    STATIC          reduce using rule 190 (statement -> expression_statement .)
    EXTERN          reduce using rule 190 (statement -> expression_statement .)
    VIRTUAL         reduce using rule 190 (statement -> expression_statement .)
    CONST           reduce using rule 190 (statement -> expression_statement .)
    VOLATILE        reduce using rule 190 (statement -> expression_statement .)
    THIS            reduce using rule 190 (statement -> expression_statement .)
    CHAR            reduce using rule 190 (statement -> expression_statement .)
    SHORT           reduce using rule 190 (statement -> expression_statement .)
    INT             reduce using rule 190 (statement -> expression_statement .)
    LONG            reduce using rule 190 (statement -> expression_statement .)
    SIGNED          reduce using rule 190 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 190 (statement -> expression_statement .)
    FLOAT           reduce using rule 190 (statement -> expression_statement .)
    DOUBLE          reduce using rule 190 (statement -> expression_statement .)
    VOID            reduce using rule 190 (statement -> expression_statement .)
    STRING          reduce using rule 190 (statement -> expression_statement .)
    ENUM            reduce using rule 190 (statement -> expression_statement .)
    TYPE            reduce using rule 190 (statement -> expression_statement .)
    OPERATOR        reduce using rule 190 (statement -> expression_statement .)
    NUMBER          reduce using rule 190 (statement -> expression_statement .)
    STRING_L        reduce using rule 190 (statement -> expression_statement .)
    SCHAR           reduce using rule 190 (statement -> expression_statement .)
    CLASS           reduce using rule 190 (statement -> expression_statement .)
    STRUCT          reduce using rule 190 (statement -> expression_statement .)
    UNION           reduce using rule 190 (statement -> expression_statement .)
    ELSE            reduce using rule 190 (statement -> expression_statement .)


state 195

    (191) statement -> compound_statement .

    RCPAREN         reduce using rule 191 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 191 (statement -> compound_statement .)
    CASE            reduce using rule 191 (statement -> compound_statement .)
    DEFAULT         reduce using rule 191 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 191 (statement -> compound_statement .)
    LCPAREN         reduce using rule 191 (statement -> compound_statement .)
    IF              reduce using rule 191 (statement -> compound_statement .)
    SWITCH          reduce using rule 191 (statement -> compound_statement .)
    WHILE           reduce using rule 191 (statement -> compound_statement .)
    DO              reduce using rule 191 (statement -> compound_statement .)
    FOR             reduce using rule 191 (statement -> compound_statement .)
    BREAK           reduce using rule 191 (statement -> compound_statement .)
    CONTINUE        reduce using rule 191 (statement -> compound_statement .)
    RETURN          reduce using rule 191 (statement -> compound_statement .)
    GOTO            reduce using rule 191 (statement -> compound_statement .)
    TRY             reduce using rule 191 (statement -> compound_statement .)
    THROW           reduce using rule 191 (statement -> compound_statement .)
    ASM             reduce using rule 191 (statement -> compound_statement .)
    TEMPLATE        reduce using rule 191 (statement -> compound_statement .)
    DPLUSOP         reduce using rule 191 (statement -> compound_statement .)
    DMINUSOP        reduce using rule 191 (statement -> compound_statement .)
    SIZEOF          reduce using rule 191 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 191 (statement -> compound_statement .)
    LPAREN          reduce using rule 191 (statement -> compound_statement .)
    PLUSOP          reduce using rule 191 (statement -> compound_statement .)
    MINUSOP         reduce using rule 191 (statement -> compound_statement .)
    NOTSYM          reduce using rule 191 (statement -> compound_statement .)
    BNOP            reduce using rule 191 (statement -> compound_statement .)
    MULTOP          reduce using rule 191 (statement -> compound_statement .)
    BANDOP          reduce using rule 191 (statement -> compound_statement .)
    NEW             reduce using rule 191 (statement -> compound_statement .)
    DELETE          reduce using rule 191 (statement -> compound_statement .)
    AUTO            reduce using rule 191 (statement -> compound_statement .)
    STATIC          reduce using rule 191 (statement -> compound_statement .)
    EXTERN          reduce using rule 191 (statement -> compound_statement .)
    VIRTUAL         reduce using rule 191 (statement -> compound_statement .)
    CONST           reduce using rule 191 (statement -> compound_statement .)
    VOLATILE        reduce using rule 191 (statement -> compound_statement .)
    THIS            reduce using rule 191 (statement -> compound_statement .)
    CHAR            reduce using rule 191 (statement -> compound_statement .)
    SHORT           reduce using rule 191 (statement -> compound_statement .)
    INT             reduce using rule 191 (statement -> compound_statement .)
    LONG            reduce using rule 191 (statement -> compound_statement .)
    SIGNED          reduce using rule 191 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 191 (statement -> compound_statement .)
    FLOAT           reduce using rule 191 (statement -> compound_statement .)
    DOUBLE          reduce using rule 191 (statement -> compound_statement .)
    VOID            reduce using rule 191 (statement -> compound_statement .)
    STRING          reduce using rule 191 (statement -> compound_statement .)
    ENUM            reduce using rule 191 (statement -> compound_statement .)
    TYPE            reduce using rule 191 (statement -> compound_statement .)
    OPERATOR        reduce using rule 191 (statement -> compound_statement .)
    NUMBER          reduce using rule 191 (statement -> compound_statement .)
    STRING_L        reduce using rule 191 (statement -> compound_statement .)
    SCHAR           reduce using rule 191 (statement -> compound_statement .)
    CLASS           reduce using rule 191 (statement -> compound_statement .)
    STRUCT          reduce using rule 191 (statement -> compound_statement .)
    UNION           reduce using rule 191 (statement -> compound_statement .)
    ELSE            reduce using rule 191 (statement -> compound_statement .)


state 196

    (192) statement -> selection_statement .

    RCPAREN         reduce using rule 192 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 192 (statement -> selection_statement .)
    CASE            reduce using rule 192 (statement -> selection_statement .)
    DEFAULT         reduce using rule 192 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 192 (statement -> selection_statement .)
    LCPAREN         reduce using rule 192 (statement -> selection_statement .)
    IF              reduce using rule 192 (statement -> selection_statement .)
    SWITCH          reduce using rule 192 (statement -> selection_statement .)
    WHILE           reduce using rule 192 (statement -> selection_statement .)
    DO              reduce using rule 192 (statement -> selection_statement .)
    FOR             reduce using rule 192 (statement -> selection_statement .)
    BREAK           reduce using rule 192 (statement -> selection_statement .)
    CONTINUE        reduce using rule 192 (statement -> selection_statement .)
    RETURN          reduce using rule 192 (statement -> selection_statement .)
    GOTO            reduce using rule 192 (statement -> selection_statement .)
    TRY             reduce using rule 192 (statement -> selection_statement .)
    THROW           reduce using rule 192 (statement -> selection_statement .)
    ASM             reduce using rule 192 (statement -> selection_statement .)
    TEMPLATE        reduce using rule 192 (statement -> selection_statement .)
    DPLUSOP         reduce using rule 192 (statement -> selection_statement .)
    DMINUSOP        reduce using rule 192 (statement -> selection_statement .)
    SIZEOF          reduce using rule 192 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 192 (statement -> selection_statement .)
    LPAREN          reduce using rule 192 (statement -> selection_statement .)
    PLUSOP          reduce using rule 192 (statement -> selection_statement .)
    MINUSOP         reduce using rule 192 (statement -> selection_statement .)
    NOTSYM          reduce using rule 192 (statement -> selection_statement .)
    BNOP            reduce using rule 192 (statement -> selection_statement .)
    MULTOP          reduce using rule 192 (statement -> selection_statement .)
    BANDOP          reduce using rule 192 (statement -> selection_statement .)
    NEW             reduce using rule 192 (statement -> selection_statement .)
    DELETE          reduce using rule 192 (statement -> selection_statement .)
    AUTO            reduce using rule 192 (statement -> selection_statement .)
    STATIC          reduce using rule 192 (statement -> selection_statement .)
    EXTERN          reduce using rule 192 (statement -> selection_statement .)
    VIRTUAL         reduce using rule 192 (statement -> selection_statement .)
    CONST           reduce using rule 192 (statement -> selection_statement .)
    VOLATILE        reduce using rule 192 (statement -> selection_statement .)
    THIS            reduce using rule 192 (statement -> selection_statement .)
    CHAR            reduce using rule 192 (statement -> selection_statement .)
    SHORT           reduce using rule 192 (statement -> selection_statement .)
    INT             reduce using rule 192 (statement -> selection_statement .)
    LONG            reduce using rule 192 (statement -> selection_statement .)
    SIGNED          reduce using rule 192 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 192 (statement -> selection_statement .)
    FLOAT           reduce using rule 192 (statement -> selection_statement .)
    DOUBLE          reduce using rule 192 (statement -> selection_statement .)
    VOID            reduce using rule 192 (statement -> selection_statement .)
    STRING          reduce using rule 192 (statement -> selection_statement .)
    ENUM            reduce using rule 192 (statement -> selection_statement .)
    TYPE            reduce using rule 192 (statement -> selection_statement .)
    OPERATOR        reduce using rule 192 (statement -> selection_statement .)
    NUMBER          reduce using rule 192 (statement -> selection_statement .)
    STRING_L        reduce using rule 192 (statement -> selection_statement .)
    SCHAR           reduce using rule 192 (statement -> selection_statement .)
    CLASS           reduce using rule 192 (statement -> selection_statement .)
    STRUCT          reduce using rule 192 (statement -> selection_statement .)
    UNION           reduce using rule 192 (statement -> selection_statement .)
    ELSE            reduce using rule 192 (statement -> selection_statement .)


state 197

    (193) statement -> iteration_statement .

    RCPAREN         reduce using rule 193 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 193 (statement -> iteration_statement .)
    CASE            reduce using rule 193 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 193 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 193 (statement -> iteration_statement .)
    LCPAREN         reduce using rule 193 (statement -> iteration_statement .)
    IF              reduce using rule 193 (statement -> iteration_statement .)
    SWITCH          reduce using rule 193 (statement -> iteration_statement .)
    WHILE           reduce using rule 193 (statement -> iteration_statement .)
    DO              reduce using rule 193 (statement -> iteration_statement .)
    FOR             reduce using rule 193 (statement -> iteration_statement .)
    BREAK           reduce using rule 193 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 193 (statement -> iteration_statement .)
    RETURN          reduce using rule 193 (statement -> iteration_statement .)
    GOTO            reduce using rule 193 (statement -> iteration_statement .)
    TRY             reduce using rule 193 (statement -> iteration_statement .)
    THROW           reduce using rule 193 (statement -> iteration_statement .)
    ASM             reduce using rule 193 (statement -> iteration_statement .)
    TEMPLATE        reduce using rule 193 (statement -> iteration_statement .)
    DPLUSOP         reduce using rule 193 (statement -> iteration_statement .)
    DMINUSOP        reduce using rule 193 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 193 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 193 (statement -> iteration_statement .)
    LPAREN          reduce using rule 193 (statement -> iteration_statement .)
    PLUSOP          reduce using rule 193 (statement -> iteration_statement .)
    MINUSOP         reduce using rule 193 (statement -> iteration_statement .)
    NOTSYM          reduce using rule 193 (statement -> iteration_statement .)
    BNOP            reduce using rule 193 (statement -> iteration_statement .)
    MULTOP          reduce using rule 193 (statement -> iteration_statement .)
    BANDOP          reduce using rule 193 (statement -> iteration_statement .)
    NEW             reduce using rule 193 (statement -> iteration_statement .)
    DELETE          reduce using rule 193 (statement -> iteration_statement .)
    AUTO            reduce using rule 193 (statement -> iteration_statement .)
    STATIC          reduce using rule 193 (statement -> iteration_statement .)
    EXTERN          reduce using rule 193 (statement -> iteration_statement .)
    VIRTUAL         reduce using rule 193 (statement -> iteration_statement .)
    CONST           reduce using rule 193 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 193 (statement -> iteration_statement .)
    THIS            reduce using rule 193 (statement -> iteration_statement .)
    CHAR            reduce using rule 193 (statement -> iteration_statement .)
    SHORT           reduce using rule 193 (statement -> iteration_statement .)
    INT             reduce using rule 193 (statement -> iteration_statement .)
    LONG            reduce using rule 193 (statement -> iteration_statement .)
    SIGNED          reduce using rule 193 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 193 (statement -> iteration_statement .)
    FLOAT           reduce using rule 193 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 193 (statement -> iteration_statement .)
    VOID            reduce using rule 193 (statement -> iteration_statement .)
    STRING          reduce using rule 193 (statement -> iteration_statement .)
    ENUM            reduce using rule 193 (statement -> iteration_statement .)
    TYPE            reduce using rule 193 (statement -> iteration_statement .)
    OPERATOR        reduce using rule 193 (statement -> iteration_statement .)
    NUMBER          reduce using rule 193 (statement -> iteration_statement .)
    STRING_L        reduce using rule 193 (statement -> iteration_statement .)
    SCHAR           reduce using rule 193 (statement -> iteration_statement .)
    CLASS           reduce using rule 193 (statement -> iteration_statement .)
    STRUCT          reduce using rule 193 (statement -> iteration_statement .)
    UNION           reduce using rule 193 (statement -> iteration_statement .)
    ELSE            reduce using rule 193 (statement -> iteration_statement .)


state 198

    (194) statement -> jump_statement .

    RCPAREN         reduce using rule 194 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 194 (statement -> jump_statement .)
    CASE            reduce using rule 194 (statement -> jump_statement .)
    DEFAULT         reduce using rule 194 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 194 (statement -> jump_statement .)
    LCPAREN         reduce using rule 194 (statement -> jump_statement .)
    IF              reduce using rule 194 (statement -> jump_statement .)
    SWITCH          reduce using rule 194 (statement -> jump_statement .)
    WHILE           reduce using rule 194 (statement -> jump_statement .)
    DO              reduce using rule 194 (statement -> jump_statement .)
    FOR             reduce using rule 194 (statement -> jump_statement .)
    BREAK           reduce using rule 194 (statement -> jump_statement .)
    CONTINUE        reduce using rule 194 (statement -> jump_statement .)
    RETURN          reduce using rule 194 (statement -> jump_statement .)
    GOTO            reduce using rule 194 (statement -> jump_statement .)
    TRY             reduce using rule 194 (statement -> jump_statement .)
    THROW           reduce using rule 194 (statement -> jump_statement .)
    ASM             reduce using rule 194 (statement -> jump_statement .)
    TEMPLATE        reduce using rule 194 (statement -> jump_statement .)
    DPLUSOP         reduce using rule 194 (statement -> jump_statement .)
    DMINUSOP        reduce using rule 194 (statement -> jump_statement .)
    SIZEOF          reduce using rule 194 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 194 (statement -> jump_statement .)
    LPAREN          reduce using rule 194 (statement -> jump_statement .)
    PLUSOP          reduce using rule 194 (statement -> jump_statement .)
    MINUSOP         reduce using rule 194 (statement -> jump_statement .)
    NOTSYM          reduce using rule 194 (statement -> jump_statement .)
    BNOP            reduce using rule 194 (statement -> jump_statement .)
    MULTOP          reduce using rule 194 (statement -> jump_statement .)
    BANDOP          reduce using rule 194 (statement -> jump_statement .)
    NEW             reduce using rule 194 (statement -> jump_statement .)
    DELETE          reduce using rule 194 (statement -> jump_statement .)
    AUTO            reduce using rule 194 (statement -> jump_statement .)
    STATIC          reduce using rule 194 (statement -> jump_statement .)
    EXTERN          reduce using rule 194 (statement -> jump_statement .)
    VIRTUAL         reduce using rule 194 (statement -> jump_statement .)
    CONST           reduce using rule 194 (statement -> jump_statement .)
    VOLATILE        reduce using rule 194 (statement -> jump_statement .)
    THIS            reduce using rule 194 (statement -> jump_statement .)
    CHAR            reduce using rule 194 (statement -> jump_statement .)
    SHORT           reduce using rule 194 (statement -> jump_statement .)
    INT             reduce using rule 194 (statement -> jump_statement .)
    LONG            reduce using rule 194 (statement -> jump_statement .)
    SIGNED          reduce using rule 194 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 194 (statement -> jump_statement .)
    FLOAT           reduce using rule 194 (statement -> jump_statement .)
    DOUBLE          reduce using rule 194 (statement -> jump_statement .)
    VOID            reduce using rule 194 (statement -> jump_statement .)
    STRING          reduce using rule 194 (statement -> jump_statement .)
    ENUM            reduce using rule 194 (statement -> jump_statement .)
    TYPE            reduce using rule 194 (statement -> jump_statement .)
    OPERATOR        reduce using rule 194 (statement -> jump_statement .)
    NUMBER          reduce using rule 194 (statement -> jump_statement .)
    STRING_L        reduce using rule 194 (statement -> jump_statement .)
    SCHAR           reduce using rule 194 (statement -> jump_statement .)
    CLASS           reduce using rule 194 (statement -> jump_statement .)
    STRUCT          reduce using rule 194 (statement -> jump_statement .)
    UNION           reduce using rule 194 (statement -> jump_statement .)
    ELSE            reduce using rule 194 (statement -> jump_statement .)


state 199

    (195) statement -> declaration_statement .

    RCPAREN         reduce using rule 195 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 195 (statement -> declaration_statement .)
    CASE            reduce using rule 195 (statement -> declaration_statement .)
    DEFAULT         reduce using rule 195 (statement -> declaration_statement .)
    SEMICOLON       reduce using rule 195 (statement -> declaration_statement .)
    LCPAREN         reduce using rule 195 (statement -> declaration_statement .)
    IF              reduce using rule 195 (statement -> declaration_statement .)
    SWITCH          reduce using rule 195 (statement -> declaration_statement .)
    WHILE           reduce using rule 195 (statement -> declaration_statement .)
    DO              reduce using rule 195 (statement -> declaration_statement .)
    FOR             reduce using rule 195 (statement -> declaration_statement .)
    BREAK           reduce using rule 195 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 195 (statement -> declaration_statement .)
    RETURN          reduce using rule 195 (statement -> declaration_statement .)
    GOTO            reduce using rule 195 (statement -> declaration_statement .)
    TRY             reduce using rule 195 (statement -> declaration_statement .)
    THROW           reduce using rule 195 (statement -> declaration_statement .)
    ASM             reduce using rule 195 (statement -> declaration_statement .)
    TEMPLATE        reduce using rule 195 (statement -> declaration_statement .)
    DPLUSOP         reduce using rule 195 (statement -> declaration_statement .)
    DMINUSOP        reduce using rule 195 (statement -> declaration_statement .)
    SIZEOF          reduce using rule 195 (statement -> declaration_statement .)
    TYPEDEF         reduce using rule 195 (statement -> declaration_statement .)
    LPAREN          reduce using rule 195 (statement -> declaration_statement .)
    PLUSOP          reduce using rule 195 (statement -> declaration_statement .)
    MINUSOP         reduce using rule 195 (statement -> declaration_statement .)
    NOTSYM          reduce using rule 195 (statement -> declaration_statement .)
    BNOP            reduce using rule 195 (statement -> declaration_statement .)
    MULTOP          reduce using rule 195 (statement -> declaration_statement .)
    BANDOP          reduce using rule 195 (statement -> declaration_statement .)
    NEW             reduce using rule 195 (statement -> declaration_statement .)
    DELETE          reduce using rule 195 (statement -> declaration_statement .)
    AUTO            reduce using rule 195 (statement -> declaration_statement .)
    STATIC          reduce using rule 195 (statement -> declaration_statement .)
    EXTERN          reduce using rule 195 (statement -> declaration_statement .)
    VIRTUAL         reduce using rule 195 (statement -> declaration_statement .)
    CONST           reduce using rule 195 (statement -> declaration_statement .)
    VOLATILE        reduce using rule 195 (statement -> declaration_statement .)
    THIS            reduce using rule 195 (statement -> declaration_statement .)
    CHAR            reduce using rule 195 (statement -> declaration_statement .)
    SHORT           reduce using rule 195 (statement -> declaration_statement .)
    INT             reduce using rule 195 (statement -> declaration_statement .)
    LONG            reduce using rule 195 (statement -> declaration_statement .)
    SIGNED          reduce using rule 195 (statement -> declaration_statement .)
    UNSIGNED        reduce using rule 195 (statement -> declaration_statement .)
    FLOAT           reduce using rule 195 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 195 (statement -> declaration_statement .)
    VOID            reduce using rule 195 (statement -> declaration_statement .)
    STRING          reduce using rule 195 (statement -> declaration_statement .)
    ENUM            reduce using rule 195 (statement -> declaration_statement .)
    TYPE            reduce using rule 195 (statement -> declaration_statement .)
    OPERATOR        reduce using rule 195 (statement -> declaration_statement .)
    NUMBER          reduce using rule 195 (statement -> declaration_statement .)
    STRING_L        reduce using rule 195 (statement -> declaration_statement .)
    SCHAR           reduce using rule 195 (statement -> declaration_statement .)
    CLASS           reduce using rule 195 (statement -> declaration_statement .)
    STRUCT          reduce using rule 195 (statement -> declaration_statement .)
    UNION           reduce using rule 195 (statement -> declaration_statement .)
    ELSE            reduce using rule 195 (statement -> declaration_statement .)


state 200

    (196) statement -> try_block .

    RCPAREN         reduce using rule 196 (statement -> try_block .)
    IDENTIFIER      reduce using rule 196 (statement -> try_block .)
    CASE            reduce using rule 196 (statement -> try_block .)
    DEFAULT         reduce using rule 196 (statement -> try_block .)
    SEMICOLON       reduce using rule 196 (statement -> try_block .)
    LCPAREN         reduce using rule 196 (statement -> try_block .)
    IF              reduce using rule 196 (statement -> try_block .)
    SWITCH          reduce using rule 196 (statement -> try_block .)
    WHILE           reduce using rule 196 (statement -> try_block .)
    DO              reduce using rule 196 (statement -> try_block .)
    FOR             reduce using rule 196 (statement -> try_block .)
    BREAK           reduce using rule 196 (statement -> try_block .)
    CONTINUE        reduce using rule 196 (statement -> try_block .)
    RETURN          reduce using rule 196 (statement -> try_block .)
    GOTO            reduce using rule 196 (statement -> try_block .)
    TRY             reduce using rule 196 (statement -> try_block .)
    THROW           reduce using rule 196 (statement -> try_block .)
    ASM             reduce using rule 196 (statement -> try_block .)
    TEMPLATE        reduce using rule 196 (statement -> try_block .)
    DPLUSOP         reduce using rule 196 (statement -> try_block .)
    DMINUSOP        reduce using rule 196 (statement -> try_block .)
    SIZEOF          reduce using rule 196 (statement -> try_block .)
    TYPEDEF         reduce using rule 196 (statement -> try_block .)
    LPAREN          reduce using rule 196 (statement -> try_block .)
    PLUSOP          reduce using rule 196 (statement -> try_block .)
    MINUSOP         reduce using rule 196 (statement -> try_block .)
    NOTSYM          reduce using rule 196 (statement -> try_block .)
    BNOP            reduce using rule 196 (statement -> try_block .)
    MULTOP          reduce using rule 196 (statement -> try_block .)
    BANDOP          reduce using rule 196 (statement -> try_block .)
    NEW             reduce using rule 196 (statement -> try_block .)
    DELETE          reduce using rule 196 (statement -> try_block .)
    AUTO            reduce using rule 196 (statement -> try_block .)
    STATIC          reduce using rule 196 (statement -> try_block .)
    EXTERN          reduce using rule 196 (statement -> try_block .)
    VIRTUAL         reduce using rule 196 (statement -> try_block .)
    CONST           reduce using rule 196 (statement -> try_block .)
    VOLATILE        reduce using rule 196 (statement -> try_block .)
    THIS            reduce using rule 196 (statement -> try_block .)
    CHAR            reduce using rule 196 (statement -> try_block .)
    SHORT           reduce using rule 196 (statement -> try_block .)
    INT             reduce using rule 196 (statement -> try_block .)
    LONG            reduce using rule 196 (statement -> try_block .)
    SIGNED          reduce using rule 196 (statement -> try_block .)
    UNSIGNED        reduce using rule 196 (statement -> try_block .)
    FLOAT           reduce using rule 196 (statement -> try_block .)
    DOUBLE          reduce using rule 196 (statement -> try_block .)
    VOID            reduce using rule 196 (statement -> try_block .)
    STRING          reduce using rule 196 (statement -> try_block .)
    ENUM            reduce using rule 196 (statement -> try_block .)
    TYPE            reduce using rule 196 (statement -> try_block .)
    OPERATOR        reduce using rule 196 (statement -> try_block .)
    NUMBER          reduce using rule 196 (statement -> try_block .)
    STRING_L        reduce using rule 196 (statement -> try_block .)
    SCHAR           reduce using rule 196 (statement -> try_block .)
    CLASS           reduce using rule 196 (statement -> try_block .)
    STRUCT          reduce using rule 196 (statement -> try_block .)
    UNION           reduce using rule 196 (statement -> try_block .)
    ELSE            reduce using rule 196 (statement -> try_block .)


state 201

    (212) labeled_statement -> IDENTIFIER . COLON statement
    (264) name -> IDENTIFIER .

    COLON           shift and go to state 333
    LPAREN          reduce using rule 264 (name -> IDENTIFIER .)
    LSPAREN         reduce using rule 264 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 264 (name -> IDENTIFIER .)
    LCPAREN         reduce using rule 264 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 264 (name -> IDENTIFIER .)
    COMMA           reduce using rule 264 (name -> IDENTIFIER .)
    DOT             reduce using rule 264 (name -> IDENTIFIER .)
    ARROW           reduce using rule 264 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 264 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 264 (name -> IDENTIFIER .)
    LTEMPLATE       reduce using rule 264 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 264 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 264 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 264 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 264 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 264 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 264 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 264 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 264 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 264 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 264 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 264 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 264 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 264 (name -> IDENTIFIER .)
    MODOP           reduce using rule 264 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 264 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 264 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 264 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 264 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 264 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 264 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 264 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 264 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 264 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 264 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 264 (name -> IDENTIFIER .)
    XOROP           reduce using rule 264 (name -> IDENTIFIER .)
    OROP            reduce using rule 264 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 264 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 264 (name -> IDENTIFIER .)


state 202

    (213) labeled_statement -> CASE . constant_expression COLON statement
    (29) constant_expression -> . conditional_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    constant_expression            shift and go to state 334
    conditional_expression         shift and go to state 184
    logical_OR_expression          shift and go to state 148
    logical_AND_expression         shift and go to state 158
    inclusive_OR_expression        shift and go to state 168
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 203

    (214) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 335


state 204

    (223) expression_statement -> expression . SEMICOLON
    (65) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 336
    COMMA           shift and go to state 337


state 205

    (224) expression_statement -> SEMICOLON .

    RCPAREN         reduce using rule 224 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 224 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 224 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 224 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 224 (expression_statement -> SEMICOLON .)
    LCPAREN         reduce using rule 224 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 224 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 224 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 224 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 224 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 224 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 224 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 224 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 224 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 224 (expression_statement -> SEMICOLON .)
    TRY             reduce using rule 224 (expression_statement -> SEMICOLON .)
    THROW           reduce using rule 224 (expression_statement -> SEMICOLON .)
    ASM             reduce using rule 224 (expression_statement -> SEMICOLON .)
    TEMPLATE        reduce using rule 224 (expression_statement -> SEMICOLON .)
    DPLUSOP         reduce using rule 224 (expression_statement -> SEMICOLON .)
    DMINUSOP        reduce using rule 224 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 224 (expression_statement -> SEMICOLON .)
    TYPEDEF         reduce using rule 224 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 224 (expression_statement -> SEMICOLON .)
    PLUSOP          reduce using rule 224 (expression_statement -> SEMICOLON .)
    MINUSOP         reduce using rule 224 (expression_statement -> SEMICOLON .)
    NOTSYM          reduce using rule 224 (expression_statement -> SEMICOLON .)
    BNOP            reduce using rule 224 (expression_statement -> SEMICOLON .)
    MULTOP          reduce using rule 224 (expression_statement -> SEMICOLON .)
    BANDOP          reduce using rule 224 (expression_statement -> SEMICOLON .)
    NEW             reduce using rule 224 (expression_statement -> SEMICOLON .)
    DELETE          reduce using rule 224 (expression_statement -> SEMICOLON .)
    AUTO            reduce using rule 224 (expression_statement -> SEMICOLON .)
    STATIC          reduce using rule 224 (expression_statement -> SEMICOLON .)
    EXTERN          reduce using rule 224 (expression_statement -> SEMICOLON .)
    VIRTUAL         reduce using rule 224 (expression_statement -> SEMICOLON .)
    CONST           reduce using rule 224 (expression_statement -> SEMICOLON .)
    VOLATILE        reduce using rule 224 (expression_statement -> SEMICOLON .)
    THIS            reduce using rule 224 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 224 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 224 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 224 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 224 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 224 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 224 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 224 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 224 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 224 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 224 (expression_statement -> SEMICOLON .)
    ENUM            reduce using rule 224 (expression_statement -> SEMICOLON .)
    TYPE            reduce using rule 224 (expression_statement -> SEMICOLON .)
    OPERATOR        reduce using rule 224 (expression_statement -> SEMICOLON .)
    NUMBER          reduce using rule 224 (expression_statement -> SEMICOLON .)
    STRING_L        reduce using rule 224 (expression_statement -> SEMICOLON .)
    SCHAR           reduce using rule 224 (expression_statement -> SEMICOLON .)
    CLASS           reduce using rule 224 (expression_statement -> SEMICOLON .)
    STRUCT          reduce using rule 224 (expression_statement -> SEMICOLON .)
    UNION           reduce using rule 224 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 224 (expression_statement -> SEMICOLON .)


state 206

    (202) selection_statement -> IF . LPAREN expression RPAREN statement
    (203) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 338


state 207

    (263) declarator -> LPAREN . declarator RPAREN
    (124) primary_expression -> LPAREN . expression RPAREN
    (130) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (131) type_name -> . type_specifier_list abstract_declarator
    (132) type_name -> . type_specifier_list
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (267) type_specifier_list -> . type_specifier type_specifier_list
    (268) type_specifier_list -> . type_specifier
    (269) operator_function_name -> . OPERATOR operator_name
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LPAREN          shift and go to state 207
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 340
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    THROW           shift and go to state 220
    OPERATOR        shift and go to state 54
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    THIS            shift and go to state 170
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174

    declarator                     shift and go to state 72
    expression                     shift and go to state 260
    type_name                      shift and go to state 261
    cast_expression                shift and go to state 153
    name                           shift and go to state 222
    unary2_operator                shift and go to state 339
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    type_specifier_list            shift and go to state 262
    operator_function_name         shift and go to state 36
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    type_specifier                 shift and go to state 263
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    simple_type_name               shift and go to state 264
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 208

    (204) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 341


state 209

    (215) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 342


state 210

    (216) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (189) statement -> . labeled_statement
    (190) statement -> . expression_statement
    (191) statement -> . compound_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) statement -> . declaration_statement
    (196) statement -> . try_block
    (212) labeled_statement -> . IDENTIFIER COLON statement
    (213) labeled_statement -> . CASE constant_expression COLON statement
    (214) labeled_statement -> . DEFAULT COLON statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN
    (202) selection_statement -> . IF LPAREN expression RPAREN statement
    (203) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (204) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (215) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (216) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (217) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (197) jump_statement -> . BREAK SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . RETURN expression SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (225) declaration_statement -> . declaration
    (205) try_block -> . TRY compound_statement handler_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 201
    CASE            shift and go to state 202
    DEFAULT         shift and go to state 203
    SEMICOLON       shift and go to state 205
    LCPAREN         shift and go to state 79
    IF              shift and go to state 206
    SWITCH          shift and go to state 208
    WHILE           shift and go to state 209
    DO              shift and go to state 210
    FOR             shift and go to state 211
    BREAK           shift and go to state 212
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 214
    GOTO            shift and go to state 215
    TRY             shift and go to state 217
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    statement                      shift and go to state 343
    expression                     shift and go to state 204
    labeled_statement              shift and go to state 193
    expression_statement           shift and go to state 194
    compound_statement             shift and go to state 195
    selection_statement            shift and go to state 196
    iteration_statement            shift and go to state 197
    jump_statement                 shift and go to state 198
    declaration_statement          shift and go to state 199
    try_block                      shift and go to state 200
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 211

    (217) iteration_statement -> FOR . LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> FOR . LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON RPAREN statement

    LPAREN          shift and go to state 344


state 212

    (197) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 345


state 213

    (198) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 346


state 214

    (199) jump_statement -> RETURN . expression SEMICOLON
    (200) jump_statement -> RETURN . SEMICOLON
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 348
    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 347
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 215

    (201) jump_statement -> GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 349


state 216

    (225) declaration_statement -> declaration .

    RCPAREN         reduce using rule 225 (declaration_statement -> declaration .)
    IDENTIFIER      reduce using rule 225 (declaration_statement -> declaration .)
    CASE            reduce using rule 225 (declaration_statement -> declaration .)
    DEFAULT         reduce using rule 225 (declaration_statement -> declaration .)
    SEMICOLON       reduce using rule 225 (declaration_statement -> declaration .)
    LCPAREN         reduce using rule 225 (declaration_statement -> declaration .)
    IF              reduce using rule 225 (declaration_statement -> declaration .)
    SWITCH          reduce using rule 225 (declaration_statement -> declaration .)
    WHILE           reduce using rule 225 (declaration_statement -> declaration .)
    DO              reduce using rule 225 (declaration_statement -> declaration .)
    FOR             reduce using rule 225 (declaration_statement -> declaration .)
    BREAK           reduce using rule 225 (declaration_statement -> declaration .)
    CONTINUE        reduce using rule 225 (declaration_statement -> declaration .)
    RETURN          reduce using rule 225 (declaration_statement -> declaration .)
    GOTO            reduce using rule 225 (declaration_statement -> declaration .)
    TRY             reduce using rule 225 (declaration_statement -> declaration .)
    THROW           reduce using rule 225 (declaration_statement -> declaration .)
    ASM             reduce using rule 225 (declaration_statement -> declaration .)
    TEMPLATE        reduce using rule 225 (declaration_statement -> declaration .)
    DPLUSOP         reduce using rule 225 (declaration_statement -> declaration .)
    DMINUSOP        reduce using rule 225 (declaration_statement -> declaration .)
    SIZEOF          reduce using rule 225 (declaration_statement -> declaration .)
    TYPEDEF         reduce using rule 225 (declaration_statement -> declaration .)
    LPAREN          reduce using rule 225 (declaration_statement -> declaration .)
    PLUSOP          reduce using rule 225 (declaration_statement -> declaration .)
    MINUSOP         reduce using rule 225 (declaration_statement -> declaration .)
    NOTSYM          reduce using rule 225 (declaration_statement -> declaration .)
    BNOP            reduce using rule 225 (declaration_statement -> declaration .)
    MULTOP          reduce using rule 225 (declaration_statement -> declaration .)
    BANDOP          reduce using rule 225 (declaration_statement -> declaration .)
    NEW             reduce using rule 225 (declaration_statement -> declaration .)
    DELETE          reduce using rule 225 (declaration_statement -> declaration .)
    AUTO            reduce using rule 225 (declaration_statement -> declaration .)
    STATIC          reduce using rule 225 (declaration_statement -> declaration .)
    EXTERN          reduce using rule 225 (declaration_statement -> declaration .)
    VIRTUAL         reduce using rule 225 (declaration_statement -> declaration .)
    CONST           reduce using rule 225 (declaration_statement -> declaration .)
    VOLATILE        reduce using rule 225 (declaration_statement -> declaration .)
    THIS            reduce using rule 225 (declaration_statement -> declaration .)
    CHAR            reduce using rule 225 (declaration_statement -> declaration .)
    SHORT           reduce using rule 225 (declaration_statement -> declaration .)
    INT             reduce using rule 225 (declaration_statement -> declaration .)
    LONG            reduce using rule 225 (declaration_statement -> declaration .)
    SIGNED          reduce using rule 225 (declaration_statement -> declaration .)
    UNSIGNED        reduce using rule 225 (declaration_statement -> declaration .)
    FLOAT           reduce using rule 225 (declaration_statement -> declaration .)
    DOUBLE          reduce using rule 225 (declaration_statement -> declaration .)
    VOID            reduce using rule 225 (declaration_statement -> declaration .)
    STRING          reduce using rule 225 (declaration_statement -> declaration .)
    ENUM            reduce using rule 225 (declaration_statement -> declaration .)
    TYPE            reduce using rule 225 (declaration_statement -> declaration .)
    OPERATOR        reduce using rule 225 (declaration_statement -> declaration .)
    NUMBER          reduce using rule 225 (declaration_statement -> declaration .)
    STRING_L        reduce using rule 225 (declaration_statement -> declaration .)
    SCHAR           reduce using rule 225 (declaration_statement -> declaration .)
    CLASS           reduce using rule 225 (declaration_statement -> declaration .)
    STRUCT          reduce using rule 225 (declaration_statement -> declaration .)
    UNION           reduce using rule 225 (declaration_statement -> declaration .)
    ELSE            reduce using rule 225 (declaration_statement -> declaration .)


state 217

    (205) try_block -> TRY . compound_statement handler_list
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 79

    compound_statement             shift and go to state 350

state 218

    (63) expression -> assignment_expression .

    SEMICOLON       reduce using rule 63 (expression -> assignment_expression .)
    COMMA           reduce using rule 63 (expression -> assignment_expression .)
    RPAREN          reduce using rule 63 (expression -> assignment_expression .)
    RTEMPLATE       reduce using rule 63 (expression -> assignment_expression .)
    COLON           reduce using rule 63 (expression -> assignment_expression .)
    RSPAREN         reduce using rule 63 (expression -> assignment_expression .)


state 219

    (64) expression -> throw_expression .

    SEMICOLON       reduce using rule 64 (expression -> throw_expression .)
    COMMA           reduce using rule 64 (expression -> throw_expression .)
    RPAREN          reduce using rule 64 (expression -> throw_expression .)
    RTEMPLATE       reduce using rule 64 (expression -> throw_expression .)
    COLON           reduce using rule 64 (expression -> throw_expression .)
    RSPAREN         reduce using rule 64 (expression -> throw_expression .)


state 220

    (9) throw_expression -> THROW . expression
    (10) throw_expression -> THROW .
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       reduce using rule 10 (throw_expression -> THROW .)
    COMMA           reduce using rule 10 (throw_expression -> THROW .)
    RPAREN          reduce using rule 10 (throw_expression -> THROW .)
    RTEMPLATE       reduce using rule 10 (throw_expression -> THROW .)
    COLON           reduce using rule 10 (throw_expression -> THROW .)
    RSPAREN         reduce using rule 10 (throw_expression -> THROW .)
    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 351
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 221

    (82) unary_expression -> unary2_operator . cast_expression
    (259) declarator -> unary2_operator . declarator
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR

    LPAREN          shift and go to state 352
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 340
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    OPERATOR        shift and go to state 54
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174

    unary2_operator                shift and go to state 339
    cast_expression                shift and go to state 299
    declarator                     shift and go to state 81
    unary_expression               shift and go to state 185
    name                           shift and go to state 222
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    operator_function_name         shift and go to state 36
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    literal                        shift and go to state 169

state 222

    (258) declarator -> name .
    (125) primary_expression -> name .

  ! reduce/reduce conflict for LSPAREN resolved using rule 125 (primary_expression -> name .)
  ! reduce/reduce conflict for LPAREN resolved using rule 125 (primary_expression -> name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 125 (primary_expression -> name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 125 (primary_expression -> name .)
  ! reduce/reduce conflict for COMMA resolved using rule 125 (primary_expression -> name .)
  ! reduce/reduce conflict for RPAREN resolved using rule 125 (primary_expression -> name .)
    LCPAREN         reduce using rule 258 (declarator -> name .)
    LSPAREN         reduce using rule 125 (primary_expression -> name .)
    LPAREN          reduce using rule 125 (primary_expression -> name .)
    DOT             reduce using rule 125 (primary_expression -> name .)
    ARROW           reduce using rule 125 (primary_expression -> name .)
    DPLUSOP         reduce using rule 125 (primary_expression -> name .)
    DMINUSOP        reduce using rule 125 (primary_expression -> name .)
    LTEMPLATE       reduce using rule 125 (primary_expression -> name .)
    EQUAL           reduce using rule 125 (primary_expression -> name .)
    MULTEQOP        reduce using rule 125 (primary_expression -> name .)
    DIVEQOP         reduce using rule 125 (primary_expression -> name .)
    MODEQOP         reduce using rule 125 (primary_expression -> name .)
    PLUSEQOP        reduce using rule 125 (primary_expression -> name .)
    MINUSEQOP       reduce using rule 125 (primary_expression -> name .)
    LSHIFTEQOP      reduce using rule 125 (primary_expression -> name .)
    RSHIFTEQOP      reduce using rule 125 (primary_expression -> name .)
    BANDEQOP        reduce using rule 125 (primary_expression -> name .)
    BOREQOP         reduce using rule 125 (primary_expression -> name .)
    DOTSTAR         reduce using rule 125 (primary_expression -> name .)
    ARROWSTAR       reduce using rule 125 (primary_expression -> name .)
    MULTOP          reduce using rule 125 (primary_expression -> name .)
    DIVOP           reduce using rule 125 (primary_expression -> name .)
    MODOP           reduce using rule 125 (primary_expression -> name .)
    PLUSOP          reduce using rule 125 (primary_expression -> name .)
    MINUSOP         reduce using rule 125 (primary_expression -> name .)
    LSHIFT          reduce using rule 125 (primary_expression -> name .)
    RSHIFT          reduce using rule 125 (primary_expression -> name .)
    LTCOMP          reduce using rule 125 (primary_expression -> name .)
    GTCOMP          reduce using rule 125 (primary_expression -> name .)
    LTECOMP         reduce using rule 125 (primary_expression -> name .)
    GTECOMP         reduce using rule 125 (primary_expression -> name .)
    EQCOMP          reduce using rule 125 (primary_expression -> name .)
    NEQCOMP         reduce using rule 125 (primary_expression -> name .)
    BANDOP          reduce using rule 125 (primary_expression -> name .)
    XOROP           reduce using rule 125 (primary_expression -> name .)
    OROP            reduce using rule 125 (primary_expression -> name .)
    ANDOP           reduce using rule 125 (primary_expression -> name .)
    QUESMARK        reduce using rule 125 (primary_expression -> name .)
    SEMICOLON       reduce using rule 125 (primary_expression -> name .)
    COMMA           reduce using rule 125 (primary_expression -> name .)
    RPAREN          reduce using rule 125 (primary_expression -> name .)

  ! LPAREN          [ reduce using rule 258 (declarator -> name .) ]
  ! LSPAREN         [ reduce using rule 258 (declarator -> name .) ]
  ! EQUAL           [ reduce using rule 258 (declarator -> name .) ]
  ! SEMICOLON       [ reduce using rule 258 (declarator -> name .) ]
  ! COMMA           [ reduce using rule 258 (declarator -> name .) ]
  ! RPAREN          [ reduce using rule 258 (declarator -> name .) ]


state 223

    (232) template_declaration -> TEMPLATE LTEMPLATE template_argument_list . RTEMPLATE declaration
    (234) template_argument_list -> template_argument_list . COMMA argument_declaration

    RTEMPLATE       shift and go to state 353
    COMMA           shift and go to state 354


state 224

    (233) template_argument_list -> argument_declaration .

    RTEMPLATE       reduce using rule 233 (template_argument_list -> argument_declaration .)
    COMMA           reduce using rule 233 (template_argument_list -> argument_declaration .)


state 225

    (167) class_specifier -> class_head LCPAREN member_list . RCPAREN
    (171) member_list -> member_list . access_list
    (172) access_list -> . access_specifier COLON member_access_list
    (173) access_list -> . access_specifier COLON
    (324) access_specifier -> . PRIVATE
    (325) access_specifier -> . PROTECTED
    (326) access_specifier -> . PUBLIC

    RCPAREN         shift and go to state 355
    PRIVATE         shift and go to state 236
    PROTECTED       shift and go to state 237
    PUBLIC          shift and go to state 238

    access_list                    shift and go to state 356
    access_specifier               shift and go to state 230

state 226

    (168) class_specifier -> class_head LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    LPAREN          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    AUTO            reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    STATIC          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    EXTERN          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    CONST           reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    BNOP            reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    MULTOP          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    BANDOP          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    CHAR            reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    SHORT           reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    INT             reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    LONG            reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    SIGNED          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    FLOAT           reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    VOID            reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    STRING          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    ENUM            reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    TYPE            reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    CLASS           reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    STRUCT          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    UNION           reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    EQUAL           reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    LSPAREN         reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    COMMA           reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    RPAREN          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    RTEMPLATE       reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    COLON           reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    MULTEQOP        reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    DIVEQOP         reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    MODEQOP         reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    PLUSEQOP        reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    MINUSEQOP       reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    LSHIFTEQOP      reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    RSHIFTEQOP      reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    BANDEQOP        reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    BOREQOP         reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    DOTSTAR         reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    ARROWSTAR       reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    DIVOP           reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    MODOP           reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    LSHIFT          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    RSHIFT          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    LTCOMP          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    GTCOMP          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    LTECOMP         reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    GTECOMP         reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    EQCOMP          reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    NEQCOMP         reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    XOROP           reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    OROP            reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    ANDOP           reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    QUESMARK        reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    RSPAREN         reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 168 (class_specifier -> class_head LCPAREN RCPAREN .)


state 227

    (169) member_list -> member_access_list .

    RCPAREN         reduce using rule 169 (member_list -> member_access_list .)
    PRIVATE         reduce using rule 169 (member_list -> member_access_list .)
    PROTECTED       reduce using rule 169 (member_list -> member_access_list .)
    PUBLIC          reduce using rule 169 (member_list -> member_access_list .)


state 228

    (170) member_list -> access_list .

    RCPAREN         reduce using rule 170 (member_list -> access_list .)
    PRIVATE         reduce using rule 170 (member_list -> access_list .)
    PROTECTED       reduce using rule 170 (member_list -> access_list .)
    PUBLIC          reduce using rule 170 (member_list -> access_list .)


state 229

    (174) member_access_list -> member_declaration . member_access_list
    (175) member_access_list -> member_declaration .
    (174) member_access_list -> . member_declaration member_access_list
    (175) member_access_list -> . member_declaration
    (176) member_declaration -> . decl_specifiers member_declarator_list SEMICOLON
    (177) member_declaration -> . member_declarator_list SEMICOLON
    (178) member_declaration -> . decl_specifiers SEMICOLON
    (179) member_declaration -> . SEMICOLON
    (180) member_declaration -> . function_definition SEMICOLON
    (181) member_declaration -> . function_definition
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (252) member_declarator_list -> . member_declarator
    (253) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (254) member_declarator -> . declarator pure_specifier
    (255) member_declarator -> . declarator
    (256) member_declarator -> . IDENTIFIER COLON constant_expression
    (257) member_declarator -> . COLON constant_expression
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    RCPAREN         reduce using rule 175 (member_access_list -> member_declaration .)
    PRIVATE         reduce using rule 175 (member_access_list -> member_declaration .)
    PROTECTED       reduce using rule 175 (member_access_list -> member_declaration .)
    PUBLIC          reduce using rule 175 (member_access_list -> member_declaration .)
    SEMICOLON       shift and go to state 234
    TYPEDEF         shift and go to state 22
    IDENTIFIER      shift and go to state 241
    COLON           shift and go to state 231
    LPAREN          shift and go to state 17
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    member_declaration             shift and go to state 229
    member_access_list             shift and go to state 357
    decl_specifiers                shift and go to state 232
    member_declarator_list         shift and go to state 233
    function_definition            shift and go to state 235
    decl_specifier                 shift and go to state 14
    member_declarator              shift and go to state 239
    declarator                     shift and go to state 240
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 23
    unary2_operator                shift and go to state 24
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 230

    (172) access_list -> access_specifier . COLON member_access_list
    (173) access_list -> access_specifier . COLON

    COLON           shift and go to state 358


state 231

    (257) member_declarator -> COLON . constant_expression
    (29) constant_expression -> . conditional_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    constant_expression            shift and go to state 359
    conditional_expression         shift and go to state 184
    logical_OR_expression          shift and go to state 148
    logical_AND_expression         shift and go to state 158
    inclusive_OR_expression        shift and go to state 168
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 232

    (176) member_declaration -> decl_specifiers . member_declarator_list SEMICOLON
    (178) member_declaration -> decl_specifiers . SEMICOLON
    (152) decl_specifiers -> decl_specifiers . decl_specifier
    (182) function_definition -> decl_specifiers . declarator fct_body
    (252) member_declarator_list -> . member_declarator
    (253) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (254) member_declarator -> . declarator pure_specifier
    (255) member_declarator -> . declarator
    (256) member_declarator -> . IDENTIFIER COLON constant_expression
    (257) member_declarator -> . COLON constant_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    SEMICOLON       shift and go to state 361
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 241
    COLON           shift and go to state 231
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    member_declarator_list         shift and go to state 360
    decl_specifier                 shift and go to state 66
    declarator                     shift and go to state 362
    member_declarator              shift and go to state 239
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 23
    unary2_operator                shift and go to state 24
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 233

    (177) member_declaration -> member_declarator_list . SEMICOLON
    (253) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 363
    COMMA           shift and go to state 364


state 234

    (179) member_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 179 (member_declaration -> SEMICOLON .)
    TYPEDEF         reduce using rule 179 (member_declaration -> SEMICOLON .)
    IDENTIFIER      reduce using rule 179 (member_declaration -> SEMICOLON .)
    COLON           reduce using rule 179 (member_declaration -> SEMICOLON .)
    LPAREN          reduce using rule 179 (member_declaration -> SEMICOLON .)
    AUTO            reduce using rule 179 (member_declaration -> SEMICOLON .)
    STATIC          reduce using rule 179 (member_declaration -> SEMICOLON .)
    EXTERN          reduce using rule 179 (member_declaration -> SEMICOLON .)
    VIRTUAL         reduce using rule 179 (member_declaration -> SEMICOLON .)
    CONST           reduce using rule 179 (member_declaration -> SEMICOLON .)
    VOLATILE        reduce using rule 179 (member_declaration -> SEMICOLON .)
    BNOP            reduce using rule 179 (member_declaration -> SEMICOLON .)
    MULTOP          reduce using rule 179 (member_declaration -> SEMICOLON .)
    BANDOP          reduce using rule 179 (member_declaration -> SEMICOLON .)
    CHAR            reduce using rule 179 (member_declaration -> SEMICOLON .)
    SHORT           reduce using rule 179 (member_declaration -> SEMICOLON .)
    INT             reduce using rule 179 (member_declaration -> SEMICOLON .)
    LONG            reduce using rule 179 (member_declaration -> SEMICOLON .)
    SIGNED          reduce using rule 179 (member_declaration -> SEMICOLON .)
    UNSIGNED        reduce using rule 179 (member_declaration -> SEMICOLON .)
    FLOAT           reduce using rule 179 (member_declaration -> SEMICOLON .)
    DOUBLE          reduce using rule 179 (member_declaration -> SEMICOLON .)
    VOID            reduce using rule 179 (member_declaration -> SEMICOLON .)
    STRING          reduce using rule 179 (member_declaration -> SEMICOLON .)
    ENUM            reduce using rule 179 (member_declaration -> SEMICOLON .)
    TYPE            reduce using rule 179 (member_declaration -> SEMICOLON .)
    OPERATOR        reduce using rule 179 (member_declaration -> SEMICOLON .)
    CLASS           reduce using rule 179 (member_declaration -> SEMICOLON .)
    STRUCT          reduce using rule 179 (member_declaration -> SEMICOLON .)
    UNION           reduce using rule 179 (member_declaration -> SEMICOLON .)
    TEMPLATE        reduce using rule 179 (member_declaration -> SEMICOLON .)
    RCPAREN         reduce using rule 179 (member_declaration -> SEMICOLON .)
    PRIVATE         reduce using rule 179 (member_declaration -> SEMICOLON .)
    PROTECTED       reduce using rule 179 (member_declaration -> SEMICOLON .)
    PUBLIC          reduce using rule 179 (member_declaration -> SEMICOLON .)


state 235

    (180) member_declaration -> function_definition . SEMICOLON
    (181) member_declaration -> function_definition .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 365
    TYPEDEF         reduce using rule 181 (member_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 181 (member_declaration -> function_definition .)
    COLON           reduce using rule 181 (member_declaration -> function_definition .)
    LPAREN          reduce using rule 181 (member_declaration -> function_definition .)
    AUTO            reduce using rule 181 (member_declaration -> function_definition .)
    STATIC          reduce using rule 181 (member_declaration -> function_definition .)
    EXTERN          reduce using rule 181 (member_declaration -> function_definition .)
    VIRTUAL         reduce using rule 181 (member_declaration -> function_definition .)
    CONST           reduce using rule 181 (member_declaration -> function_definition .)
    VOLATILE        reduce using rule 181 (member_declaration -> function_definition .)
    BNOP            reduce using rule 181 (member_declaration -> function_definition .)
    MULTOP          reduce using rule 181 (member_declaration -> function_definition .)
    BANDOP          reduce using rule 181 (member_declaration -> function_definition .)
    CHAR            reduce using rule 181 (member_declaration -> function_definition .)
    SHORT           reduce using rule 181 (member_declaration -> function_definition .)
    INT             reduce using rule 181 (member_declaration -> function_definition .)
    LONG            reduce using rule 181 (member_declaration -> function_definition .)
    SIGNED          reduce using rule 181 (member_declaration -> function_definition .)
    UNSIGNED        reduce using rule 181 (member_declaration -> function_definition .)
    FLOAT           reduce using rule 181 (member_declaration -> function_definition .)
    DOUBLE          reduce using rule 181 (member_declaration -> function_definition .)
    VOID            reduce using rule 181 (member_declaration -> function_definition .)
    STRING          reduce using rule 181 (member_declaration -> function_definition .)
    ENUM            reduce using rule 181 (member_declaration -> function_definition .)
    TYPE            reduce using rule 181 (member_declaration -> function_definition .)
    OPERATOR        reduce using rule 181 (member_declaration -> function_definition .)
    CLASS           reduce using rule 181 (member_declaration -> function_definition .)
    STRUCT          reduce using rule 181 (member_declaration -> function_definition .)
    UNION           reduce using rule 181 (member_declaration -> function_definition .)
    TEMPLATE        reduce using rule 181 (member_declaration -> function_definition .)
    RCPAREN         reduce using rule 181 (member_declaration -> function_definition .)
    PRIVATE         reduce using rule 181 (member_declaration -> function_definition .)
    PROTECTED       reduce using rule 181 (member_declaration -> function_definition .)
    PUBLIC          reduce using rule 181 (member_declaration -> function_definition .)

  ! SEMICOLON       [ reduce using rule 181 (member_declaration -> function_definition .) ]


state 236

    (324) access_specifier -> PRIVATE .

    COLON           reduce using rule 324 (access_specifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 324 (access_specifier -> PRIVATE .)
    CLASS           reduce using rule 324 (access_specifier -> PRIVATE .)
    STRUCT          reduce using rule 324 (access_specifier -> PRIVATE .)
    UNION           reduce using rule 324 (access_specifier -> PRIVATE .)
    TEMPLATE        reduce using rule 324 (access_specifier -> PRIVATE .)


state 237

    (325) access_specifier -> PROTECTED .

    COLON           reduce using rule 325 (access_specifier -> PROTECTED .)
    IDENTIFIER      reduce using rule 325 (access_specifier -> PROTECTED .)
    CLASS           reduce using rule 325 (access_specifier -> PROTECTED .)
    STRUCT          reduce using rule 325 (access_specifier -> PROTECTED .)
    UNION           reduce using rule 325 (access_specifier -> PROTECTED .)
    TEMPLATE        reduce using rule 325 (access_specifier -> PROTECTED .)


state 238

    (326) access_specifier -> PUBLIC .

    COLON           reduce using rule 326 (access_specifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 326 (access_specifier -> PUBLIC .)
    CLASS           reduce using rule 326 (access_specifier -> PUBLIC .)
    STRUCT          reduce using rule 326 (access_specifier -> PUBLIC .)
    UNION           reduce using rule 326 (access_specifier -> PUBLIC .)
    TEMPLATE        reduce using rule 326 (access_specifier -> PUBLIC .)


state 239

    (252) member_declarator_list -> member_declarator .

    SEMICOLON       reduce using rule 252 (member_declarator_list -> member_declarator .)
    COMMA           reduce using rule 252 (member_declarator_list -> member_declarator .)


state 240

    (183) function_definition -> declarator . fct_body
    (254) member_declarator -> declarator . pure_specifier
    (255) member_declarator -> declarator .
    (260) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (261) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (262) declarator -> declarator . LSPAREN RSPAREN
    (184) fct_body -> . compound_statement
    (308) pure_specifier -> . EQUAL NUMBER
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN

    SEMICOLON       reduce using rule 255 (member_declarator -> declarator .)
    COMMA           reduce using rule 255 (member_declarator -> declarator .)
    LPAREN          shift and go to state 136
    LSPAREN         shift and go to state 76
    EQUAL           shift and go to state 367
    LCPAREN         shift and go to state 79

    fct_body                       shift and go to state 73
    pure_specifier                 shift and go to state 366
    compound_statement             shift and go to state 77

state 241

    (256) member_declarator -> IDENTIFIER . COLON constant_expression
    (264) name -> IDENTIFIER .

    COLON           shift and go to state 368
    LPAREN          reduce using rule 264 (name -> IDENTIFIER .)
    LSPAREN         reduce using rule 264 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 264 (name -> IDENTIFIER .)
    LCPAREN         reduce using rule 264 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 264 (name -> IDENTIFIER .)
    COMMA           reduce using rule 264 (name -> IDENTIFIER .)


state 242

    (21) enum_specifier -> ENUM IDENTIFIER LCPAREN . enum_list RCPAREN
    (23) enum_specifier -> ENUM IDENTIFIER LCPAREN . RCPAREN
    (25) enum_list -> . enumerator
    (26) enum_list -> . enum_list COMMA enumerator
    (27) enumerator -> . IDENTIFIER
    (28) enumerator -> . IDENTIFIER EQUAL constant_expression

    RCPAREN         shift and go to state 370
    IDENTIFIER      shift and go to state 246

    enum_list                      shift and go to state 369
    enumerator                     shift and go to state 245

state 243

    (22) enum_specifier -> ENUM LCPAREN enum_list . RCPAREN
    (26) enum_list -> enum_list . COMMA enumerator

    RCPAREN         shift and go to state 371
    COMMA           shift and go to state 372


state 244

    (24) enum_specifier -> ENUM LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LPAREN          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    AUTO            reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    STATIC          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    EXTERN          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    CONST           reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BNOP            reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MULTOP          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BANDOP          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    CHAR            reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    SHORT           reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    INT             reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LONG            reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    SIGNED          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    FLOAT           reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    VOID            reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    STRING          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    ENUM            reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    TYPE            reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    CLASS           reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    STRUCT          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    UNION           reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    EQUAL           reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LSPAREN         reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    COMMA           reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RPAREN          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RTEMPLATE       reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    COLON           reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MULTEQOP        reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DIVEQOP         reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MODEQOP         reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    PLUSEQOP        reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MINUSEQOP       reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LSHIFTEQOP      reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RSHIFTEQOP      reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BANDEQOP        reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BOREQOP         reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DOTSTAR         reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    ARROWSTAR       reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DIVOP           reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MODOP           reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LSHIFT          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RSHIFT          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LTCOMP          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    GTCOMP          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LTECOMP         reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    GTECOMP         reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    EQCOMP          reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    NEQCOMP         reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    XOROP           reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    OROP            reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    ANDOP           reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    QUESMARK        reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RSPAREN         reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 24 (enum_specifier -> ENUM LCPAREN RCPAREN .)


state 245

    (25) enum_list -> enumerator .

    RCPAREN         reduce using rule 25 (enum_list -> enumerator .)
    COMMA           reduce using rule 25 (enum_list -> enumerator .)


state 246

    (27) enumerator -> IDENTIFIER .
    (28) enumerator -> IDENTIFIER . EQUAL constant_expression

    RCPAREN         reduce using rule 27 (enumerator -> IDENTIFIER .)
    COMMA           reduce using rule 27 (enumerator -> IDENTIFIER .)
    EQUAL           shift and go to state 373


state 247

    (328) elaborated_type_specifier -> class_key IDENTIFIER template_class_name .

    SEMICOLON       reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    TYPEDEF         reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    LPAREN          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    AUTO            reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    STATIC          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    EXTERN          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    VIRTUAL         reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    CONST           reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    VOLATILE        reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    IDENTIFIER      reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    BNOP            reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    MULTOP          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    BANDOP          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    CHAR            reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    SHORT           reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    INT             reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    LONG            reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    SIGNED          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    UNSIGNED        reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    FLOAT           reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    DOUBLE          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    VOID            reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    STRING          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    ENUM            reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    TYPE            reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    OPERATOR        reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    CLASS           reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    STRUCT          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    UNION           reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    TEMPLATE        reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    EQUAL           reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSPAREN         reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    COMMA           reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    RPAREN          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    RTEMPLATE       reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    COLON           reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    MULTEQOP        reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    DIVEQOP         reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    MODEQOP         reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    PLUSEQOP        reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    MINUSEQOP       reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSHIFTEQOP      reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSHIFTEQOP      reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    BANDEQOP        reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    BOREQOP         reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    DOTSTAR         reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    ARROWSTAR       reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    DIVOP           reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    MODOP           reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    PLUSOP          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    MINUSOP         reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    LSHIFT          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSHIFT          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    LTCOMP          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    GTCOMP          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    LTECOMP         reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    GTECOMP         reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    EQCOMP          reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    NEQCOMP         reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    XOROP           reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    OROP            reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    ANDOP           reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    QUESMARK        reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    RSPAREN         reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)
    RCPAREN         reduce using rule 328 (elaborated_type_specifier -> class_key IDENTIFIER template_class_name .)


state 248

    (311) class_head -> class_key IDENTIFIER base_spec .

    LCPAREN         reduce using rule 311 (class_head -> class_key IDENTIFIER base_spec .)


state 249

    (16) template_class_name -> LTEMPLATE . template_arg_list RTEMPLATE
    (17) template_arg_list -> . template_arg
    (18) template_arg_list -> . template_arg_list COMMA template_arg
    (19) template_arg -> . expression
    (20) template_arg -> . type_name
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (131) type_name -> . type_specifier_list abstract_declarator
    (132) type_name -> . type_specifier_list
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (267) type_specifier_list -> . type_specifier type_specifier_list
    (268) type_specifier_list -> . type_specifier
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    template_arg_list              shift and go to state 374
    template_arg                   shift and go to state 375
    expression                     shift and go to state 376
    type_name                      shift and go to state 377
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    type_specifier_list            shift and go to state 262
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    type_specifier                 shift and go to state 263
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    simple_type_name               shift and go to state 264
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    name                           shift and go to state 161
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 250

    (313) base_spec -> COLON base_list .
    (315) base_list -> base_list . COMMA base_specifier

    LCPAREN         reduce using rule 313 (base_spec -> COLON base_list .)
    COMMA           shift and go to state 378


state 251

    (314) base_list -> base_specifier .

    COMMA           reduce using rule 314 (base_list -> base_specifier .)
    LCPAREN         reduce using rule 314 (base_list -> base_specifier .)


state 252

    (316) base_specifier -> class_key . IDENTIFIER
    (318) base_specifier -> class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 379


state 253

    (320) base_specifier -> IDENTIFIER .
    (322) base_specifier -> IDENTIFIER . template_class_name
    (16) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 320 (base_specifier -> IDENTIFIER .)
    LCPAREN         reduce using rule 320 (base_specifier -> IDENTIFIER .)
    LTEMPLATE       shift and go to state 249

    template_class_name            shift and go to state 380

state 254

    (317) base_specifier -> access_specifier . class_key IDENTIFIER
    (319) base_specifier -> access_specifier . class_key IDENTIFIER template_class_name
    (321) base_specifier -> access_specifier . IDENTIFIER
    (323) base_specifier -> access_specifier . IDENTIFIER template_class_name
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    IDENTIFIER      shift and go to state 382
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    class_key                      shift and go to state 381

state 255

    (331) elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .

    SEMICOLON       reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    TYPEDEF         reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LPAREN          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    AUTO            reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    STATIC          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    EXTERN          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    VIRTUAL         reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    CONST           reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    VOLATILE        reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    IDENTIFIER      reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BNOP            reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MULTOP          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BANDOP          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    CHAR            reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    SHORT           reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    INT             reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LONG            reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    SIGNED          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    UNSIGNED        reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    FLOAT           reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DOUBLE          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    VOID            reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    STRING          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    ENUM            reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    TYPE            reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    OPERATOR        reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    CLASS           reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    STRUCT          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    UNION           reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    TEMPLATE        reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    EQUAL           reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSPAREN         reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    COMMA           reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RPAREN          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RTEMPLATE       reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    COLON           reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MULTEQOP        reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DIVEQOP         reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MODEQOP         reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    PLUSEQOP        reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MINUSEQOP       reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSHIFTEQOP      reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSHIFTEQOP      reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BANDEQOP        reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    BOREQOP         reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DOTSTAR         reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    ARROWSTAR       reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    DIVOP           reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MODOP           reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    PLUSOP          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    MINUSOP         reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LSHIFT          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSHIFT          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LTCOMP          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    GTCOMP          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    LTECOMP         reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    GTECOMP         reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    EQCOMP          reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    NEQCOMP         reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    XOROP           reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    OROP            reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    ANDOP           reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    QUESMARK        reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RSPAREN         reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)
    RCPAREN         reduce using rule 331 (elaborated_type_specifier -> TYPE IDENTIFIER template_class_name .)


state 256

    (306) operator_name -> LPAREN RPAREN .

    LPAREN          reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    LSPAREN         reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    EQUAL           reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    LCPAREN         reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    COMMA           reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    RPAREN          reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    DOT             reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    ARROW           reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    DPLUSOP         reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    DMINUSOP        reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    LTEMPLATE       reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    MULTEQOP        reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    DIVEQOP         reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    MODEQOP         reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    BANDEQOP        reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    BOREQOP         reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    DOTSTAR         reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    MULTOP          reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    DIVOP           reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    MODOP           reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    PLUSOP          reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    MINUSOP         reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    LSHIFT          reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    RSHIFT          reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    LTCOMP          reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    GTCOMP          reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    LTECOMP         reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    GTECOMP         reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    EQCOMP          reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    NEQCOMP         reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    BANDOP          reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    XOROP           reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    OROP            reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    ANDOP           reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    QUESMARK        reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    RSPAREN         reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    RCPAREN         reduce using rule 306 (operator_name -> LPAREN RPAREN .)
    COLON           reduce using rule 306 (operator_name -> LPAREN RPAREN .)


state 257

    (307) operator_name -> LSPAREN RSPAREN .

    LPAREN          reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    EQUAL           reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    LCPAREN         reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    SEMICOLON       reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    DOT             reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    ARROW           reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    DPLUSOP         reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    DMINUSOP        reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    LTEMPLATE       reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    MULTEQOP        reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    DIVEQOP         reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    MODEQOP         reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    PLUSEQOP        reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    MINUSEQOP       reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    LSHIFTEQOP      reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    RSHIFTEQOP      reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    BANDEQOP        reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    BOREQOP         reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    DOTSTAR         reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    ARROWSTAR       reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    MULTOP          reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    DIVOP           reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    MODOP           reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    PLUSOP          reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    MINUSOP         reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    LSHIFT          reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    RSHIFT          reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    LTCOMP          reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    GTCOMP          reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    LTECOMP         reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    GTECOMP         reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    EQCOMP          reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    NEQCOMP         reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    BANDOP          reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    XOROP           reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    OROP            reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    ANDOP           reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    QUESMARK        reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    RCPAREN         reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)
    COLON           reduce using rule 307 (operator_name -> LSPAREN RSPAREN .)


state 258

    (4) control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .

    HASHTAG         reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    ASM             reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TEMPLATE        reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TYPEDEF         reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    LPAREN          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    AUTO            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    STATIC          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    EXTERN          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    VIRTUAL         reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CONST           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    VOLATILE        reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    IDENTIFIER      reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    BNOP            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    MULTOP          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    BANDOP          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CHAR            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    SHORT           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    INT             reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    LONG            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    SIGNED          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    UNSIGNED        reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    FLOAT           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    DOUBLE          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    VOID            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    STRING          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    ENUM            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    TYPE            reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    OPERATOR        reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    CLASS           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    STRUCT          reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)
    UNION           reduce using rule 4 (control_line_stmt -> include_control LTCOMP STRING_L GTCOMP .)


state 259

    (247) asm_declaration -> ASM LPAREN STRING_L RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 383


state 260

    (124) primary_expression -> LPAREN expression . RPAREN
    (65) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 384
    COMMA           shift and go to state 337


state 261

    (130) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 385


state 262

    (131) type_name -> type_specifier_list . abstract_declarator
    (132) type_name -> type_specifier_list .
    (133) abstract_declarator -> . unary2_operator abstract_declarator
    (134) abstract_declarator -> . unary2_operator
    (135) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (136) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (137) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (138) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (139) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (140) abstract_declarator -> . LSPAREN RSPAREN
    (141) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP

    RPAREN          reduce using rule 132 (type_name -> type_specifier_list .)
    RTEMPLATE       reduce using rule 132 (type_name -> type_specifier_list .)
    COMMA           reduce using rule 132 (type_name -> type_specifier_list .)
    LPAREN          shift and go to state 388
    LSPAREN         shift and go to state 285
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39

    abstract_declarator            shift and go to state 386
    unary2_operator                shift and go to state 387

state 263

    (267) type_specifier_list -> type_specifier . type_specifier_list
    (268) type_specifier_list -> type_specifier .
    (267) type_specifier_list -> . type_specifier type_specifier_list
    (268) type_specifier_list -> . type_specifier
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    LPAREN          reduce using rule 268 (type_specifier_list -> type_specifier .)
    LSPAREN         reduce using rule 268 (type_specifier_list -> type_specifier .)
    MULTOP          reduce using rule 268 (type_specifier_list -> type_specifier .)
    BANDOP          reduce using rule 268 (type_specifier_list -> type_specifier .)
    RPAREN          reduce using rule 268 (type_specifier_list -> type_specifier .)
    EQUAL           reduce using rule 268 (type_specifier_list -> type_specifier .)
    MULTEQOP        reduce using rule 268 (type_specifier_list -> type_specifier .)
    DIVEQOP         reduce using rule 268 (type_specifier_list -> type_specifier .)
    MODEQOP         reduce using rule 268 (type_specifier_list -> type_specifier .)
    PLUSEQOP        reduce using rule 268 (type_specifier_list -> type_specifier .)
    MINUSEQOP       reduce using rule 268 (type_specifier_list -> type_specifier .)
    LSHIFTEQOP      reduce using rule 268 (type_specifier_list -> type_specifier .)
    RSHIFTEQOP      reduce using rule 268 (type_specifier_list -> type_specifier .)
    BANDEQOP        reduce using rule 268 (type_specifier_list -> type_specifier .)
    BOREQOP         reduce using rule 268 (type_specifier_list -> type_specifier .)
    DOTSTAR         reduce using rule 268 (type_specifier_list -> type_specifier .)
    ARROWSTAR       reduce using rule 268 (type_specifier_list -> type_specifier .)
    DIVOP           reduce using rule 268 (type_specifier_list -> type_specifier .)
    MODOP           reduce using rule 268 (type_specifier_list -> type_specifier .)
    PLUSOP          reduce using rule 268 (type_specifier_list -> type_specifier .)
    MINUSOP         reduce using rule 268 (type_specifier_list -> type_specifier .)
    LSHIFT          reduce using rule 268 (type_specifier_list -> type_specifier .)
    RSHIFT          reduce using rule 268 (type_specifier_list -> type_specifier .)
    LTCOMP          reduce using rule 268 (type_specifier_list -> type_specifier .)
    GTCOMP          reduce using rule 268 (type_specifier_list -> type_specifier .)
    LTECOMP         reduce using rule 268 (type_specifier_list -> type_specifier .)
    GTECOMP         reduce using rule 268 (type_specifier_list -> type_specifier .)
    EQCOMP          reduce using rule 268 (type_specifier_list -> type_specifier .)
    NEQCOMP         reduce using rule 268 (type_specifier_list -> type_specifier .)
    XOROP           reduce using rule 268 (type_specifier_list -> type_specifier .)
    OROP            reduce using rule 268 (type_specifier_list -> type_specifier .)
    ANDOP           reduce using rule 268 (type_specifier_list -> type_specifier .)
    QUESMARK        reduce using rule 268 (type_specifier_list -> type_specifier .)
    COMMA           reduce using rule 268 (type_specifier_list -> type_specifier .)
    RSPAREN         reduce using rule 268 (type_specifier_list -> type_specifier .)
    SEMICOLON       reduce using rule 268 (type_specifier_list -> type_specifier .)
    RCPAREN         reduce using rule 268 (type_specifier_list -> type_specifier .)
    COLON           reduce using rule 268 (type_specifier_list -> type_specifier .)
    RTEMPLATE       reduce using rule 268 (type_specifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 268 (type_specifier_list -> type_specifier .)
    BNOP            reduce using rule 268 (type_specifier_list -> type_specifier .)
    OPERATOR        reduce using rule 268 (type_specifier_list -> type_specifier .)
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    type_specifier                 shift and go to state 263
    type_specifier_list            shift and go to state 389
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 264

    (161) type_specifier -> simple_type_name .
    (116) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (117) postfix_expression -> simple_type_name . LPAREN RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    CONST           reduce using rule 161 (type_specifier -> simple_type_name .)
    VOLATILE        reduce using rule 161 (type_specifier -> simple_type_name .)
    CHAR            reduce using rule 161 (type_specifier -> simple_type_name .)
    SHORT           reduce using rule 161 (type_specifier -> simple_type_name .)
    INT             reduce using rule 161 (type_specifier -> simple_type_name .)
    LONG            reduce using rule 161 (type_specifier -> simple_type_name .)
    SIGNED          reduce using rule 161 (type_specifier -> simple_type_name .)
    UNSIGNED        reduce using rule 161 (type_specifier -> simple_type_name .)
    FLOAT           reduce using rule 161 (type_specifier -> simple_type_name .)
    DOUBLE          reduce using rule 161 (type_specifier -> simple_type_name .)
    VOID            reduce using rule 161 (type_specifier -> simple_type_name .)
    STRING          reduce using rule 161 (type_specifier -> simple_type_name .)
    ENUM            reduce using rule 161 (type_specifier -> simple_type_name .)
    TYPE            reduce using rule 161 (type_specifier -> simple_type_name .)
    CLASS           reduce using rule 161 (type_specifier -> simple_type_name .)
    STRUCT          reduce using rule 161 (type_specifier -> simple_type_name .)
    UNION           reduce using rule 161 (type_specifier -> simple_type_name .)
    TEMPLATE        reduce using rule 161 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 161 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 161 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 161 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 161 (type_specifier -> simple_type_name .)
    RTEMPLATE       reduce using rule 161 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 161 (type_specifier -> simple_type_name .)
    LPAREN          shift and go to state 303

  ! LPAREN          [ reduce using rule 161 (type_specifier -> simple_type_name .) ]


state 265

    (260) declarator -> declarator LPAREN argument_declaration_list RPAREN .

    LPAREN          reduce using rule 260 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    LSPAREN         reduce using rule 260 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    EQUAL           reduce using rule 260 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    LCPAREN         reduce using rule 260 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    SEMICOLON       reduce using rule 260 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    COMMA           reduce using rule 260 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    RPAREN          reduce using rule 260 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    RTEMPLATE       reduce using rule 260 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)


state 266

    (242) initializer -> LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 242 (initializer -> LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 242 (initializer -> LPAREN expression_list RPAREN .)


state 267

    (251) expression_list -> expression_list COMMA . assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    assignment_expression          shift and go to state 390
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 268

    (145) arg_declaration_list -> argument_declaration COMMA . arg_declaration_list
    (144) arg_declaration_list -> . argument_declaration
    (145) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (146) argument_declaration -> . decl_specifiers declarator
    (147) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (148) argument_declaration -> . decl_specifiers abstract_declarator
    (149) argument_declaration -> . decl_specifiers
    (150) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (151) argument_declaration -> . decl_specifiers EQUAL expression
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    TYPEDEF         shift and go to state 22
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    argument_declaration           shift and go to state 144
    arg_declaration_list           shift and go to state 391
    decl_specifiers                shift and go to state 147
    decl_specifier                 shift and go to state 14
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 269

    (67) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    unary_expression               shift and go to state 146
    assignment_expression          shift and go to state 392
    conditional_expression         shift and go to state 145
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 270

    (68) assignment_operator -> EQUAL .

    DPLUSOP         reduce using rule 68 (assignment_operator -> EQUAL .)
    DMINUSOP        reduce using rule 68 (assignment_operator -> EQUAL .)
    SIZEOF          reduce using rule 68 (assignment_operator -> EQUAL .)
    PLUSOP          reduce using rule 68 (assignment_operator -> EQUAL .)
    MINUSOP         reduce using rule 68 (assignment_operator -> EQUAL .)
    NOTSYM          reduce using rule 68 (assignment_operator -> EQUAL .)
    BNOP            reduce using rule 68 (assignment_operator -> EQUAL .)
    MULTOP          reduce using rule 68 (assignment_operator -> EQUAL .)
    BANDOP          reduce using rule 68 (assignment_operator -> EQUAL .)
    NEW             reduce using rule 68 (assignment_operator -> EQUAL .)
    DELETE          reduce using rule 68 (assignment_operator -> EQUAL .)
    THIS            reduce using rule 68 (assignment_operator -> EQUAL .)
    LPAREN          reduce using rule 68 (assignment_operator -> EQUAL .)
    CHAR            reduce using rule 68 (assignment_operator -> EQUAL .)
    SHORT           reduce using rule 68 (assignment_operator -> EQUAL .)
    INT             reduce using rule 68 (assignment_operator -> EQUAL .)
    LONG            reduce using rule 68 (assignment_operator -> EQUAL .)
    SIGNED          reduce using rule 68 (assignment_operator -> EQUAL .)
    UNSIGNED        reduce using rule 68 (assignment_operator -> EQUAL .)
    FLOAT           reduce using rule 68 (assignment_operator -> EQUAL .)
    DOUBLE          reduce using rule 68 (assignment_operator -> EQUAL .)
    VOID            reduce using rule 68 (assignment_operator -> EQUAL .)
    STRING          reduce using rule 68 (assignment_operator -> EQUAL .)
    NUMBER          reduce using rule 68 (assignment_operator -> EQUAL .)
    STRING_L        reduce using rule 68 (assignment_operator -> EQUAL .)
    SCHAR           reduce using rule 68 (assignment_operator -> EQUAL .)
    IDENTIFIER      reduce using rule 68 (assignment_operator -> EQUAL .)
    OPERATOR        reduce using rule 68 (assignment_operator -> EQUAL .)


state 271

    (69) assignment_operator -> MULTEQOP .

    DPLUSOP         reduce using rule 69 (assignment_operator -> MULTEQOP .)
    DMINUSOP        reduce using rule 69 (assignment_operator -> MULTEQOP .)
    SIZEOF          reduce using rule 69 (assignment_operator -> MULTEQOP .)
    PLUSOP          reduce using rule 69 (assignment_operator -> MULTEQOP .)
    MINUSOP         reduce using rule 69 (assignment_operator -> MULTEQOP .)
    NOTSYM          reduce using rule 69 (assignment_operator -> MULTEQOP .)
    BNOP            reduce using rule 69 (assignment_operator -> MULTEQOP .)
    MULTOP          reduce using rule 69 (assignment_operator -> MULTEQOP .)
    BANDOP          reduce using rule 69 (assignment_operator -> MULTEQOP .)
    NEW             reduce using rule 69 (assignment_operator -> MULTEQOP .)
    DELETE          reduce using rule 69 (assignment_operator -> MULTEQOP .)
    THIS            reduce using rule 69 (assignment_operator -> MULTEQOP .)
    LPAREN          reduce using rule 69 (assignment_operator -> MULTEQOP .)
    CHAR            reduce using rule 69 (assignment_operator -> MULTEQOP .)
    SHORT           reduce using rule 69 (assignment_operator -> MULTEQOP .)
    INT             reduce using rule 69 (assignment_operator -> MULTEQOP .)
    LONG            reduce using rule 69 (assignment_operator -> MULTEQOP .)
    SIGNED          reduce using rule 69 (assignment_operator -> MULTEQOP .)
    UNSIGNED        reduce using rule 69 (assignment_operator -> MULTEQOP .)
    FLOAT           reduce using rule 69 (assignment_operator -> MULTEQOP .)
    DOUBLE          reduce using rule 69 (assignment_operator -> MULTEQOP .)
    VOID            reduce using rule 69 (assignment_operator -> MULTEQOP .)
    STRING          reduce using rule 69 (assignment_operator -> MULTEQOP .)
    NUMBER          reduce using rule 69 (assignment_operator -> MULTEQOP .)
    STRING_L        reduce using rule 69 (assignment_operator -> MULTEQOP .)
    SCHAR           reduce using rule 69 (assignment_operator -> MULTEQOP .)
    IDENTIFIER      reduce using rule 69 (assignment_operator -> MULTEQOP .)
    OPERATOR        reduce using rule 69 (assignment_operator -> MULTEQOP .)


state 272

    (70) assignment_operator -> DIVEQOP .

    DPLUSOP         reduce using rule 70 (assignment_operator -> DIVEQOP .)
    DMINUSOP        reduce using rule 70 (assignment_operator -> DIVEQOP .)
    SIZEOF          reduce using rule 70 (assignment_operator -> DIVEQOP .)
    PLUSOP          reduce using rule 70 (assignment_operator -> DIVEQOP .)
    MINUSOP         reduce using rule 70 (assignment_operator -> DIVEQOP .)
    NOTSYM          reduce using rule 70 (assignment_operator -> DIVEQOP .)
    BNOP            reduce using rule 70 (assignment_operator -> DIVEQOP .)
    MULTOP          reduce using rule 70 (assignment_operator -> DIVEQOP .)
    BANDOP          reduce using rule 70 (assignment_operator -> DIVEQOP .)
    NEW             reduce using rule 70 (assignment_operator -> DIVEQOP .)
    DELETE          reduce using rule 70 (assignment_operator -> DIVEQOP .)
    THIS            reduce using rule 70 (assignment_operator -> DIVEQOP .)
    LPAREN          reduce using rule 70 (assignment_operator -> DIVEQOP .)
    CHAR            reduce using rule 70 (assignment_operator -> DIVEQOP .)
    SHORT           reduce using rule 70 (assignment_operator -> DIVEQOP .)
    INT             reduce using rule 70 (assignment_operator -> DIVEQOP .)
    LONG            reduce using rule 70 (assignment_operator -> DIVEQOP .)
    SIGNED          reduce using rule 70 (assignment_operator -> DIVEQOP .)
    UNSIGNED        reduce using rule 70 (assignment_operator -> DIVEQOP .)
    FLOAT           reduce using rule 70 (assignment_operator -> DIVEQOP .)
    DOUBLE          reduce using rule 70 (assignment_operator -> DIVEQOP .)
    VOID            reduce using rule 70 (assignment_operator -> DIVEQOP .)
    STRING          reduce using rule 70 (assignment_operator -> DIVEQOP .)
    NUMBER          reduce using rule 70 (assignment_operator -> DIVEQOP .)
    STRING_L        reduce using rule 70 (assignment_operator -> DIVEQOP .)
    SCHAR           reduce using rule 70 (assignment_operator -> DIVEQOP .)
    IDENTIFIER      reduce using rule 70 (assignment_operator -> DIVEQOP .)
    OPERATOR        reduce using rule 70 (assignment_operator -> DIVEQOP .)


state 273

    (71) assignment_operator -> MODEQOP .

    DPLUSOP         reduce using rule 71 (assignment_operator -> MODEQOP .)
    DMINUSOP        reduce using rule 71 (assignment_operator -> MODEQOP .)
    SIZEOF          reduce using rule 71 (assignment_operator -> MODEQOP .)
    PLUSOP          reduce using rule 71 (assignment_operator -> MODEQOP .)
    MINUSOP         reduce using rule 71 (assignment_operator -> MODEQOP .)
    NOTSYM          reduce using rule 71 (assignment_operator -> MODEQOP .)
    BNOP            reduce using rule 71 (assignment_operator -> MODEQOP .)
    MULTOP          reduce using rule 71 (assignment_operator -> MODEQOP .)
    BANDOP          reduce using rule 71 (assignment_operator -> MODEQOP .)
    NEW             reduce using rule 71 (assignment_operator -> MODEQOP .)
    DELETE          reduce using rule 71 (assignment_operator -> MODEQOP .)
    THIS            reduce using rule 71 (assignment_operator -> MODEQOP .)
    LPAREN          reduce using rule 71 (assignment_operator -> MODEQOP .)
    CHAR            reduce using rule 71 (assignment_operator -> MODEQOP .)
    SHORT           reduce using rule 71 (assignment_operator -> MODEQOP .)
    INT             reduce using rule 71 (assignment_operator -> MODEQOP .)
    LONG            reduce using rule 71 (assignment_operator -> MODEQOP .)
    SIGNED          reduce using rule 71 (assignment_operator -> MODEQOP .)
    UNSIGNED        reduce using rule 71 (assignment_operator -> MODEQOP .)
    FLOAT           reduce using rule 71 (assignment_operator -> MODEQOP .)
    DOUBLE          reduce using rule 71 (assignment_operator -> MODEQOP .)
    VOID            reduce using rule 71 (assignment_operator -> MODEQOP .)
    STRING          reduce using rule 71 (assignment_operator -> MODEQOP .)
    NUMBER          reduce using rule 71 (assignment_operator -> MODEQOP .)
    STRING_L        reduce using rule 71 (assignment_operator -> MODEQOP .)
    SCHAR           reduce using rule 71 (assignment_operator -> MODEQOP .)
    IDENTIFIER      reduce using rule 71 (assignment_operator -> MODEQOP .)
    OPERATOR        reduce using rule 71 (assignment_operator -> MODEQOP .)


state 274

    (72) assignment_operator -> PLUSEQOP .

    DPLUSOP         reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    DMINUSOP        reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    SIZEOF          reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    PLUSOP          reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    MINUSOP         reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    NOTSYM          reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    BNOP            reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    MULTOP          reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    BANDOP          reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    NEW             reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    DELETE          reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    THIS            reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    LPAREN          reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    CHAR            reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    SHORT           reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    INT             reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    LONG            reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    SIGNED          reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    UNSIGNED        reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    FLOAT           reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    DOUBLE          reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    VOID            reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    STRING          reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    NUMBER          reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    STRING_L        reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    SCHAR           reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    IDENTIFIER      reduce using rule 72 (assignment_operator -> PLUSEQOP .)
    OPERATOR        reduce using rule 72 (assignment_operator -> PLUSEQOP .)


state 275

    (73) assignment_operator -> MINUSEQOP .

    DPLUSOP         reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    DMINUSOP        reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    SIZEOF          reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    PLUSOP          reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    MINUSOP         reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    NOTSYM          reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    BNOP            reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    MULTOP          reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    BANDOP          reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    NEW             reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    DELETE          reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    THIS            reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    LPAREN          reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    CHAR            reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    SHORT           reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    INT             reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    LONG            reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    SIGNED          reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    UNSIGNED        reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    FLOAT           reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    DOUBLE          reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    VOID            reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    STRING          reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    NUMBER          reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    STRING_L        reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    SCHAR           reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    IDENTIFIER      reduce using rule 73 (assignment_operator -> MINUSEQOP .)
    OPERATOR        reduce using rule 73 (assignment_operator -> MINUSEQOP .)


state 276

    (74) assignment_operator -> LSHIFTEQOP .

    DPLUSOP         reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    DMINUSOP        reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    SIZEOF          reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    PLUSOP          reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    MINUSOP         reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    NOTSYM          reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    BNOP            reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    MULTOP          reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    BANDOP          reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    NEW             reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    DELETE          reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    THIS            reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    LPAREN          reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    CHAR            reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    SHORT           reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    INT             reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    LONG            reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    SIGNED          reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    UNSIGNED        reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    FLOAT           reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    DOUBLE          reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    VOID            reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    STRING          reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    NUMBER          reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    STRING_L        reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    SCHAR           reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    IDENTIFIER      reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)
    OPERATOR        reduce using rule 74 (assignment_operator -> LSHIFTEQOP .)


state 277

    (75) assignment_operator -> RSHIFTEQOP .

    DPLUSOP         reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    DMINUSOP        reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    SIZEOF          reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    PLUSOP          reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    MINUSOP         reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    NOTSYM          reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    BNOP            reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    MULTOP          reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    BANDOP          reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    NEW             reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    DELETE          reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    THIS            reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    LPAREN          reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    CHAR            reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    SHORT           reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    INT             reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    LONG            reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    SIGNED          reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    UNSIGNED        reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    FLOAT           reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    DOUBLE          reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    VOID            reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    STRING          reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    NUMBER          reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    STRING_L        reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    SCHAR           reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    IDENTIFIER      reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)
    OPERATOR        reduce using rule 75 (assignment_operator -> RSHIFTEQOP .)


state 278

    (76) assignment_operator -> BANDEQOP .

    DPLUSOP         reduce using rule 76 (assignment_operator -> BANDEQOP .)
    DMINUSOP        reduce using rule 76 (assignment_operator -> BANDEQOP .)
    SIZEOF          reduce using rule 76 (assignment_operator -> BANDEQOP .)
    PLUSOP          reduce using rule 76 (assignment_operator -> BANDEQOP .)
    MINUSOP         reduce using rule 76 (assignment_operator -> BANDEQOP .)
    NOTSYM          reduce using rule 76 (assignment_operator -> BANDEQOP .)
    BNOP            reduce using rule 76 (assignment_operator -> BANDEQOP .)
    MULTOP          reduce using rule 76 (assignment_operator -> BANDEQOP .)
    BANDOP          reduce using rule 76 (assignment_operator -> BANDEQOP .)
    NEW             reduce using rule 76 (assignment_operator -> BANDEQOP .)
    DELETE          reduce using rule 76 (assignment_operator -> BANDEQOP .)
    THIS            reduce using rule 76 (assignment_operator -> BANDEQOP .)
    LPAREN          reduce using rule 76 (assignment_operator -> BANDEQOP .)
    CHAR            reduce using rule 76 (assignment_operator -> BANDEQOP .)
    SHORT           reduce using rule 76 (assignment_operator -> BANDEQOP .)
    INT             reduce using rule 76 (assignment_operator -> BANDEQOP .)
    LONG            reduce using rule 76 (assignment_operator -> BANDEQOP .)
    SIGNED          reduce using rule 76 (assignment_operator -> BANDEQOP .)
    UNSIGNED        reduce using rule 76 (assignment_operator -> BANDEQOP .)
    FLOAT           reduce using rule 76 (assignment_operator -> BANDEQOP .)
    DOUBLE          reduce using rule 76 (assignment_operator -> BANDEQOP .)
    VOID            reduce using rule 76 (assignment_operator -> BANDEQOP .)
    STRING          reduce using rule 76 (assignment_operator -> BANDEQOP .)
    NUMBER          reduce using rule 76 (assignment_operator -> BANDEQOP .)
    STRING_L        reduce using rule 76 (assignment_operator -> BANDEQOP .)
    SCHAR           reduce using rule 76 (assignment_operator -> BANDEQOP .)
    IDENTIFIER      reduce using rule 76 (assignment_operator -> BANDEQOP .)
    OPERATOR        reduce using rule 76 (assignment_operator -> BANDEQOP .)


state 279

    (77) assignment_operator -> BOREQOP .

    DPLUSOP         reduce using rule 77 (assignment_operator -> BOREQOP .)
    DMINUSOP        reduce using rule 77 (assignment_operator -> BOREQOP .)
    SIZEOF          reduce using rule 77 (assignment_operator -> BOREQOP .)
    PLUSOP          reduce using rule 77 (assignment_operator -> BOREQOP .)
    MINUSOP         reduce using rule 77 (assignment_operator -> BOREQOP .)
    NOTSYM          reduce using rule 77 (assignment_operator -> BOREQOP .)
    BNOP            reduce using rule 77 (assignment_operator -> BOREQOP .)
    MULTOP          reduce using rule 77 (assignment_operator -> BOREQOP .)
    BANDOP          reduce using rule 77 (assignment_operator -> BOREQOP .)
    NEW             reduce using rule 77 (assignment_operator -> BOREQOP .)
    DELETE          reduce using rule 77 (assignment_operator -> BOREQOP .)
    THIS            reduce using rule 77 (assignment_operator -> BOREQOP .)
    LPAREN          reduce using rule 77 (assignment_operator -> BOREQOP .)
    CHAR            reduce using rule 77 (assignment_operator -> BOREQOP .)
    SHORT           reduce using rule 77 (assignment_operator -> BOREQOP .)
    INT             reduce using rule 77 (assignment_operator -> BOREQOP .)
    LONG            reduce using rule 77 (assignment_operator -> BOREQOP .)
    SIGNED          reduce using rule 77 (assignment_operator -> BOREQOP .)
    UNSIGNED        reduce using rule 77 (assignment_operator -> BOREQOP .)
    FLOAT           reduce using rule 77 (assignment_operator -> BOREQOP .)
    DOUBLE          reduce using rule 77 (assignment_operator -> BOREQOP .)
    VOID            reduce using rule 77 (assignment_operator -> BOREQOP .)
    STRING          reduce using rule 77 (assignment_operator -> BOREQOP .)
    NUMBER          reduce using rule 77 (assignment_operator -> BOREQOP .)
    STRING_L        reduce using rule 77 (assignment_operator -> BOREQOP .)
    SCHAR           reduce using rule 77 (assignment_operator -> BOREQOP .)
    IDENTIFIER      reduce using rule 77 (assignment_operator -> BOREQOP .)
    OPERATOR        reduce using rule 77 (assignment_operator -> BOREQOP .)


state 280

    (146) argument_declaration -> decl_specifiers declarator .
    (147) argument_declaration -> decl_specifiers declarator . EQUAL expression
    (260) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (261) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (262) declarator -> declarator . LSPAREN RSPAREN

    COMMA           reduce using rule 146 (argument_declaration -> decl_specifiers declarator .)
    RPAREN          reduce using rule 146 (argument_declaration -> decl_specifiers declarator .)
    RTEMPLATE       reduce using rule 146 (argument_declaration -> decl_specifiers declarator .)
    EQUAL           shift and go to state 393
    LPAREN          shift and go to state 136
    LSPAREN         shift and go to state 76


state 281

    (151) argument_declaration -> decl_specifiers EQUAL . expression
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 394
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 282

    (148) argument_declaration -> decl_specifiers abstract_declarator .
    (150) argument_declaration -> decl_specifiers abstract_declarator . EQUAL expression
    (135) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (137) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (139) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    COMMA           reduce using rule 148 (argument_declaration -> decl_specifiers abstract_declarator .)
    RPAREN          reduce using rule 148 (argument_declaration -> decl_specifiers abstract_declarator .)
    RTEMPLATE       reduce using rule 148 (argument_declaration -> decl_specifiers abstract_declarator .)
    EQUAL           shift and go to state 395
    LPAREN          shift and go to state 396
    LSPAREN         shift and go to state 397


state 283

    (259) declarator -> unary2_operator . declarator
    (133) abstract_declarator -> unary2_operator . abstract_declarator
    (134) abstract_declarator -> unary2_operator .
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (133) abstract_declarator -> . unary2_operator abstract_declarator
    (134) abstract_declarator -> . unary2_operator
    (135) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (136) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (137) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (138) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (139) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (140) abstract_declarator -> . LSPAREN RSPAREN
    (141) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (269) operator_function_name -> . OPERATOR operator_name

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    EQUAL           reduce using rule 134 (abstract_declarator -> unary2_operator .)
    COMMA           reduce using rule 134 (abstract_declarator -> unary2_operator .)
    RPAREN          reduce using rule 134 (abstract_declarator -> unary2_operator .)
    RTEMPLATE       reduce using rule 134 (abstract_declarator -> unary2_operator .)
    LPAREN          shift and go to state 284
    LSPAREN         shift and go to state 285
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    OPERATOR        shift and go to state 54

  ! LPAREN          [ reduce using rule 134 (abstract_declarator -> unary2_operator .) ]
  ! LSPAREN         [ reduce using rule 134 (abstract_declarator -> unary2_operator .) ]

    unary2_operator                shift and go to state 283
    declarator                     shift and go to state 81
    abstract_declarator            shift and go to state 398
    name                           shift and go to state 23
    operator_function_name         shift and go to state 36

state 284

    (263) declarator -> LPAREN . declarator RPAREN
    (136) abstract_declarator -> LPAREN . argument_declaration_list RPAREN
    (141) abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (142) argument_declaration_list -> . arg_declaration_list
    (143) argument_declaration_list -> . empty
    (133) abstract_declarator -> . unary2_operator abstract_declarator
    (134) abstract_declarator -> . unary2_operator
    (135) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (136) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (137) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (138) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (139) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (140) abstract_declarator -> . LSPAREN RSPAREN
    (141) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (144) arg_declaration_list -> . argument_declaration
    (145) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (15) empty -> .
    (269) operator_function_name -> . OPERATOR operator_name
    (146) argument_declaration -> . decl_specifiers declarator
    (147) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (148) argument_declaration -> . decl_specifiers abstract_declarator
    (149) argument_declaration -> . decl_specifiers
    (150) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (151) argument_declaration -> . decl_specifiers EQUAL expression
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    LPAREN          shift and go to state 284
    LSPAREN         shift and go to state 285
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    RPAREN          reduce using rule 15 (empty -> .)
    OPERATOR        shift and go to state 54
    TYPEDEF         shift and go to state 22
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    declarator                     shift and go to state 72
    argument_declaration_list      shift and go to state 399
    abstract_declarator            shift and go to state 400
    name                           shift and go to state 23
    unary2_operator                shift and go to state 283
    arg_declaration_list           shift and go to state 141
    empty                          shift and go to state 142
    operator_function_name         shift and go to state 36
    argument_declaration           shift and go to state 144
    decl_specifiers                shift and go to state 147
    decl_specifier                 shift and go to state 14
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 285

    (138) abstract_declarator -> LSPAREN . constant_expression RSPAREN
    (140) abstract_declarator -> LSPAREN . RSPAREN
    (29) constant_expression -> . conditional_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    RSPAREN         shift and go to state 402
    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    constant_expression            shift and go to state 401
    conditional_expression         shift and go to state 184
    logical_OR_expression          shift and go to state 148
    logical_AND_expression         shift and go to state 158
    inclusive_OR_expression        shift and go to state 168
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 286

    (31) conditional_expression -> logical_OR_expression QUESMARK . expression COLON conditional_expression
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    logical_OR_expression          shift and go to state 148
    expression                     shift and go to state 403
    conditional_expression         shift and go to state 145
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    unary_expression               shift and go to state 146
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 287

    (33) logical_OR_expression -> logical_OR_expression OROP . logical_AND_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    logical_AND_expression         shift and go to state 404
    inclusive_OR_expression        shift and go to state 168
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 288

    (112) postfix_expression -> postfix_expression LSPAREN . expression RSPAREN
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    postfix_expression             shift and go to state 149
    expression                     shift and go to state 405
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 289

    (113) postfix_expression -> postfix_expression LPAREN . expression_list RPAREN
    (115) postfix_expression -> postfix_expression LPAREN . RPAREN
    (250) expression_list -> . assignment_expression
    (251) expression_list -> . expression_list COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 407
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    postfix_expression             shift and go to state 149
    expression_list                shift and go to state 406
    assignment_expression          shift and go to state 143
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 290

    (114) postfix_expression -> postfix_expression template_class_name . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 408


state 291

    (118) postfix_expression -> postfix_expression DOT . name
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 37
    OPERATOR        shift and go to state 54

    name                           shift and go to state 409
    operator_function_name         shift and go to state 36

state 292

    (119) postfix_expression -> postfix_expression ARROW . name
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 37
    OPERATOR        shift and go to state 54

    name                           shift and go to state 410
    operator_function_name         shift and go to state 36

state 293

    (120) postfix_expression -> postfix_expression DPLUSOP .

    LSPAREN         reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    LPAREN          reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    DOT             reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROW           reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    DPLUSOP         reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    DMINUSOP        reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    LTEMPLATE       reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    EQUAL           reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTEQOP        reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVEQOP         reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    MODEQOP         reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSEQOP        reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSEQOP       reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFTEQOP      reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFTEQOP      reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDEQOP        reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    BOREQOP         reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    DOTSTAR         reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROWSTAR       reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTOP          reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVOP           reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    MODOP           reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSOP          reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSOP         reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFT          reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFT          reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    LTCOMP          reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    GTCOMP          reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    LTECOMP         reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    GTECOMP         reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    EQCOMP          reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    NEQCOMP         reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDOP          reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    XOROP           reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    OROP            reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    ANDOP           reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    QUESMARK        reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    RPAREN          reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    COMMA           reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    RSPAREN         reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    SEMICOLON       reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    RCPAREN         reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    COLON           reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)
    RTEMPLATE       reduce using rule 120 (postfix_expression -> postfix_expression DPLUSOP .)


state 294

    (121) postfix_expression -> postfix_expression DMINUSOP .

    LSPAREN         reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    LPAREN          reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    DOT             reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROW           reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    DPLUSOP         reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    DMINUSOP        reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    LTEMPLATE       reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    EQUAL           reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTEQOP        reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVEQOP         reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    MODEQOP         reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSEQOP        reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSEQOP       reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFTEQOP      reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFTEQOP      reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDEQOP        reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    BOREQOP         reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    DOTSTAR         reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROWSTAR       reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTOP          reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVOP           reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    MODOP           reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSOP          reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSOP         reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFT          reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFT          reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    LTCOMP          reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    GTCOMP          reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    LTECOMP         reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    GTECOMP         reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    EQCOMP          reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    NEQCOMP         reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDOP          reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    XOROP           reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    OROP            reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    ANDOP           reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    QUESMARK        reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    RPAREN          reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    COMMA           reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    RSPAREN         reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    SEMICOLON       reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    RCPAREN         reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    COLON           reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)
    RTEMPLATE       reduce using rule 121 (postfix_expression -> postfix_expression DMINUSOP .)


state 295

    (79) unary_expression -> DPLUSOP unary_expression .

    EQUAL           reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    MULTEQOP        reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    DIVEQOP         reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    MODEQOP         reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    PLUSEQOP        reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    MINUSEQOP       reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    BANDEQOP        reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    BOREQOP         reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    DOTSTAR         reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    ARROWSTAR       reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    MULTOP          reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    DIVOP           reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    MODOP           reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    PLUSOP          reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    MINUSOP         reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFT          reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFT          reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    LTCOMP          reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    GTCOMP          reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    LTECOMP         reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    GTECOMP         reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    EQCOMP          reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    NEQCOMP         reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    BANDOP          reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    XOROP           reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    OROP            reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    ANDOP           reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    QUESMARK        reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    RPAREN          reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    COMMA           reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    RSPAREN         reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    SEMICOLON       reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    RCPAREN         reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    COLON           reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)
    RTEMPLATE       reduce using rule 79 (unary_expression -> DPLUSOP unary_expression .)


state 296

    (124) primary_expression -> LPAREN . expression RPAREN
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 260
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 297

    (80) unary_expression -> DMINUSOP unary_expression .

    EQUAL           reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    MULTEQOP        reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    DIVEQOP         reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    MODEQOP         reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    PLUSEQOP        reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    MINUSEQOP       reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    BANDEQOP        reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    BOREQOP         reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    DOTSTAR         reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    ARROWSTAR       reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    MULTOP          reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    DIVOP           reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    MODOP           reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    PLUSOP          reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    MINUSOP         reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFT          reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFT          reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    LTCOMP          reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    GTCOMP          reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    LTECOMP         reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    GTECOMP         reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    EQCOMP          reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    NEQCOMP         reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    BANDOP          reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    XOROP           reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    OROP            reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    ANDOP           reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    QUESMARK        reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    RPAREN          reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    COMMA           reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    RSPAREN         reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    SEMICOLON       reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    RCPAREN         reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    COLON           reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)
    RTEMPLATE       reduce using rule 80 (unary_expression -> DMINUSOP unary_expression .)


state 298

    (81) unary_expression -> unary1_operator cast_expression .

    EQUAL           reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    MULTEQOP        reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    DIVEQOP         reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    MODEQOP         reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    PLUSEQOP        reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    MINUSEQOP       reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    LSHIFTEQOP      reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    RSHIFTEQOP      reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    BANDEQOP        reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    BOREQOP         reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    DOTSTAR         reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    ARROWSTAR       reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    MULTOP          reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    DIVOP           reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    MODOP           reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    PLUSOP          reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    MINUSOP         reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    LSHIFT          reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    RSHIFT          reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    LTCOMP          reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    GTCOMP          reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    LTECOMP         reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    GTECOMP         reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    EQCOMP          reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    NEQCOMP         reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    BANDOP          reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    XOROP           reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    OROP            reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    ANDOP           reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    QUESMARK        reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    RPAREN          reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    COMMA           reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    RSPAREN         reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    SEMICOLON       reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    RCPAREN         reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    COLON           reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)
    RTEMPLATE       reduce using rule 81 (unary_expression -> unary1_operator cast_expression .)


state 299

    (82) unary_expression -> unary2_operator cast_expression .

    EQUAL           reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    MULTEQOP        reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    DIVEQOP         reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    MODEQOP         reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    PLUSEQOP        reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    MINUSEQOP       reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    LSHIFTEQOP      reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    RSHIFTEQOP      reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    BANDEQOP        reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    BOREQOP         reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    DOTSTAR         reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    ARROWSTAR       reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    MULTOP          reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    DIVOP           reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    MODOP           reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    PLUSOP          reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    MINUSOP         reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    LSHIFT          reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    RSHIFT          reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    LTCOMP          reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    GTCOMP          reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    LTECOMP         reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    GTECOMP         reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    EQCOMP          reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    NEQCOMP         reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    BANDOP          reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    XOROP           reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    OROP            reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    ANDOP           reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    QUESMARK        reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    RPAREN          reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    COMMA           reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    RSPAREN         reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    SEMICOLON       reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    RCPAREN         reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    COLON           reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)
    RTEMPLATE       reduce using rule 82 (unary_expression -> unary2_operator cast_expression .)


state 300

    (83) unary_expression -> SIZEOF unary_expression .

    EQUAL           reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    MULTEQOP        reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    DIVEQOP         reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    MODEQOP         reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQOP        reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQOP       reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQOP      reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQOP      reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    BANDEQOP        reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    BOREQOP         reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    DOTSTAR         reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    ARROWSTAR       reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    MULTOP          reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    DIVOP           reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    MODOP           reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    PLUSOP          reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    MINUSOP         reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    LTCOMP          reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    GTCOMP          reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    LTECOMP         reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    GTECOMP         reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    EQCOMP          reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    NEQCOMP         reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    BANDOP          reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    XOROP           reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    OROP            reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    ANDOP           reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    QUESMARK        reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    RSPAREN         reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    RCPAREN         reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)
    RTEMPLATE       reduce using rule 83 (unary_expression -> SIZEOF unary_expression .)


state 301

    (84) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (124) primary_expression -> LPAREN . expression RPAREN
    (131) type_name -> . type_specifier_list abstract_declarator
    (132) type_name -> . type_specifier_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (267) type_specifier_list -> . type_specifier type_specifier_list
    (268) type_specifier_list -> . type_specifier
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    type_name                      shift and go to state 411
    expression                     shift and go to state 260
    type_specifier_list            shift and go to state 262
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    type_specifier                 shift and go to state 263
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    simple_type_name               shift and go to state 264
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 302

    (35) logical_AND_expression -> logical_AND_expression ANDOP . inclusive_OR_expression
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    inclusive_OR_expression        shift and go to state 412
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 303

    (116) postfix_expression -> simple_type_name LPAREN . expression_list RPAREN
    (117) postfix_expression -> simple_type_name LPAREN . RPAREN
    (250) expression_list -> . assignment_expression
    (251) expression_list -> . expression_list COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 414
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    simple_type_name               shift and go to state 187
    expression_list                shift and go to state 413
    assignment_expression          shift and go to state 143
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 304

    (88) allocation_expression -> NEW placement . new_type_name new_initializer
    (90) allocation_expression -> NEW placement . new_type_name
    (92) allocation_expression -> NEW placement . LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> NEW placement . LPAREN type_name RPAREN
    (96) new_type_name -> . type_specifier_list new_declarator
    (97) new_type_name -> . type_specifier_list
    (267) type_specifier_list -> . type_specifier type_specifier_list
    (268) type_specifier_list -> . type_specifier
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    LPAREN          shift and go to state 416
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    new_type_name                  shift and go to state 415
    type_specifier_list            shift and go to state 307
    type_specifier                 shift and go to state 263
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 305

    (89) allocation_expression -> NEW new_type_name . new_initializer
    (91) allocation_expression -> NEW new_type_name .
    (103) new_initializer -> . LPAREN initializer_list RPAREN
    (104) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    MULTEQOP        reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    DIVEQOP         reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    MODEQOP         reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    PLUSEQOP        reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    MINUSEQOP       reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    LSHIFTEQOP      reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    RSHIFTEQOP      reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    BANDEQOP        reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    BOREQOP         reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    DOTSTAR         reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    ARROWSTAR       reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    MULTOP          reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    DIVOP           reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    MODOP           reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    PLUSOP          reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    MINUSOP         reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    LSHIFT          reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    RSHIFT          reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    LTCOMP          reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    GTCOMP          reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    LTECOMP         reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    GTECOMP         reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    EQCOMP          reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    NEQCOMP         reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    BANDOP          reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    XOROP           reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    OROP            reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    ANDOP           reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    QUESMARK        reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    RPAREN          reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    COMMA           reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    RSPAREN         reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    SEMICOLON       reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    RCPAREN         reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    COLON           reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    RTEMPLATE       reduce using rule 91 (allocation_expression -> NEW new_type_name .)
    LPAREN          shift and go to state 418

    new_initializer                shift and go to state 417

state 306

    (93) allocation_expression -> NEW LPAREN . type_name RPAREN new_initializer
    (95) allocation_expression -> NEW LPAREN . type_name RPAREN
    (102) placement -> LPAREN . expression_list RPAREN
    (131) type_name -> . type_specifier_list abstract_declarator
    (132) type_name -> . type_specifier_list
    (250) expression_list -> . assignment_expression
    (251) expression_list -> . expression_list COMMA assignment_expression
    (267) type_specifier_list -> . type_specifier type_specifier_list
    (268) type_specifier_list -> . type_specifier
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    type_name                      shift and go to state 419
    expression_list                shift and go to state 420
    type_specifier_list            shift and go to state 262
    assignment_expression          shift and go to state 143
    type_specifier                 shift and go to state 263
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    simple_type_name               shift and go to state 264
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 307

    (96) new_type_name -> type_specifier_list . new_declarator
    (97) new_type_name -> type_specifier_list .
    (98) new_declarator -> . MULTOP new_declarator
    (99) new_declarator -> . MULTOP
    (100) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (101) new_declarator -> . LSPAREN expression RSPAREN

  ! shift/reduce conflict for MULTOP resolved as shift
    LPAREN          reduce using rule 97 (new_type_name -> type_specifier_list .)
    EQUAL           reduce using rule 97 (new_type_name -> type_specifier_list .)
    MULTEQOP        reduce using rule 97 (new_type_name -> type_specifier_list .)
    DIVEQOP         reduce using rule 97 (new_type_name -> type_specifier_list .)
    MODEQOP         reduce using rule 97 (new_type_name -> type_specifier_list .)
    PLUSEQOP        reduce using rule 97 (new_type_name -> type_specifier_list .)
    MINUSEQOP       reduce using rule 97 (new_type_name -> type_specifier_list .)
    LSHIFTEQOP      reduce using rule 97 (new_type_name -> type_specifier_list .)
    RSHIFTEQOP      reduce using rule 97 (new_type_name -> type_specifier_list .)
    BANDEQOP        reduce using rule 97 (new_type_name -> type_specifier_list .)
    BOREQOP         reduce using rule 97 (new_type_name -> type_specifier_list .)
    DOTSTAR         reduce using rule 97 (new_type_name -> type_specifier_list .)
    ARROWSTAR       reduce using rule 97 (new_type_name -> type_specifier_list .)
    DIVOP           reduce using rule 97 (new_type_name -> type_specifier_list .)
    MODOP           reduce using rule 97 (new_type_name -> type_specifier_list .)
    PLUSOP          reduce using rule 97 (new_type_name -> type_specifier_list .)
    MINUSOP         reduce using rule 97 (new_type_name -> type_specifier_list .)
    LSHIFT          reduce using rule 97 (new_type_name -> type_specifier_list .)
    RSHIFT          reduce using rule 97 (new_type_name -> type_specifier_list .)
    LTCOMP          reduce using rule 97 (new_type_name -> type_specifier_list .)
    GTCOMP          reduce using rule 97 (new_type_name -> type_specifier_list .)
    LTECOMP         reduce using rule 97 (new_type_name -> type_specifier_list .)
    GTECOMP         reduce using rule 97 (new_type_name -> type_specifier_list .)
    EQCOMP          reduce using rule 97 (new_type_name -> type_specifier_list .)
    NEQCOMP         reduce using rule 97 (new_type_name -> type_specifier_list .)
    BANDOP          reduce using rule 97 (new_type_name -> type_specifier_list .)
    XOROP           reduce using rule 97 (new_type_name -> type_specifier_list .)
    OROP            reduce using rule 97 (new_type_name -> type_specifier_list .)
    ANDOP           reduce using rule 97 (new_type_name -> type_specifier_list .)
    QUESMARK        reduce using rule 97 (new_type_name -> type_specifier_list .)
    RPAREN          reduce using rule 97 (new_type_name -> type_specifier_list .)
    COMMA           reduce using rule 97 (new_type_name -> type_specifier_list .)
    RSPAREN         reduce using rule 97 (new_type_name -> type_specifier_list .)
    SEMICOLON       reduce using rule 97 (new_type_name -> type_specifier_list .)
    RCPAREN         reduce using rule 97 (new_type_name -> type_specifier_list .)
    COLON           reduce using rule 97 (new_type_name -> type_specifier_list .)
    RTEMPLATE       reduce using rule 97 (new_type_name -> type_specifier_list .)
    MULTOP          shift and go to state 422
    LSPAREN         shift and go to state 423

  ! MULTOP          [ reduce using rule 97 (new_type_name -> type_specifier_list .) ]

    new_declarator                 shift and go to state 421

state 308

    (87) deallocation_expression -> DELETE cast_expression .

    EQUAL           reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    MULTEQOP        reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    DIVEQOP         reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    MODEQOP         reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    PLUSEQOP        reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    MINUSEQOP       reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    LSHIFTEQOP      reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    RSHIFTEQOP      reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    BANDEQOP        reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    BOREQOP         reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    DOTSTAR         reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    ARROWSTAR       reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    MULTOP          reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    DIVOP           reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    MODOP           reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    PLUSOP          reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    MINUSOP         reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    LSHIFT          reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    RSHIFT          reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    LTCOMP          reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    GTCOMP          reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    LTECOMP         reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    GTECOMP         reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    EQCOMP          reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    NEQCOMP         reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    BANDOP          reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    XOROP           reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    OROP            reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    ANDOP           reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    QUESMARK        reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    RPAREN          reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    COMMA           reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    RSPAREN         reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    SEMICOLON       reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    RCPAREN         reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    COLON           reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)
    RTEMPLATE       reduce using rule 87 (deallocation_expression -> DELETE cast_expression .)


state 309

    (37) inclusive_OR_expression -> inclusive_OR_expression OROP . exclusive_OR_expression
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    exclusive_OR_expression        shift and go to state 424
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 310

    (39) exclusive_OR_expression -> exclusive_OR_expression XOROP . AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    AND_expression                 shift and go to state 425
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 311

    (41) AND_expression -> AND_expression BANDOP . equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    equality_expression            shift and go to state 426
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 312

    (43) equality_expression -> equality_expression EQCOMP . relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    relational_expression          shift and go to state 427
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 313

    (44) equality_expression -> equality_expression NEQCOMP . relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    relational_expression          shift and go to state 428
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 314

    (46) relational_expression -> relational_expression LTCOMP . shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    shift_expression               shift and go to state 429
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 315

    (47) relational_expression -> relational_expression GTCOMP . shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    shift_expression               shift and go to state 430
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 316

    (48) relational_expression -> relational_expression LTECOMP . shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    shift_expression               shift and go to state 431
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 317

    (49) relational_expression -> relational_expression GTECOMP . shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    shift_expression               shift and go to state 432
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 318

    (51) shift_expression -> shift_expression LSHIFT . additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    additive_expression            shift and go to state 433
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 319

    (52) shift_expression -> shift_expression RSHIFT . additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    additive_expression            shift and go to state 434
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 320

    (54) additive_expression -> additive_expression PLUSOP . multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    multiplicative_expression      shift and go to state 435
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 321

    (55) additive_expression -> additive_expression MINUSOP . multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    multiplicative_expression      shift and go to state 436
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 322

    (57) multiplicative_expression -> multiplicative_expression MULTOP . pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    pm_expression                  shift and go to state 437
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 323

    (58) multiplicative_expression -> multiplicative_expression DIVOP . pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    pm_expression                  shift and go to state 438
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 324

    (59) multiplicative_expression -> multiplicative_expression MODOP . pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    pm_expression                  shift and go to state 439
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 325

    (61) pm_expression -> pm_expression DOTSTAR . cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    cast_expression                shift and go to state 440
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 326

    (62) pm_expression -> pm_expression ARROWSTAR . cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    cast_expression                shift and go to state 441
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 327

    (261) declarator -> declarator LSPAREN constant_expression RSPAREN .

    LPAREN          reduce using rule 261 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 261 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    EQUAL           reduce using rule 261 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    LCPAREN         reduce using rule 261 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    SEMICOLON       reduce using rule 261 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 261 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 261 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 261 (declarator -> declarator LSPAREN constant_expression RSPAREN .)


state 328

    (245) initializer_list -> LCPAREN . initializer_list RCPAREN
    (246) initializer_list -> LCPAREN . initializer_list COMMA RCPAREN
    (243) initializer_list -> . assignment_expression
    (244) initializer_list -> . initializer_list COMMA assignment_expression
    (245) initializer_list -> . LCPAREN initializer_list RCPAREN
    (246) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 328
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    initializer_list               shift and go to state 442
    assignment_expression          shift and go to state 330
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 329

    (240) initializer -> EQUAL LCPAREN initializer_list . RCPAREN
    (241) initializer -> EQUAL LCPAREN initializer_list . COMMA RCPAREN
    (244) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 443
    COMMA           shift and go to state 444


state 330

    (243) initializer_list -> assignment_expression .

    RCPAREN         reduce using rule 243 (initializer_list -> assignment_expression .)
    COMMA           reduce using rule 243 (initializer_list -> assignment_expression .)
    RPAREN          reduce using rule 243 (initializer_list -> assignment_expression .)


state 331

    (185) compound_statement -> LCPAREN statement_list RCPAREN .

    ASM             reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TEMPLATE        reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TYPEDEF         reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LPAREN          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    AUTO            reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STATIC          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    EXTERN          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VIRTUAL         reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CONST           reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VOLATILE        reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IDENTIFIER      reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BNOP            reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MULTOP          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BANDOP          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CHAR            reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SHORT           reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    INT             reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LONG            reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIGNED          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    UNSIGNED        reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FLOAT           reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DOUBLE          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VOID            reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRING          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ENUM            reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TYPE            reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    OPERATOR        reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CLASS           reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRUCT          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    UNION           reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    $end            reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RCPAREN         reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CASE            reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DEFAULT         reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SEMICOLON       reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LCPAREN         reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IF              reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SWITCH          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    WHILE           reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DO              reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FOR             reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BREAK           reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CONTINUE        reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RETURN          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    GOTO            reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TRY             reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    THROW           reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DPLUSOP         reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DMINUSOP        reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIZEOF          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PLUSOP          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MINUSOP         reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NOTSYM          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NEW             reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DELETE          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    THIS            reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NUMBER          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRING_L        reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SCHAR           reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ELSE            reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CATCH           reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    COLON           reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PRIVATE         reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PROTECTED       reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PUBLIC          reduce using rule 185 (compound_statement -> LCPAREN statement_list RCPAREN .)


state 332

    (188) statement_list -> statement_list statement .

    RCPAREN         reduce using rule 188 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 188 (statement_list -> statement_list statement .)
    CASE            reduce using rule 188 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 188 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 188 (statement_list -> statement_list statement .)
    LCPAREN         reduce using rule 188 (statement_list -> statement_list statement .)
    IF              reduce using rule 188 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 188 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 188 (statement_list -> statement_list statement .)
    DO              reduce using rule 188 (statement_list -> statement_list statement .)
    FOR             reduce using rule 188 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 188 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 188 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 188 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 188 (statement_list -> statement_list statement .)
    TRY             reduce using rule 188 (statement_list -> statement_list statement .)
    THROW           reduce using rule 188 (statement_list -> statement_list statement .)
    ASM             reduce using rule 188 (statement_list -> statement_list statement .)
    TEMPLATE        reduce using rule 188 (statement_list -> statement_list statement .)
    DPLUSOP         reduce using rule 188 (statement_list -> statement_list statement .)
    DMINUSOP        reduce using rule 188 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 188 (statement_list -> statement_list statement .)
    TYPEDEF         reduce using rule 188 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 188 (statement_list -> statement_list statement .)
    PLUSOP          reduce using rule 188 (statement_list -> statement_list statement .)
    MINUSOP         reduce using rule 188 (statement_list -> statement_list statement .)
    NOTSYM          reduce using rule 188 (statement_list -> statement_list statement .)
    BNOP            reduce using rule 188 (statement_list -> statement_list statement .)
    MULTOP          reduce using rule 188 (statement_list -> statement_list statement .)
    BANDOP          reduce using rule 188 (statement_list -> statement_list statement .)
    NEW             reduce using rule 188 (statement_list -> statement_list statement .)
    DELETE          reduce using rule 188 (statement_list -> statement_list statement .)
    AUTO            reduce using rule 188 (statement_list -> statement_list statement .)
    STATIC          reduce using rule 188 (statement_list -> statement_list statement .)
    EXTERN          reduce using rule 188 (statement_list -> statement_list statement .)
    VIRTUAL         reduce using rule 188 (statement_list -> statement_list statement .)
    CONST           reduce using rule 188 (statement_list -> statement_list statement .)
    VOLATILE        reduce using rule 188 (statement_list -> statement_list statement .)
    THIS            reduce using rule 188 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 188 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 188 (statement_list -> statement_list statement .)
    INT             reduce using rule 188 (statement_list -> statement_list statement .)
    LONG            reduce using rule 188 (statement_list -> statement_list statement .)
    SIGNED          reduce using rule 188 (statement_list -> statement_list statement .)
    UNSIGNED        reduce using rule 188 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 188 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 188 (statement_list -> statement_list statement .)
    VOID            reduce using rule 188 (statement_list -> statement_list statement .)
    STRING          reduce using rule 188 (statement_list -> statement_list statement .)
    ENUM            reduce using rule 188 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 188 (statement_list -> statement_list statement .)
    OPERATOR        reduce using rule 188 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 188 (statement_list -> statement_list statement .)
    STRING_L        reduce using rule 188 (statement_list -> statement_list statement .)
    SCHAR           reduce using rule 188 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 188 (statement_list -> statement_list statement .)
    STRUCT          reduce using rule 188 (statement_list -> statement_list statement .)
    UNION           reduce using rule 188 (statement_list -> statement_list statement .)


state 333

    (212) labeled_statement -> IDENTIFIER COLON . statement
    (189) statement -> . labeled_statement
    (190) statement -> . expression_statement
    (191) statement -> . compound_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) statement -> . declaration_statement
    (196) statement -> . try_block
    (212) labeled_statement -> . IDENTIFIER COLON statement
    (213) labeled_statement -> . CASE constant_expression COLON statement
    (214) labeled_statement -> . DEFAULT COLON statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN
    (202) selection_statement -> . IF LPAREN expression RPAREN statement
    (203) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (204) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (215) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (216) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (217) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (197) jump_statement -> . BREAK SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . RETURN expression SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (225) declaration_statement -> . declaration
    (205) try_block -> . TRY compound_statement handler_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 201
    CASE            shift and go to state 202
    DEFAULT         shift and go to state 203
    SEMICOLON       shift and go to state 205
    LCPAREN         shift and go to state 79
    IF              shift and go to state 206
    SWITCH          shift and go to state 208
    WHILE           shift and go to state 209
    DO              shift and go to state 210
    FOR             shift and go to state 211
    BREAK           shift and go to state 212
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 214
    GOTO            shift and go to state 215
    TRY             shift and go to state 217
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    statement                      shift and go to state 445
    labeled_statement              shift and go to state 193
    expression_statement           shift and go to state 194
    compound_statement             shift and go to state 195
    selection_statement            shift and go to state 196
    iteration_statement            shift and go to state 197
    jump_statement                 shift and go to state 198
    declaration_statement          shift and go to state 199
    try_block                      shift and go to state 200
    expression                     shift and go to state 204
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 334

    (213) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 446


state 335

    (214) labeled_statement -> DEFAULT COLON . statement
    (189) statement -> . labeled_statement
    (190) statement -> . expression_statement
    (191) statement -> . compound_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) statement -> . declaration_statement
    (196) statement -> . try_block
    (212) labeled_statement -> . IDENTIFIER COLON statement
    (213) labeled_statement -> . CASE constant_expression COLON statement
    (214) labeled_statement -> . DEFAULT COLON statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN
    (202) selection_statement -> . IF LPAREN expression RPAREN statement
    (203) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (204) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (215) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (216) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (217) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (197) jump_statement -> . BREAK SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . RETURN expression SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (225) declaration_statement -> . declaration
    (205) try_block -> . TRY compound_statement handler_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 201
    CASE            shift and go to state 202
    DEFAULT         shift and go to state 203
    SEMICOLON       shift and go to state 205
    LCPAREN         shift and go to state 79
    IF              shift and go to state 206
    SWITCH          shift and go to state 208
    WHILE           shift and go to state 209
    DO              shift and go to state 210
    FOR             shift and go to state 211
    BREAK           shift and go to state 212
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 214
    GOTO            shift and go to state 215
    TRY             shift and go to state 217
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    statement                      shift and go to state 447
    labeled_statement              shift and go to state 193
    expression_statement           shift and go to state 194
    compound_statement             shift and go to state 195
    selection_statement            shift and go to state 196
    iteration_statement            shift and go to state 197
    jump_statement                 shift and go to state 198
    declaration_statement          shift and go to state 199
    try_block                      shift and go to state 200
    expression                     shift and go to state 204
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 336

    (223) expression_statement -> expression SEMICOLON .

    RCPAREN         reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    LCPAREN         reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    TRY             reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    THROW           reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    ASM             reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    TEMPLATE        reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    DPLUSOP         reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    DMINUSOP        reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    TYPEDEF         reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    PLUSOP          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    MINUSOP         reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    NOTSYM          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    BNOP            reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    MULTOP          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    BANDOP          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    NEW             reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    DELETE          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    AUTO            reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    STATIC          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    EXTERN          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    VIRTUAL         reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    CONST           reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    VOLATILE        reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    THIS            reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    ENUM            reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    TYPE            reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    OPERATOR        reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    STRING_L        reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    SCHAR           reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    CLASS           reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    STRUCT          reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    UNION           reduce using rule 223 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 223 (expression_statement -> expression SEMICOLON .)


state 337

    (65) expression -> expression COMMA . assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    assignment_expression          shift and go to state 448
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 338

    (202) selection_statement -> IF LPAREN . expression RPAREN statement
    (203) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 449
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 339

    (259) declarator -> unary2_operator . declarator
    (82) unary_expression -> unary2_operator . cast_expression
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR

    LPAREN          shift and go to state 450
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 340
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    OPERATOR        shift and go to state 54
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174

    unary2_operator                shift and go to state 339
    declarator                     shift and go to state 81
    cast_expression                shift and go to state 299
    name                           shift and go to state 222
    unary_expression               shift and go to state 185
    operator_function_name         shift and go to state 36
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    literal                        shift and go to state 169

state 340

    (266) name -> BNOP . IDENTIFIER
    (108) unary1_operator -> BNOP .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 82
    LPAREN          reduce using rule 108 (unary1_operator -> BNOP .)
    DPLUSOP         reduce using rule 108 (unary1_operator -> BNOP .)
    DMINUSOP        reduce using rule 108 (unary1_operator -> BNOP .)
    SIZEOF          reduce using rule 108 (unary1_operator -> BNOP .)
    PLUSOP          reduce using rule 108 (unary1_operator -> BNOP .)
    MINUSOP         reduce using rule 108 (unary1_operator -> BNOP .)
    NOTSYM          reduce using rule 108 (unary1_operator -> BNOP .)
    BNOP            reduce using rule 108 (unary1_operator -> BNOP .)
    MULTOP          reduce using rule 108 (unary1_operator -> BNOP .)
    BANDOP          reduce using rule 108 (unary1_operator -> BNOP .)
    NEW             reduce using rule 108 (unary1_operator -> BNOP .)
    DELETE          reduce using rule 108 (unary1_operator -> BNOP .)
    THIS            reduce using rule 108 (unary1_operator -> BNOP .)
    CHAR            reduce using rule 108 (unary1_operator -> BNOP .)
    SHORT           reduce using rule 108 (unary1_operator -> BNOP .)
    INT             reduce using rule 108 (unary1_operator -> BNOP .)
    LONG            reduce using rule 108 (unary1_operator -> BNOP .)
    SIGNED          reduce using rule 108 (unary1_operator -> BNOP .)
    UNSIGNED        reduce using rule 108 (unary1_operator -> BNOP .)
    FLOAT           reduce using rule 108 (unary1_operator -> BNOP .)
    DOUBLE          reduce using rule 108 (unary1_operator -> BNOP .)
    VOID            reduce using rule 108 (unary1_operator -> BNOP .)
    STRING          reduce using rule 108 (unary1_operator -> BNOP .)
    NUMBER          reduce using rule 108 (unary1_operator -> BNOP .)
    STRING_L        reduce using rule 108 (unary1_operator -> BNOP .)
    SCHAR           reduce using rule 108 (unary1_operator -> BNOP .)
    OPERATOR        reduce using rule 108 (unary1_operator -> BNOP .)

  ! IDENTIFIER      [ reduce using rule 108 (unary1_operator -> BNOP .) ]


state 341

    (204) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 451
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 342

    (215) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 452
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 343

    (216) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 453


state 344

    (217) iteration_statement -> FOR LPAREN . for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> FOR LPAREN . for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON RPAREN statement
    (221) for_init_statement -> . expression_statement
    (222) for_init_statement -> . declaration_statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (225) declaration_statement -> . declaration
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 205
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    IDENTIFIER      shift and go to state 35
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    for_init_statement             shift and go to state 454
    expression                     shift and go to state 204
    expression_statement           shift and go to state 455
    declaration_statement          shift and go to state 456
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 345

    (197) jump_statement -> BREAK SEMICOLON .

    RCPAREN         reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    LCPAREN         reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    TRY             reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    THROW           reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    ASM             reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    TEMPLATE        reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    DPLUSOP         reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    DMINUSOP        reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    TYPEDEF         reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    PLUSOP          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    MINUSOP         reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    NOTSYM          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    BNOP            reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    MULTOP          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    BANDOP          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    NEW             reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    DELETE          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    AUTO            reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    STATIC          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    EXTERN          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    VIRTUAL         reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    VOLATILE        reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    THIS            reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    ENUM            reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    TYPE            reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    OPERATOR        reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    STRING_L        reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    SCHAR           reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    UNION           reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 197 (jump_statement -> BREAK SEMICOLON .)


state 346

    (198) jump_statement -> CONTINUE SEMICOLON .

    RCPAREN         reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    LCPAREN         reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    THROW           reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    ASM             reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    TEMPLATE        reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    DPLUSOP         reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    DMINUSOP        reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    TYPEDEF         reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    PLUSOP          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    MINUSOP         reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    NOTSYM          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    BNOP            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    MULTOP          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    BANDOP          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    DELETE          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    AUTO            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    STATIC          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    EXTERN          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    VIRTUAL         reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    VOLATILE        reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    ENUM            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    TYPE            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    OPERATOR        reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_L        reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    SCHAR           reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    UNION           reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)


state 347

    (199) jump_statement -> RETURN expression . SEMICOLON
    (65) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 457
    COMMA           shift and go to state 337


state 348

    (200) jump_statement -> RETURN SEMICOLON .

    RCPAREN         reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    LCPAREN         reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    TRY             reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    THROW           reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    ASM             reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    TEMPLATE        reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    DPLUSOP         reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    DMINUSOP        reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    TYPEDEF         reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    PLUSOP          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    MINUSOP         reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    NOTSYM          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    BNOP            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    MULTOP          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    BANDOP          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    NEW             reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    DELETE          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    AUTO            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    STATIC          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    EXTERN          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    VIRTUAL         reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    VOLATILE        reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    THIS            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    ENUM            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    TYPE            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    OPERATOR        reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    STRING_L        reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    SCHAR           reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    STRUCT          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    UNION           reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)


state 349

    (201) jump_statement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 458


state 350

    (205) try_block -> TRY compound_statement . handler_list
    (206) handler_list -> . handler handler_list
    (207) handler_list -> . handler
    (208) handler -> . CATCH LPAREN exception_declaration RPAREN compound_statement

    CATCH           shift and go to state 461

    handler_list                   shift and go to state 459
    handler                        shift and go to state 460

state 351

    (9) throw_expression -> THROW expression .
    (65) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 9 (throw_expression -> THROW expression .)
    RPAREN          reduce using rule 9 (throw_expression -> THROW expression .)
    RTEMPLATE       reduce using rule 9 (throw_expression -> THROW expression .)
    COLON           reduce using rule 9 (throw_expression -> THROW expression .)
    RSPAREN         reduce using rule 9 (throw_expression -> THROW expression .)
    COMMA           shift and go to state 337

  ! COMMA           [ reduce using rule 9 (throw_expression -> THROW expression .) ]


state 352

    (130) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (263) declarator -> LPAREN . declarator RPAREN
    (124) primary_expression -> LPAREN . expression RPAREN
    (131) type_name -> . type_specifier_list abstract_declarator
    (132) type_name -> . type_specifier_list
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (267) type_specifier_list -> . type_specifier type_specifier_list
    (268) type_specifier_list -> . type_specifier
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (269) operator_function_name -> . OPERATOR operator_name
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LPAREN          shift and go to state 207
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 340
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    THROW           shift and go to state 220
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    OPERATOR        shift and go to state 54
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68
    THIS            shift and go to state 170
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174

    type_name                      shift and go to state 261
    cast_expression                shift and go to state 153
    declarator                     shift and go to state 72
    expression                     shift and go to state 260
    type_specifier_list            shift and go to state 262
    name                           shift and go to state 222
    unary2_operator                shift and go to state 339
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    type_specifier                 shift and go to state 263
    operator_function_name         shift and go to state 36
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    simple_type_name               shift and go to state 264
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 353

    (232) template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE . declaration
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 17
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    declaration                    shift and go to state 462
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 23
    unary2_operator                shift and go to state 24
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 354

    (234) template_argument_list -> template_argument_list COMMA . argument_declaration
    (146) argument_declaration -> . decl_specifiers declarator
    (147) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (148) argument_declaration -> . decl_specifiers abstract_declarator
    (149) argument_declaration -> . decl_specifiers
    (150) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (151) argument_declaration -> . decl_specifiers EQUAL expression
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    TYPEDEF         shift and go to state 22
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    argument_declaration           shift and go to state 463
    decl_specifiers                shift and go to state 147
    decl_specifier                 shift and go to state 14
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 355

    (167) class_specifier -> class_head LCPAREN member_list RCPAREN .

    SEMICOLON       reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    TYPEDEF         reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LPAREN          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    AUTO            reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    STATIC          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    EXTERN          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    VIRTUAL         reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    CONST           reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    VOLATILE        reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    IDENTIFIER      reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BNOP            reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MULTOP          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BANDOP          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    CHAR            reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    SHORT           reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    INT             reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LONG            reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    SIGNED          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    UNSIGNED        reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    FLOAT           reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DOUBLE          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    VOID            reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    STRING          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    ENUM            reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    TYPE            reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    OPERATOR        reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    CLASS           reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    STRUCT          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    UNION           reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    TEMPLATE        reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    EQUAL           reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LSPAREN         reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    COMMA           reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RPAREN          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RTEMPLATE       reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    COLON           reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MULTEQOP        reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DIVEQOP         reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MODEQOP         reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    PLUSEQOP        reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MINUSEQOP       reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LSHIFTEQOP      reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RSHIFTEQOP      reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BANDEQOP        reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BOREQOP         reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DOTSTAR         reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    ARROWSTAR       reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DIVOP           reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MODOP           reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    PLUSOP          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MINUSOP         reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LSHIFT          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RSHIFT          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LTCOMP          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    GTCOMP          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LTECOMP         reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    GTECOMP         reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    EQCOMP          reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    NEQCOMP         reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    XOROP           reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    OROP            reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    ANDOP           reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    QUESMARK        reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RSPAREN         reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RCPAREN         reduce using rule 167 (class_specifier -> class_head LCPAREN member_list RCPAREN .)


state 356

    (171) member_list -> member_list access_list .

    RCPAREN         reduce using rule 171 (member_list -> member_list access_list .)
    PRIVATE         reduce using rule 171 (member_list -> member_list access_list .)
    PROTECTED       reduce using rule 171 (member_list -> member_list access_list .)
    PUBLIC          reduce using rule 171 (member_list -> member_list access_list .)


state 357

    (174) member_access_list -> member_declaration member_access_list .

    RCPAREN         reduce using rule 174 (member_access_list -> member_declaration member_access_list .)
    PRIVATE         reduce using rule 174 (member_access_list -> member_declaration member_access_list .)
    PROTECTED       reduce using rule 174 (member_access_list -> member_declaration member_access_list .)
    PUBLIC          reduce using rule 174 (member_access_list -> member_declaration member_access_list .)


state 358

    (172) access_list -> access_specifier COLON . member_access_list
    (173) access_list -> access_specifier COLON .
    (174) member_access_list -> . member_declaration member_access_list
    (175) member_access_list -> . member_declaration
    (176) member_declaration -> . decl_specifiers member_declarator_list SEMICOLON
    (177) member_declaration -> . member_declarator_list SEMICOLON
    (178) member_declaration -> . decl_specifiers SEMICOLON
    (179) member_declaration -> . SEMICOLON
    (180) member_declaration -> . function_definition SEMICOLON
    (181) member_declaration -> . function_definition
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (252) member_declarator_list -> . member_declarator
    (253) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (254) member_declarator -> . declarator pure_specifier
    (255) member_declarator -> . declarator
    (256) member_declarator -> . IDENTIFIER COLON constant_expression
    (257) member_declarator -> . COLON constant_expression
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    RCPAREN         reduce using rule 173 (access_list -> access_specifier COLON .)
    PRIVATE         reduce using rule 173 (access_list -> access_specifier COLON .)
    PROTECTED       reduce using rule 173 (access_list -> access_specifier COLON .)
    PUBLIC          reduce using rule 173 (access_list -> access_specifier COLON .)
    SEMICOLON       shift and go to state 234
    TYPEDEF         shift and go to state 22
    IDENTIFIER      shift and go to state 241
    COLON           shift and go to state 231
    LPAREN          shift and go to state 17
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    member_access_list             shift and go to state 464
    member_declaration             shift and go to state 229
    decl_specifiers                shift and go to state 232
    member_declarator_list         shift and go to state 233
    function_definition            shift and go to state 235
    decl_specifier                 shift and go to state 14
    member_declarator              shift and go to state 239
    declarator                     shift and go to state 240
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 23
    unary2_operator                shift and go to state 24
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 359

    (257) member_declarator -> COLON constant_expression .

    SEMICOLON       reduce using rule 257 (member_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 257 (member_declarator -> COLON constant_expression .)


state 360

    (176) member_declaration -> decl_specifiers member_declarator_list . SEMICOLON
    (253) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 465
    COMMA           shift and go to state 364


state 361

    (178) member_declaration -> decl_specifiers SEMICOLON .

    SEMICOLON       reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    TYPEDEF         reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    IDENTIFIER      reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    COLON           reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    LPAREN          reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    AUTO            reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    STATIC          reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    EXTERN          reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    VIRTUAL         reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    CONST           reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    VOLATILE        reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    BNOP            reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    MULTOP          reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    BANDOP          reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    CHAR            reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    SHORT           reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    INT             reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    LONG            reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    SIGNED          reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    UNSIGNED        reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    FLOAT           reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    DOUBLE          reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    VOID            reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    STRING          reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    ENUM            reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    TYPE            reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    OPERATOR        reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    CLASS           reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    STRUCT          reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    UNION           reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    TEMPLATE        reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    RCPAREN         reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    PRIVATE         reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    PROTECTED       reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)
    PUBLIC          reduce using rule 178 (member_declaration -> decl_specifiers SEMICOLON .)


state 362

    (182) function_definition -> decl_specifiers declarator . fct_body
    (260) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (261) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (262) declarator -> declarator . LSPAREN RSPAREN
    (254) member_declarator -> declarator . pure_specifier
    (255) member_declarator -> declarator .
    (184) fct_body -> . compound_statement
    (308) pure_specifier -> . EQUAL NUMBER
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN

    LPAREN          shift and go to state 136
    LSPAREN         shift and go to state 76
    SEMICOLON       reduce using rule 255 (member_declarator -> declarator .)
    COMMA           reduce using rule 255 (member_declarator -> declarator .)
    EQUAL           shift and go to state 367
    LCPAREN         shift and go to state 79

    fct_body                       shift and go to state 132
    pure_specifier                 shift and go to state 366
    compound_statement             shift and go to state 77

state 363

    (177) member_declaration -> member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    COLON           reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    STATIC          reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    CONST           reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    BNOP            reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    INT             reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    LONG            reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    VOID            reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    STRING          reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    ENUM            reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    TYPE            reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    UNION           reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 177 (member_declaration -> member_declarator_list SEMICOLON .)


state 364

    (253) member_declarator_list -> member_declarator_list COMMA . member_declarator
    (254) member_declarator -> . declarator pure_specifier
    (255) member_declarator -> . declarator
    (256) member_declarator -> . IDENTIFIER COLON constant_expression
    (257) member_declarator -> . COLON constant_expression
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (269) operator_function_name -> . OPERATOR operator_name

    IDENTIFIER      shift and go to state 241
    COLON           shift and go to state 231
    LPAREN          shift and go to state 17
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    OPERATOR        shift and go to state 54

    member_declarator              shift and go to state 466
    declarator                     shift and go to state 467
    name                           shift and go to state 23
    unary2_operator                shift and go to state 24
    operator_function_name         shift and go to state 36

state 365

    (180) member_declaration -> function_definition SEMICOLON .

    SEMICOLON       reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    TYPEDEF         reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    IDENTIFIER      reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    COLON           reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    LPAREN          reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    AUTO            reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    STATIC          reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    EXTERN          reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    VIRTUAL         reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    CONST           reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    VOLATILE        reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    BNOP            reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    MULTOP          reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    BANDOP          reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    CHAR            reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    SHORT           reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    INT             reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    LONG            reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    SIGNED          reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    UNSIGNED        reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    FLOAT           reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    DOUBLE          reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    VOID            reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    STRING          reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    ENUM            reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    TYPE            reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    OPERATOR        reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    CLASS           reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    STRUCT          reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    UNION           reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    TEMPLATE        reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    RCPAREN         reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    PRIVATE         reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    PROTECTED       reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)
    PUBLIC          reduce using rule 180 (member_declaration -> function_definition SEMICOLON .)


state 366

    (254) member_declarator -> declarator pure_specifier .

    SEMICOLON       reduce using rule 254 (member_declarator -> declarator pure_specifier .)
    COMMA           reduce using rule 254 (member_declarator -> declarator pure_specifier .)


state 367

    (308) pure_specifier -> EQUAL . NUMBER

    NUMBER          shift and go to state 468


state 368

    (256) member_declarator -> IDENTIFIER COLON . constant_expression
    (29) constant_expression -> . conditional_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    constant_expression            shift and go to state 469
    conditional_expression         shift and go to state 184
    logical_OR_expression          shift and go to state 148
    logical_AND_expression         shift and go to state 158
    inclusive_OR_expression        shift and go to state 168
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 369

    (21) enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list . RCPAREN
    (26) enum_list -> enum_list . COMMA enumerator

    RCPAREN         shift and go to state 470
    COMMA           shift and go to state 372


state 370

    (23) enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LPAREN          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    AUTO            reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    STATIC          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    EXTERN          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    CONST           reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BNOP            reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MULTOP          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BANDOP          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    CHAR            reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    SHORT           reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    INT             reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LONG            reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    SIGNED          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    FLOAT           reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    VOID            reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    STRING          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    ENUM            reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    TYPE            reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    CLASS           reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    STRUCT          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    UNION           reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    EQUAL           reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LSPAREN         reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    COMMA           reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RPAREN          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RTEMPLATE       reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    COLON           reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MULTEQOP        reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DIVEQOP         reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MODEQOP         reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    PLUSEQOP        reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MINUSEQOP       reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LSHIFTEQOP      reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RSHIFTEQOP      reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BANDEQOP        reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BOREQOP         reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DOTSTAR         reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    ARROWSTAR       reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DIVOP           reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MODOP           reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LSHIFT          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RSHIFT          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LTCOMP          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    GTCOMP          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LTECOMP         reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    GTECOMP         reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    EQCOMP          reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    NEQCOMP         reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    XOROP           reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    OROP            reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    ANDOP           reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    QUESMARK        reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RSPAREN         reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 23 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)


state 371

    (22) enum_specifier -> ENUM LCPAREN enum_list RCPAREN .

    SEMICOLON       reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    TYPEDEF         reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LPAREN          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    AUTO            reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    STATIC          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    EXTERN          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    VIRTUAL         reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    CONST           reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    VOLATILE        reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    IDENTIFIER      reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BNOP            reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MULTOP          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BANDOP          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    CHAR            reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    SHORT           reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    INT             reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LONG            reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    SIGNED          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    UNSIGNED        reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    FLOAT           reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DOUBLE          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    VOID            reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    STRING          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    ENUM            reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    TYPE            reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    OPERATOR        reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    CLASS           reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    STRUCT          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    UNION           reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    TEMPLATE        reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    EQUAL           reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LSPAREN         reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    COMMA           reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RPAREN          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RTEMPLATE       reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    COLON           reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MULTEQOP        reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DIVEQOP         reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MODEQOP         reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    PLUSEQOP        reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MINUSEQOP       reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LSHIFTEQOP      reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RSHIFTEQOP      reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BANDEQOP        reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BOREQOP         reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DOTSTAR         reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    ARROWSTAR       reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DIVOP           reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MODOP           reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    PLUSOP          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MINUSOP         reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LSHIFT          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RSHIFT          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LTCOMP          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    GTCOMP          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LTECOMP         reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    GTECOMP         reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    EQCOMP          reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    NEQCOMP         reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    XOROP           reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    OROP            reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    ANDOP           reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    QUESMARK        reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RSPAREN         reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RCPAREN         reduce using rule 22 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)


state 372

    (26) enum_list -> enum_list COMMA . enumerator
    (27) enumerator -> . IDENTIFIER
    (28) enumerator -> . IDENTIFIER EQUAL constant_expression

    IDENTIFIER      shift and go to state 246

    enumerator                     shift and go to state 471

state 373

    (28) enumerator -> IDENTIFIER EQUAL . constant_expression
    (29) constant_expression -> . conditional_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    constant_expression            shift and go to state 472
    conditional_expression         shift and go to state 184
    logical_OR_expression          shift and go to state 148
    logical_AND_expression         shift and go to state 158
    inclusive_OR_expression        shift and go to state 168
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 374

    (16) template_class_name -> LTEMPLATE template_arg_list . RTEMPLATE
    (18) template_arg_list -> template_arg_list . COMMA template_arg

    RTEMPLATE       shift and go to state 473
    COMMA           shift and go to state 474


state 375

    (17) template_arg_list -> template_arg .

    RTEMPLATE       reduce using rule 17 (template_arg_list -> template_arg .)
    COMMA           reduce using rule 17 (template_arg_list -> template_arg .)


state 376

    (19) template_arg -> expression .
    (65) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RTEMPLATE       reduce using rule 19 (template_arg -> expression .)
    COMMA           shift and go to state 337

  ! COMMA           [ reduce using rule 19 (template_arg -> expression .) ]


state 377

    (20) template_arg -> type_name .

    RTEMPLATE       reduce using rule 20 (template_arg -> type_name .)
    COMMA           reduce using rule 20 (template_arg -> type_name .)


state 378

    (315) base_list -> base_list COMMA . base_specifier
    (316) base_specifier -> . class_key IDENTIFIER
    (317) base_specifier -> . access_specifier class_key IDENTIFIER
    (318) base_specifier -> . class_key IDENTIFIER template_class_name
    (319) base_specifier -> . access_specifier class_key IDENTIFIER template_class_name
    (320) base_specifier -> . IDENTIFIER
    (321) base_specifier -> . access_specifier IDENTIFIER
    (322) base_specifier -> . IDENTIFIER template_class_name
    (323) base_specifier -> . access_specifier IDENTIFIER template_class_name
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (324) access_specifier -> . PRIVATE
    (325) access_specifier -> . PROTECTED
    (326) access_specifier -> . PUBLIC

    IDENTIFIER      shift and go to state 253
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68
    PRIVATE         shift and go to state 236
    PROTECTED       shift and go to state 237
    PUBLIC          shift and go to state 238

    base_specifier                 shift and go to state 475
    class_key                      shift and go to state 252
    access_specifier               shift and go to state 254

state 379

    (316) base_specifier -> class_key IDENTIFIER .
    (318) base_specifier -> class_key IDENTIFIER . template_class_name
    (16) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 316 (base_specifier -> class_key IDENTIFIER .)
    LCPAREN         reduce using rule 316 (base_specifier -> class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 249

    template_class_name            shift and go to state 476

state 380

    (322) base_specifier -> IDENTIFIER template_class_name .

    COMMA           reduce using rule 322 (base_specifier -> IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 322 (base_specifier -> IDENTIFIER template_class_name .)


state 381

    (317) base_specifier -> access_specifier class_key . IDENTIFIER
    (319) base_specifier -> access_specifier class_key . IDENTIFIER template_class_name

    IDENTIFIER      shift and go to state 477


state 382

    (321) base_specifier -> access_specifier IDENTIFIER .
    (323) base_specifier -> access_specifier IDENTIFIER . template_class_name
    (16) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 321 (base_specifier -> access_specifier IDENTIFIER .)
    LCPAREN         reduce using rule 321 (base_specifier -> access_specifier IDENTIFIER .)
    LTEMPLATE       shift and go to state 249

    template_class_name            shift and go to state 478

state 383

    (247) asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .

    ASM             reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LPAREN          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    AUTO            reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STATIC          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    EXTERN          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    VIRTUAL         reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CONST           reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BNOP            reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    MULTOP          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BANDOP          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CHAR            reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SHORT           reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    INT             reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LONG            reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SIGNED          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    FLOAT           reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    VOID            reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRING          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    ENUM            reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TYPE            reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    OPERATOR        reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CLASS           reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRUCT          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    UNION           reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    $end            reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    RCPAREN         reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CASE            reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    IF              reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SWITCH          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    WHILE           reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DO              reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    FOR             reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    BREAK           reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    RETURN          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    GOTO            reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    TRY             reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    THROW           reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NEW             reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    DELETE          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    THIS            reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    NUMBER          reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    STRING_L        reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    SCHAR           reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)
    ELSE            reduce using rule 247 (asm_declaration -> ASM LPAREN STRING_L RPAREN SEMICOLON .)


state 384

    (124) primary_expression -> LPAREN expression RPAREN .

    LSPAREN         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    DPLUSOP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    DMINUSOP        reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    LTEMPLATE       reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    MULTEQOP        reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQOP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    MODEQOP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQOP        reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQOP       reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQOP      reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQOP      reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    BANDEQOP        reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    BOREQOP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    DOTSTAR         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    ARROWSTAR       reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    MULTOP          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    DIVOP           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    MODOP           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    PLUSOP          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    MINUSOP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    LTCOMP          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    GTCOMP          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    LTECOMP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    GTECOMP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    EQCOMP          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    NEQCOMP         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    BANDOP          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    XOROP           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    OROP            reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    ANDOP           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    QUESMARK        reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    RSPAREN         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    RCPAREN         reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)
    RTEMPLATE       reduce using rule 124 (primary_expression -> LPAREN expression RPAREN .)


state 385

    (130) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    cast_expression                shift and go to state 479
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 386

    (131) type_name -> type_specifier_list abstract_declarator .
    (135) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (137) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (139) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RPAREN          reduce using rule 131 (type_name -> type_specifier_list abstract_declarator .)
    RTEMPLATE       reduce using rule 131 (type_name -> type_specifier_list abstract_declarator .)
    COMMA           reduce using rule 131 (type_name -> type_specifier_list abstract_declarator .)
    LPAREN          shift and go to state 396
    LSPAREN         shift and go to state 397


state 387

    (133) abstract_declarator -> unary2_operator . abstract_declarator
    (134) abstract_declarator -> unary2_operator .
    (133) abstract_declarator -> . unary2_operator abstract_declarator
    (134) abstract_declarator -> . unary2_operator
    (135) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (136) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (137) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (138) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (139) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (140) abstract_declarator -> . LSPAREN RSPAREN
    (141) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    RPAREN          reduce using rule 134 (abstract_declarator -> unary2_operator .)
    RTEMPLATE       reduce using rule 134 (abstract_declarator -> unary2_operator .)
    COMMA           reduce using rule 134 (abstract_declarator -> unary2_operator .)
    LPAREN          shift and go to state 388
    LSPAREN         shift and go to state 285
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39

  ! LPAREN          [ reduce using rule 134 (abstract_declarator -> unary2_operator .) ]
  ! LSPAREN         [ reduce using rule 134 (abstract_declarator -> unary2_operator .) ]

    unary2_operator                shift and go to state 387
    abstract_declarator            shift and go to state 398

state 388

    (136) abstract_declarator -> LPAREN . argument_declaration_list RPAREN
    (141) abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (142) argument_declaration_list -> . arg_declaration_list
    (143) argument_declaration_list -> . empty
    (133) abstract_declarator -> . unary2_operator abstract_declarator
    (134) abstract_declarator -> . unary2_operator
    (135) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (136) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (137) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (138) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (139) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (140) abstract_declarator -> . LSPAREN RSPAREN
    (141) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (144) arg_declaration_list -> . argument_declaration
    (145) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (15) empty -> .
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (146) argument_declaration -> . decl_specifiers declarator
    (147) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (148) argument_declaration -> . decl_specifiers abstract_declarator
    (149) argument_declaration -> . decl_specifiers
    (150) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (151) argument_declaration -> . decl_specifiers EQUAL expression
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    LPAREN          shift and go to state 388
    LSPAREN         shift and go to state 285
    RPAREN          reduce using rule 15 (empty -> .)
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    TYPEDEF         shift and go to state 22
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    argument_declaration_list      shift and go to state 399
    abstract_declarator            shift and go to state 400
    arg_declaration_list           shift and go to state 141
    empty                          shift and go to state 142
    unary2_operator                shift and go to state 387
    argument_declaration           shift and go to state 144
    decl_specifiers                shift and go to state 147
    decl_specifier                 shift and go to state 14
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 389

    (267) type_specifier_list -> type_specifier type_specifier_list .

    LPAREN          reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    LSPAREN         reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    MULTOP          reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    BANDOP          reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    RPAREN          reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    EQUAL           reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    MULTEQOP        reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    DIVEQOP         reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    MODEQOP         reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    PLUSEQOP        reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    MINUSEQOP       reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    LSHIFTEQOP      reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    RSHIFTEQOP      reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    BANDEQOP        reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    BOREQOP         reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    DOTSTAR         reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    ARROWSTAR       reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    DIVOP           reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    MODOP           reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    PLUSOP          reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    MINUSOP         reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    LSHIFT          reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    RSHIFT          reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    LTCOMP          reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    GTCOMP          reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    LTECOMP         reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    GTECOMP         reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    EQCOMP          reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    NEQCOMP         reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    XOROP           reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    OROP            reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    ANDOP           reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    QUESMARK        reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    COMMA           reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    RSPAREN         reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    SEMICOLON       reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    RCPAREN         reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    COLON           reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    RTEMPLATE       reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    IDENTIFIER      reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    BNOP            reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)
    OPERATOR        reduce using rule 267 (type_specifier_list -> type_specifier type_specifier_list .)


state 390

    (251) expression_list -> expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 251 (expression_list -> expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 251 (expression_list -> expression_list COMMA assignment_expression .)


state 391

    (145) arg_declaration_list -> argument_declaration COMMA arg_declaration_list .

    RPAREN          reduce using rule 145 (arg_declaration_list -> argument_declaration COMMA arg_declaration_list .)


state 392

    (67) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RPAREN          reduce using rule 67 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 67 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 67 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RCPAREN         reduce using rule 67 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RTEMPLATE       reduce using rule 67 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 67 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RSPAREN         reduce using rule 67 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 393

    (147) argument_declaration -> decl_specifiers declarator EQUAL . expression
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 480
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 394

    (151) argument_declaration -> decl_specifiers EQUAL expression .
    (65) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 151 (argument_declaration -> decl_specifiers EQUAL expression .)
    RTEMPLATE       reduce using rule 151 (argument_declaration -> decl_specifiers EQUAL expression .)
    COMMA           shift and go to state 337

  ! COMMA           [ reduce using rule 151 (argument_declaration -> decl_specifiers EQUAL expression .) ]


state 395

    (150) argument_declaration -> decl_specifiers abstract_declarator EQUAL . expression
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 481
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 396

    (135) abstract_declarator -> abstract_declarator LPAREN . argument_declaration_list RPAREN
    (142) argument_declaration_list -> . arg_declaration_list
    (143) argument_declaration_list -> . empty
    (144) arg_declaration_list -> . argument_declaration
    (145) arg_declaration_list -> . argument_declaration COMMA arg_declaration_list
    (15) empty -> .
    (146) argument_declaration -> . decl_specifiers declarator
    (147) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (148) argument_declaration -> . decl_specifiers abstract_declarator
    (149) argument_declaration -> . decl_specifiers
    (150) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (151) argument_declaration -> . decl_specifiers EQUAL expression
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    RPAREN          reduce using rule 15 (empty -> .)
    TYPEDEF         shift and go to state 22
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    argument_declaration_list      shift and go to state 482
    arg_declaration_list           shift and go to state 141
    empty                          shift and go to state 142
    argument_declaration           shift and go to state 144
    decl_specifiers                shift and go to state 147
    decl_specifier                 shift and go to state 14
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 397

    (137) abstract_declarator -> abstract_declarator LSPAREN . constant_expression RSPAREN
    (139) abstract_declarator -> abstract_declarator LSPAREN . RSPAREN
    (29) constant_expression -> . conditional_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    RSPAREN         shift and go to state 484
    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    constant_expression            shift and go to state 483
    conditional_expression         shift and go to state 184
    logical_OR_expression          shift and go to state 148
    logical_AND_expression         shift and go to state 158
    inclusive_OR_expression        shift and go to state 168
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 398

    (133) abstract_declarator -> unary2_operator abstract_declarator .
    (135) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (137) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (139) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    EQUAL           reduce using rule 133 (abstract_declarator -> unary2_operator abstract_declarator .)
    COMMA           reduce using rule 133 (abstract_declarator -> unary2_operator abstract_declarator .)
    RPAREN          reduce using rule 133 (abstract_declarator -> unary2_operator abstract_declarator .)
    RTEMPLATE       reduce using rule 133 (abstract_declarator -> unary2_operator abstract_declarator .)
    LPAREN          shift and go to state 396
    LSPAREN         shift and go to state 397

  ! LPAREN          [ reduce using rule 133 (abstract_declarator -> unary2_operator abstract_declarator .) ]
  ! LSPAREN         [ reduce using rule 133 (abstract_declarator -> unary2_operator abstract_declarator .) ]


state 399

    (136) abstract_declarator -> LPAREN argument_declaration_list . RPAREN

    RPAREN          shift and go to state 485


state 400

    (141) abstract_declarator -> LPAREN abstract_declarator . RPAREN
    (135) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (137) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (139) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RPAREN          shift and go to state 486
    LPAREN          shift and go to state 396
    LSPAREN         shift and go to state 397


state 401

    (138) abstract_declarator -> LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 487


state 402

    (140) abstract_declarator -> LSPAREN RSPAREN .

    EQUAL           reduce using rule 140 (abstract_declarator -> LSPAREN RSPAREN .)
    LPAREN          reduce using rule 140 (abstract_declarator -> LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 140 (abstract_declarator -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 140 (abstract_declarator -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 140 (abstract_declarator -> LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 140 (abstract_declarator -> LSPAREN RSPAREN .)


state 403

    (31) conditional_expression -> logical_OR_expression QUESMARK expression . COLON conditional_expression
    (65) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 488
    COMMA           shift and go to state 337


state 404

    (33) logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .
    (35) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 33 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    OROP            reduce using rule 33 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RPAREN          reduce using rule 33 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COMMA           reduce using rule 33 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RSPAREN         reduce using rule 33 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    SEMICOLON       reduce using rule 33 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RCPAREN         reduce using rule 33 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COLON           reduce using rule 33 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RTEMPLATE       reduce using rule 33 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    ANDOP           shift and go to state 302


state 405

    (112) postfix_expression -> postfix_expression LSPAREN expression . RSPAREN
    (65) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 489
    COMMA           shift and go to state 337


state 406

    (113) postfix_expression -> postfix_expression LPAREN expression_list . RPAREN
    (251) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 490
    COMMA           shift and go to state 267


state 407

    (115) postfix_expression -> postfix_expression LPAREN RPAREN .

    LSPAREN         reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DPLUSOP         reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DMINUSOP        reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTEMPLATE       reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUAL           reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTEQOP        reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQOP         reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQOP         reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDEQOP        reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BOREQOP         reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOTSTAR         reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTOP          reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVOP           reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODOP           reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSOP          reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSOP         reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTCOMP          reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTCOMP          reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTECOMP         reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTECOMP         reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQCOMP          reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NEQCOMP         reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDOP          reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOROP           reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OROP            reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDOP           reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    QUESMARK        reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSPAREN         reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RCPAREN         reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 115 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 408

    (114) postfix_expression -> postfix_expression template_class_name LPAREN . expression_list RPAREN
    (250) expression_list -> . assignment_expression
    (251) expression_list -> . expression_list COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    postfix_expression             shift and go to state 149
    expression_list                shift and go to state 491
    assignment_expression          shift and go to state 143
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 409

    (118) postfix_expression -> postfix_expression DOT name .

    LSPAREN         reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    LPAREN          reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    DOT             reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    ARROW           reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    DPLUSOP         reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    DMINUSOP        reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    LTEMPLATE       reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    EQUAL           reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    MULTEQOP        reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    DIVEQOP         reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    MODEQOP         reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    PLUSEQOP        reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    MINUSEQOP       reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    LSHIFTEQOP      reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    RSHIFTEQOP      reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    BANDEQOP        reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    BOREQOP         reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    DOTSTAR         reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    ARROWSTAR       reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    MULTOP          reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    DIVOP           reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    MODOP           reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    PLUSOP          reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    MINUSOP         reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    LSHIFT          reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    RSHIFT          reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    LTCOMP          reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    GTCOMP          reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    LTECOMP         reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    GTECOMP         reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    EQCOMP          reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    NEQCOMP         reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    BANDOP          reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    XOROP           reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    OROP            reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    ANDOP           reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    QUESMARK        reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    RPAREN          reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    COMMA           reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    RSPAREN         reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    SEMICOLON       reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    RCPAREN         reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    COLON           reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)
    RTEMPLATE       reduce using rule 118 (postfix_expression -> postfix_expression DOT name .)


state 410

    (119) postfix_expression -> postfix_expression ARROW name .

    LSPAREN         reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    LPAREN          reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    DOT             reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    ARROW           reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    DPLUSOP         reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    DMINUSOP        reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    LTEMPLATE       reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    EQUAL           reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    MULTEQOP        reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    DIVEQOP         reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    MODEQOP         reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    PLUSEQOP        reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    MINUSEQOP       reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFTEQOP      reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFTEQOP      reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    BANDEQOP        reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    BOREQOP         reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    DOTSTAR         reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    ARROWSTAR       reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    MULTOP          reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    DIVOP           reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    MODOP           reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    PLUSOP          reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    MINUSOP         reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFT          reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFT          reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    LTCOMP          reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    GTCOMP          reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    LTECOMP         reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    GTECOMP         reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    EQCOMP          reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    NEQCOMP         reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    BANDOP          reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    XOROP           reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    OROP            reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    ANDOP           reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    QUESMARK        reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    RPAREN          reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    COMMA           reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    RSPAREN         reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    SEMICOLON       reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    RCPAREN         reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    COLON           reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)
    RTEMPLATE       reduce using rule 119 (postfix_expression -> postfix_expression ARROW name .)


state 411

    (84) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 492


state 412

    (35) logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .
    (37) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

  ! shift/reduce conflict for OROP resolved as shift
    ANDOP           reduce using rule 35 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    QUESMARK        reduce using rule 35 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RPAREN          reduce using rule 35 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COMMA           reduce using rule 35 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RSPAREN         reduce using rule 35 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    SEMICOLON       reduce using rule 35 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RCPAREN         reduce using rule 35 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COLON           reduce using rule 35 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RTEMPLATE       reduce using rule 35 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    OROP            shift and go to state 309

  ! OROP            [ reduce using rule 35 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .) ]


state 413

    (116) postfix_expression -> simple_type_name LPAREN expression_list . RPAREN
    (251) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 493
    COMMA           shift and go to state 267


state 414

    (117) postfix_expression -> simple_type_name LPAREN RPAREN .

    LSPAREN         reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LPAREN          reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DOT             reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ARROW           reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DPLUSOP         reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DMINUSOP        reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LTEMPLATE       reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    EQUAL           reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MULTEQOP        reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DIVEQOP         reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MODEQOP         reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BANDEQOP        reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BOREQOP         reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DOTSTAR         reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MULTOP          reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DIVOP           reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MODOP           reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    PLUSOP          reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MINUSOP         reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LSHIFT          reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSHIFT          reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LTCOMP          reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    GTCOMP          reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LTECOMP         reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    GTECOMP         reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    EQCOMP          reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    NEQCOMP         reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BANDOP          reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    XOROP           reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    OROP            reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ANDOP           reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    QUESMARK        reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RPAREN          reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    COMMA           reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSPAREN         reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    SEMICOLON       reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RCPAREN         reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    COLON           reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 117 (postfix_expression -> simple_type_name LPAREN RPAREN .)


state 415

    (88) allocation_expression -> NEW placement new_type_name . new_initializer
    (90) allocation_expression -> NEW placement new_type_name .
    (103) new_initializer -> . LPAREN initializer_list RPAREN
    (104) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    MULTEQOP        reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    DIVEQOP         reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    MODEQOP         reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    PLUSEQOP        reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    MINUSEQOP       reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    LSHIFTEQOP      reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    RSHIFTEQOP      reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    BANDEQOP        reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    BOREQOP         reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    DOTSTAR         reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    ARROWSTAR       reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    MULTOP          reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    DIVOP           reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    MODOP           reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    PLUSOP          reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    MINUSOP         reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    LSHIFT          reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    RSHIFT          reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    LTCOMP          reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    GTCOMP          reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    LTECOMP         reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    GTECOMP         reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    EQCOMP          reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    NEQCOMP         reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    BANDOP          reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    XOROP           reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    OROP            reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    ANDOP           reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    QUESMARK        reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    RPAREN          reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    COMMA           reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    RSPAREN         reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    SEMICOLON       reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    RCPAREN         reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    COLON           reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    RTEMPLATE       reduce using rule 90 (allocation_expression -> NEW placement new_type_name .)
    LPAREN          shift and go to state 418

    new_initializer                shift and go to state 494

state 416

    (92) allocation_expression -> NEW placement LPAREN . type_name RPAREN new_initializer
    (94) allocation_expression -> NEW placement LPAREN . type_name RPAREN
    (131) type_name -> . type_specifier_list abstract_declarator
    (132) type_name -> . type_specifier_list
    (267) type_specifier_list -> . type_specifier type_specifier_list
    (268) type_specifier_list -> . type_specifier
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    type_name                      shift and go to state 495
    type_specifier_list            shift and go to state 262
    type_specifier                 shift and go to state 263
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 417

    (89) allocation_expression -> NEW new_type_name new_initializer .

    EQUAL           reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTEQOP        reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVEQOP         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    MODEQOP         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDEQOP        reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    BOREQOP         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    DOTSTAR         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTOP          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVOP           reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    MODOP           reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSOP          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSOP         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFT          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFT          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    LTCOMP          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    GTCOMP          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    LTECOMP         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    GTECOMP         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    EQCOMP          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    NEQCOMP         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDOP          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    XOROP           reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    OROP            reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    ANDOP           reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    QUESMARK        reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    RPAREN          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    COMMA           reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    RSPAREN         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    SEMICOLON       reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    RCPAREN         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    COLON           reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    RTEMPLATE       reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)


state 418

    (103) new_initializer -> LPAREN . initializer_list RPAREN
    (104) new_initializer -> LPAREN . RPAREN
    (243) initializer_list -> . assignment_expression
    (244) initializer_list -> . initializer_list COMMA assignment_expression
    (245) initializer_list -> . LCPAREN initializer_list RCPAREN
    (246) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 497
    LCPAREN         shift and go to state 328
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    initializer_list               shift and go to state 496
    assignment_expression          shift and go to state 330
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 419

    (93) allocation_expression -> NEW LPAREN type_name . RPAREN new_initializer
    (95) allocation_expression -> NEW LPAREN type_name . RPAREN

    RPAREN          shift and go to state 498


state 420

    (102) placement -> LPAREN expression_list . RPAREN
    (251) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 499
    COMMA           shift and go to state 267


state 421

    (96) new_type_name -> type_specifier_list new_declarator .
    (100) new_declarator -> new_declarator . LSPAREN expression RSPAREN

    LPAREN          reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    EQUAL           reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    MULTEQOP        reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    DIVEQOP         reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    MODEQOP         reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    PLUSEQOP        reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    MINUSEQOP       reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    LSHIFTEQOP      reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    RSHIFTEQOP      reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    BANDEQOP        reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    BOREQOP         reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    DOTSTAR         reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    ARROWSTAR       reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    MULTOP          reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    DIVOP           reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    MODOP           reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    PLUSOP          reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    MINUSOP         reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    LSHIFT          reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    RSHIFT          reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    LTCOMP          reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    GTCOMP          reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    LTECOMP         reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    GTECOMP         reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    EQCOMP          reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    NEQCOMP         reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    BANDOP          reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    XOROP           reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    OROP            reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    ANDOP           reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    QUESMARK        reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    RPAREN          reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    COMMA           reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    RSPAREN         reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    SEMICOLON       reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    RCPAREN         reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    COLON           reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    RTEMPLATE       reduce using rule 96 (new_type_name -> type_specifier_list new_declarator .)
    LSPAREN         shift and go to state 500


state 422

    (98) new_declarator -> MULTOP . new_declarator
    (99) new_declarator -> MULTOP .
    (98) new_declarator -> . MULTOP new_declarator
    (99) new_declarator -> . MULTOP
    (100) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (101) new_declarator -> . LSPAREN expression RSPAREN

    LSPAREN         reduce using rule 99 (new_declarator -> MULTOP .)
    LPAREN          reduce using rule 99 (new_declarator -> MULTOP .)
    EQUAL           reduce using rule 99 (new_declarator -> MULTOP .)
    MULTEQOP        reduce using rule 99 (new_declarator -> MULTOP .)
    DIVEQOP         reduce using rule 99 (new_declarator -> MULTOP .)
    MODEQOP         reduce using rule 99 (new_declarator -> MULTOP .)
    PLUSEQOP        reduce using rule 99 (new_declarator -> MULTOP .)
    MINUSEQOP       reduce using rule 99 (new_declarator -> MULTOP .)
    LSHIFTEQOP      reduce using rule 99 (new_declarator -> MULTOP .)
    RSHIFTEQOP      reduce using rule 99 (new_declarator -> MULTOP .)
    BANDEQOP        reduce using rule 99 (new_declarator -> MULTOP .)
    BOREQOP         reduce using rule 99 (new_declarator -> MULTOP .)
    DOTSTAR         reduce using rule 99 (new_declarator -> MULTOP .)
    ARROWSTAR       reduce using rule 99 (new_declarator -> MULTOP .)
    MULTOP          reduce using rule 99 (new_declarator -> MULTOP .)
    DIVOP           reduce using rule 99 (new_declarator -> MULTOP .)
    MODOP           reduce using rule 99 (new_declarator -> MULTOP .)
    PLUSOP          reduce using rule 99 (new_declarator -> MULTOP .)
    MINUSOP         reduce using rule 99 (new_declarator -> MULTOP .)
    LSHIFT          reduce using rule 99 (new_declarator -> MULTOP .)
    RSHIFT          reduce using rule 99 (new_declarator -> MULTOP .)
    LTCOMP          reduce using rule 99 (new_declarator -> MULTOP .)
    GTCOMP          reduce using rule 99 (new_declarator -> MULTOP .)
    LTECOMP         reduce using rule 99 (new_declarator -> MULTOP .)
    GTECOMP         reduce using rule 99 (new_declarator -> MULTOP .)
    EQCOMP          reduce using rule 99 (new_declarator -> MULTOP .)
    NEQCOMP         reduce using rule 99 (new_declarator -> MULTOP .)
    BANDOP          reduce using rule 99 (new_declarator -> MULTOP .)
    XOROP           reduce using rule 99 (new_declarator -> MULTOP .)
    OROP            reduce using rule 99 (new_declarator -> MULTOP .)
    ANDOP           reduce using rule 99 (new_declarator -> MULTOP .)
    QUESMARK        reduce using rule 99 (new_declarator -> MULTOP .)
    RPAREN          reduce using rule 99 (new_declarator -> MULTOP .)
    COMMA           reduce using rule 99 (new_declarator -> MULTOP .)
    RSPAREN         reduce using rule 99 (new_declarator -> MULTOP .)
    SEMICOLON       reduce using rule 99 (new_declarator -> MULTOP .)
    RCPAREN         reduce using rule 99 (new_declarator -> MULTOP .)
    COLON           reduce using rule 99 (new_declarator -> MULTOP .)
    RTEMPLATE       reduce using rule 99 (new_declarator -> MULTOP .)

  ! MULTOP          [ shift and go to state 422 ]
  ! LSPAREN         [ shift and go to state 423 ]

    new_declarator                 shift and go to state 501

state 423

    (101) new_declarator -> LSPAREN . expression RSPAREN
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 502
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 424

    (37) inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .
    (39) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 37 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    ANDOP           reduce using rule 37 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    QUESMARK        reduce using rule 37 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RPAREN          reduce using rule 37 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COMMA           reduce using rule 37 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RSPAREN         reduce using rule 37 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    SEMICOLON       reduce using rule 37 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RCPAREN         reduce using rule 37 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COLON           reduce using rule 37 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RTEMPLATE       reduce using rule 37 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    XOROP           shift and go to state 310


state 425

    (39) exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .
    (41) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 39 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    OROP            reduce using rule 39 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    ANDOP           reduce using rule 39 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    QUESMARK        reduce using rule 39 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RPAREN          reduce using rule 39 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COMMA           reduce using rule 39 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RSPAREN         reduce using rule 39 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    SEMICOLON       reduce using rule 39 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RCPAREN         reduce using rule 39 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COLON           reduce using rule 39 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RTEMPLATE       reduce using rule 39 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    BANDOP          shift and go to state 311


state 426

    (41) AND_expression -> AND_expression BANDOP equality_expression .
    (43) equality_expression -> equality_expression . EQCOMP relational_expression
    (44) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 41 (AND_expression -> AND_expression BANDOP equality_expression .)
    XOROP           reduce using rule 41 (AND_expression -> AND_expression BANDOP equality_expression .)
    OROP            reduce using rule 41 (AND_expression -> AND_expression BANDOP equality_expression .)
    ANDOP           reduce using rule 41 (AND_expression -> AND_expression BANDOP equality_expression .)
    QUESMARK        reduce using rule 41 (AND_expression -> AND_expression BANDOP equality_expression .)
    RPAREN          reduce using rule 41 (AND_expression -> AND_expression BANDOP equality_expression .)
    COMMA           reduce using rule 41 (AND_expression -> AND_expression BANDOP equality_expression .)
    RSPAREN         reduce using rule 41 (AND_expression -> AND_expression BANDOP equality_expression .)
    SEMICOLON       reduce using rule 41 (AND_expression -> AND_expression BANDOP equality_expression .)
    RCPAREN         reduce using rule 41 (AND_expression -> AND_expression BANDOP equality_expression .)
    COLON           reduce using rule 41 (AND_expression -> AND_expression BANDOP equality_expression .)
    RTEMPLATE       reduce using rule 41 (AND_expression -> AND_expression BANDOP equality_expression .)
    EQCOMP          shift and go to state 312
    NEQCOMP         shift and go to state 313


state 427

    (43) equality_expression -> equality_expression EQCOMP relational_expression .
    (46) relational_expression -> relational_expression . LTCOMP shift_expression
    (47) relational_expression -> relational_expression . GTCOMP shift_expression
    (48) relational_expression -> relational_expression . LTECOMP shift_expression
    (49) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 43 (equality_expression -> equality_expression EQCOMP relational_expression .)
    NEQCOMP         reduce using rule 43 (equality_expression -> equality_expression EQCOMP relational_expression .)
    BANDOP          reduce using rule 43 (equality_expression -> equality_expression EQCOMP relational_expression .)
    XOROP           reduce using rule 43 (equality_expression -> equality_expression EQCOMP relational_expression .)
    OROP            reduce using rule 43 (equality_expression -> equality_expression EQCOMP relational_expression .)
    ANDOP           reduce using rule 43 (equality_expression -> equality_expression EQCOMP relational_expression .)
    QUESMARK        reduce using rule 43 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RPAREN          reduce using rule 43 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COMMA           reduce using rule 43 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RSPAREN         reduce using rule 43 (equality_expression -> equality_expression EQCOMP relational_expression .)
    SEMICOLON       reduce using rule 43 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RCPAREN         reduce using rule 43 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COLON           reduce using rule 43 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RTEMPLATE       reduce using rule 43 (equality_expression -> equality_expression EQCOMP relational_expression .)
    LTCOMP          shift and go to state 314
    GTCOMP          shift and go to state 315
    LTECOMP         shift and go to state 316
    GTECOMP         shift and go to state 317


state 428

    (44) equality_expression -> equality_expression NEQCOMP relational_expression .
    (46) relational_expression -> relational_expression . LTCOMP shift_expression
    (47) relational_expression -> relational_expression . GTCOMP shift_expression
    (48) relational_expression -> relational_expression . LTECOMP shift_expression
    (49) relational_expression -> relational_expression . GTECOMP shift_expression

    EQCOMP          reduce using rule 44 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    NEQCOMP         reduce using rule 44 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    BANDOP          reduce using rule 44 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    XOROP           reduce using rule 44 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    OROP            reduce using rule 44 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    ANDOP           reduce using rule 44 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    QUESMARK        reduce using rule 44 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RPAREN          reduce using rule 44 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COMMA           reduce using rule 44 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RSPAREN         reduce using rule 44 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    SEMICOLON       reduce using rule 44 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RCPAREN         reduce using rule 44 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COLON           reduce using rule 44 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RTEMPLATE       reduce using rule 44 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    LTCOMP          shift and go to state 314
    GTCOMP          shift and go to state 315
    LTECOMP         shift and go to state 316
    GTECOMP         shift and go to state 317


state 429

    (46) relational_expression -> relational_expression LTCOMP shift_expression .
    (51) shift_expression -> shift_expression . LSHIFT additive_expression
    (52) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTCOMP          reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LTECOMP         reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTECOMP         reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    EQCOMP          reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    NEQCOMP         reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    BANDOP          reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    XOROP           reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    OROP            reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    ANDOP           reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    QUESMARK        reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RPAREN          reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COMMA           reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RSPAREN         reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    SEMICOLON       reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RCPAREN         reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COLON           reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RTEMPLATE       reduce using rule 46 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LSHIFT          shift and go to state 318
    RSHIFT          shift and go to state 319


state 430

    (47) relational_expression -> relational_expression GTCOMP shift_expression .
    (51) shift_expression -> shift_expression . LSHIFT additive_expression
    (52) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTCOMP          reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LTECOMP         reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTECOMP         reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    EQCOMP          reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    NEQCOMP         reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    BANDOP          reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    XOROP           reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    OROP            reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    ANDOP           reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    QUESMARK        reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RPAREN          reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COMMA           reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RSPAREN         reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    SEMICOLON       reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RCPAREN         reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COLON           reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RTEMPLATE       reduce using rule 47 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LSHIFT          shift and go to state 318
    RSHIFT          shift and go to state 319


state 431

    (48) relational_expression -> relational_expression LTECOMP shift_expression .
    (51) shift_expression -> shift_expression . LSHIFT additive_expression
    (52) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTCOMP          reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LTECOMP         reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTECOMP         reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    EQCOMP          reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    NEQCOMP         reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    BANDOP          reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    XOROP           reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    OROP            reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    ANDOP           reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    QUESMARK        reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RPAREN          reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COMMA           reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RSPAREN         reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    SEMICOLON       reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RCPAREN         reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COLON           reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RTEMPLATE       reduce using rule 48 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LSHIFT          shift and go to state 318
    RSHIFT          shift and go to state 319


state 432

    (49) relational_expression -> relational_expression GTECOMP shift_expression .
    (51) shift_expression -> shift_expression . LSHIFT additive_expression
    (52) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTCOMP          reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LTECOMP         reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTECOMP         reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    EQCOMP          reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    NEQCOMP         reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    BANDOP          reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    XOROP           reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    OROP            reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    ANDOP           reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    QUESMARK        reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RPAREN          reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COMMA           reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RSPAREN         reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    SEMICOLON       reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RCPAREN         reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COLON           reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RTEMPLATE       reduce using rule 49 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LSHIFT          shift and go to state 318
    RSHIFT          shift and go to state 319


state 433

    (51) shift_expression -> shift_expression LSHIFT additive_expression .
    (54) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (55) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTCOMP          reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTCOMP          reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTECOMP         reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTECOMP         reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQCOMP          reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQCOMP         reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BANDOP          reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOROP           reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OROP            reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ANDOP           reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    QUESMARK        reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSPAREN         reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMICOLON       reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RCPAREN         reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RTEMPLATE       reduce using rule 51 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUSOP          shift and go to state 320
    MINUSOP         shift and go to state 321


state 434

    (52) shift_expression -> shift_expression RSHIFT additive_expression .
    (54) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (55) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTCOMP          reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTCOMP          reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTECOMP         reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTECOMP         reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQCOMP          reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQCOMP         reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BANDOP          reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOROP           reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OROP            reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ANDOP           reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    QUESMARK        reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSPAREN         reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMICOLON       reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RCPAREN         reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RTEMPLATE       reduce using rule 52 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUSOP          shift and go to state 320
    MINUSOP         shift and go to state 321


state 435

    (54) additive_expression -> additive_expression PLUSOP multiplicative_expression .
    (57) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (58) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (59) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    BANDOP          reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    XOROP           reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    OROP            reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    ANDOP           reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RPAREN          reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COMMA           reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COLON           reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RTEMPLATE       reduce using rule 54 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MULTOP          shift and go to state 322
    DIVOP           shift and go to state 323
    MODOP           shift and go to state 324


state 436

    (55) additive_expression -> additive_expression MINUSOP multiplicative_expression .
    (57) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (58) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (59) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    BANDOP          reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    XOROP           reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    OROP            reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    ANDOP           reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RPAREN          reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COMMA           reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COLON           reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RTEMPLATE       reduce using rule 55 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MULTOP          shift and go to state 322
    DIVOP           shift and go to state 323
    MODOP           shift and go to state 324


state 437

    (57) multiplicative_expression -> multiplicative_expression MULTOP pm_expression .
    (61) pm_expression -> pm_expression . DOTSTAR cast_expression
    (62) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    DIVOP           reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    MODOP           reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    PLUSOP          reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    MINUSOP         reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LSHIFT          reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RSHIFT          reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LTCOMP          reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    GTCOMP          reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LTECOMP         reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    GTECOMP         reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    EQCOMP          reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    NEQCOMP         reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    BANDOP          reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    XOROP           reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    OROP            reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    ANDOP           reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    QUESMARK        reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RPAREN          reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    COMMA           reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RSPAREN         reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    SEMICOLON       reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RCPAREN         reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    COLON           reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RTEMPLATE       reduce using rule 57 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    DOTSTAR         shift and go to state 325
    ARROWSTAR       shift and go to state 326


state 438

    (58) multiplicative_expression -> multiplicative_expression DIVOP pm_expression .
    (61) pm_expression -> pm_expression . DOTSTAR cast_expression
    (62) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    DIVOP           reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    MODOP           reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    PLUSOP          reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    MINUSOP         reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LSHIFT          reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RSHIFT          reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LTCOMP          reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    GTCOMP          reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LTECOMP         reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    GTECOMP         reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    EQCOMP          reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    NEQCOMP         reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    BANDOP          reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    XOROP           reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    OROP            reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    ANDOP           reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    QUESMARK        reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RPAREN          reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    COMMA           reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RSPAREN         reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    SEMICOLON       reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RCPAREN         reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    COLON           reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RTEMPLATE       reduce using rule 58 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    DOTSTAR         shift and go to state 325
    ARROWSTAR       shift and go to state 326


state 439

    (59) multiplicative_expression -> multiplicative_expression MODOP pm_expression .
    (61) pm_expression -> pm_expression . DOTSTAR cast_expression
    (62) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    DIVOP           reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    MODOP           reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    PLUSOP          reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    MINUSOP         reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LSHIFT          reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RSHIFT          reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LTCOMP          reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    GTCOMP          reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LTECOMP         reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    GTECOMP         reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    EQCOMP          reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    NEQCOMP         reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    BANDOP          reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    XOROP           reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    OROP            reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    ANDOP           reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    QUESMARK        reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RPAREN          reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    COMMA           reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RSPAREN         reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    SEMICOLON       reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RCPAREN         reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    COLON           reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RTEMPLATE       reduce using rule 59 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    DOTSTAR         shift and go to state 325
    ARROWSTAR       shift and go to state 326


state 440

    (61) pm_expression -> pm_expression DOTSTAR cast_expression .

    DOTSTAR         reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    ARROWSTAR       reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MULTOP          reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    DIVOP           reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MODOP           reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    PLUSOP          reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MINUSOP         reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LSHIFT          reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RSHIFT          reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LTCOMP          reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    GTCOMP          reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LTECOMP         reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    GTECOMP         reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    EQCOMP          reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    NEQCOMP         reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    BANDOP          reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    XOROP           reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    OROP            reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    ANDOP           reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    QUESMARK        reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RPAREN          reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    COMMA           reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RSPAREN         reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    SEMICOLON       reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RCPAREN         reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    COLON           reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RTEMPLATE       reduce using rule 61 (pm_expression -> pm_expression DOTSTAR cast_expression .)


state 441

    (62) pm_expression -> pm_expression ARROWSTAR cast_expression .

    DOTSTAR         reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    ARROWSTAR       reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MULTOP          reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    DIVOP           reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MODOP           reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    PLUSOP          reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MINUSOP         reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LSHIFT          reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RSHIFT          reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LTCOMP          reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    GTCOMP          reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LTECOMP         reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    GTECOMP         reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    EQCOMP          reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    NEQCOMP         reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    BANDOP          reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    XOROP           reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    OROP            reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    ANDOP           reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    QUESMARK        reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RPAREN          reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    COMMA           reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RSPAREN         reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    SEMICOLON       reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RCPAREN         reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    COLON           reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RTEMPLATE       reduce using rule 62 (pm_expression -> pm_expression ARROWSTAR cast_expression .)


state 442

    (245) initializer_list -> LCPAREN initializer_list . RCPAREN
    (246) initializer_list -> LCPAREN initializer_list . COMMA RCPAREN
    (244) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 503
    COMMA           shift and go to state 504


state 443

    (240) initializer -> EQUAL LCPAREN initializer_list RCPAREN .

    SEMICOLON       reduce using rule 240 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 240 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)


state 444

    (241) initializer -> EQUAL LCPAREN initializer_list COMMA . RCPAREN
    (244) initializer_list -> initializer_list COMMA . assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 505
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    assignment_expression          shift and go to state 506
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 445

    (212) labeled_statement -> IDENTIFIER COLON statement .

    RCPAREN         reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMICOLON       reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    LCPAREN         reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    TRY             reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    THROW           reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    ASM             reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    TEMPLATE        reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    DPLUSOP         reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    DMINUSOP        reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPEDEF         reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    LPAREN          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUSOP          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUSOP         reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    NOTSYM          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    BNOP            reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    MULTOP          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    BANDOP          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    NEW             reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    DELETE          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    AUTO            reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    STATIC          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    EXTERN          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    VIRTUAL         reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    VOLATILE        reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    THIS            reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    SHORT           reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    LONG            reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    SIGNED          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    UNSIGNED        reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    ENUM            reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPE            reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    OPERATOR        reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    NUMBER          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_L        reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    SCHAR           reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    CLASS           reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    STRUCT          reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    UNION           reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 212 (labeled_statement -> IDENTIFIER COLON statement .)


state 446

    (213) labeled_statement -> CASE constant_expression COLON . statement
    (189) statement -> . labeled_statement
    (190) statement -> . expression_statement
    (191) statement -> . compound_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) statement -> . declaration_statement
    (196) statement -> . try_block
    (212) labeled_statement -> . IDENTIFIER COLON statement
    (213) labeled_statement -> . CASE constant_expression COLON statement
    (214) labeled_statement -> . DEFAULT COLON statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN
    (202) selection_statement -> . IF LPAREN expression RPAREN statement
    (203) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (204) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (215) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (216) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (217) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (197) jump_statement -> . BREAK SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . RETURN expression SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (225) declaration_statement -> . declaration
    (205) try_block -> . TRY compound_statement handler_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 201
    CASE            shift and go to state 202
    DEFAULT         shift and go to state 203
    SEMICOLON       shift and go to state 205
    LCPAREN         shift and go to state 79
    IF              shift and go to state 206
    SWITCH          shift and go to state 208
    WHILE           shift and go to state 209
    DO              shift and go to state 210
    FOR             shift and go to state 211
    BREAK           shift and go to state 212
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 214
    GOTO            shift and go to state 215
    TRY             shift and go to state 217
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    statement                      shift and go to state 507
    labeled_statement              shift and go to state 193
    expression_statement           shift and go to state 194
    compound_statement             shift and go to state 195
    selection_statement            shift and go to state 196
    iteration_statement            shift and go to state 197
    jump_statement                 shift and go to state 198
    declaration_statement          shift and go to state 199
    try_block                      shift and go to state 200
    expression                     shift and go to state 204
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 447

    (214) labeled_statement -> DEFAULT COLON statement .

    RCPAREN         reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    LCPAREN         reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    TRY             reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    THROW           reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    ASM             reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    TEMPLATE        reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    DPLUSOP         reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    DMINUSOP        reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    PLUSOP          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    MINUSOP         reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    NOTSYM          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    BNOP            reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    MULTOP          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    BANDOP          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    NEW             reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    DELETE          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    STATIC          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    EXTERN          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    VIRTUAL         reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    VOLATILE        reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    THIS            reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    STRING          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    ENUM            reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    TYPE            reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    OPERATOR        reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    NUMBER          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    STRING_L        reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    SCHAR           reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    CLASS           reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    UNION           reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 214 (labeled_statement -> DEFAULT COLON statement .)


state 448

    (65) expression -> expression COMMA assignment_expression .

    SEMICOLON       reduce using rule 65 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 65 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 65 (expression -> expression COMMA assignment_expression .)
    RTEMPLATE       reduce using rule 65 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 65 (expression -> expression COMMA assignment_expression .)
    RSPAREN         reduce using rule 65 (expression -> expression COMMA assignment_expression .)


state 449

    (202) selection_statement -> IF LPAREN expression . RPAREN statement
    (203) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (65) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 508
    COMMA           shift and go to state 337


state 450

    (263) declarator -> LPAREN . declarator RPAREN
    (130) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (124) primary_expression -> LPAREN . expression RPAREN
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (131) type_name -> . type_specifier_list abstract_declarator
    (132) type_name -> . type_specifier_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (267) type_specifier_list -> . type_specifier type_specifier_list
    (268) type_specifier_list -> . type_specifier
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (269) operator_function_name -> . OPERATOR operator_name
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LPAREN          shift and go to state 207
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 340
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    THROW           shift and go to state 220
    OPERATOR        shift and go to state 54
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68
    THIS            shift and go to state 170
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174

    declarator                     shift and go to state 72
    type_name                      shift and go to state 261
    cast_expression                shift and go to state 153
    expression                     shift and go to state 260
    name                           shift and go to state 222
    unary2_operator                shift and go to state 339
    type_specifier_list            shift and go to state 262
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    operator_function_name         shift and go to state 36
    type_specifier                 shift and go to state 263
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    simple_type_name               shift and go to state 264
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 451

    (204) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (65) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 509
    COMMA           shift and go to state 337


state 452

    (215) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (65) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 510
    COMMA           shift and go to state 337


state 453

    (216) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 511


state 454

    (217) iteration_statement -> FOR LPAREN for_init_statement . expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON expression RPAREN statement
    (219) iteration_statement -> FOR LPAREN for_init_statement . expression SEMICOLON RPAREN statement
    (220) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON RPAREN statement
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 513
    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 512
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 455

    (221) for_init_statement -> expression_statement .

    SEMICOLON       reduce using rule 221 (for_init_statement -> expression_statement .)
    THROW           reduce using rule 221 (for_init_statement -> expression_statement .)
    DPLUSOP         reduce using rule 221 (for_init_statement -> expression_statement .)
    DMINUSOP        reduce using rule 221 (for_init_statement -> expression_statement .)
    SIZEOF          reduce using rule 221 (for_init_statement -> expression_statement .)
    PLUSOP          reduce using rule 221 (for_init_statement -> expression_statement .)
    MINUSOP         reduce using rule 221 (for_init_statement -> expression_statement .)
    NOTSYM          reduce using rule 221 (for_init_statement -> expression_statement .)
    BNOP            reduce using rule 221 (for_init_statement -> expression_statement .)
    MULTOP          reduce using rule 221 (for_init_statement -> expression_statement .)
    BANDOP          reduce using rule 221 (for_init_statement -> expression_statement .)
    NEW             reduce using rule 221 (for_init_statement -> expression_statement .)
    DELETE          reduce using rule 221 (for_init_statement -> expression_statement .)
    THIS            reduce using rule 221 (for_init_statement -> expression_statement .)
    LPAREN          reduce using rule 221 (for_init_statement -> expression_statement .)
    CHAR            reduce using rule 221 (for_init_statement -> expression_statement .)
    SHORT           reduce using rule 221 (for_init_statement -> expression_statement .)
    INT             reduce using rule 221 (for_init_statement -> expression_statement .)
    LONG            reduce using rule 221 (for_init_statement -> expression_statement .)
    SIGNED          reduce using rule 221 (for_init_statement -> expression_statement .)
    UNSIGNED        reduce using rule 221 (for_init_statement -> expression_statement .)
    FLOAT           reduce using rule 221 (for_init_statement -> expression_statement .)
    DOUBLE          reduce using rule 221 (for_init_statement -> expression_statement .)
    VOID            reduce using rule 221 (for_init_statement -> expression_statement .)
    STRING          reduce using rule 221 (for_init_statement -> expression_statement .)
    NUMBER          reduce using rule 221 (for_init_statement -> expression_statement .)
    STRING_L        reduce using rule 221 (for_init_statement -> expression_statement .)
    SCHAR           reduce using rule 221 (for_init_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 221 (for_init_statement -> expression_statement .)
    OPERATOR        reduce using rule 221 (for_init_statement -> expression_statement .)


state 456

    (222) for_init_statement -> declaration_statement .

    SEMICOLON       reduce using rule 222 (for_init_statement -> declaration_statement .)
    THROW           reduce using rule 222 (for_init_statement -> declaration_statement .)
    DPLUSOP         reduce using rule 222 (for_init_statement -> declaration_statement .)
    DMINUSOP        reduce using rule 222 (for_init_statement -> declaration_statement .)
    SIZEOF          reduce using rule 222 (for_init_statement -> declaration_statement .)
    PLUSOP          reduce using rule 222 (for_init_statement -> declaration_statement .)
    MINUSOP         reduce using rule 222 (for_init_statement -> declaration_statement .)
    NOTSYM          reduce using rule 222 (for_init_statement -> declaration_statement .)
    BNOP            reduce using rule 222 (for_init_statement -> declaration_statement .)
    MULTOP          reduce using rule 222 (for_init_statement -> declaration_statement .)
    BANDOP          reduce using rule 222 (for_init_statement -> declaration_statement .)
    NEW             reduce using rule 222 (for_init_statement -> declaration_statement .)
    DELETE          reduce using rule 222 (for_init_statement -> declaration_statement .)
    THIS            reduce using rule 222 (for_init_statement -> declaration_statement .)
    LPAREN          reduce using rule 222 (for_init_statement -> declaration_statement .)
    CHAR            reduce using rule 222 (for_init_statement -> declaration_statement .)
    SHORT           reduce using rule 222 (for_init_statement -> declaration_statement .)
    INT             reduce using rule 222 (for_init_statement -> declaration_statement .)
    LONG            reduce using rule 222 (for_init_statement -> declaration_statement .)
    SIGNED          reduce using rule 222 (for_init_statement -> declaration_statement .)
    UNSIGNED        reduce using rule 222 (for_init_statement -> declaration_statement .)
    FLOAT           reduce using rule 222 (for_init_statement -> declaration_statement .)
    DOUBLE          reduce using rule 222 (for_init_statement -> declaration_statement .)
    VOID            reduce using rule 222 (for_init_statement -> declaration_statement .)
    STRING          reduce using rule 222 (for_init_statement -> declaration_statement .)
    NUMBER          reduce using rule 222 (for_init_statement -> declaration_statement .)
    STRING_L        reduce using rule 222 (for_init_statement -> declaration_statement .)
    SCHAR           reduce using rule 222 (for_init_statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 222 (for_init_statement -> declaration_statement .)
    OPERATOR        reduce using rule 222 (for_init_statement -> declaration_statement .)


state 457

    (199) jump_statement -> RETURN expression SEMICOLON .

    RCPAREN         reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    LCPAREN         reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    TRY             reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    THROW           reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    ASM             reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    TEMPLATE        reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    DPLUSOP         reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    DMINUSOP        reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    TYPEDEF         reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    PLUSOP          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    MINUSOP         reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    NOTSYM          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    BNOP            reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    MULTOP          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    BANDOP          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    NEW             reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    DELETE          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    AUTO            reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    STATIC          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    EXTERN          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    VIRTUAL         reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    VOLATILE        reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    THIS            reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    ENUM            reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    TYPE            reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    OPERATOR        reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_L        reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    SCHAR           reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    STRUCT          reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    UNION           reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 199 (jump_statement -> RETURN expression SEMICOLON .)


state 458

    (201) jump_statement -> GOTO IDENTIFIER SEMICOLON .

    RCPAREN         reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LCPAREN         reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    THROW           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ASM             reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TEMPLATE        reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DPLUSOP         reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DMINUSOP        reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUSOP          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUSOP         reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NOTSYM          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BNOP            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MULTOP          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BANDOP          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VIRTUAL         reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOLATILE        reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INT             reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPE            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    OPERATOR        reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_L        reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SCHAR           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)


state 459

    (205) try_block -> TRY compound_statement handler_list .

    RCPAREN         reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    IDENTIFIER      reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    CASE            reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    DEFAULT         reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    SEMICOLON       reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    LCPAREN         reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    IF              reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    SWITCH          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    WHILE           reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    DO              reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    FOR             reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    BREAK           reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    CONTINUE        reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    RETURN          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    GOTO            reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    TRY             reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    THROW           reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    ASM             reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    TEMPLATE        reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    DPLUSOP         reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    DMINUSOP        reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    SIZEOF          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    TYPEDEF         reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    LPAREN          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    PLUSOP          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    MINUSOP         reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    NOTSYM          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    BNOP            reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    MULTOP          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    BANDOP          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    NEW             reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    DELETE          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    AUTO            reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    STATIC          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    EXTERN          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    VIRTUAL         reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    CONST           reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    VOLATILE        reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    THIS            reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    CHAR            reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    SHORT           reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    INT             reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    LONG            reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    SIGNED          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    UNSIGNED        reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    FLOAT           reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    DOUBLE          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    VOID            reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    STRING          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    ENUM            reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    TYPE            reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    OPERATOR        reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    NUMBER          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    STRING_L        reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    SCHAR           reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    CLASS           reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    STRUCT          reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    UNION           reduce using rule 205 (try_block -> TRY compound_statement handler_list .)
    ELSE            reduce using rule 205 (try_block -> TRY compound_statement handler_list .)


state 460

    (206) handler_list -> handler . handler_list
    (207) handler_list -> handler .
    (206) handler_list -> . handler handler_list
    (207) handler_list -> . handler
    (208) handler -> . CATCH LPAREN exception_declaration RPAREN compound_statement

    RCPAREN         reduce using rule 207 (handler_list -> handler .)
    IDENTIFIER      reduce using rule 207 (handler_list -> handler .)
    CASE            reduce using rule 207 (handler_list -> handler .)
    DEFAULT         reduce using rule 207 (handler_list -> handler .)
    SEMICOLON       reduce using rule 207 (handler_list -> handler .)
    LCPAREN         reduce using rule 207 (handler_list -> handler .)
    IF              reduce using rule 207 (handler_list -> handler .)
    SWITCH          reduce using rule 207 (handler_list -> handler .)
    WHILE           reduce using rule 207 (handler_list -> handler .)
    DO              reduce using rule 207 (handler_list -> handler .)
    FOR             reduce using rule 207 (handler_list -> handler .)
    BREAK           reduce using rule 207 (handler_list -> handler .)
    CONTINUE        reduce using rule 207 (handler_list -> handler .)
    RETURN          reduce using rule 207 (handler_list -> handler .)
    GOTO            reduce using rule 207 (handler_list -> handler .)
    TRY             reduce using rule 207 (handler_list -> handler .)
    THROW           reduce using rule 207 (handler_list -> handler .)
    ASM             reduce using rule 207 (handler_list -> handler .)
    TEMPLATE        reduce using rule 207 (handler_list -> handler .)
    DPLUSOP         reduce using rule 207 (handler_list -> handler .)
    DMINUSOP        reduce using rule 207 (handler_list -> handler .)
    SIZEOF          reduce using rule 207 (handler_list -> handler .)
    TYPEDEF         reduce using rule 207 (handler_list -> handler .)
    LPAREN          reduce using rule 207 (handler_list -> handler .)
    PLUSOP          reduce using rule 207 (handler_list -> handler .)
    MINUSOP         reduce using rule 207 (handler_list -> handler .)
    NOTSYM          reduce using rule 207 (handler_list -> handler .)
    BNOP            reduce using rule 207 (handler_list -> handler .)
    MULTOP          reduce using rule 207 (handler_list -> handler .)
    BANDOP          reduce using rule 207 (handler_list -> handler .)
    NEW             reduce using rule 207 (handler_list -> handler .)
    DELETE          reduce using rule 207 (handler_list -> handler .)
    AUTO            reduce using rule 207 (handler_list -> handler .)
    STATIC          reduce using rule 207 (handler_list -> handler .)
    EXTERN          reduce using rule 207 (handler_list -> handler .)
    VIRTUAL         reduce using rule 207 (handler_list -> handler .)
    CONST           reduce using rule 207 (handler_list -> handler .)
    VOLATILE        reduce using rule 207 (handler_list -> handler .)
    THIS            reduce using rule 207 (handler_list -> handler .)
    CHAR            reduce using rule 207 (handler_list -> handler .)
    SHORT           reduce using rule 207 (handler_list -> handler .)
    INT             reduce using rule 207 (handler_list -> handler .)
    LONG            reduce using rule 207 (handler_list -> handler .)
    SIGNED          reduce using rule 207 (handler_list -> handler .)
    UNSIGNED        reduce using rule 207 (handler_list -> handler .)
    FLOAT           reduce using rule 207 (handler_list -> handler .)
    DOUBLE          reduce using rule 207 (handler_list -> handler .)
    VOID            reduce using rule 207 (handler_list -> handler .)
    STRING          reduce using rule 207 (handler_list -> handler .)
    ENUM            reduce using rule 207 (handler_list -> handler .)
    TYPE            reduce using rule 207 (handler_list -> handler .)
    OPERATOR        reduce using rule 207 (handler_list -> handler .)
    NUMBER          reduce using rule 207 (handler_list -> handler .)
    STRING_L        reduce using rule 207 (handler_list -> handler .)
    SCHAR           reduce using rule 207 (handler_list -> handler .)
    CLASS           reduce using rule 207 (handler_list -> handler .)
    STRUCT          reduce using rule 207 (handler_list -> handler .)
    UNION           reduce using rule 207 (handler_list -> handler .)
    ELSE            reduce using rule 207 (handler_list -> handler .)
    CATCH           shift and go to state 461

    handler                        shift and go to state 460
    handler_list                   shift and go to state 514

state 461

    (208) handler -> CATCH . LPAREN exception_declaration RPAREN compound_statement

    LPAREN          shift and go to state 515


state 462

    (232) template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .

    ASM             reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TEMPLATE        reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TYPEDEF         reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LPAREN          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    AUTO            reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STATIC          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    EXTERN          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    VIRTUAL         reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CONST           reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    VOLATILE        reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    IDENTIFIER      reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BNOP            reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    MULTOP          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BANDOP          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CHAR            reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SHORT           reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    INT             reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LONG            reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SIGNED          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    UNSIGNED        reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    FLOAT           reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DOUBLE          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    VOID            reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRING          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    ENUM            reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TYPE            reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    OPERATOR        reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CLASS           reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRUCT          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    UNION           reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    $end            reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    RCPAREN         reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CASE            reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DEFAULT         reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SEMICOLON       reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    LCPAREN         reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    IF              reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SWITCH          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    WHILE           reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DO              reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    FOR             reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    BREAK           reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    CONTINUE        reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    RETURN          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    GOTO            reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    TRY             reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    THROW           reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DPLUSOP         reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DMINUSOP        reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SIZEOF          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    PLUSOP          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    MINUSOP         reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NOTSYM          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NEW             reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    DELETE          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    THIS            reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    NUMBER          reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    STRING_L        reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    SCHAR           reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)
    ELSE            reduce using rule 232 (template_declaration -> TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration .)


state 463

    (234) template_argument_list -> template_argument_list COMMA argument_declaration .

    RTEMPLATE       reduce using rule 234 (template_argument_list -> template_argument_list COMMA argument_declaration .)
    COMMA           reduce using rule 234 (template_argument_list -> template_argument_list COMMA argument_declaration .)


state 464

    (172) access_list -> access_specifier COLON member_access_list .

    RCPAREN         reduce using rule 172 (access_list -> access_specifier COLON member_access_list .)
    PRIVATE         reduce using rule 172 (access_list -> access_specifier COLON member_access_list .)
    PROTECTED       reduce using rule 172 (access_list -> access_specifier COLON member_access_list .)
    PUBLIC          reduce using rule 172 (access_list -> access_specifier COLON member_access_list .)


state 465

    (176) member_declaration -> decl_specifiers member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    COLON           reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    STATIC          reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    CONST           reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    BNOP            reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    INT             reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    LONG            reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    VOID            reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    STRING          reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    ENUM            reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    TYPE            reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    UNION           reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 176 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)


state 466

    (253) member_declarator_list -> member_declarator_list COMMA member_declarator .

    SEMICOLON       reduce using rule 253 (member_declarator_list -> member_declarator_list COMMA member_declarator .)
    COMMA           reduce using rule 253 (member_declarator_list -> member_declarator_list COMMA member_declarator .)


state 467

    (254) member_declarator -> declarator . pure_specifier
    (255) member_declarator -> declarator .
    (260) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (261) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (262) declarator -> declarator . LSPAREN RSPAREN
    (308) pure_specifier -> . EQUAL NUMBER

    SEMICOLON       reduce using rule 255 (member_declarator -> declarator .)
    COMMA           reduce using rule 255 (member_declarator -> declarator .)
    LPAREN          shift and go to state 136
    LSPAREN         shift and go to state 76
    EQUAL           shift and go to state 367

    pure_specifier                 shift and go to state 366

state 468

    (308) pure_specifier -> EQUAL NUMBER .

    SEMICOLON       reduce using rule 308 (pure_specifier -> EQUAL NUMBER .)
    COMMA           reduce using rule 308 (pure_specifier -> EQUAL NUMBER .)


state 469

    (256) member_declarator -> IDENTIFIER COLON constant_expression .

    SEMICOLON       reduce using rule 256 (member_declarator -> IDENTIFIER COLON constant_expression .)
    COMMA           reduce using rule 256 (member_declarator -> IDENTIFIER COLON constant_expression .)


state 470

    (21) enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .

    SEMICOLON       reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    TYPEDEF         reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LPAREN          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    AUTO            reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    STATIC          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    EXTERN          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    VIRTUAL         reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    CONST           reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    VOLATILE        reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    IDENTIFIER      reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BNOP            reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MULTOP          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BANDOP          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    CHAR            reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    SHORT           reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    INT             reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LONG            reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    SIGNED          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    UNSIGNED        reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    FLOAT           reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DOUBLE          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    VOID            reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    STRING          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    ENUM            reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    TYPE            reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    OPERATOR        reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    CLASS           reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    STRUCT          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    UNION           reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    TEMPLATE        reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    EQUAL           reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LSPAREN         reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    COMMA           reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RPAREN          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RTEMPLATE       reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    COLON           reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MULTEQOP        reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DIVEQOP         reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MODEQOP         reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    PLUSEQOP        reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MINUSEQOP       reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LSHIFTEQOP      reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RSHIFTEQOP      reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BANDEQOP        reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BOREQOP         reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DOTSTAR         reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    ARROWSTAR       reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DIVOP           reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MODOP           reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    PLUSOP          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MINUSOP         reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LSHIFT          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RSHIFT          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LTCOMP          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    GTCOMP          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LTECOMP         reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    GTECOMP         reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    EQCOMP          reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    NEQCOMP         reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    XOROP           reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    OROP            reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    ANDOP           reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    QUESMARK        reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RSPAREN         reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RCPAREN         reduce using rule 21 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)


state 471

    (26) enum_list -> enum_list COMMA enumerator .

    RCPAREN         reduce using rule 26 (enum_list -> enum_list COMMA enumerator .)
    COMMA           reduce using rule 26 (enum_list -> enum_list COMMA enumerator .)


state 472

    (28) enumerator -> IDENTIFIER EQUAL constant_expression .

    RCPAREN         reduce using rule 28 (enumerator -> IDENTIFIER EQUAL constant_expression .)
    COMMA           reduce using rule 28 (enumerator -> IDENTIFIER EQUAL constant_expression .)


state 473

    (16) template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .

    SEMICOLON       reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    TYPEDEF         reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LPAREN          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    AUTO            reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    STATIC          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    EXTERN          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    VIRTUAL         reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    CONST           reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    VOLATILE        reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    IDENTIFIER      reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BNOP            reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MULTOP          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BANDOP          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    CHAR            reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    SHORT           reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    INT             reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LONG            reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    SIGNED          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    UNSIGNED        reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    FLOAT           reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DOUBLE          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    VOID            reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    STRING          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    ENUM            reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    TYPE            reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    OPERATOR        reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    CLASS           reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    STRUCT          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    UNION           reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    TEMPLATE        reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    EQUAL           reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSPAREN         reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    COMMA           reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RPAREN          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RTEMPLATE       reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    COLON           reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MULTEQOP        reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DIVEQOP         reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MODEQOP         reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    PLUSEQOP        reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MINUSEQOP       reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSHIFTEQOP      reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSHIFTEQOP      reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BANDEQOP        reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    BOREQOP         reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DOTSTAR         reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    ARROWSTAR       reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    DIVOP           reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MODOP           reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    PLUSOP          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    MINUSOP         reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LSHIFT          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSHIFT          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LTCOMP          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    GTCOMP          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LTECOMP         reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    GTECOMP         reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    EQCOMP          reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    NEQCOMP         reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    XOROP           reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    OROP            reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    ANDOP           reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    QUESMARK        reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RSPAREN         reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    RCPAREN         reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)
    LCPAREN         reduce using rule 16 (template_class_name -> LTEMPLATE template_arg_list RTEMPLATE .)


state 474

    (18) template_arg_list -> template_arg_list COMMA . template_arg
    (19) template_arg -> . expression
    (20) template_arg -> . type_name
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (131) type_name -> . type_specifier_list abstract_declarator
    (132) type_name -> . type_specifier_list
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (267) type_specifier_list -> . type_specifier type_specifier_list
    (268) type_specifier_list -> . type_specifier
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    template_arg                   shift and go to state 516
    expression                     shift and go to state 376
    type_name                      shift and go to state 377
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    type_specifier_list            shift and go to state 262
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    type_specifier                 shift and go to state 263
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    simple_type_name               shift and go to state 264
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    name                           shift and go to state 161
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 475

    (315) base_list -> base_list COMMA base_specifier .

    COMMA           reduce using rule 315 (base_list -> base_list COMMA base_specifier .)
    LCPAREN         reduce using rule 315 (base_list -> base_list COMMA base_specifier .)


state 476

    (318) base_specifier -> class_key IDENTIFIER template_class_name .

    COMMA           reduce using rule 318 (base_specifier -> class_key IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 318 (base_specifier -> class_key IDENTIFIER template_class_name .)


state 477

    (317) base_specifier -> access_specifier class_key IDENTIFIER .
    (319) base_specifier -> access_specifier class_key IDENTIFIER . template_class_name
    (16) template_class_name -> . LTEMPLATE template_arg_list RTEMPLATE

    COMMA           reduce using rule 317 (base_specifier -> access_specifier class_key IDENTIFIER .)
    LCPAREN         reduce using rule 317 (base_specifier -> access_specifier class_key IDENTIFIER .)
    LTEMPLATE       shift and go to state 249

    template_class_name            shift and go to state 517

state 478

    (323) base_specifier -> access_specifier IDENTIFIER template_class_name .

    COMMA           reduce using rule 323 (base_specifier -> access_specifier IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 323 (base_specifier -> access_specifier IDENTIFIER template_class_name .)


state 479

    (130) cast_expression -> LPAREN type_name RPAREN cast_expression .

    DOTSTAR         reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ARROWSTAR       reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTOP          reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVOP           reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODOP           reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSOP          reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSOP         reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTCOMP          reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTCOMP          reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTECOMP         reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTECOMP         reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQCOMP          reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NEQCOMP         reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDOP          reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOROP           reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OROP            reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDOP           reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    QUESMARK        reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSPAREN         reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMICOLON       reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUAL           reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTEQOP        reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQOP         reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQOP         reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQOP        reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQOP       reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQOP      reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQOP      reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDEQOP        reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BOREQOP         reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RCPAREN         reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RTEMPLATE       reduce using rule 130 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 480

    (147) argument_declaration -> decl_specifiers declarator EQUAL expression .
    (65) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 147 (argument_declaration -> decl_specifiers declarator EQUAL expression .)
    RTEMPLATE       reduce using rule 147 (argument_declaration -> decl_specifiers declarator EQUAL expression .)
    COMMA           shift and go to state 337

  ! COMMA           [ reduce using rule 147 (argument_declaration -> decl_specifiers declarator EQUAL expression .) ]


state 481

    (150) argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .
    (65) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 150 (argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .)
    RTEMPLATE       reduce using rule 150 (argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .)
    COMMA           shift and go to state 337

  ! COMMA           [ reduce using rule 150 (argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .) ]


state 482

    (135) abstract_declarator -> abstract_declarator LPAREN argument_declaration_list . RPAREN

    RPAREN          shift and go to state 518


state 483

    (137) abstract_declarator -> abstract_declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 519


state 484

    (139) abstract_declarator -> abstract_declarator LSPAREN RSPAREN .

    EQUAL           reduce using rule 139 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    LPAREN          reduce using rule 139 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 139 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 139 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 139 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    RTEMPLATE       reduce using rule 139 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)


state 485

    (136) abstract_declarator -> LPAREN argument_declaration_list RPAREN .

    EQUAL           reduce using rule 136 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    LPAREN          reduce using rule 136 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    LSPAREN         reduce using rule 136 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    COMMA           reduce using rule 136 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    RPAREN          reduce using rule 136 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    RTEMPLATE       reduce using rule 136 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)


state 486

    (141) abstract_declarator -> LPAREN abstract_declarator RPAREN .

    EQUAL           reduce using rule 141 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 141 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LSPAREN         reduce using rule 141 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 141 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 141 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RTEMPLATE       reduce using rule 141 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 487

    (138) abstract_declarator -> LSPAREN constant_expression RSPAREN .

    EQUAL           reduce using rule 138 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    LPAREN          reduce using rule 138 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 138 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 138 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 138 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 138 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)


state 488

    (31) conditional_expression -> logical_OR_expression QUESMARK expression COLON . conditional_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (269) operator_function_name -> . OPERATOR operator_name

    LPAREN          shift and go to state 186
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    logical_OR_expression          shift and go to state 148
    conditional_expression         shift and go to state 520
    logical_AND_expression         shift and go to state 158
    inclusive_OR_expression        shift and go to state 168
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181
    cast_expression                shift and go to state 153
    unary_expression               shift and go to state 185
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    literal                        shift and go to state 169
    operator_function_name         shift and go to state 36

state 489

    (112) postfix_expression -> postfix_expression LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOT             reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROW           reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DPLUSOP         reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DMINUSOP        reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTEMPLATE       reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    OROP            reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COLON           reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 112 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)


state 490

    (113) postfix_expression -> postfix_expression LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOT             reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    OROP            reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COLON           reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 113 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)


state 491

    (114) postfix_expression -> postfix_expression template_class_name LPAREN expression_list . RPAREN
    (251) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 521
    COMMA           shift and go to state 267


state 492

    (84) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    EQUAL           reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODOP           reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOROP           reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OROP            reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RTEMPLATE       reduce using rule 84 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 493

    (116) postfix_expression -> simple_type_name LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DOT             reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    OROP            reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    COLON           reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 116 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)


state 494

    (88) allocation_expression -> NEW placement new_type_name new_initializer .

    EQUAL           reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MULTEQOP        reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    DIVEQOP         reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MODEQOP         reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    BANDEQOP        reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    BOREQOP         reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    DOTSTAR         reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MULTOP          reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    DIVOP           reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MODOP           reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    PLUSOP          reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MINUSOP         reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LSHIFT          reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RSHIFT          reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LTCOMP          reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    GTCOMP          reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LTECOMP         reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    GTECOMP         reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    EQCOMP          reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    NEQCOMP         reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    BANDOP          reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    XOROP           reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    OROP            reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    ANDOP           reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    QUESMARK        reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RPAREN          reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    COMMA           reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RSPAREN         reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    SEMICOLON       reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RCPAREN         reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    COLON           reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RTEMPLATE       reduce using rule 88 (allocation_expression -> NEW placement new_type_name new_initializer .)


state 495

    (92) allocation_expression -> NEW placement LPAREN type_name . RPAREN new_initializer
    (94) allocation_expression -> NEW placement LPAREN type_name . RPAREN

    RPAREN          shift and go to state 522


state 496

    (103) new_initializer -> LPAREN initializer_list . RPAREN
    (244) initializer_list -> initializer_list . COMMA assignment_expression

    RPAREN          shift and go to state 523
    COMMA           shift and go to state 524


state 497

    (104) new_initializer -> LPAREN RPAREN .

    EQUAL           reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    MULTEQOP        reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    DIVEQOP         reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    MODEQOP         reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    BANDEQOP        reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    BOREQOP         reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    DOTSTAR         reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    MULTOP          reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    DIVOP           reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    MODOP           reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    PLUSOP          reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    MINUSOP         reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    LSHIFT          reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    RSHIFT          reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    LTCOMP          reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    GTCOMP          reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    LTECOMP         reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    GTECOMP         reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    EQCOMP          reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    NEQCOMP         reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    BANDOP          reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    XOROP           reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    OROP            reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    ANDOP           reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    QUESMARK        reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    RPAREN          reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    COMMA           reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    RSPAREN         reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    RCPAREN         reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    COLON           reduce using rule 104 (new_initializer -> LPAREN RPAREN .)
    RTEMPLATE       reduce using rule 104 (new_initializer -> LPAREN RPAREN .)


state 498

    (93) allocation_expression -> NEW LPAREN type_name RPAREN . new_initializer
    (95) allocation_expression -> NEW LPAREN type_name RPAREN .
    (103) new_initializer -> . LPAREN initializer_list RPAREN
    (104) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODOP           reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    XOROP           reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    OROP            reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COMMA           reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COLON           reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RTEMPLATE       reduce using rule 95 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 418

    new_initializer                shift and go to state 525

state 499

    (102) placement -> LPAREN expression_list RPAREN .

    LPAREN          reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    CONST           reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    VOLATILE        reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    CHAR            reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    SHORT           reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    INT             reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    LONG            reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    SIGNED          reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    UNSIGNED        reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    FLOAT           reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    DOUBLE          reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    VOID            reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    STRING          reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    ENUM            reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    TYPE            reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    CLASS           reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    STRUCT          reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    UNION           reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)
    TEMPLATE        reduce using rule 102 (placement -> LPAREN expression_list RPAREN .)


state 500

    (100) new_declarator -> new_declarator LSPAREN . expression RSPAREN
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 526
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 501

    (98) new_declarator -> MULTOP new_declarator .
    (100) new_declarator -> new_declarator . LSPAREN expression RSPAREN

    LSPAREN         reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    LPAREN          reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    EQUAL           reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    MULTEQOP        reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    DIVEQOP         reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    MODEQOP         reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    PLUSEQOP        reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    MINUSEQOP       reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    LSHIFTEQOP      reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    RSHIFTEQOP      reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    BANDEQOP        reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    BOREQOP         reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    DOTSTAR         reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    ARROWSTAR       reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    MULTOP          reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    DIVOP           reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    MODOP           reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    PLUSOP          reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    MINUSOP         reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    LSHIFT          reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    RSHIFT          reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    LTCOMP          reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    GTCOMP          reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    LTECOMP         reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    GTECOMP         reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    EQCOMP          reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    NEQCOMP         reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    BANDOP          reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    XOROP           reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    OROP            reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    ANDOP           reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    QUESMARK        reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    RPAREN          reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    COMMA           reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    RSPAREN         reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    SEMICOLON       reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    RCPAREN         reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    COLON           reduce using rule 98 (new_declarator -> MULTOP new_declarator .)
    RTEMPLATE       reduce using rule 98 (new_declarator -> MULTOP new_declarator .)

  ! LSPAREN         [ shift and go to state 500 ]


state 502

    (101) new_declarator -> LSPAREN expression . RSPAREN
    (65) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 527
    COMMA           shift and go to state 337


state 503

    (245) initializer_list -> LCPAREN initializer_list RCPAREN .

    RCPAREN         reduce using rule 245 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 245 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    RPAREN          reduce using rule 245 (initializer_list -> LCPAREN initializer_list RCPAREN .)


state 504

    (246) initializer_list -> LCPAREN initializer_list COMMA . RCPAREN
    (244) initializer_list -> initializer_list COMMA . assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 528
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    assignment_expression          shift and go to state 506
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 505

    (241) initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .

    SEMICOLON       reduce using rule 241 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 241 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)


state 506

    (244) initializer_list -> initializer_list COMMA assignment_expression .

    RCPAREN         reduce using rule 244 (initializer_list -> initializer_list COMMA assignment_expression .)
    COMMA           reduce using rule 244 (initializer_list -> initializer_list COMMA assignment_expression .)
    RPAREN          reduce using rule 244 (initializer_list -> initializer_list COMMA assignment_expression .)


state 507

    (213) labeled_statement -> CASE constant_expression COLON statement .

    RCPAREN         reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    LCPAREN         reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    TRY             reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    THROW           reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    ASM             reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    TEMPLATE        reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    DPLUSOP         reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    DMINUSOP        reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUSOP          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUSOP         reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    NOTSYM          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    BNOP            reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    MULTOP          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    BANDOP          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    NEW             reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    DELETE          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    EXTERN          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    VIRTUAL         reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    VOLATILE        reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    THIS            reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    ENUM            reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPE            reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    OPERATOR        reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    NUMBER          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_L        reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    SCHAR           reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    CLASS           reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    UNION           reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 213 (labeled_statement -> CASE constant_expression COLON statement .)


state 508

    (202) selection_statement -> IF LPAREN expression RPAREN . statement
    (203) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (189) statement -> . labeled_statement
    (190) statement -> . expression_statement
    (191) statement -> . compound_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) statement -> . declaration_statement
    (196) statement -> . try_block
    (212) labeled_statement -> . IDENTIFIER COLON statement
    (213) labeled_statement -> . CASE constant_expression COLON statement
    (214) labeled_statement -> . DEFAULT COLON statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN
    (202) selection_statement -> . IF LPAREN expression RPAREN statement
    (203) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (204) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (215) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (216) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (217) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (197) jump_statement -> . BREAK SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . RETURN expression SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (225) declaration_statement -> . declaration
    (205) try_block -> . TRY compound_statement handler_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 201
    CASE            shift and go to state 202
    DEFAULT         shift and go to state 203
    SEMICOLON       shift and go to state 205
    LCPAREN         shift and go to state 79
    IF              shift and go to state 206
    SWITCH          shift and go to state 208
    WHILE           shift and go to state 209
    DO              shift and go to state 210
    FOR             shift and go to state 211
    BREAK           shift and go to state 212
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 214
    GOTO            shift and go to state 215
    TRY             shift and go to state 217
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    expression                     shift and go to state 204
    statement                      shift and go to state 529
    labeled_statement              shift and go to state 193
    expression_statement           shift and go to state 194
    compound_statement             shift and go to state 195
    selection_statement            shift and go to state 196
    iteration_statement            shift and go to state 197
    jump_statement                 shift and go to state 198
    declaration_statement          shift and go to state 199
    try_block                      shift and go to state 200
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 509

    (204) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (189) statement -> . labeled_statement
    (190) statement -> . expression_statement
    (191) statement -> . compound_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) statement -> . declaration_statement
    (196) statement -> . try_block
    (212) labeled_statement -> . IDENTIFIER COLON statement
    (213) labeled_statement -> . CASE constant_expression COLON statement
    (214) labeled_statement -> . DEFAULT COLON statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN
    (202) selection_statement -> . IF LPAREN expression RPAREN statement
    (203) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (204) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (215) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (216) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (217) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (197) jump_statement -> . BREAK SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . RETURN expression SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (225) declaration_statement -> . declaration
    (205) try_block -> . TRY compound_statement handler_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 201
    CASE            shift and go to state 202
    DEFAULT         shift and go to state 203
    SEMICOLON       shift and go to state 205
    LCPAREN         shift and go to state 79
    IF              shift and go to state 206
    SWITCH          shift and go to state 208
    WHILE           shift and go to state 209
    DO              shift and go to state 210
    FOR             shift and go to state 211
    BREAK           shift and go to state 212
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 214
    GOTO            shift and go to state 215
    TRY             shift and go to state 217
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    expression                     shift and go to state 204
    statement                      shift and go to state 530
    labeled_statement              shift and go to state 193
    expression_statement           shift and go to state 194
    compound_statement             shift and go to state 195
    selection_statement            shift and go to state 196
    iteration_statement            shift and go to state 197
    jump_statement                 shift and go to state 198
    declaration_statement          shift and go to state 199
    try_block                      shift and go to state 200
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 510

    (215) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (189) statement -> . labeled_statement
    (190) statement -> . expression_statement
    (191) statement -> . compound_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) statement -> . declaration_statement
    (196) statement -> . try_block
    (212) labeled_statement -> . IDENTIFIER COLON statement
    (213) labeled_statement -> . CASE constant_expression COLON statement
    (214) labeled_statement -> . DEFAULT COLON statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN
    (202) selection_statement -> . IF LPAREN expression RPAREN statement
    (203) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (204) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (215) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (216) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (217) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (197) jump_statement -> . BREAK SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . RETURN expression SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (225) declaration_statement -> . declaration
    (205) try_block -> . TRY compound_statement handler_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 201
    CASE            shift and go to state 202
    DEFAULT         shift and go to state 203
    SEMICOLON       shift and go to state 205
    LCPAREN         shift and go to state 79
    IF              shift and go to state 206
    SWITCH          shift and go to state 208
    WHILE           shift and go to state 209
    DO              shift and go to state 210
    FOR             shift and go to state 211
    BREAK           shift and go to state 212
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 214
    GOTO            shift and go to state 215
    TRY             shift and go to state 217
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    expression                     shift and go to state 204
    statement                      shift and go to state 531
    labeled_statement              shift and go to state 193
    expression_statement           shift and go to state 194
    compound_statement             shift and go to state 195
    selection_statement            shift and go to state 196
    iteration_statement            shift and go to state 197
    jump_statement                 shift and go to state 198
    declaration_statement          shift and go to state 199
    try_block                      shift and go to state 200
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 511

    (216) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 532
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 512

    (217) iteration_statement -> FOR LPAREN for_init_statement expression . SEMICOLON expression RPAREN statement
    (219) iteration_statement -> FOR LPAREN for_init_statement expression . SEMICOLON RPAREN statement
    (65) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 533
    COMMA           shift and go to state 337


state 513

    (218) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . expression RPAREN statement
    (220) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . RPAREN statement
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 535
    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 534
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 514

    (206) handler_list -> handler handler_list .

    RCPAREN         reduce using rule 206 (handler_list -> handler handler_list .)
    IDENTIFIER      reduce using rule 206 (handler_list -> handler handler_list .)
    CASE            reduce using rule 206 (handler_list -> handler handler_list .)
    DEFAULT         reduce using rule 206 (handler_list -> handler handler_list .)
    SEMICOLON       reduce using rule 206 (handler_list -> handler handler_list .)
    LCPAREN         reduce using rule 206 (handler_list -> handler handler_list .)
    IF              reduce using rule 206 (handler_list -> handler handler_list .)
    SWITCH          reduce using rule 206 (handler_list -> handler handler_list .)
    WHILE           reduce using rule 206 (handler_list -> handler handler_list .)
    DO              reduce using rule 206 (handler_list -> handler handler_list .)
    FOR             reduce using rule 206 (handler_list -> handler handler_list .)
    BREAK           reduce using rule 206 (handler_list -> handler handler_list .)
    CONTINUE        reduce using rule 206 (handler_list -> handler handler_list .)
    RETURN          reduce using rule 206 (handler_list -> handler handler_list .)
    GOTO            reduce using rule 206 (handler_list -> handler handler_list .)
    TRY             reduce using rule 206 (handler_list -> handler handler_list .)
    THROW           reduce using rule 206 (handler_list -> handler handler_list .)
    ASM             reduce using rule 206 (handler_list -> handler handler_list .)
    TEMPLATE        reduce using rule 206 (handler_list -> handler handler_list .)
    DPLUSOP         reduce using rule 206 (handler_list -> handler handler_list .)
    DMINUSOP        reduce using rule 206 (handler_list -> handler handler_list .)
    SIZEOF          reduce using rule 206 (handler_list -> handler handler_list .)
    TYPEDEF         reduce using rule 206 (handler_list -> handler handler_list .)
    LPAREN          reduce using rule 206 (handler_list -> handler handler_list .)
    PLUSOP          reduce using rule 206 (handler_list -> handler handler_list .)
    MINUSOP         reduce using rule 206 (handler_list -> handler handler_list .)
    NOTSYM          reduce using rule 206 (handler_list -> handler handler_list .)
    BNOP            reduce using rule 206 (handler_list -> handler handler_list .)
    MULTOP          reduce using rule 206 (handler_list -> handler handler_list .)
    BANDOP          reduce using rule 206 (handler_list -> handler handler_list .)
    NEW             reduce using rule 206 (handler_list -> handler handler_list .)
    DELETE          reduce using rule 206 (handler_list -> handler handler_list .)
    AUTO            reduce using rule 206 (handler_list -> handler handler_list .)
    STATIC          reduce using rule 206 (handler_list -> handler handler_list .)
    EXTERN          reduce using rule 206 (handler_list -> handler handler_list .)
    VIRTUAL         reduce using rule 206 (handler_list -> handler handler_list .)
    CONST           reduce using rule 206 (handler_list -> handler handler_list .)
    VOLATILE        reduce using rule 206 (handler_list -> handler handler_list .)
    THIS            reduce using rule 206 (handler_list -> handler handler_list .)
    CHAR            reduce using rule 206 (handler_list -> handler handler_list .)
    SHORT           reduce using rule 206 (handler_list -> handler handler_list .)
    INT             reduce using rule 206 (handler_list -> handler handler_list .)
    LONG            reduce using rule 206 (handler_list -> handler handler_list .)
    SIGNED          reduce using rule 206 (handler_list -> handler handler_list .)
    UNSIGNED        reduce using rule 206 (handler_list -> handler handler_list .)
    FLOAT           reduce using rule 206 (handler_list -> handler handler_list .)
    DOUBLE          reduce using rule 206 (handler_list -> handler handler_list .)
    VOID            reduce using rule 206 (handler_list -> handler handler_list .)
    STRING          reduce using rule 206 (handler_list -> handler handler_list .)
    ENUM            reduce using rule 206 (handler_list -> handler handler_list .)
    TYPE            reduce using rule 206 (handler_list -> handler handler_list .)
    OPERATOR        reduce using rule 206 (handler_list -> handler handler_list .)
    NUMBER          reduce using rule 206 (handler_list -> handler handler_list .)
    STRING_L        reduce using rule 206 (handler_list -> handler handler_list .)
    SCHAR           reduce using rule 206 (handler_list -> handler handler_list .)
    CLASS           reduce using rule 206 (handler_list -> handler handler_list .)
    STRUCT          reduce using rule 206 (handler_list -> handler handler_list .)
    UNION           reduce using rule 206 (handler_list -> handler handler_list .)
    ELSE            reduce using rule 206 (handler_list -> handler handler_list .)


state 515

    (208) handler -> CATCH LPAREN . exception_declaration RPAREN compound_statement
    (209) exception_declaration -> . type_specifier_list declarator
    (210) exception_declaration -> . type_specifier_list abstract_declarator
    (211) exception_declaration -> . type_specifier_list
    (267) type_specifier_list -> . type_specifier type_specifier_list
    (268) type_specifier_list -> . type_specifier
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE

    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57
    TEMPLATE        shift and go to state 68

    exception_declaration          shift and go to state 536
    type_specifier_list            shift and go to state 537
    type_specifier                 shift and go to state 263
    simple_type_name               shift and go to state 29
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52

state 516

    (18) template_arg_list -> template_arg_list COMMA template_arg .

    RTEMPLATE       reduce using rule 18 (template_arg_list -> template_arg_list COMMA template_arg .)
    COMMA           reduce using rule 18 (template_arg_list -> template_arg_list COMMA template_arg .)


state 517

    (319) base_specifier -> access_specifier class_key IDENTIFIER template_class_name .

    COMMA           reduce using rule 319 (base_specifier -> access_specifier class_key IDENTIFIER template_class_name .)
    LCPAREN         reduce using rule 319 (base_specifier -> access_specifier class_key IDENTIFIER template_class_name .)


state 518

    (135) abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .

    EQUAL           reduce using rule 135 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    LPAREN          reduce using rule 135 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    LSPAREN         reduce using rule 135 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    COMMA           reduce using rule 135 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    RPAREN          reduce using rule 135 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    RTEMPLATE       reduce using rule 135 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)


state 519

    (137) abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .

    EQUAL           reduce using rule 137 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    LPAREN          reduce using rule 137 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 137 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 137 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 137 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    RTEMPLATE       reduce using rule 137 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)


state 520

    (31) conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .

    RPAREN          reduce using rule 31 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COMMA           reduce using rule 31 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RSPAREN         reduce using rule 31 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    SEMICOLON       reduce using rule 31 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RCPAREN         reduce using rule 31 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COLON           reduce using rule 31 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RTEMPLATE       reduce using rule 31 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)


state 521

    (114) postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DOT             reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTEMPLATE       reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    OROP            reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    COLON           reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RTEMPLATE       reduce using rule 114 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)


state 522

    (92) allocation_expression -> NEW placement LPAREN type_name RPAREN . new_initializer
    (94) allocation_expression -> NEW placement LPAREN type_name RPAREN .
    (103) new_initializer -> . LPAREN initializer_list RPAREN
    (104) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MODOP           reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    XOROP           reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    OROP            reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    COMMA           reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    COLON           reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RTEMPLATE       reduce using rule 94 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 418

    new_initializer                shift and go to state 538

state 523

    (103) new_initializer -> LPAREN initializer_list RPAREN .

    EQUAL           reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTEQOP        reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVEQOP         reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODEQOP         reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSEQOP        reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSEQOP       reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFTEQOP      reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFTEQOP      reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDEQOP        reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    BOREQOP         reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    DOTSTAR         reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    ARROWSTAR       reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTOP          reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVOP           reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODOP           reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSOP          reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSOP         reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFT          reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFT          reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTCOMP          reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTCOMP          reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTECOMP         reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTECOMP         reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    EQCOMP          reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    NEQCOMP         reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDOP          reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    XOROP           reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    OROP            reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    ANDOP           reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    QUESMARK        reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    RPAREN          reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    COMMA           reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSPAREN         reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    SEMICOLON       reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    RCPAREN         reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    COLON           reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)
    RTEMPLATE       reduce using rule 103 (new_initializer -> LPAREN initializer_list RPAREN .)


state 524

    (244) initializer_list -> initializer_list COMMA . assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    assignment_expression          shift and go to state 506
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 525

    (93) allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .

    EQUAL           reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DOTSTAR         reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RTEMPLATE       reduce using rule 93 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)


state 526

    (100) new_declarator -> new_declarator LSPAREN expression . RSPAREN
    (65) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 539
    COMMA           shift and go to state 337


state 527

    (101) new_declarator -> LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    OROP            reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    COLON           reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 101 (new_declarator -> LSPAREN expression RSPAREN .)


state 528

    (246) initializer_list -> LCPAREN initializer_list COMMA RCPAREN .

    RCPAREN         reduce using rule 246 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 246 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    RPAREN          reduce using rule 246 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)


state 529

    (202) selection_statement -> IF LPAREN expression RPAREN statement .
    (203) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RCPAREN         reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TRY             reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THROW           reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASM             reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NEW             reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VIRTUAL         reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THIS            reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNION           reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 540

  ! ELSE            [ reduce using rule 202 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 530

    (204) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RCPAREN         reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TRY             reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THROW           reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ASM             reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NEW             reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VIRTUAL         reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THIS            reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNION           reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 204 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 531

    (215) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RCPAREN         reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TRY             reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THROW           reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASM             reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NEW             reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VIRTUAL         reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THIS            reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPE            reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_L        reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNION           reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 215 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 532

    (216) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (65) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 541
    COMMA           shift and go to state 337


state 533

    (217) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON . expression RPAREN statement
    (219) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON . RPAREN statement
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (269) operator_function_name -> . OPERATOR operator_name
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 543
    THROW           shift and go to state 220
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    THIS            shift and go to state 170
    LPAREN          shift and go to state 138
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    IDENTIFIER      shift and go to state 35
    OPERATOR        shift and go to state 54

    expression                     shift and go to state 542
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 154
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 187
    name                           shift and go to state 161
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    exclusive_OR_expression        shift and go to state 171
    operator_function_name         shift and go to state 36
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 534

    (218) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression . RPAREN statement
    (65) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 544
    COMMA           shift and go to state 337


state 535

    (220) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN . statement
    (189) statement -> . labeled_statement
    (190) statement -> . expression_statement
    (191) statement -> . compound_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) statement -> . declaration_statement
    (196) statement -> . try_block
    (212) labeled_statement -> . IDENTIFIER COLON statement
    (213) labeled_statement -> . CASE constant_expression COLON statement
    (214) labeled_statement -> . DEFAULT COLON statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN
    (202) selection_statement -> . IF LPAREN expression RPAREN statement
    (203) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (204) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (215) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (216) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (217) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (197) jump_statement -> . BREAK SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . RETURN expression SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (225) declaration_statement -> . declaration
    (205) try_block -> . TRY compound_statement handler_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 201
    CASE            shift and go to state 202
    DEFAULT         shift and go to state 203
    SEMICOLON       shift and go to state 205
    LCPAREN         shift and go to state 79
    IF              shift and go to state 206
    SWITCH          shift and go to state 208
    WHILE           shift and go to state 209
    DO              shift and go to state 210
    FOR             shift and go to state 211
    BREAK           shift and go to state 212
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 214
    GOTO            shift and go to state 215
    TRY             shift and go to state 217
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    statement                      shift and go to state 545
    labeled_statement              shift and go to state 193
    expression_statement           shift and go to state 194
    compound_statement             shift and go to state 195
    selection_statement            shift and go to state 196
    iteration_statement            shift and go to state 197
    jump_statement                 shift and go to state 198
    declaration_statement          shift and go to state 199
    try_block                      shift and go to state 200
    expression                     shift and go to state 204
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 536

    (208) handler -> CATCH LPAREN exception_declaration . RPAREN compound_statement

    RPAREN          shift and go to state 546


state 537

    (209) exception_declaration -> type_specifier_list . declarator
    (210) exception_declaration -> type_specifier_list . abstract_declarator
    (211) exception_declaration -> type_specifier_list .
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (133) abstract_declarator -> . unary2_operator abstract_declarator
    (134) abstract_declarator -> . unary2_operator
    (135) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (136) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (137) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (138) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (139) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (140) abstract_declarator -> . LSPAREN RSPAREN
    (141) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (269) operator_function_name -> . OPERATOR operator_name

    RPAREN          reduce using rule 211 (exception_declaration -> type_specifier_list .)
    LPAREN          shift and go to state 284
    LSPAREN         shift and go to state 285
    IDENTIFIER      shift and go to state 35
    BNOP            shift and go to state 37
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    OPERATOR        shift and go to state 54

    declarator                     shift and go to state 547
    abstract_declarator            shift and go to state 548
    name                           shift and go to state 23
    unary2_operator                shift and go to state 283
    operator_function_name         shift and go to state 36

state 538

    (92) allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .

    EQUAL           reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    DOTSTAR         reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RTEMPLATE       reduce using rule 92 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)


state 539

    (100) new_declarator -> new_declarator LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    OROP            reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COLON           reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RTEMPLATE       reduce using rule 100 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)


state 540

    (203) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (189) statement -> . labeled_statement
    (190) statement -> . expression_statement
    (191) statement -> . compound_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) statement -> . declaration_statement
    (196) statement -> . try_block
    (212) labeled_statement -> . IDENTIFIER COLON statement
    (213) labeled_statement -> . CASE constant_expression COLON statement
    (214) labeled_statement -> . DEFAULT COLON statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN
    (202) selection_statement -> . IF LPAREN expression RPAREN statement
    (203) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (204) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (215) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (216) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (217) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (197) jump_statement -> . BREAK SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . RETURN expression SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (225) declaration_statement -> . declaration
    (205) try_block -> . TRY compound_statement handler_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 201
    CASE            shift and go to state 202
    DEFAULT         shift and go to state 203
    SEMICOLON       shift and go to state 205
    LCPAREN         shift and go to state 79
    IF              shift and go to state 206
    SWITCH          shift and go to state 208
    WHILE           shift and go to state 209
    DO              shift and go to state 210
    FOR             shift and go to state 211
    BREAK           shift and go to state 212
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 214
    GOTO            shift and go to state 215
    TRY             shift and go to state 217
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    expression                     shift and go to state 204
    statement                      shift and go to state 549
    labeled_statement              shift and go to state 193
    expression_statement           shift and go to state 194
    compound_statement             shift and go to state 195
    selection_statement            shift and go to state 196
    iteration_statement            shift and go to state 197
    jump_statement                 shift and go to state 198
    declaration_statement          shift and go to state 199
    try_block                      shift and go to state 200
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 541

    (216) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 550


state 542

    (217) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression . RPAREN statement
    (65) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 551
    COMMA           shift and go to state 337


state 543

    (219) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN . statement
    (189) statement -> . labeled_statement
    (190) statement -> . expression_statement
    (191) statement -> . compound_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) statement -> . declaration_statement
    (196) statement -> . try_block
    (212) labeled_statement -> . IDENTIFIER COLON statement
    (213) labeled_statement -> . CASE constant_expression COLON statement
    (214) labeled_statement -> . DEFAULT COLON statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN
    (202) selection_statement -> . IF LPAREN expression RPAREN statement
    (203) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (204) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (215) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (216) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (217) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (197) jump_statement -> . BREAK SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . RETURN expression SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (225) declaration_statement -> . declaration
    (205) try_block -> . TRY compound_statement handler_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 201
    CASE            shift and go to state 202
    DEFAULT         shift and go to state 203
    SEMICOLON       shift and go to state 205
    LCPAREN         shift and go to state 79
    IF              shift and go to state 206
    SWITCH          shift and go to state 208
    WHILE           shift and go to state 209
    DO              shift and go to state 210
    FOR             shift and go to state 211
    BREAK           shift and go to state 212
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 214
    GOTO            shift and go to state 215
    TRY             shift and go to state 217
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    expression                     shift and go to state 204
    statement                      shift and go to state 552
    labeled_statement              shift and go to state 193
    expression_statement           shift and go to state 194
    compound_statement             shift and go to state 195
    selection_statement            shift and go to state 196
    iteration_statement            shift and go to state 197
    jump_statement                 shift and go to state 198
    declaration_statement          shift and go to state 199
    try_block                      shift and go to state 200
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 544

    (218) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN . statement
    (189) statement -> . labeled_statement
    (190) statement -> . expression_statement
    (191) statement -> . compound_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) statement -> . declaration_statement
    (196) statement -> . try_block
    (212) labeled_statement -> . IDENTIFIER COLON statement
    (213) labeled_statement -> . CASE constant_expression COLON statement
    (214) labeled_statement -> . DEFAULT COLON statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN
    (202) selection_statement -> . IF LPAREN expression RPAREN statement
    (203) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (204) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (215) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (216) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (217) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (197) jump_statement -> . BREAK SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . RETURN expression SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (225) declaration_statement -> . declaration
    (205) try_block -> . TRY compound_statement handler_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 201
    CASE            shift and go to state 202
    DEFAULT         shift and go to state 203
    SEMICOLON       shift and go to state 205
    LCPAREN         shift and go to state 79
    IF              shift and go to state 206
    SWITCH          shift and go to state 208
    WHILE           shift and go to state 209
    DO              shift and go to state 210
    FOR             shift and go to state 211
    BREAK           shift and go to state 212
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 214
    GOTO            shift and go to state 215
    TRY             shift and go to state 217
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    expression                     shift and go to state 204
    statement                      shift and go to state 553
    labeled_statement              shift and go to state 193
    expression_statement           shift and go to state 194
    compound_statement             shift and go to state 195
    selection_statement            shift and go to state 196
    iteration_statement            shift and go to state 197
    jump_statement                 shift and go to state 198
    declaration_statement          shift and go to state 199
    try_block                      shift and go to state 200
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 545

    (220) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .

    RCPAREN         reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IDENTIFIER      reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CASE            reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LCPAREN         reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IF              reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DO              reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FOR             reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    GOTO            reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TRY             reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    THROW           reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ASM             reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TEMPLATE        reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DPLUSOP         reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DMINUSOP        reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TYPEDEF         reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    PLUSOP          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MINUSOP         reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NOTSYM          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BNOP            reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MULTOP          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BANDOP          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NEW             reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STATIC          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    EXTERN          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VIRTUAL         reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONST           reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VOLATILE        reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    THIS            reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SHORT           reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    INT             reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LONG            reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIGNED          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    UNSIGNED        reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VOID            reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRING          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ENUM            reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TYPE            reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    OPERATOR        reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NUMBER          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRING_L        reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SCHAR           reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    UNION           reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 220 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)


state 546

    (208) handler -> CATCH LPAREN exception_declaration RPAREN . compound_statement
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 79

    compound_statement             shift and go to state 554

state 547

    (209) exception_declaration -> type_specifier_list declarator .
    (260) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (261) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (262) declarator -> declarator . LSPAREN RSPAREN

    RPAREN          reduce using rule 209 (exception_declaration -> type_specifier_list declarator .)
    LPAREN          shift and go to state 136
    LSPAREN         shift and go to state 76


state 548

    (210) exception_declaration -> type_specifier_list abstract_declarator .
    (135) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (137) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (139) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RPAREN          reduce using rule 210 (exception_declaration -> type_specifier_list abstract_declarator .)
    LPAREN          shift and go to state 396
    LSPAREN         shift and go to state 397


state 549

    (203) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RCPAREN         reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LCPAREN         reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRY             reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THROW           reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASM             reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TEMPLATE        reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DPLUSOP         reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DMINUSOP        reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSOP          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSOP         reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOTSYM          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BNOP            reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MULTOP          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BANDOP          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NEW             reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DELETE          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXTERN          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VIRTUAL         reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOLATILE        reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THIS            reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPE            reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    OPERATOR        reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_L        reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SCHAR           reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNION           reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 203 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 550

    (216) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    RCPAREN         reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    GOTO            reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TRY             reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    THROW           reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ASM             reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BNOP            reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MULTOP          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BANDOP          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NEW             reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DELETE          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    AUTO            reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STATIC          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    EXTERN          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VIRTUAL         reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONST           reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    THIS            reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SHORT           reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LONG            reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIGNED          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOID            reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ENUM            reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPE            reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    OPERATOR        reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING_L        reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SCHAR           reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CLASS           reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRUCT          reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    UNION           reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 216 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 551

    (217) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN . statement
    (189) statement -> . labeled_statement
    (190) statement -> . expression_statement
    (191) statement -> . compound_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) statement -> . declaration_statement
    (196) statement -> . try_block
    (212) labeled_statement -> . IDENTIFIER COLON statement
    (213) labeled_statement -> . CASE constant_expression COLON statement
    (214) labeled_statement -> . DEFAULT COLON statement
    (223) expression_statement -> . expression SEMICOLON
    (224) expression_statement -> . SEMICOLON
    (185) compound_statement -> . LCPAREN statement_list RCPAREN
    (186) compound_statement -> . LCPAREN RCPAREN
    (202) selection_statement -> . IF LPAREN expression RPAREN statement
    (203) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (204) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (215) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (216) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (217) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (218) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (219) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (220) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (197) jump_statement -> . BREAK SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . RETURN expression SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (225) declaration_statement -> . declaration
    (205) try_block -> . TRY compound_statement handler_list
    (63) expression -> . assignment_expression
    (64) expression -> . throw_expression
    (65) expression -> . expression COMMA assignment_expression
    (226) declaration -> . decl_specifiers declarator_list SEMICOLON
    (227) declaration -> . decl_specifiers SEMICOLON
    (228) declaration -> . declarator_list SEMICOLON
    (229) declaration -> . asm_declaration
    (230) declaration -> . function_definition
    (231) declaration -> . template_declaration
    (66) assignment_expression -> . conditional_expression
    (67) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (9) throw_expression -> . THROW expression
    (10) throw_expression -> . THROW
    (152) decl_specifiers -> . decl_specifiers decl_specifier
    (153) decl_specifiers -> . decl_specifier
    (235) declarator_list -> . init_declarator
    (236) declarator_list -> . declarator_list COMMA init_declarator
    (247) asm_declaration -> . ASM LPAREN STRING_L RPAREN SEMICOLON
    (182) function_definition -> . decl_specifiers declarator fct_body
    (183) function_definition -> . declarator fct_body
    (232) template_declaration -> . TEMPLATE LTEMPLATE template_argument_list RTEMPLATE declaration
    (30) conditional_expression -> . logical_OR_expression
    (31) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (78) unary_expression -> . postfix_expression
    (79) unary_expression -> . DPLUSOP unary_expression
    (80) unary_expression -> . DMINUSOP unary_expression
    (81) unary_expression -> . unary1_operator cast_expression
    (82) unary_expression -> . unary2_operator cast_expression
    (83) unary_expression -> . SIZEOF unary_expression
    (84) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (85) unary_expression -> . allocation_expression
    (86) unary_expression -> . deallocation_expression
    (154) decl_specifier -> . storage_class_specifier
    (155) decl_specifier -> . type_specifier
    (156) decl_specifier -> . TYPEDEF
    (237) init_declarator -> . declarator initializer
    (238) init_declarator -> . declarator
    (258) declarator -> . name
    (259) declarator -> . unary2_operator declarator
    (260) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (261) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (262) declarator -> . declarator LSPAREN RSPAREN
    (263) declarator -> . LPAREN declarator RPAREN
    (32) logical_OR_expression -> . logical_AND_expression
    (33) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (111) postfix_expression -> . primary_expression
    (112) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (113) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (114) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (115) postfix_expression -> . postfix_expression LPAREN RPAREN
    (116) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (117) postfix_expression -> . simple_type_name LPAREN RPAREN
    (118) postfix_expression -> . postfix_expression DOT name
    (119) postfix_expression -> . postfix_expression ARROW name
    (120) postfix_expression -> . postfix_expression DPLUSOP
    (121) postfix_expression -> . postfix_expression DMINUSOP
    (105) unary1_operator -> . PLUSOP
    (106) unary1_operator -> . MINUSOP
    (107) unary1_operator -> . NOTSYM
    (108) unary1_operator -> . BNOP
    (109) unary2_operator -> . MULTOP
    (110) unary2_operator -> . BANDOP
    (88) allocation_expression -> . NEW placement new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . NEW placement new_type_name
    (91) allocation_expression -> . NEW new_type_name
    (92) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (93) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (94) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (95) allocation_expression -> . NEW LPAREN type_name RPAREN
    (87) deallocation_expression -> . DELETE cast_expression
    (157) storage_class_specifier -> . AUTO
    (158) storage_class_specifier -> . STATIC
    (159) storage_class_specifier -> . EXTERN
    (160) storage_class_specifier -> . VIRTUAL
    (161) type_specifier -> . simple_type_name
    (162) type_specifier -> . class_specifier
    (163) type_specifier -> . enum_specifier
    (164) type_specifier -> . elaborated_type_specifier
    (165) type_specifier -> . CONST
    (166) type_specifier -> . VOLATILE
    (264) name -> . IDENTIFIER
    (265) name -> . operator_function_name
    (266) name -> . BNOP IDENTIFIER
    (34) logical_AND_expression -> . inclusive_OR_expression
    (35) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (122) primary_expression -> . literal
    (123) primary_expression -> . THIS
    (124) primary_expression -> . LPAREN expression RPAREN
    (125) primary_expression -> . name
    (337) simple_type_name -> . CHAR
    (338) simple_type_name -> . SHORT
    (339) simple_type_name -> . INT
    (340) simple_type_name -> . LONG
    (341) simple_type_name -> . SIGNED
    (342) simple_type_name -> . UNSIGNED
    (343) simple_type_name -> . FLOAT
    (344) simple_type_name -> . DOUBLE
    (345) simple_type_name -> . VOID
    (346) simple_type_name -> . STRING
    (167) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (168) class_specifier -> . class_head LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (22) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (23) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (24) enum_specifier -> . ENUM LCPAREN RCPAREN
    (327) elaborated_type_specifier -> . class_key IDENTIFIER
    (328) elaborated_type_specifier -> . class_key IDENTIFIER template_class_name
    (329) elaborated_type_specifier -> . ENUM enum_name
    (330) elaborated_type_specifier -> . TYPE IDENTIFIER
    (331) elaborated_type_specifier -> . TYPE IDENTIFIER template_class_name
    (269) operator_function_name -> . OPERATOR operator_name
    (36) inclusive_OR_expression -> . exclusive_OR_expression
    (37) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (126) literal -> . NUMBER
    (127) literal -> . STRING_L
    (128) literal -> . SCHAR
    (309) class_head -> . class_key base_spec
    (310) class_head -> . class_key
    (311) class_head -> . class_key IDENTIFIER base_spec
    (312) class_head -> . class_key IDENTIFIER
    (333) class_key -> . CLASS
    (334) class_key -> . STRUCT
    (335) class_key -> . UNION
    (336) class_key -> . TEMPLATE
    (38) exclusive_OR_expression -> . AND_expression
    (39) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (40) AND_expression -> . equality_expression
    (41) AND_expression -> . AND_expression BANDOP equality_expression
    (42) equality_expression -> . relational_expression
    (43) equality_expression -> . equality_expression EQCOMP relational_expression
    (44) equality_expression -> . equality_expression NEQCOMP relational_expression
    (45) relational_expression -> . shift_expression
    (46) relational_expression -> . relational_expression LTCOMP shift_expression
    (47) relational_expression -> . relational_expression GTCOMP shift_expression
    (48) relational_expression -> . relational_expression LTECOMP shift_expression
    (49) relational_expression -> . relational_expression GTECOMP shift_expression
    (50) shift_expression -> . additive_expression
    (51) shift_expression -> . shift_expression LSHIFT additive_expression
    (52) shift_expression -> . shift_expression RSHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (55) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (56) multiplicative_expression -> . pm_expression
    (57) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (58) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (59) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (60) pm_expression -> . cast_expression
    (61) pm_expression -> . pm_expression DOTSTAR cast_expression
    (62) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (129) cast_expression -> . unary_expression
    (130) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 201
    CASE            shift and go to state 202
    DEFAULT         shift and go to state 203
    SEMICOLON       shift and go to state 205
    LCPAREN         shift and go to state 79
    IF              shift and go to state 206
    SWITCH          shift and go to state 208
    WHILE           shift and go to state 209
    DO              shift and go to state 210
    FOR             shift and go to state 211
    BREAK           shift and go to state 212
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 214
    GOTO            shift and go to state 215
    TRY             shift and go to state 217
    THROW           shift and go to state 220
    ASM             shift and go to state 16
    TEMPLATE        shift and go to state 19
    DPLUSOP         shift and go to state 150
    DMINUSOP        shift and go to state 151
    SIZEOF          shift and go to state 155
    TYPEDEF         shift and go to state 22
    LPAREN          shift and go to state 207
    PLUSOP          shift and go to state 162
    MINUSOP         shift and go to state 163
    NOTSYM          shift and go to state 164
    BNOP            shift and go to state 165
    MULTOP          shift and go to state 38
    BANDOP          shift and go to state 39
    NEW             shift and go to state 166
    DELETE          shift and go to state 167
    AUTO            shift and go to state 25
    STATIC          shift and go to state 26
    EXTERN          shift and go to state 27
    VIRTUAL         shift and go to state 28
    CONST           shift and go to state 33
    VOLATILE        shift and go to state 34
    THIS            shift and go to state 170
    CHAR            shift and go to state 40
    SHORT           shift and go to state 41
    INT             shift and go to state 42
    LONG            shift and go to state 43
    SIGNED          shift and go to state 44
    UNSIGNED        shift and go to state 45
    FLOAT           shift and go to state 46
    DOUBLE          shift and go to state 47
    VOID            shift and go to state 48
    STRING          shift and go to state 49
    ENUM            shift and go to state 51
    TYPE            shift and go to state 53
    OPERATOR        shift and go to state 54
    NUMBER          shift and go to state 172
    STRING_L        shift and go to state 173
    SCHAR           shift and go to state 174
    CLASS           shift and go to state 55
    STRUCT          shift and go to state 56
    UNION           shift and go to state 57

    expression                     shift and go to state 204
    statement                      shift and go to state 555
    labeled_statement              shift and go to state 193
    expression_statement           shift and go to state 194
    compound_statement             shift and go to state 195
    selection_statement            shift and go to state 196
    iteration_statement            shift and go to state 197
    jump_statement                 shift and go to state 198
    declaration_statement          shift and go to state 199
    try_block                      shift and go to state 200
    declaration                    shift and go to state 216
    assignment_expression          shift and go to state 218
    throw_expression               shift and go to state 219
    decl_specifiers                shift and go to state 9
    declarator_list                shift and go to state 10
    asm_declaration                shift and go to state 11
    function_definition            shift and go to state 12
    template_declaration           shift and go to state 13
    conditional_expression         shift and go to state 145
    unary_expression               shift and go to state 146
    decl_specifier                 shift and go to state 14
    init_declarator                shift and go to state 15
    declarator                     shift and go to state 18
    logical_OR_expression          shift and go to state 148
    postfix_expression             shift and go to state 149
    unary1_operator                shift and go to state 152
    cast_expression                shift and go to state 153
    unary2_operator                shift and go to state 221
    allocation_expression          shift and go to state 156
    deallocation_expression        shift and go to state 157
    storage_class_specifier        shift and go to state 20
    type_specifier                 shift and go to state 21
    name                           shift and go to state 222
    logical_AND_expression         shift and go to state 158
    primary_expression             shift and go to state 159
    simple_type_name               shift and go to state 160
    class_specifier                shift and go to state 30
    enum_specifier                 shift and go to state 31
    elaborated_type_specifier      shift and go to state 32
    operator_function_name         shift and go to state 36
    inclusive_OR_expression        shift and go to state 168
    literal                        shift and go to state 169
    class_head                     shift and go to state 50
    class_key                      shift and go to state 52
    exclusive_OR_expression        shift and go to state 171
    AND_expression                 shift and go to state 175
    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 178
    additive_expression            shift and go to state 179
    multiplicative_expression      shift and go to state 180
    pm_expression                  shift and go to state 181

state 552

    (219) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .

    RCPAREN         reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    IDENTIFIER      reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CASE            reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LCPAREN         reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    IF              reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DO              reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    FOR             reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    GOTO            reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TRY             reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    THROW           reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ASM             reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TEMPLATE        reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DPLUSOP         reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DMINUSOP        reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TYPEDEF         reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    PLUSOP          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    MINUSOP         reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NOTSYM          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BNOP            reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    MULTOP          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BANDOP          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NEW             reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STATIC          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    EXTERN          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    VIRTUAL         reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CONST           reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    VOLATILE        reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    THIS            reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SHORT           reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    INT             reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LONG            reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SIGNED          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    UNSIGNED        reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    VOID            reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRING          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ENUM            reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TYPE            reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    OPERATOR        reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NUMBER          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRING_L        reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SCHAR           reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    UNION           reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 219 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)


state 553

    (218) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .

    RCPAREN         reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    IDENTIFIER      reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CASE            reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DEFAULT         reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LCPAREN         reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SWITCH          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DO              reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    GOTO            reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TRY             reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    THROW           reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ASM             reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TEMPLATE        reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DPLUSOP         reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DMINUSOP        reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SIZEOF          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TYPEDEF         reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    PLUSOP          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MINUSOP         reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NOTSYM          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BNOP            reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MULTOP          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BANDOP          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NEW             reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DELETE          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    AUTO            reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STATIC          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    EXTERN          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VIRTUAL         reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CONST           reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VOLATILE        reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    THIS            reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CHAR            reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SHORT           reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LONG            reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SIGNED          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    UNSIGNED        reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRING          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ENUM            reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TYPE            reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    OPERATOR        reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRING_L        reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SCHAR           reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CLASS           reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRUCT          reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    UNION           reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 218 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)


state 554

    (208) handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .

    CATCH           reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    RCPAREN         reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    IDENTIFIER      reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CASE            reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DEFAULT         reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SEMICOLON       reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    LCPAREN         reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    IF              reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SWITCH          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    WHILE           reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DO              reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    FOR             reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    BREAK           reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CONTINUE        reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    RETURN          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    GOTO            reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    TRY             reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    THROW           reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    ASM             reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    TEMPLATE        reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DPLUSOP         reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DMINUSOP        reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SIZEOF          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    TYPEDEF         reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    LPAREN          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    PLUSOP          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    MINUSOP         reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    NOTSYM          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    BNOP            reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    MULTOP          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    BANDOP          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    NEW             reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DELETE          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    AUTO            reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    STATIC          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    EXTERN          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    VIRTUAL         reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CONST           reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    VOLATILE        reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    THIS            reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CHAR            reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SHORT           reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    INT             reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    LONG            reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SIGNED          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    UNSIGNED        reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    FLOAT           reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DOUBLE          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    VOID            reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    STRING          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    ENUM            reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    TYPE            reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    OPERATOR        reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    NUMBER          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    STRING_L        reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SCHAR           reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CLASS           reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    STRUCT          reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    UNION           reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    ELSE            reduce using rule 208 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)


state 555

    (217) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .

    RCPAREN         reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    IDENTIFIER      reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CASE            reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DEFAULT         reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LCPAREN         reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SWITCH          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DO              reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    GOTO            reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TRY             reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    THROW           reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ASM             reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TEMPLATE        reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DPLUSOP         reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DMINUSOP        reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SIZEOF          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TYPEDEF         reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    PLUSOP          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    MINUSOP         reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NOTSYM          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BNOP            reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    MULTOP          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BANDOP          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NEW             reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DELETE          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    AUTO            reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STATIC          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    EXTERN          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    VIRTUAL         reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CONST           reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    VOLATILE        reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    THIS            reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CHAR            reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SHORT           reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LONG            reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SIGNED          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    UNSIGNED        reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRING          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ENUM            reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TYPE            reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    OPERATOR        reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRING_L        reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SCHAR           reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CLASS           reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRUCT          reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    UNION           reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 217 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 81 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 81 resolved as shift
WARNING: shift/reduce conflict for COLON in state 87 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 160 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 165 resolved as shift
WARNING: shift/reduce conflict for OROP in state 168 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 235 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 264 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 283 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 283 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 307 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 340 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 351 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 376 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 387 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 387 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 394 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 398 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 398 resolved as shift
WARNING: shift/reduce conflict for OROP in state 412 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 480 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 481 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 529 resolved as shift
WARNING: reduce/reduce conflict in state 222 resolved using rule (primary_expression -> name)
WARNING: rejected rule (declarator -> name) in state 222
