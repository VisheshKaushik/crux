Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    AND_EQ
    BITAND
    BITOR
    BOOL
    BOROP
    CHAR16_T
    CHAR32_T
    CHAR8_T
    COMMENT
    COMPL
    CONDTIONAL
    DQUOTE
    FALSE
    HASHTAG
    LEFTQOP
    LEFTSHIFT
    MODQOP
    NAMESPACE
    NOT
    NOT_EQ
    NULLPTR
    OR
    OR_EQ
    RIGHTLIFT
    RIGHTQOP
    SQUOTE
    STD
    TRUE
    UMINUSOP
    UPLUSOP
    USING
    XOR
    XOREQOR
    XOR_EQ

Grammar

Rule 0     S' -> program
Rule 1     exception_specification -> THROW LPAREN type_list RPAREN
Rule 2     exception_specification -> THROW LPAREN RPAREN
Rule 3     program -> translation_unit
Rule 4     translation_unit -> declaration_seq
Rule 5     throw_expression -> THROW expression
Rule 6     throw_expression -> THROW
Rule 7     type_list -> type_name
Rule 8     type_list -> type_list COMMA type_name
Rule 9     declaration_seq -> declaration_seq declaration
Rule 10    declaration_seq -> declaration
Rule 11    empty -> <empty>
Rule 12    template_class_name -> LTCOMP template_arg_list GTCOMP
Rule 13    template_name -> IDENTIFIER
Rule 14    template_arg_list -> template_arg
Rule 15    template_arg_list -> template_arg_list COMMA template_arg
Rule 16    template_arg -> expression
Rule 17    template_arg -> type_name
Rule 18    enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN
Rule 19    enum_specifier -> ENUM LCPAREN enum_list RCPAREN
Rule 20    enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN
Rule 21    enum_specifier -> ENUM LCPAREN RCPAREN
Rule 22    enum_list -> enumerator
Rule 23    enum_list -> enum_list COMMA enumerator
Rule 24    enumerator -> IDENTIFIER
Rule 25    enumerator -> IDENTIFIER EQUAL constant_expression
Rule 26    constant_expression -> conditional_expression
Rule 27    conditional_expression -> logical_OR_expression
Rule 28    conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression
Rule 29    logical_OR_expression -> logical_AND_expression
Rule 30    logical_OR_expression -> logical_OR_expression OROP logical_AND_expression
Rule 31    logical_AND_expression -> inclusive_OR_expression
Rule 32    logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression
Rule 33    inclusive_OR_expression -> exclusive_OR_expression
Rule 34    inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression
Rule 35    exclusive_OR_expression -> AND_expression
Rule 36    exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression
Rule 37    AND_expression -> equality_expression
Rule 38    AND_expression -> AND_expression BANDOP equality_expression
Rule 39    equality_expression -> relational_expression
Rule 40    equality_expression -> equality_expression EQCOMP relational_expression
Rule 41    equality_expression -> equality_expression NEQCOMP relational_expression
Rule 42    relational_expression -> shift_expression
Rule 43    relational_expression -> relational_expression LTCOMP shift_expression
Rule 44    relational_expression -> relational_expression GTCOMP shift_expression
Rule 45    relational_expression -> relational_expression LTECOMP shift_expression
Rule 46    relational_expression -> relational_expression GTECOMP shift_expression
Rule 47    shift_expression -> additive_expression
Rule 48    shift_expression -> shift_expression LSHIFT additive_expression
Rule 49    shift_expression -> shift_expression RSHIFT additive_expression
Rule 50    additive_expression -> multiplicative_expression
Rule 51    additive_expression -> additive_expression PLUSOP multiplicative_expression
Rule 52    additive_expression -> additive_expression MINUSOP multiplicative_expression
Rule 53    multiplicative_expression -> pm_expression
Rule 54    multiplicative_expression -> multiplicative_expression MULTOP pm_expression
Rule 55    multiplicative_expression -> multiplicative_expression DIVOP pm_expression
Rule 56    multiplicative_expression -> multiplicative_expression MODOP pm_expression
Rule 57    pm_expression -> cast_expression
Rule 58    pm_expression -> pm_expression DOTSTAR cast_expression
Rule 59    pm_expression -> pm_expression ARROWSTAR cast_expression
Rule 60    expression -> assignment_expression
Rule 61    expression -> expression COMMA assignment_expression
Rule 62    assignment_expression -> conditional_expression
Rule 63    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 64    assignment_operator -> EQUAL
Rule 65    assignment_operator -> MULTEQOP
Rule 66    assignment_operator -> DIVEQOP
Rule 67    assignment_operator -> MODEQOP
Rule 68    assignment_operator -> PLUSEQOP
Rule 69    assignment_operator -> MINUSEQOP
Rule 70    assignment_operator -> LSHIFTEQOP
Rule 71    assignment_operator -> RSHIFTEQOP
Rule 72    assignment_operator -> BANDEQOP
Rule 73    assignment_operator -> BOREQOP
Rule 74    unary_expression -> postfix_expression
Rule 75    unary_expression -> DPLUSOP unary_expression
Rule 76    unary_expression -> DMINUSOP unary_expression
Rule 77    unary_expression -> unary_operator cast_expression
Rule 78    unary_expression -> SIZEOF unary_expression
Rule 79    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 80    unary_expression -> allocation_expression
Rule 81    unary_expression -> deallocation_expression
Rule 82    deallocation_expression -> DOUBLECOLON DELETE cast_expression
Rule 83    deallocation_expression -> DELETE cast_expression
Rule 84    deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
Rule 85    deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression
Rule 86    allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer
Rule 87    allocation_expression -> NEW placement new_type_name new_initializer
Rule 88    allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer
Rule 89    allocation_expression -> NEW new_type_name new_initializer
Rule 90    allocation_expression -> DOUBLECOLON NEW placement new_type_name
Rule 91    allocation_expression -> NEW placement new_type_name
Rule 92    allocation_expression -> DOUBLECOLON NEW new_type_name
Rule 93    allocation_expression -> NEW new_type_name
Rule 94    allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
Rule 95    allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer
Rule 96    allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
Rule 97    allocation_expression -> NEW LPAREN type_name RPAREN new_initializer
Rule 98    allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN
Rule 99    allocation_expression -> NEW placement LPAREN type_name RPAREN
Rule 100   allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN
Rule 101   allocation_expression -> NEW LPAREN type_name RPAREN
Rule 102   new_type_name -> type_specifier_list new_declarator
Rule 103   new_type_name -> type_specifier_list
Rule 104   new_declarator -> MULTOP cv_qualifier_list new_declarator
Rule 105   new_declarator -> MULTOP new_declarator
Rule 106   new_declarator -> MULTOP cv_qualifier_list
Rule 107   new_declarator -> MULTOP
Rule 108   new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator
Rule 109   new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator
Rule 110   new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
Rule 111   new_declarator -> complete_class_name DOUBLECOLON MULTOP
Rule 112   new_declarator -> new_declarator LSPAREN expression RSPAREN
Rule 113   new_declarator -> LSPAREN expression RSPAREN
Rule 114   placement -> LPAREN expression_list RPAREN
Rule 115   new_initializer -> LPAREN initializer_list RPAREN
Rule 116   new_initializer -> LPAREN RPAREN
Rule 117   unary_operator -> MULTOP
Rule 118   unary_operator -> BANDOP
Rule 119   unary_operator -> PLUSOP
Rule 120   unary_operator -> MINUSOP
Rule 121   unary_operator -> NOTSYM
Rule 122   unary_operator -> BNOP
Rule 123   postfix_expression -> primary_expression
Rule 124   postfix_expression -> postfix_expression LSPAREN expression RSPAREN
Rule 125   postfix_expression -> postfix_expression LPAREN expression_list RPAREN
Rule 126   postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN
Rule 127   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 128   postfix_expression -> simple_type_name LPAREN expression_list RPAREN
Rule 129   postfix_expression -> simple_type_name LPAREN RPAREN
Rule 130   postfix_expression -> postfix_expression DOT name
Rule 131   postfix_expression -> postfix_expression ARROW name
Rule 132   postfix_expression -> postfix_expression DPLUSOP
Rule 133   postfix_expression -> postfix_expression DMINUSOP
Rule 134   primary_expression -> literal
Rule 135   primary_expression -> THIS
Rule 136   primary_expression -> DOUBLECOLON IDENTIFIER
Rule 137   primary_expression -> DOUBLECOLON operator_function_name
Rule 138   primary_expression -> DOUBLECOLON qualified_name
Rule 139   primary_expression -> LPAREN expression RPAREN
Rule 140   primary_expression -> name
Rule 141   literal -> NUMBER
Rule 142   literal -> STRING
Rule 143   literal -> SCHAR
Rule 144   cast_expression -> unary_expression
Rule 145   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 146   type_name -> type_specifier_list abstract_declarator
Rule 147   type_name -> type_specifier_list
Rule 148   abstract_declarator -> ptr_operator abstract_declarator
Rule 149   abstract_declarator -> ptr_operator
Rule 150   abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
Rule 151   abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list
Rule 152   abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN
Rule 153   abstract_declarator -> LPAREN argument_declaration_list RPAREN
Rule 154   abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN
Rule 155   abstract_declarator -> LSPAREN constant_expression RSPAREN
Rule 156   abstract_declarator -> abstract_declarator LSPAREN RSPAREN
Rule 157   abstract_declarator -> LSPAREN RSPAREN
Rule 158   abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 159   argument_declaration_list -> arg_declaration_list
Rule 160   argument_declaration_list -> <empty>
Rule 161   arg_declaration_list -> argument_declaration
Rule 162   arg_declaration_list -> arg_declaration_list COMMA argument_declaration
Rule 163   argument_declaration -> decl_specifiers declarator
Rule 164   argument_declaration -> decl_specifiers declarator EQUAL expression
Rule 165   argument_declaration -> decl_specifiers abstract_declarator
Rule 166   argument_declaration -> decl_specifiers
Rule 167   argument_declaration -> decl_specifiers abstract_declarator EQUAL expression
Rule 168   argument_declaration -> decl_specifiers EQUAL expression
Rule 169   decl_specifiers -> decl_specifiers decl_specifier
Rule 170   decl_specifiers -> decl_specifier
Rule 171   decl_specifier -> storage_class_specifier
Rule 172   decl_specifier -> type_specifier
Rule 173   decl_specifier -> fct_specifier
Rule 174   decl_specifier -> TYPEDEF
Rule 175   storage_class_specifier -> AUTO
Rule 176   storage_class_specifier -> STATIC
Rule 177   storage_class_specifier -> EXTERN
Rule 178   fct_specifier -> INLINE
Rule 179   fct_specifier -> VIRTUAL
Rule 180   type_specifier -> simple_type_name
Rule 181   type_specifier -> class_specifier
Rule 182   type_specifier -> enum_specifier
Rule 183   type_specifier -> elaborated_type_specifier
Rule 184   type_specifier -> CONST
Rule 185   type_specifier -> VOLATILE
Rule 186   class_specifier -> class_head LCPAREN member_list RCPAREN
Rule 187   class_specifier -> class_head LCPAREN RCPAREN
Rule 188   member_list -> member_declaration member_list
Rule 189   member_list -> member_declaration
Rule 190   member_list -> access_specifier COLON member_list
Rule 191   member_list -> access_specifier COLON
Rule 192   member_declaration -> decl_specifiers member_declarator_list SEMICOLON
Rule 193   member_declaration -> member_declarator_list SEMICOLON
Rule 194   member_declaration -> decl_specifiers SEMICOLON
Rule 195   member_declaration -> SEMICOLON
Rule 196   member_declaration -> function_definition SEMICOLON
Rule 197   member_declaration -> function_definition
Rule 198   member_declaration -> qualified_name SEMICOLON
Rule 199   function_definition -> decl_specifiers declarator ctor_initializer fct_body
Rule 200   function_definition -> declarator ctor_initializer fct_body
Rule 201   function_definition -> decl_specifiers declarator fct_body
Rule 202   function_definition -> declarator fct_body
Rule 203   fct_body -> compound_statement
Rule 204   compound_statement -> LCPAREN statement_list RCPAREN
Rule 205   compound_statement -> LCPAREN RCPAREN
Rule 206   statement_list -> statement
Rule 207   statement_list -> statement_list statement
Rule 208   statement -> labeled_statement
Rule 209   statement -> expression_statement
Rule 210   statement -> compound_statement
Rule 211   statement -> selection_statement
Rule 212   statement -> iteration_statement
Rule 213   statement -> jump_statement
Rule 214   statement -> declaration_statement
Rule 215   statement -> try_block
Rule 216   jump_statement -> BREAK SEMICOLON
Rule 217   jump_statement -> CONTINUE SEMICOLON
Rule 218   jump_statement -> RETURN expression SEMICOLON
Rule 219   jump_statement -> RETURN SEMICOLON
Rule 220   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 221   selection_statement -> IF LPAREN expression RPAREN statement
Rule 222   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 223   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 224   try_block -> TRY compound_statement handler_list
Rule 225   handler_list -> handler handler_list
Rule 226   handler_list -> handler
Rule 227   handler -> CATCH LPAREN exception_declaration RPAREN compound_statement
Rule 228   exception_declaration -> type_specifier_list declarator
Rule 229   exception_declaration -> type_specifier_list abstract_declarator
Rule 230   exception_declaration -> type_specifier_list
Rule 231   labeled_statement -> IDENTIFIER COLON statement
Rule 232   labeled_statement -> CASE constant_expression COLON statement
Rule 233   labeled_statement -> DEFAULT COLON statement
Rule 234   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 235   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 236   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
Rule 237   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
Rule 238   iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
Rule 239   iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement
Rule 240   for_init_statement -> expression_statement
Rule 241   for_init_statement -> declaration_statement
Rule 242   expression_statement -> expression SEMICOLON
Rule 243   expression_statement -> SEMICOLON
Rule 244   declaration_statement -> declaration
Rule 245   declaration -> decl_specifiers declarator_list SEMICOLON
Rule 246   declaration -> decl_specifiers SEMICOLON
Rule 247   declaration -> declarator_list SEMICOLON
Rule 248   declaration -> asm_declaration
Rule 249   declaration -> function_definition
Rule 250   declaration -> template_declaration
Rule 251   declaration -> linkage_specification
Rule 252   template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration
Rule 253   template_argument_list -> template_argument
Rule 254   template_argument_list -> template_argument_list COMMA template_argument
Rule 255   template_argument -> type_argument
Rule 256   template_argument -> argument_declaration
Rule 257   type_argument -> CLASS IDENTIFIER
Rule 258   declarator_list -> init_declarator
Rule 259   declarator_list -> declarator_list COMMA init_declarator
Rule 260   init_declarator -> declarator initializer
Rule 261   init_declarator -> declarator
Rule 262   initializer -> EQUAL assignment_expression
Rule 263   initializer -> EQUAL LCPAREN initializer_list RCPAREN
Rule 264   initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN
Rule 265   initializer -> LPAREN expression_list RPAREN
Rule 266   initializer_list -> assignment_expression
Rule 267   initializer_list -> initializer_list COMMA assignment_expression
Rule 268   initializer_list -> LCPAREN initializer_list RCPAREN
Rule 269   initializer_list -> LCPAREN initializer_list COMMA RCPAREN
Rule 270   asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON
Rule 271   linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN
Rule 272   linkage_specification -> EXTERN STRING LCPAREN RCPAREN
Rule 273   linkage_specification -> EXTERN STRING declaration
Rule 274   declaration_list -> declaration
Rule 275   declaration_list -> declaration_list declaration
Rule 276   ctor_initializer -> COLON mem_initializer_list
Rule 277   mem_initializer_list -> mem_initializer
Rule 278   mem_initializer_list -> mem_initializer COMMA mem_initializer_list
Rule 279   mem_initializer -> complete_class_name LPAREN expression_list RPAREN
Rule 280   mem_initializer -> complete_class_name LPAREN RPAREN
Rule 281   mem_initializer -> IDENTIFIER LPAREN expression_list RPAREN
Rule 282   mem_initializer -> IDENTIFIER LPAREN RPAREN
Rule 283   expression_list -> assignment_expression
Rule 284   expression_list -> expression_list COMMA assignment_expression
Rule 285   member_declarator_list -> member_declarator
Rule 286   member_declarator_list -> member_declarator_list COMMA member_declarator
Rule 287   member_declarator -> declarator pure_specifier
Rule 288   member_declarator -> declarator
Rule 289   member_declarator -> IDENTIFIER COLON constant_expression
Rule 290   member_declarator -> COLON constant_expression
Rule 291   declarator -> dname
Rule 292   declarator -> ptr_operator declarator
Rule 293   declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
Rule 294   declarator -> declarator LPAREN argument_declaration_list RPAREN
Rule 295   declarator -> declarator LSPAREN constant_expression RSPAREN
Rule 296   declarator -> declarator LSPAREN RSPAREN
Rule 297   declarator -> LPAREN declarator RPAREN
Rule 298   dname -> name
Rule 299   dname -> class_name
Rule 300   dname -> BNOP class_name
Rule 301   dname -> typedef_name
Rule 302   dname -> qualified_type_name
Rule 303   name -> IDENTIFIER
Rule 304   name -> operator_function_name
Rule 305   name -> conversion_function_name
Rule 306   name -> BNOP class_name
Rule 307   name -> qualified_name
Rule 308   qualified_name -> qualified_class_name DOUBLECOLON name
Rule 309   conversion_function_name -> OPERATOR conversion_type_name
Rule 310   conversion_type_name -> type_specifier_list ptr_operator
Rule 311   conversion_type_name -> type_specifier_list
Rule 312   type_specifier_list -> type_specifier type_specifier_list
Rule 313   type_specifier_list -> type_specifier
Rule 314   operator_function_name -> OPERATOR operator_name
Rule 315   operator_name -> NEW
Rule 316   operator_name -> DELETE
Rule 317   operator_name -> PLUSOP
Rule 318   operator_name -> MINUSOP
Rule 319   operator_name -> MULTOP
Rule 320   operator_name -> DIVOP
Rule 321   operator_name -> MODOP
Rule 322   operator_name -> XOROP
Rule 323   operator_name -> BANDOP
Rule 324   operator_name -> BNOP
Rule 325   operator_name -> NOTSYM
Rule 326   operator_name -> EQUAL
Rule 327   operator_name -> LTCOMP
Rule 328   operator_name -> GTCOMP
Rule 329   operator_name -> PLUSEQOP
Rule 330   operator_name -> MINUSEQOP
Rule 331   operator_name -> MULTEQOP
Rule 332   operator_name -> DIVEQOP
Rule 333   operator_name -> MODEQOP
Rule 334   operator_name -> XOREQOP
Rule 335   operator_name -> BANDEQOP
Rule 336   operator_name -> LSHIFT
Rule 337   operator_name -> RSHIFT
Rule 338   operator_name -> RSHIFTEQOP
Rule 339   operator_name -> LSHIFTEQOP
Rule 340   operator_name -> EQCOMP
Rule 341   operator_name -> NEQCOMP
Rule 342   operator_name -> LTECOMP
Rule 343   operator_name -> GTECOMP
Rule 344   operator_name -> ANDOP
Rule 345   operator_name -> OROP
Rule 346   operator_name -> DPLUSOP
Rule 347   operator_name -> DMINUSOP
Rule 348   operator_name -> COMMA
Rule 349   operator_name -> ARROWSTAR
Rule 350   operator_name -> ARROW
Rule 351   operator_name -> LPAREN RPAREN
Rule 352   operator_name -> LSPAREN RSPAREN
Rule 353   pure_specifier -> EQUAL NUMBER
Rule 354   class_head -> class_key IDENTIFIER base_spec
Rule 355   class_head -> class_key base_spec
Rule 356   class_head -> class_key IDENTIFIER
Rule 357   class_head -> class_key
Rule 358   class_head -> class_key class_name base_spec
Rule 359   class_head -> class_key class_name
Rule 360   base_spec -> COLON base_list
Rule 361   base_list -> base_specifier
Rule 362   base_list -> base_list COMMA base_specifier
Rule 363   base_specifier -> complete_class_name
Rule 364   base_specifier -> VIRTUAL access_specifier complete_class_name
Rule 365   base_specifier -> VIRTUAL complete_class_name
Rule 366   base_specifier -> access_specifier VIRTUAL complete_class_name
Rule 367   base_specifier -> access_specifier complete_class_name
Rule 368   access_specifier -> PRIVATE
Rule 369   access_specifier -> PROTECTED
Rule 370   access_specifier -> PUBLIC
Rule 371   elaborated_type_specifier -> class_key IDENTIFIER
Rule 372   elaborated_type_specifier -> class_key class_name
Rule 373   elaborated_type_specifier -> ENUM enum_name
Rule 374   enum_name -> IDENTIFIER
Rule 375   class_key -> CLASS
Rule 376   class_key -> STRUCT
Rule 377   class_key -> UNION
Rule 378   class_key -> TEMPLATE
Rule 379   simple_type_name -> complete_class_name
Rule 380   simple_type_name -> qualified_type_name
Rule 381   simple_type_name -> CHAR
Rule 382   simple_type_name -> SHORT
Rule 383   simple_type_name -> INT
Rule 384   simple_type_name -> LONG
Rule 385   simple_type_name -> SIGNED
Rule 386   simple_type_name -> UNSIGNED
Rule 387   simple_type_name -> FLOAT
Rule 388   simple_type_name -> DOUBLE
Rule 389   simple_type_name -> VOID
Rule 390   qualified_type_name -> typedef_name
Rule 391   qualified_type_name -> class_name DOUBLECOLON qualified_type_name
Rule 392   typedef_name -> IDENTIFIER
Rule 393   ptr_operator -> MULTOP cv_qualifier_list
Rule 394   ptr_operator -> MULTOP
Rule 395   ptr_operator -> BANDOP cv_qualifier_list
Rule 396   ptr_operator -> BANDOP
Rule 397   ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
Rule 398   ptr_operator -> complete_class_name DOUBLECOLON MULTOP
Rule 399   cv_qualifier_list -> cv_qualifier cv_qualifier_list
Rule 400   cv_qualifier_list -> cv_qualifier
Rule 401   cv_qualifier -> CONST
Rule 402   cv_qualifier -> VOLATILE
Rule 403   complete_class_name -> qualified_class_name
Rule 404   complete_class_name -> DOUBLECOLON qualified_class_name
Rule 405   qualified_class_name -> class_name
Rule 406   qualified_class_name -> class_name DOUBLECOLON qualified_class_name
Rule 407   class_name -> IDENTIFIER

Terminals, with rules where they appear

AND                  : 
ANDOP                : 32 344
AND_EQ               : 
ARROW                : 131 350
ARROWSTAR            : 59 349
ASM                  : 270
AUTO                 : 175
BANDEQOP             : 72 335
BANDOP               : 38 118 323 395 396
BITAND               : 
BITOR                : 
BNOP                 : 122 300 306 324
BOOL                 : 
BOREQOP              : 73
BOROP                : 
BREAK                : 216
CASE                 : 232
CATCH                : 227
CHAR                 : 381
CHAR16_T             : 
CHAR32_T             : 
CHAR8_T              : 
CLASS                : 257 375
COLON                : 28 190 191 231 232 233 276 289 290 360
COMMA                : 8 15 23 61 162 254 259 264 267 269 278 284 286 348 362
COMMENT              : 
COMPL                : 
CONDTIONAL           : 
CONST                : 184 401
CONTINUE             : 217
DEFAULT              : 233
DELETE               : 82 83 84 85 316
DIVEQOP              : 66 332
DIVOP                : 55 320
DMINUSOP             : 76 133 347
DO                   : 235
DOT                  : 130
DOTSTAR              : 58
DOUBLE               : 388
DOUBLECOLON          : 82 84 86 88 90 92 94 96 98 100 108 109 110 111 136 137 138 308 391 397 398 404 406
DPLUSOP              : 75 132 346
DQUOTE               : 
ELSE                 : 222
ENUM                 : 18 19 20 21 373
EQCOMP               : 40 340
EQUAL                : 25 64 164 167 168 262 263 264 326 353
EXTERN               : 177 271 272 273
FALSE                : 
FLOAT                : 387
FOR                  : 236 237 238 239
GOTO                 : 220
GTCOMP               : 12 44 252 328
GTECOMP              : 46 343
HASHTAG              : 
IDENTIFIER           : 13 18 20 24 25 136 220 231 257 281 282 289 303 354 356 371 374 392 407
IF                   : 221 222
INLINE               : 178
INT                  : 383
LCPAREN              : 18 19 20 21 186 187 204 205 263 264 268 269 271 272
LEFTQOP              : 
LEFTSHIFT            : 
LONG                 : 384
LPAREN               : 1 2 79 94 95 96 97 98 99 100 101 114 115 116 125 126 127 128 129 139 145 150 151 152 153 158 221 222 223 227 234 235 236 237 238 239 265 270 279 280 281 282 293 294 297 351
LSHIFT               : 48 336
LSHIFTEQOP           : 70 339
LSPAREN              : 84 85 112 113 124 154 155 156 157 295 296 352
LTCOMP               : 12 43 252 327
LTECOMP              : 45 342
MINUSEQOP            : 69 330
MINUSOP              : 52 120 318
MODEQOP              : 67 333
MODOP                : 56 321
MODQOP               : 
MULTEQOP             : 65 331
MULTOP               : 54 104 105 106 107 108 109 110 111 117 319 393 394 397 398
NAMESPACE            : 
NEQCOMP              : 41 341
NEW                  : 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 315
NOT                  : 
NOTSYM               : 121 325
NOT_EQ               : 
NULLPTR              : 
NUMBER               : 141 353
OPERATOR             : 309 314
OR                   : 
OROP                 : 30 34 345
OR_EQ                : 
PLUSEQOP             : 68 329
PLUSOP               : 51 119 317
PRIVATE              : 368
PROTECTED            : 369
PUBLIC               : 370
QUESMARK             : 28
RCPAREN              : 18 19 20 21 186 187 204 205 263 264 268 269 271 272
RETURN               : 218 219
RIGHTLIFT            : 
RIGHTQOP             : 
RPAREN               : 1 2 79 94 95 96 97 98 99 100 101 114 115 116 125 126 127 128 129 139 145 150 151 152 153 158 221 222 223 227 234 235 236 237 238 239 265 270 279 280 281 282 293 294 297 351
RSHIFT               : 49 337
RSHIFTEQOP           : 71 338
RSPAREN              : 84 85 112 113 124 154 155 156 157 295 296 352
SCHAR                : 143
SEMICOLON            : 192 193 194 195 196 198 216 217 218 219 220 235 236 237 238 239 242 243 245 246 247 270
SHORT                : 382
SIGNED               : 385
SIZEOF               : 78 79
SQUOTE               : 
STATIC               : 176
STD                  : 
STRING               : 142 270 271 272 273
STRUCT               : 376
SWITCH               : 223
TEMPLATE             : 252 378
THIS                 : 135
THROW                : 1 2 5 6
TRUE                 : 
TRY                  : 224
TYPEDEF              : 174
UMINUSOP             : 
UNION                : 377
UNSIGNED             : 386
UPLUSOP              : 
USING                : 
VIRTUAL              : 179 364 365 366
VOID                 : 389
VOLATILE             : 185 402
WHILE                : 234 235
XOR                  : 
XOREQOP              : 334
XOREQOR              : 
XOROP                : 36 322
XOR_EQ               : 
error                : 

Nonterminals, with rules where they appear

AND_expression       : 35 36 38
abstract_declarator  : 146 148 150 152 154 156 158 165 167 229
access_specifier     : 190 191 364 366 367
additive_expression  : 47 48 49 51 52
allocation_expression : 80
arg_declaration_list : 159 162
argument_declaration : 161 162 256
argument_declaration_list : 150 151 152 153 293 294
asm_declaration      : 248
assignment_expression : 60 61 63 262 266 267 283 284
assignment_operator  : 63
base_list            : 360 362
base_spec            : 354 355 358
base_specifier       : 361 362
cast_expression      : 57 58 59 77 82 83 84 85 145
class_head           : 186 187
class_key            : 354 355 356 357 358 359 371 372
class_name           : 299 300 306 358 359 372 391 405 406
class_specifier      : 181
complete_class_name  : 108 109 110 111 279 280 363 364 365 366 367 379 397 398
compound_statement   : 203 210 224 227
conditional_expression : 26 28 62
constant_expression  : 25 154 155 232 289 290 295
conversion_function_name : 305
conversion_type_name : 309
ctor_initializer     : 199 200
cv_qualifier         : 399 400
cv_qualifier_list    : 104 106 108 110 150 151 293 393 395 397 399
deallocation_expression : 81
decl_specifier       : 169 170
decl_specifiers      : 163 164 165 166 167 168 169 192 194 199 201 245 246
declaration          : 9 10 244 252 273 274 275
declaration_list     : 271 275
declaration_seq      : 4 9
declaration_statement : 214 241
declarator           : 163 164 199 200 201 202 228 260 261 287 288 292 293 294 295 296 297
declarator_list      : 245 247 259
dname                : 291
elaborated_type_specifier : 183
empty                : 
enum_list            : 18 19 23
enum_name            : 373
enum_specifier       : 182
enumerator           : 22 23
equality_expression  : 37 38 40 41
exception_declaration : 227
exception_specification : 
exclusive_OR_expression : 33 34 36
expression           : 5 16 28 61 112 113 124 139 164 167 168 218 221 222 223 234 235 236 236 237 238 242
expression_list      : 114 125 126 128 265 279 281 284
expression_statement : 209 240
fct_body             : 199 200 201 202
fct_specifier        : 173
for_init_statement   : 236 237 238 239
function_definition  : 196 197 249
handler              : 225 226
handler_list         : 224 225
inclusive_OR_expression : 31 32 34
init_declarator      : 258 259
initializer          : 260
initializer_list     : 115 263 264 267 268 269
iteration_statement  : 212
jump_statement       : 213
labeled_statement    : 208
linkage_specification : 251
literal              : 134
logical_AND_expression : 29 30 32
logical_OR_expression : 27 28 30
mem_initializer      : 277 278
mem_initializer_list : 276 278
member_declaration   : 188 189
member_declarator    : 285 286
member_declarator_list : 192 193 286
member_list          : 186 188 190
multiplicative_expression : 50 51 52 54 55 56
name                 : 130 131 140 298 308
new_declarator       : 102 104 105 108 109 112
new_initializer      : 86 87 88 89 94 95 96 97
new_type_name        : 86 87 88 89 90 91 92 93
operator_function_name : 137 304
operator_name        : 314
placement            : 86 87 90 91 94 95 98 99
pm_expression        : 53 54 55 56 58 59
postfix_expression   : 74 124 125 126 127 130 131 132 133
primary_expression   : 123
program              : 0
ptr_operator         : 148 149 292 310
pure_specifier       : 287
qualified_class_name : 308 403 404 406
qualified_name       : 138 198 307
qualified_type_name  : 302 380 391
relational_expression : 39 40 41 43 44 45 46
selection_statement  : 211
shift_expression     : 42 43 44 45 46 48 49
simple_type_name     : 128 129 180
statement            : 206 207 221 222 222 223 231 232 233 234 235 236 237 238 239
statement_list       : 204 207
storage_class_specifier : 171
template_arg         : 14 15
template_arg_list    : 12 15
template_argument    : 253 254
template_argument_list : 252 254
template_class_name  : 126
template_declaration : 250
template_name        : 
throw_expression     : 
translation_unit     : 3
try_block            : 215
type_argument        : 255
type_list            : 1 8
type_name            : 7 8 17 79 94 95 96 97 98 99 100 101 145
type_specifier       : 172 312 313
type_specifier_list  : 102 103 146 147 228 229 230 310 311 312
typedef_name         : 301 390
unary_expression     : 63 75 76 78 144
unary_operator       : 77

Parsing method: LALR

state 0

    (0) S' -> . program
    (3) program -> . translation_unit
    (4) translation_unit -> . declaration_seq
    (9) declaration_seq -> . declaration_seq declaration
    (10) declaration_seq -> . declaration
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 14
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    program                        shift and go to state 1
    translation_unit               shift and go to state 2
    declaration_seq                shift and go to state 3
    declaration                    shift and go to state 4
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59

state 1

    (0) S' -> program .



state 2

    (3) program -> translation_unit .

    $end            reduce using rule 3 (program -> translation_unit .)


state 3

    (4) translation_unit -> declaration_seq .
    (9) declaration_seq -> declaration_seq . declaration
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    $end            reduce using rule 4 (translation_unit -> declaration_seq .)
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 14
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    declaration                    shift and go to state 64
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59

state 4

    (10) declaration_seq -> declaration .

    ASM             reduce using rule 10 (declaration_seq -> declaration .)
    TEMPLATE        reduce using rule 10 (declaration_seq -> declaration .)
    EXTERN          reduce using rule 10 (declaration_seq -> declaration .)
    TYPEDEF         reduce using rule 10 (declaration_seq -> declaration .)
    LPAREN          reduce using rule 10 (declaration_seq -> declaration .)
    AUTO            reduce using rule 10 (declaration_seq -> declaration .)
    STATIC          reduce using rule 10 (declaration_seq -> declaration .)
    CONST           reduce using rule 10 (declaration_seq -> declaration .)
    VOLATILE        reduce using rule 10 (declaration_seq -> declaration .)
    INLINE          reduce using rule 10 (declaration_seq -> declaration .)
    VIRTUAL         reduce using rule 10 (declaration_seq -> declaration .)
    BNOP            reduce using rule 10 (declaration_seq -> declaration .)
    MULTOP          reduce using rule 10 (declaration_seq -> declaration .)
    BANDOP          reduce using rule 10 (declaration_seq -> declaration .)
    CHAR            reduce using rule 10 (declaration_seq -> declaration .)
    SHORT           reduce using rule 10 (declaration_seq -> declaration .)
    INT             reduce using rule 10 (declaration_seq -> declaration .)
    LONG            reduce using rule 10 (declaration_seq -> declaration .)
    SIGNED          reduce using rule 10 (declaration_seq -> declaration .)
    UNSIGNED        reduce using rule 10 (declaration_seq -> declaration .)
    FLOAT           reduce using rule 10 (declaration_seq -> declaration .)
    DOUBLE          reduce using rule 10 (declaration_seq -> declaration .)
    VOID            reduce using rule 10 (declaration_seq -> declaration .)
    ENUM            reduce using rule 10 (declaration_seq -> declaration .)
    IDENTIFIER      reduce using rule 10 (declaration_seq -> declaration .)
    DOUBLECOLON     reduce using rule 10 (declaration_seq -> declaration .)
    CLASS           reduce using rule 10 (declaration_seq -> declaration .)
    STRUCT          reduce using rule 10 (declaration_seq -> declaration .)
    UNION           reduce using rule 10 (declaration_seq -> declaration .)
    OPERATOR        reduce using rule 10 (declaration_seq -> declaration .)
    $end            reduce using rule 10 (declaration_seq -> declaration .)


state 5

    (245) declaration -> decl_specifiers . declarator_list SEMICOLON
    (246) declaration -> decl_specifiers . SEMICOLON
    (169) decl_specifiers -> decl_specifiers . decl_specifier
    (199) function_definition -> decl_specifiers . declarator ctor_initializer fct_body
    (201) function_definition -> decl_specifiers . declarator fct_body
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    SEMICOLON       shift and go to state 66
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 14
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 69
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    OPERATOR        shift and go to state 63

    declarator_list                shift and go to state 65
    decl_specifier                 shift and go to state 67
    declarator                     shift and go to state 68
    init_declarator                shift and go to state 12
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59

state 6

    (247) declaration -> declarator_list . SEMICOLON
    (259) declarator_list -> declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 71
    COMMA           shift and go to state 72


state 7

    (248) declaration -> asm_declaration .

    ASM             reduce using rule 248 (declaration -> asm_declaration .)
    TEMPLATE        reduce using rule 248 (declaration -> asm_declaration .)
    EXTERN          reduce using rule 248 (declaration -> asm_declaration .)
    TYPEDEF         reduce using rule 248 (declaration -> asm_declaration .)
    LPAREN          reduce using rule 248 (declaration -> asm_declaration .)
    AUTO            reduce using rule 248 (declaration -> asm_declaration .)
    STATIC          reduce using rule 248 (declaration -> asm_declaration .)
    CONST           reduce using rule 248 (declaration -> asm_declaration .)
    VOLATILE        reduce using rule 248 (declaration -> asm_declaration .)
    INLINE          reduce using rule 248 (declaration -> asm_declaration .)
    VIRTUAL         reduce using rule 248 (declaration -> asm_declaration .)
    BNOP            reduce using rule 248 (declaration -> asm_declaration .)
    MULTOP          reduce using rule 248 (declaration -> asm_declaration .)
    BANDOP          reduce using rule 248 (declaration -> asm_declaration .)
    CHAR            reduce using rule 248 (declaration -> asm_declaration .)
    SHORT           reduce using rule 248 (declaration -> asm_declaration .)
    INT             reduce using rule 248 (declaration -> asm_declaration .)
    LONG            reduce using rule 248 (declaration -> asm_declaration .)
    SIGNED          reduce using rule 248 (declaration -> asm_declaration .)
    UNSIGNED        reduce using rule 248 (declaration -> asm_declaration .)
    FLOAT           reduce using rule 248 (declaration -> asm_declaration .)
    DOUBLE          reduce using rule 248 (declaration -> asm_declaration .)
    VOID            reduce using rule 248 (declaration -> asm_declaration .)
    ENUM            reduce using rule 248 (declaration -> asm_declaration .)
    IDENTIFIER      reduce using rule 248 (declaration -> asm_declaration .)
    DOUBLECOLON     reduce using rule 248 (declaration -> asm_declaration .)
    CLASS           reduce using rule 248 (declaration -> asm_declaration .)
    STRUCT          reduce using rule 248 (declaration -> asm_declaration .)
    UNION           reduce using rule 248 (declaration -> asm_declaration .)
    OPERATOR        reduce using rule 248 (declaration -> asm_declaration .)
    $end            reduce using rule 248 (declaration -> asm_declaration .)
    RCPAREN         reduce using rule 248 (declaration -> asm_declaration .)
    CASE            reduce using rule 248 (declaration -> asm_declaration .)
    DEFAULT         reduce using rule 248 (declaration -> asm_declaration .)
    SEMICOLON       reduce using rule 248 (declaration -> asm_declaration .)
    LCPAREN         reduce using rule 248 (declaration -> asm_declaration .)
    IF              reduce using rule 248 (declaration -> asm_declaration .)
    SWITCH          reduce using rule 248 (declaration -> asm_declaration .)
    WHILE           reduce using rule 248 (declaration -> asm_declaration .)
    DO              reduce using rule 248 (declaration -> asm_declaration .)
    FOR             reduce using rule 248 (declaration -> asm_declaration .)
    BREAK           reduce using rule 248 (declaration -> asm_declaration .)
    CONTINUE        reduce using rule 248 (declaration -> asm_declaration .)
    RETURN          reduce using rule 248 (declaration -> asm_declaration .)
    GOTO            reduce using rule 248 (declaration -> asm_declaration .)
    TRY             reduce using rule 248 (declaration -> asm_declaration .)
    DPLUSOP         reduce using rule 248 (declaration -> asm_declaration .)
    DMINUSOP        reduce using rule 248 (declaration -> asm_declaration .)
    SIZEOF          reduce using rule 248 (declaration -> asm_declaration .)
    PLUSOP          reduce using rule 248 (declaration -> asm_declaration .)
    MINUSOP         reduce using rule 248 (declaration -> asm_declaration .)
    NOTSYM          reduce using rule 248 (declaration -> asm_declaration .)
    NEW             reduce using rule 248 (declaration -> asm_declaration .)
    DELETE          reduce using rule 248 (declaration -> asm_declaration .)
    THIS            reduce using rule 248 (declaration -> asm_declaration .)
    NUMBER          reduce using rule 248 (declaration -> asm_declaration .)
    STRING          reduce using rule 248 (declaration -> asm_declaration .)
    SCHAR           reduce using rule 248 (declaration -> asm_declaration .)
    ELSE            reduce using rule 248 (declaration -> asm_declaration .)


state 8

    (249) declaration -> function_definition .

    ASM             reduce using rule 249 (declaration -> function_definition .)
    TEMPLATE        reduce using rule 249 (declaration -> function_definition .)
    EXTERN          reduce using rule 249 (declaration -> function_definition .)
    TYPEDEF         reduce using rule 249 (declaration -> function_definition .)
    LPAREN          reduce using rule 249 (declaration -> function_definition .)
    AUTO            reduce using rule 249 (declaration -> function_definition .)
    STATIC          reduce using rule 249 (declaration -> function_definition .)
    CONST           reduce using rule 249 (declaration -> function_definition .)
    VOLATILE        reduce using rule 249 (declaration -> function_definition .)
    INLINE          reduce using rule 249 (declaration -> function_definition .)
    VIRTUAL         reduce using rule 249 (declaration -> function_definition .)
    BNOP            reduce using rule 249 (declaration -> function_definition .)
    MULTOP          reduce using rule 249 (declaration -> function_definition .)
    BANDOP          reduce using rule 249 (declaration -> function_definition .)
    CHAR            reduce using rule 249 (declaration -> function_definition .)
    SHORT           reduce using rule 249 (declaration -> function_definition .)
    INT             reduce using rule 249 (declaration -> function_definition .)
    LONG            reduce using rule 249 (declaration -> function_definition .)
    SIGNED          reduce using rule 249 (declaration -> function_definition .)
    UNSIGNED        reduce using rule 249 (declaration -> function_definition .)
    FLOAT           reduce using rule 249 (declaration -> function_definition .)
    DOUBLE          reduce using rule 249 (declaration -> function_definition .)
    VOID            reduce using rule 249 (declaration -> function_definition .)
    ENUM            reduce using rule 249 (declaration -> function_definition .)
    IDENTIFIER      reduce using rule 249 (declaration -> function_definition .)
    DOUBLECOLON     reduce using rule 249 (declaration -> function_definition .)
    CLASS           reduce using rule 249 (declaration -> function_definition .)
    STRUCT          reduce using rule 249 (declaration -> function_definition .)
    UNION           reduce using rule 249 (declaration -> function_definition .)
    OPERATOR        reduce using rule 249 (declaration -> function_definition .)
    $end            reduce using rule 249 (declaration -> function_definition .)
    RCPAREN         reduce using rule 249 (declaration -> function_definition .)
    CASE            reduce using rule 249 (declaration -> function_definition .)
    DEFAULT         reduce using rule 249 (declaration -> function_definition .)
    SEMICOLON       reduce using rule 249 (declaration -> function_definition .)
    LCPAREN         reduce using rule 249 (declaration -> function_definition .)
    IF              reduce using rule 249 (declaration -> function_definition .)
    SWITCH          reduce using rule 249 (declaration -> function_definition .)
    WHILE           reduce using rule 249 (declaration -> function_definition .)
    DO              reduce using rule 249 (declaration -> function_definition .)
    FOR             reduce using rule 249 (declaration -> function_definition .)
    BREAK           reduce using rule 249 (declaration -> function_definition .)
    CONTINUE        reduce using rule 249 (declaration -> function_definition .)
    RETURN          reduce using rule 249 (declaration -> function_definition .)
    GOTO            reduce using rule 249 (declaration -> function_definition .)
    TRY             reduce using rule 249 (declaration -> function_definition .)
    DPLUSOP         reduce using rule 249 (declaration -> function_definition .)
    DMINUSOP        reduce using rule 249 (declaration -> function_definition .)
    SIZEOF          reduce using rule 249 (declaration -> function_definition .)
    PLUSOP          reduce using rule 249 (declaration -> function_definition .)
    MINUSOP         reduce using rule 249 (declaration -> function_definition .)
    NOTSYM          reduce using rule 249 (declaration -> function_definition .)
    NEW             reduce using rule 249 (declaration -> function_definition .)
    DELETE          reduce using rule 249 (declaration -> function_definition .)
    THIS            reduce using rule 249 (declaration -> function_definition .)
    NUMBER          reduce using rule 249 (declaration -> function_definition .)
    STRING          reduce using rule 249 (declaration -> function_definition .)
    SCHAR           reduce using rule 249 (declaration -> function_definition .)
    ELSE            reduce using rule 249 (declaration -> function_definition .)


state 9

    (250) declaration -> template_declaration .

    ASM             reduce using rule 250 (declaration -> template_declaration .)
    TEMPLATE        reduce using rule 250 (declaration -> template_declaration .)
    EXTERN          reduce using rule 250 (declaration -> template_declaration .)
    TYPEDEF         reduce using rule 250 (declaration -> template_declaration .)
    LPAREN          reduce using rule 250 (declaration -> template_declaration .)
    AUTO            reduce using rule 250 (declaration -> template_declaration .)
    STATIC          reduce using rule 250 (declaration -> template_declaration .)
    CONST           reduce using rule 250 (declaration -> template_declaration .)
    VOLATILE        reduce using rule 250 (declaration -> template_declaration .)
    INLINE          reduce using rule 250 (declaration -> template_declaration .)
    VIRTUAL         reduce using rule 250 (declaration -> template_declaration .)
    BNOP            reduce using rule 250 (declaration -> template_declaration .)
    MULTOP          reduce using rule 250 (declaration -> template_declaration .)
    BANDOP          reduce using rule 250 (declaration -> template_declaration .)
    CHAR            reduce using rule 250 (declaration -> template_declaration .)
    SHORT           reduce using rule 250 (declaration -> template_declaration .)
    INT             reduce using rule 250 (declaration -> template_declaration .)
    LONG            reduce using rule 250 (declaration -> template_declaration .)
    SIGNED          reduce using rule 250 (declaration -> template_declaration .)
    UNSIGNED        reduce using rule 250 (declaration -> template_declaration .)
    FLOAT           reduce using rule 250 (declaration -> template_declaration .)
    DOUBLE          reduce using rule 250 (declaration -> template_declaration .)
    VOID            reduce using rule 250 (declaration -> template_declaration .)
    ENUM            reduce using rule 250 (declaration -> template_declaration .)
    IDENTIFIER      reduce using rule 250 (declaration -> template_declaration .)
    DOUBLECOLON     reduce using rule 250 (declaration -> template_declaration .)
    CLASS           reduce using rule 250 (declaration -> template_declaration .)
    STRUCT          reduce using rule 250 (declaration -> template_declaration .)
    UNION           reduce using rule 250 (declaration -> template_declaration .)
    OPERATOR        reduce using rule 250 (declaration -> template_declaration .)
    $end            reduce using rule 250 (declaration -> template_declaration .)
    RCPAREN         reduce using rule 250 (declaration -> template_declaration .)
    CASE            reduce using rule 250 (declaration -> template_declaration .)
    DEFAULT         reduce using rule 250 (declaration -> template_declaration .)
    SEMICOLON       reduce using rule 250 (declaration -> template_declaration .)
    LCPAREN         reduce using rule 250 (declaration -> template_declaration .)
    IF              reduce using rule 250 (declaration -> template_declaration .)
    SWITCH          reduce using rule 250 (declaration -> template_declaration .)
    WHILE           reduce using rule 250 (declaration -> template_declaration .)
    DO              reduce using rule 250 (declaration -> template_declaration .)
    FOR             reduce using rule 250 (declaration -> template_declaration .)
    BREAK           reduce using rule 250 (declaration -> template_declaration .)
    CONTINUE        reduce using rule 250 (declaration -> template_declaration .)
    RETURN          reduce using rule 250 (declaration -> template_declaration .)
    GOTO            reduce using rule 250 (declaration -> template_declaration .)
    TRY             reduce using rule 250 (declaration -> template_declaration .)
    DPLUSOP         reduce using rule 250 (declaration -> template_declaration .)
    DMINUSOP        reduce using rule 250 (declaration -> template_declaration .)
    SIZEOF          reduce using rule 250 (declaration -> template_declaration .)
    PLUSOP          reduce using rule 250 (declaration -> template_declaration .)
    MINUSOP         reduce using rule 250 (declaration -> template_declaration .)
    NOTSYM          reduce using rule 250 (declaration -> template_declaration .)
    NEW             reduce using rule 250 (declaration -> template_declaration .)
    DELETE          reduce using rule 250 (declaration -> template_declaration .)
    THIS            reduce using rule 250 (declaration -> template_declaration .)
    NUMBER          reduce using rule 250 (declaration -> template_declaration .)
    STRING          reduce using rule 250 (declaration -> template_declaration .)
    SCHAR           reduce using rule 250 (declaration -> template_declaration .)
    ELSE            reduce using rule 250 (declaration -> template_declaration .)


state 10

    (251) declaration -> linkage_specification .

    ASM             reduce using rule 251 (declaration -> linkage_specification .)
    TEMPLATE        reduce using rule 251 (declaration -> linkage_specification .)
    EXTERN          reduce using rule 251 (declaration -> linkage_specification .)
    TYPEDEF         reduce using rule 251 (declaration -> linkage_specification .)
    LPAREN          reduce using rule 251 (declaration -> linkage_specification .)
    AUTO            reduce using rule 251 (declaration -> linkage_specification .)
    STATIC          reduce using rule 251 (declaration -> linkage_specification .)
    CONST           reduce using rule 251 (declaration -> linkage_specification .)
    VOLATILE        reduce using rule 251 (declaration -> linkage_specification .)
    INLINE          reduce using rule 251 (declaration -> linkage_specification .)
    VIRTUAL         reduce using rule 251 (declaration -> linkage_specification .)
    BNOP            reduce using rule 251 (declaration -> linkage_specification .)
    MULTOP          reduce using rule 251 (declaration -> linkage_specification .)
    BANDOP          reduce using rule 251 (declaration -> linkage_specification .)
    CHAR            reduce using rule 251 (declaration -> linkage_specification .)
    SHORT           reduce using rule 251 (declaration -> linkage_specification .)
    INT             reduce using rule 251 (declaration -> linkage_specification .)
    LONG            reduce using rule 251 (declaration -> linkage_specification .)
    SIGNED          reduce using rule 251 (declaration -> linkage_specification .)
    UNSIGNED        reduce using rule 251 (declaration -> linkage_specification .)
    FLOAT           reduce using rule 251 (declaration -> linkage_specification .)
    DOUBLE          reduce using rule 251 (declaration -> linkage_specification .)
    VOID            reduce using rule 251 (declaration -> linkage_specification .)
    ENUM            reduce using rule 251 (declaration -> linkage_specification .)
    IDENTIFIER      reduce using rule 251 (declaration -> linkage_specification .)
    DOUBLECOLON     reduce using rule 251 (declaration -> linkage_specification .)
    CLASS           reduce using rule 251 (declaration -> linkage_specification .)
    STRUCT          reduce using rule 251 (declaration -> linkage_specification .)
    UNION           reduce using rule 251 (declaration -> linkage_specification .)
    OPERATOR        reduce using rule 251 (declaration -> linkage_specification .)
    $end            reduce using rule 251 (declaration -> linkage_specification .)
    RCPAREN         reduce using rule 251 (declaration -> linkage_specification .)
    CASE            reduce using rule 251 (declaration -> linkage_specification .)
    DEFAULT         reduce using rule 251 (declaration -> linkage_specification .)
    SEMICOLON       reduce using rule 251 (declaration -> linkage_specification .)
    LCPAREN         reduce using rule 251 (declaration -> linkage_specification .)
    IF              reduce using rule 251 (declaration -> linkage_specification .)
    SWITCH          reduce using rule 251 (declaration -> linkage_specification .)
    WHILE           reduce using rule 251 (declaration -> linkage_specification .)
    DO              reduce using rule 251 (declaration -> linkage_specification .)
    FOR             reduce using rule 251 (declaration -> linkage_specification .)
    BREAK           reduce using rule 251 (declaration -> linkage_specification .)
    CONTINUE        reduce using rule 251 (declaration -> linkage_specification .)
    RETURN          reduce using rule 251 (declaration -> linkage_specification .)
    GOTO            reduce using rule 251 (declaration -> linkage_specification .)
    TRY             reduce using rule 251 (declaration -> linkage_specification .)
    DPLUSOP         reduce using rule 251 (declaration -> linkage_specification .)
    DMINUSOP        reduce using rule 251 (declaration -> linkage_specification .)
    SIZEOF          reduce using rule 251 (declaration -> linkage_specification .)
    PLUSOP          reduce using rule 251 (declaration -> linkage_specification .)
    MINUSOP         reduce using rule 251 (declaration -> linkage_specification .)
    NOTSYM          reduce using rule 251 (declaration -> linkage_specification .)
    NEW             reduce using rule 251 (declaration -> linkage_specification .)
    DELETE          reduce using rule 251 (declaration -> linkage_specification .)
    THIS            reduce using rule 251 (declaration -> linkage_specification .)
    NUMBER          reduce using rule 251 (declaration -> linkage_specification .)
    STRING          reduce using rule 251 (declaration -> linkage_specification .)
    SCHAR           reduce using rule 251 (declaration -> linkage_specification .)
    ELSE            reduce using rule 251 (declaration -> linkage_specification .)


state 11

    (170) decl_specifiers -> decl_specifier .

    SEMICOLON       reduce using rule 170 (decl_specifiers -> decl_specifier .)
    TYPEDEF         reduce using rule 170 (decl_specifiers -> decl_specifier .)
    LPAREN          reduce using rule 170 (decl_specifiers -> decl_specifier .)
    AUTO            reduce using rule 170 (decl_specifiers -> decl_specifier .)
    STATIC          reduce using rule 170 (decl_specifiers -> decl_specifier .)
    EXTERN          reduce using rule 170 (decl_specifiers -> decl_specifier .)
    CONST           reduce using rule 170 (decl_specifiers -> decl_specifier .)
    VOLATILE        reduce using rule 170 (decl_specifiers -> decl_specifier .)
    INLINE          reduce using rule 170 (decl_specifiers -> decl_specifier .)
    VIRTUAL         reduce using rule 170 (decl_specifiers -> decl_specifier .)
    BNOP            reduce using rule 170 (decl_specifiers -> decl_specifier .)
    MULTOP          reduce using rule 170 (decl_specifiers -> decl_specifier .)
    BANDOP          reduce using rule 170 (decl_specifiers -> decl_specifier .)
    CHAR            reduce using rule 170 (decl_specifiers -> decl_specifier .)
    SHORT           reduce using rule 170 (decl_specifiers -> decl_specifier .)
    INT             reduce using rule 170 (decl_specifiers -> decl_specifier .)
    LONG            reduce using rule 170 (decl_specifiers -> decl_specifier .)
    SIGNED          reduce using rule 170 (decl_specifiers -> decl_specifier .)
    UNSIGNED        reduce using rule 170 (decl_specifiers -> decl_specifier .)
    FLOAT           reduce using rule 170 (decl_specifiers -> decl_specifier .)
    DOUBLE          reduce using rule 170 (decl_specifiers -> decl_specifier .)
    VOID            reduce using rule 170 (decl_specifiers -> decl_specifier .)
    ENUM            reduce using rule 170 (decl_specifiers -> decl_specifier .)
    IDENTIFIER      reduce using rule 170 (decl_specifiers -> decl_specifier .)
    DOUBLECOLON     reduce using rule 170 (decl_specifiers -> decl_specifier .)
    CLASS           reduce using rule 170 (decl_specifiers -> decl_specifier .)
    STRUCT          reduce using rule 170 (decl_specifiers -> decl_specifier .)
    UNION           reduce using rule 170 (decl_specifiers -> decl_specifier .)
    TEMPLATE        reduce using rule 170 (decl_specifiers -> decl_specifier .)
    OPERATOR        reduce using rule 170 (decl_specifiers -> decl_specifier .)
    EQUAL           reduce using rule 170 (decl_specifiers -> decl_specifier .)
    LSPAREN         reduce using rule 170 (decl_specifiers -> decl_specifier .)
    COMMA           reduce using rule 170 (decl_specifiers -> decl_specifier .)
    RPAREN          reduce using rule 170 (decl_specifiers -> decl_specifier .)
    GTCOMP          reduce using rule 170 (decl_specifiers -> decl_specifier .)
    COLON           reduce using rule 170 (decl_specifiers -> decl_specifier .)


state 12

    (258) declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 258 (declarator_list -> init_declarator .)
    COMMA           reduce using rule 258 (declarator_list -> init_declarator .)


state 13

    (270) asm_declaration -> ASM . LPAREN STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 73


state 14

    (297) declarator -> LPAREN . declarator RPAREN
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    LPAREN          shift and go to state 14
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 42
    OPERATOR        shift and go to state 63

    declarator                     shift and go to state 74
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 75
    complete_class_name            shift and go to state 76
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59

state 15

    (200) function_definition -> declarator . ctor_initializer fct_body
    (202) function_definition -> declarator . fct_body
    (260) init_declarator -> declarator . initializer
    (261) init_declarator -> declarator .
    (293) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (295) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (296) declarator -> declarator . LSPAREN RSPAREN
    (276) ctor_initializer -> . COLON mem_initializer_list
    (203) fct_body -> . compound_statement
    (262) initializer -> . EQUAL assignment_expression
    (263) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (264) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (265) initializer -> . LPAREN expression_list RPAREN
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN

    SEMICOLON       reduce using rule 261 (init_declarator -> declarator .)
    COMMA           reduce using rule 261 (init_declarator -> declarator .)
    LPAREN          shift and go to state 80
    LSPAREN         shift and go to state 81
    COLON           shift and go to state 82
    EQUAL           shift and go to state 84
    LCPAREN         shift and go to state 85

    ctor_initializer               shift and go to state 77
    fct_body                       shift and go to state 78
    initializer                    shift and go to state 79
    compound_statement             shift and go to state 83

state 16

    (252) template_declaration -> TEMPLATE . LTCOMP template_argument_list GTCOMP declaration
    (378) class_key -> TEMPLATE .

    LTCOMP          shift and go to state 86
    IDENTIFIER      reduce using rule 378 (class_key -> TEMPLATE .)
    COLON           reduce using rule 378 (class_key -> TEMPLATE .)
    LCPAREN         reduce using rule 378 (class_key -> TEMPLATE .)


state 17

    (271) linkage_specification -> EXTERN . STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> EXTERN . STRING LCPAREN RCPAREN
    (273) linkage_specification -> EXTERN . STRING declaration
    (177) storage_class_specifier -> EXTERN .

    STRING          shift and go to state 87
    SEMICOLON       reduce using rule 177 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 177 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 177 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 177 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 177 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    VIRTUAL         reduce using rule 177 (storage_class_specifier -> EXTERN .)
    BNOP            reduce using rule 177 (storage_class_specifier -> EXTERN .)
    MULTOP          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    BANDOP          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 177 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 177 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 177 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 177 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 177 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 177 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 177 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 177 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 177 (storage_class_specifier -> EXTERN .)
    DOUBLECOLON     reduce using rule 177 (storage_class_specifier -> EXTERN .)
    CLASS           reduce using rule 177 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 177 (storage_class_specifier -> EXTERN .)
    TEMPLATE        reduce using rule 177 (storage_class_specifier -> EXTERN .)
    OPERATOR        reduce using rule 177 (storage_class_specifier -> EXTERN .)


state 18

    (171) decl_specifier -> storage_class_specifier .

    SEMICOLON       reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    TYPEDEF         reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    LPAREN          reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    AUTO            reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    STATIC          reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    EXTERN          reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    CONST           reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    VOLATILE        reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    INLINE          reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    VIRTUAL         reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    BNOP            reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    MULTOP          reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    BANDOP          reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    CHAR            reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    SHORT           reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    INT             reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    LONG            reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    SIGNED          reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    UNSIGNED        reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    FLOAT           reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    DOUBLE          reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    VOID            reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    ENUM            reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    DOUBLECOLON     reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    CLASS           reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    STRUCT          reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    UNION           reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    TEMPLATE        reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    OPERATOR        reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    EQUAL           reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    LSPAREN         reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    COMMA           reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    RPAREN          reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    GTCOMP          reduce using rule 171 (decl_specifier -> storage_class_specifier .)
    COLON           reduce using rule 171 (decl_specifier -> storage_class_specifier .)


state 19

    (172) decl_specifier -> type_specifier .

    SEMICOLON       reduce using rule 172 (decl_specifier -> type_specifier .)
    TYPEDEF         reduce using rule 172 (decl_specifier -> type_specifier .)
    LPAREN          reduce using rule 172 (decl_specifier -> type_specifier .)
    AUTO            reduce using rule 172 (decl_specifier -> type_specifier .)
    STATIC          reduce using rule 172 (decl_specifier -> type_specifier .)
    EXTERN          reduce using rule 172 (decl_specifier -> type_specifier .)
    CONST           reduce using rule 172 (decl_specifier -> type_specifier .)
    VOLATILE        reduce using rule 172 (decl_specifier -> type_specifier .)
    INLINE          reduce using rule 172 (decl_specifier -> type_specifier .)
    VIRTUAL         reduce using rule 172 (decl_specifier -> type_specifier .)
    BNOP            reduce using rule 172 (decl_specifier -> type_specifier .)
    MULTOP          reduce using rule 172 (decl_specifier -> type_specifier .)
    BANDOP          reduce using rule 172 (decl_specifier -> type_specifier .)
    CHAR            reduce using rule 172 (decl_specifier -> type_specifier .)
    SHORT           reduce using rule 172 (decl_specifier -> type_specifier .)
    INT             reduce using rule 172 (decl_specifier -> type_specifier .)
    LONG            reduce using rule 172 (decl_specifier -> type_specifier .)
    SIGNED          reduce using rule 172 (decl_specifier -> type_specifier .)
    UNSIGNED        reduce using rule 172 (decl_specifier -> type_specifier .)
    FLOAT           reduce using rule 172 (decl_specifier -> type_specifier .)
    DOUBLE          reduce using rule 172 (decl_specifier -> type_specifier .)
    VOID            reduce using rule 172 (decl_specifier -> type_specifier .)
    ENUM            reduce using rule 172 (decl_specifier -> type_specifier .)
    IDENTIFIER      reduce using rule 172 (decl_specifier -> type_specifier .)
    DOUBLECOLON     reduce using rule 172 (decl_specifier -> type_specifier .)
    CLASS           reduce using rule 172 (decl_specifier -> type_specifier .)
    STRUCT          reduce using rule 172 (decl_specifier -> type_specifier .)
    UNION           reduce using rule 172 (decl_specifier -> type_specifier .)
    TEMPLATE        reduce using rule 172 (decl_specifier -> type_specifier .)
    OPERATOR        reduce using rule 172 (decl_specifier -> type_specifier .)
    EQUAL           reduce using rule 172 (decl_specifier -> type_specifier .)
    LSPAREN         reduce using rule 172 (decl_specifier -> type_specifier .)
    COMMA           reduce using rule 172 (decl_specifier -> type_specifier .)
    RPAREN          reduce using rule 172 (decl_specifier -> type_specifier .)
    GTCOMP          reduce using rule 172 (decl_specifier -> type_specifier .)
    COLON           reduce using rule 172 (decl_specifier -> type_specifier .)


state 20

    (173) decl_specifier -> fct_specifier .

    SEMICOLON       reduce using rule 173 (decl_specifier -> fct_specifier .)
    TYPEDEF         reduce using rule 173 (decl_specifier -> fct_specifier .)
    LPAREN          reduce using rule 173 (decl_specifier -> fct_specifier .)
    AUTO            reduce using rule 173 (decl_specifier -> fct_specifier .)
    STATIC          reduce using rule 173 (decl_specifier -> fct_specifier .)
    EXTERN          reduce using rule 173 (decl_specifier -> fct_specifier .)
    CONST           reduce using rule 173 (decl_specifier -> fct_specifier .)
    VOLATILE        reduce using rule 173 (decl_specifier -> fct_specifier .)
    INLINE          reduce using rule 173 (decl_specifier -> fct_specifier .)
    VIRTUAL         reduce using rule 173 (decl_specifier -> fct_specifier .)
    BNOP            reduce using rule 173 (decl_specifier -> fct_specifier .)
    MULTOP          reduce using rule 173 (decl_specifier -> fct_specifier .)
    BANDOP          reduce using rule 173 (decl_specifier -> fct_specifier .)
    CHAR            reduce using rule 173 (decl_specifier -> fct_specifier .)
    SHORT           reduce using rule 173 (decl_specifier -> fct_specifier .)
    INT             reduce using rule 173 (decl_specifier -> fct_specifier .)
    LONG            reduce using rule 173 (decl_specifier -> fct_specifier .)
    SIGNED          reduce using rule 173 (decl_specifier -> fct_specifier .)
    UNSIGNED        reduce using rule 173 (decl_specifier -> fct_specifier .)
    FLOAT           reduce using rule 173 (decl_specifier -> fct_specifier .)
    DOUBLE          reduce using rule 173 (decl_specifier -> fct_specifier .)
    VOID            reduce using rule 173 (decl_specifier -> fct_specifier .)
    ENUM            reduce using rule 173 (decl_specifier -> fct_specifier .)
    IDENTIFIER      reduce using rule 173 (decl_specifier -> fct_specifier .)
    DOUBLECOLON     reduce using rule 173 (decl_specifier -> fct_specifier .)
    CLASS           reduce using rule 173 (decl_specifier -> fct_specifier .)
    STRUCT          reduce using rule 173 (decl_specifier -> fct_specifier .)
    UNION           reduce using rule 173 (decl_specifier -> fct_specifier .)
    TEMPLATE        reduce using rule 173 (decl_specifier -> fct_specifier .)
    OPERATOR        reduce using rule 173 (decl_specifier -> fct_specifier .)
    EQUAL           reduce using rule 173 (decl_specifier -> fct_specifier .)
    LSPAREN         reduce using rule 173 (decl_specifier -> fct_specifier .)
    COMMA           reduce using rule 173 (decl_specifier -> fct_specifier .)
    RPAREN          reduce using rule 173 (decl_specifier -> fct_specifier .)
    GTCOMP          reduce using rule 173 (decl_specifier -> fct_specifier .)
    COLON           reduce using rule 173 (decl_specifier -> fct_specifier .)


state 21

    (174) decl_specifier -> TYPEDEF .

    SEMICOLON       reduce using rule 174 (decl_specifier -> TYPEDEF .)
    TYPEDEF         reduce using rule 174 (decl_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 174 (decl_specifier -> TYPEDEF .)
    AUTO            reduce using rule 174 (decl_specifier -> TYPEDEF .)
    STATIC          reduce using rule 174 (decl_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 174 (decl_specifier -> TYPEDEF .)
    CONST           reduce using rule 174 (decl_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 174 (decl_specifier -> TYPEDEF .)
    INLINE          reduce using rule 174 (decl_specifier -> TYPEDEF .)
    VIRTUAL         reduce using rule 174 (decl_specifier -> TYPEDEF .)
    BNOP            reduce using rule 174 (decl_specifier -> TYPEDEF .)
    MULTOP          reduce using rule 174 (decl_specifier -> TYPEDEF .)
    BANDOP          reduce using rule 174 (decl_specifier -> TYPEDEF .)
    CHAR            reduce using rule 174 (decl_specifier -> TYPEDEF .)
    SHORT           reduce using rule 174 (decl_specifier -> TYPEDEF .)
    INT             reduce using rule 174 (decl_specifier -> TYPEDEF .)
    LONG            reduce using rule 174 (decl_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 174 (decl_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 174 (decl_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 174 (decl_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 174 (decl_specifier -> TYPEDEF .)
    VOID            reduce using rule 174 (decl_specifier -> TYPEDEF .)
    ENUM            reduce using rule 174 (decl_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 174 (decl_specifier -> TYPEDEF .)
    DOUBLECOLON     reduce using rule 174 (decl_specifier -> TYPEDEF .)
    CLASS           reduce using rule 174 (decl_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 174 (decl_specifier -> TYPEDEF .)
    UNION           reduce using rule 174 (decl_specifier -> TYPEDEF .)
    TEMPLATE        reduce using rule 174 (decl_specifier -> TYPEDEF .)
    OPERATOR        reduce using rule 174 (decl_specifier -> TYPEDEF .)
    EQUAL           reduce using rule 174 (decl_specifier -> TYPEDEF .)
    LSPAREN         reduce using rule 174 (decl_specifier -> TYPEDEF .)
    COMMA           reduce using rule 174 (decl_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 174 (decl_specifier -> TYPEDEF .)
    GTCOMP          reduce using rule 174 (decl_specifier -> TYPEDEF .)
    COLON           reduce using rule 174 (decl_specifier -> TYPEDEF .)


state 22

    (291) declarator -> dname .

    LPAREN          reduce using rule 291 (declarator -> dname .)
    LSPAREN         reduce using rule 291 (declarator -> dname .)
    COLON           reduce using rule 291 (declarator -> dname .)
    EQUAL           reduce using rule 291 (declarator -> dname .)
    LCPAREN         reduce using rule 291 (declarator -> dname .)
    SEMICOLON       reduce using rule 291 (declarator -> dname .)
    COMMA           reduce using rule 291 (declarator -> dname .)
    RPAREN          reduce using rule 291 (declarator -> dname .)
    GTCOMP          reduce using rule 291 (declarator -> dname .)


state 23

    (292) declarator -> ptr_operator . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    LPAREN          shift and go to state 14
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 42
    OPERATOR        shift and go to state 63

    ptr_operator                   shift and go to state 23
    declarator                     shift and go to state 88
    dname                          shift and go to state 22
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 75
    complete_class_name            shift and go to state 76
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59

state 24

    (175) storage_class_specifier -> AUTO .

    SEMICOLON       reduce using rule 175 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 175 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 175 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 175 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 175 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 175 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 175 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 175 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 175 (storage_class_specifier -> AUTO .)
    VIRTUAL         reduce using rule 175 (storage_class_specifier -> AUTO .)
    BNOP            reduce using rule 175 (storage_class_specifier -> AUTO .)
    MULTOP          reduce using rule 175 (storage_class_specifier -> AUTO .)
    BANDOP          reduce using rule 175 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 175 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 175 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 175 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 175 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 175 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 175 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 175 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 175 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 175 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 175 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 175 (storage_class_specifier -> AUTO .)
    DOUBLECOLON     reduce using rule 175 (storage_class_specifier -> AUTO .)
    CLASS           reduce using rule 175 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 175 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 175 (storage_class_specifier -> AUTO .)
    TEMPLATE        reduce using rule 175 (storage_class_specifier -> AUTO .)
    OPERATOR        reduce using rule 175 (storage_class_specifier -> AUTO .)
    EQUAL           reduce using rule 175 (storage_class_specifier -> AUTO .)
    LSPAREN         reduce using rule 175 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 175 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 175 (storage_class_specifier -> AUTO .)
    GTCOMP          reduce using rule 175 (storage_class_specifier -> AUTO .)
    COLON           reduce using rule 175 (storage_class_specifier -> AUTO .)


state 25

    (176) storage_class_specifier -> STATIC .

    SEMICOLON       reduce using rule 176 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 176 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 176 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 176 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 176 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 176 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 176 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 176 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 176 (storage_class_specifier -> STATIC .)
    VIRTUAL         reduce using rule 176 (storage_class_specifier -> STATIC .)
    BNOP            reduce using rule 176 (storage_class_specifier -> STATIC .)
    MULTOP          reduce using rule 176 (storage_class_specifier -> STATIC .)
    BANDOP          reduce using rule 176 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 176 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 176 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 176 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 176 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 176 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 176 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 176 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 176 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 176 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 176 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 176 (storage_class_specifier -> STATIC .)
    DOUBLECOLON     reduce using rule 176 (storage_class_specifier -> STATIC .)
    CLASS           reduce using rule 176 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 176 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 176 (storage_class_specifier -> STATIC .)
    TEMPLATE        reduce using rule 176 (storage_class_specifier -> STATIC .)
    OPERATOR        reduce using rule 176 (storage_class_specifier -> STATIC .)
    EQUAL           reduce using rule 176 (storage_class_specifier -> STATIC .)
    LSPAREN         reduce using rule 176 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 176 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 176 (storage_class_specifier -> STATIC .)
    GTCOMP          reduce using rule 176 (storage_class_specifier -> STATIC .)
    COLON           reduce using rule 176 (storage_class_specifier -> STATIC .)


state 26

    (180) type_specifier -> simple_type_name .

    SEMICOLON       reduce using rule 180 (type_specifier -> simple_type_name .)
    TYPEDEF         reduce using rule 180 (type_specifier -> simple_type_name .)
    LPAREN          reduce using rule 180 (type_specifier -> simple_type_name .)
    AUTO            reduce using rule 180 (type_specifier -> simple_type_name .)
    STATIC          reduce using rule 180 (type_specifier -> simple_type_name .)
    EXTERN          reduce using rule 180 (type_specifier -> simple_type_name .)
    CONST           reduce using rule 180 (type_specifier -> simple_type_name .)
    VOLATILE        reduce using rule 180 (type_specifier -> simple_type_name .)
    INLINE          reduce using rule 180 (type_specifier -> simple_type_name .)
    VIRTUAL         reduce using rule 180 (type_specifier -> simple_type_name .)
    BNOP            reduce using rule 180 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 180 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 180 (type_specifier -> simple_type_name .)
    CHAR            reduce using rule 180 (type_specifier -> simple_type_name .)
    SHORT           reduce using rule 180 (type_specifier -> simple_type_name .)
    INT             reduce using rule 180 (type_specifier -> simple_type_name .)
    LONG            reduce using rule 180 (type_specifier -> simple_type_name .)
    SIGNED          reduce using rule 180 (type_specifier -> simple_type_name .)
    UNSIGNED        reduce using rule 180 (type_specifier -> simple_type_name .)
    FLOAT           reduce using rule 180 (type_specifier -> simple_type_name .)
    DOUBLE          reduce using rule 180 (type_specifier -> simple_type_name .)
    VOID            reduce using rule 180 (type_specifier -> simple_type_name .)
    ENUM            reduce using rule 180 (type_specifier -> simple_type_name .)
    IDENTIFIER      reduce using rule 180 (type_specifier -> simple_type_name .)
    DOUBLECOLON     reduce using rule 180 (type_specifier -> simple_type_name .)
    CLASS           reduce using rule 180 (type_specifier -> simple_type_name .)
    STRUCT          reduce using rule 180 (type_specifier -> simple_type_name .)
    UNION           reduce using rule 180 (type_specifier -> simple_type_name .)
    TEMPLATE        reduce using rule 180 (type_specifier -> simple_type_name .)
    OPERATOR        reduce using rule 180 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 180 (type_specifier -> simple_type_name .)
    COLON           reduce using rule 180 (type_specifier -> simple_type_name .)
    EQUAL           reduce using rule 180 (type_specifier -> simple_type_name .)
    LCPAREN         reduce using rule 180 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 180 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 180 (type_specifier -> simple_type_name .)
    DOT             reduce using rule 180 (type_specifier -> simple_type_name .)
    ARROW           reduce using rule 180 (type_specifier -> simple_type_name .)
    DPLUSOP         reduce using rule 180 (type_specifier -> simple_type_name .)
    DMINUSOP        reduce using rule 180 (type_specifier -> simple_type_name .)
    LTCOMP          reduce using rule 180 (type_specifier -> simple_type_name .)
    MULTEQOP        reduce using rule 180 (type_specifier -> simple_type_name .)
    DIVEQOP         reduce using rule 180 (type_specifier -> simple_type_name .)
    MODEQOP         reduce using rule 180 (type_specifier -> simple_type_name .)
    PLUSEQOP        reduce using rule 180 (type_specifier -> simple_type_name .)
    MINUSEQOP       reduce using rule 180 (type_specifier -> simple_type_name .)
    LSHIFTEQOP      reduce using rule 180 (type_specifier -> simple_type_name .)
    RSHIFTEQOP      reduce using rule 180 (type_specifier -> simple_type_name .)
    BANDEQOP        reduce using rule 180 (type_specifier -> simple_type_name .)
    BOREQOP         reduce using rule 180 (type_specifier -> simple_type_name .)
    DOTSTAR         reduce using rule 180 (type_specifier -> simple_type_name .)
    ARROWSTAR       reduce using rule 180 (type_specifier -> simple_type_name .)
    DIVOP           reduce using rule 180 (type_specifier -> simple_type_name .)
    MODOP           reduce using rule 180 (type_specifier -> simple_type_name .)
    PLUSOP          reduce using rule 180 (type_specifier -> simple_type_name .)
    MINUSOP         reduce using rule 180 (type_specifier -> simple_type_name .)
    LSHIFT          reduce using rule 180 (type_specifier -> simple_type_name .)
    RSHIFT          reduce using rule 180 (type_specifier -> simple_type_name .)
    GTCOMP          reduce using rule 180 (type_specifier -> simple_type_name .)
    LTECOMP         reduce using rule 180 (type_specifier -> simple_type_name .)
    GTECOMP         reduce using rule 180 (type_specifier -> simple_type_name .)
    EQCOMP          reduce using rule 180 (type_specifier -> simple_type_name .)
    NEQCOMP         reduce using rule 180 (type_specifier -> simple_type_name .)
    XOROP           reduce using rule 180 (type_specifier -> simple_type_name .)
    OROP            reduce using rule 180 (type_specifier -> simple_type_name .)
    ANDOP           reduce using rule 180 (type_specifier -> simple_type_name .)
    QUESMARK        reduce using rule 180 (type_specifier -> simple_type_name .)
    RSPAREN         reduce using rule 180 (type_specifier -> simple_type_name .)
    RCPAREN         reduce using rule 180 (type_specifier -> simple_type_name .)


state 27

    (181) type_specifier -> class_specifier .

    SEMICOLON       reduce using rule 181 (type_specifier -> class_specifier .)
    TYPEDEF         reduce using rule 181 (type_specifier -> class_specifier .)
    LPAREN          reduce using rule 181 (type_specifier -> class_specifier .)
    AUTO            reduce using rule 181 (type_specifier -> class_specifier .)
    STATIC          reduce using rule 181 (type_specifier -> class_specifier .)
    EXTERN          reduce using rule 181 (type_specifier -> class_specifier .)
    CONST           reduce using rule 181 (type_specifier -> class_specifier .)
    VOLATILE        reduce using rule 181 (type_specifier -> class_specifier .)
    INLINE          reduce using rule 181 (type_specifier -> class_specifier .)
    VIRTUAL         reduce using rule 181 (type_specifier -> class_specifier .)
    BNOP            reduce using rule 181 (type_specifier -> class_specifier .)
    MULTOP          reduce using rule 181 (type_specifier -> class_specifier .)
    BANDOP          reduce using rule 181 (type_specifier -> class_specifier .)
    CHAR            reduce using rule 181 (type_specifier -> class_specifier .)
    SHORT           reduce using rule 181 (type_specifier -> class_specifier .)
    INT             reduce using rule 181 (type_specifier -> class_specifier .)
    LONG            reduce using rule 181 (type_specifier -> class_specifier .)
    SIGNED          reduce using rule 181 (type_specifier -> class_specifier .)
    UNSIGNED        reduce using rule 181 (type_specifier -> class_specifier .)
    FLOAT           reduce using rule 181 (type_specifier -> class_specifier .)
    DOUBLE          reduce using rule 181 (type_specifier -> class_specifier .)
    VOID            reduce using rule 181 (type_specifier -> class_specifier .)
    ENUM            reduce using rule 181 (type_specifier -> class_specifier .)
    IDENTIFIER      reduce using rule 181 (type_specifier -> class_specifier .)
    DOUBLECOLON     reduce using rule 181 (type_specifier -> class_specifier .)
    CLASS           reduce using rule 181 (type_specifier -> class_specifier .)
    STRUCT          reduce using rule 181 (type_specifier -> class_specifier .)
    UNION           reduce using rule 181 (type_specifier -> class_specifier .)
    TEMPLATE        reduce using rule 181 (type_specifier -> class_specifier .)
    OPERATOR        reduce using rule 181 (type_specifier -> class_specifier .)
    LSPAREN         reduce using rule 181 (type_specifier -> class_specifier .)
    COLON           reduce using rule 181 (type_specifier -> class_specifier .)
    EQUAL           reduce using rule 181 (type_specifier -> class_specifier .)
    LCPAREN         reduce using rule 181 (type_specifier -> class_specifier .)
    COMMA           reduce using rule 181 (type_specifier -> class_specifier .)
    RPAREN          reduce using rule 181 (type_specifier -> class_specifier .)
    DOT             reduce using rule 181 (type_specifier -> class_specifier .)
    ARROW           reduce using rule 181 (type_specifier -> class_specifier .)
    DPLUSOP         reduce using rule 181 (type_specifier -> class_specifier .)
    DMINUSOP        reduce using rule 181 (type_specifier -> class_specifier .)
    LTCOMP          reduce using rule 181 (type_specifier -> class_specifier .)
    MULTEQOP        reduce using rule 181 (type_specifier -> class_specifier .)
    DIVEQOP         reduce using rule 181 (type_specifier -> class_specifier .)
    MODEQOP         reduce using rule 181 (type_specifier -> class_specifier .)
    PLUSEQOP        reduce using rule 181 (type_specifier -> class_specifier .)
    MINUSEQOP       reduce using rule 181 (type_specifier -> class_specifier .)
    LSHIFTEQOP      reduce using rule 181 (type_specifier -> class_specifier .)
    RSHIFTEQOP      reduce using rule 181 (type_specifier -> class_specifier .)
    BANDEQOP        reduce using rule 181 (type_specifier -> class_specifier .)
    BOREQOP         reduce using rule 181 (type_specifier -> class_specifier .)
    DOTSTAR         reduce using rule 181 (type_specifier -> class_specifier .)
    ARROWSTAR       reduce using rule 181 (type_specifier -> class_specifier .)
    DIVOP           reduce using rule 181 (type_specifier -> class_specifier .)
    MODOP           reduce using rule 181 (type_specifier -> class_specifier .)
    PLUSOP          reduce using rule 181 (type_specifier -> class_specifier .)
    MINUSOP         reduce using rule 181 (type_specifier -> class_specifier .)
    LSHIFT          reduce using rule 181 (type_specifier -> class_specifier .)
    RSHIFT          reduce using rule 181 (type_specifier -> class_specifier .)
    GTCOMP          reduce using rule 181 (type_specifier -> class_specifier .)
    LTECOMP         reduce using rule 181 (type_specifier -> class_specifier .)
    GTECOMP         reduce using rule 181 (type_specifier -> class_specifier .)
    EQCOMP          reduce using rule 181 (type_specifier -> class_specifier .)
    NEQCOMP         reduce using rule 181 (type_specifier -> class_specifier .)
    XOROP           reduce using rule 181 (type_specifier -> class_specifier .)
    OROP            reduce using rule 181 (type_specifier -> class_specifier .)
    ANDOP           reduce using rule 181 (type_specifier -> class_specifier .)
    QUESMARK        reduce using rule 181 (type_specifier -> class_specifier .)
    RSPAREN         reduce using rule 181 (type_specifier -> class_specifier .)
    RCPAREN         reduce using rule 181 (type_specifier -> class_specifier .)


state 28

    (182) type_specifier -> enum_specifier .

    SEMICOLON       reduce using rule 182 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 182 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 182 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 182 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 182 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 182 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 182 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 182 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 182 (type_specifier -> enum_specifier .)
    VIRTUAL         reduce using rule 182 (type_specifier -> enum_specifier .)
    BNOP            reduce using rule 182 (type_specifier -> enum_specifier .)
    MULTOP          reduce using rule 182 (type_specifier -> enum_specifier .)
    BANDOP          reduce using rule 182 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 182 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 182 (type_specifier -> enum_specifier .)
    INT             reduce using rule 182 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 182 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 182 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 182 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 182 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 182 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 182 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 182 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 182 (type_specifier -> enum_specifier .)
    DOUBLECOLON     reduce using rule 182 (type_specifier -> enum_specifier .)
    CLASS           reduce using rule 182 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 182 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 182 (type_specifier -> enum_specifier .)
    TEMPLATE        reduce using rule 182 (type_specifier -> enum_specifier .)
    OPERATOR        reduce using rule 182 (type_specifier -> enum_specifier .)
    LSPAREN         reduce using rule 182 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 182 (type_specifier -> enum_specifier .)
    EQUAL           reduce using rule 182 (type_specifier -> enum_specifier .)
    LCPAREN         reduce using rule 182 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 182 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 182 (type_specifier -> enum_specifier .)
    DOT             reduce using rule 182 (type_specifier -> enum_specifier .)
    ARROW           reduce using rule 182 (type_specifier -> enum_specifier .)
    DPLUSOP         reduce using rule 182 (type_specifier -> enum_specifier .)
    DMINUSOP        reduce using rule 182 (type_specifier -> enum_specifier .)
    LTCOMP          reduce using rule 182 (type_specifier -> enum_specifier .)
    MULTEQOP        reduce using rule 182 (type_specifier -> enum_specifier .)
    DIVEQOP         reduce using rule 182 (type_specifier -> enum_specifier .)
    MODEQOP         reduce using rule 182 (type_specifier -> enum_specifier .)
    PLUSEQOP        reduce using rule 182 (type_specifier -> enum_specifier .)
    MINUSEQOP       reduce using rule 182 (type_specifier -> enum_specifier .)
    LSHIFTEQOP      reduce using rule 182 (type_specifier -> enum_specifier .)
    RSHIFTEQOP      reduce using rule 182 (type_specifier -> enum_specifier .)
    BANDEQOP        reduce using rule 182 (type_specifier -> enum_specifier .)
    BOREQOP         reduce using rule 182 (type_specifier -> enum_specifier .)
    DOTSTAR         reduce using rule 182 (type_specifier -> enum_specifier .)
    ARROWSTAR       reduce using rule 182 (type_specifier -> enum_specifier .)
    DIVOP           reduce using rule 182 (type_specifier -> enum_specifier .)
    MODOP           reduce using rule 182 (type_specifier -> enum_specifier .)
    PLUSOP          reduce using rule 182 (type_specifier -> enum_specifier .)
    MINUSOP         reduce using rule 182 (type_specifier -> enum_specifier .)
    LSHIFT          reduce using rule 182 (type_specifier -> enum_specifier .)
    RSHIFT          reduce using rule 182 (type_specifier -> enum_specifier .)
    GTCOMP          reduce using rule 182 (type_specifier -> enum_specifier .)
    LTECOMP         reduce using rule 182 (type_specifier -> enum_specifier .)
    GTECOMP         reduce using rule 182 (type_specifier -> enum_specifier .)
    EQCOMP          reduce using rule 182 (type_specifier -> enum_specifier .)
    NEQCOMP         reduce using rule 182 (type_specifier -> enum_specifier .)
    XOROP           reduce using rule 182 (type_specifier -> enum_specifier .)
    OROP            reduce using rule 182 (type_specifier -> enum_specifier .)
    ANDOP           reduce using rule 182 (type_specifier -> enum_specifier .)
    QUESMARK        reduce using rule 182 (type_specifier -> enum_specifier .)
    RSPAREN         reduce using rule 182 (type_specifier -> enum_specifier .)
    RCPAREN         reduce using rule 182 (type_specifier -> enum_specifier .)


state 29

    (183) type_specifier -> elaborated_type_specifier .

    SEMICOLON       reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    TYPEDEF         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    LPAREN          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    AUTO            reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    STATIC          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    EXTERN          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    CONST           reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    VOLATILE        reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    INLINE          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    VIRTUAL         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    BNOP            reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    MULTOP          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    BANDOP          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    CHAR            reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    SHORT           reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    INT             reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    LONG            reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    SIGNED          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    UNSIGNED        reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    FLOAT           reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    DOUBLE          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    VOID            reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    ENUM            reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    IDENTIFIER      reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    DOUBLECOLON     reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    CLASS           reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    STRUCT          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    UNION           reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    TEMPLATE        reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    OPERATOR        reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    LSPAREN         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    COLON           reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    EQUAL           reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    LCPAREN         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    COMMA           reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    RPAREN          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    DOT             reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    ARROW           reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    DPLUSOP         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    DMINUSOP        reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    LTCOMP          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    MULTEQOP        reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    DIVEQOP         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    MODEQOP         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    PLUSEQOP        reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    MINUSEQOP       reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    LSHIFTEQOP      reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    RSHIFTEQOP      reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    BANDEQOP        reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    BOREQOP         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    DOTSTAR         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    ARROWSTAR       reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    DIVOP           reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    MODOP           reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    PLUSOP          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    MINUSOP         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    LSHIFT          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    RSHIFT          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    GTCOMP          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    LTECOMP         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    GTECOMP         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    EQCOMP          reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    NEQCOMP         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    XOROP           reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    OROP            reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    ANDOP           reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    QUESMARK        reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    RSPAREN         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)
    RCPAREN         reduce using rule 183 (type_specifier -> elaborated_type_specifier .)


state 30

    (184) type_specifier -> CONST .

    SEMICOLON       reduce using rule 184 (type_specifier -> CONST .)
    TYPEDEF         reduce using rule 184 (type_specifier -> CONST .)
    LPAREN          reduce using rule 184 (type_specifier -> CONST .)
    AUTO            reduce using rule 184 (type_specifier -> CONST .)
    STATIC          reduce using rule 184 (type_specifier -> CONST .)
    EXTERN          reduce using rule 184 (type_specifier -> CONST .)
    CONST           reduce using rule 184 (type_specifier -> CONST .)
    VOLATILE        reduce using rule 184 (type_specifier -> CONST .)
    INLINE          reduce using rule 184 (type_specifier -> CONST .)
    VIRTUAL         reduce using rule 184 (type_specifier -> CONST .)
    BNOP            reduce using rule 184 (type_specifier -> CONST .)
    MULTOP          reduce using rule 184 (type_specifier -> CONST .)
    BANDOP          reduce using rule 184 (type_specifier -> CONST .)
    CHAR            reduce using rule 184 (type_specifier -> CONST .)
    SHORT           reduce using rule 184 (type_specifier -> CONST .)
    INT             reduce using rule 184 (type_specifier -> CONST .)
    LONG            reduce using rule 184 (type_specifier -> CONST .)
    SIGNED          reduce using rule 184 (type_specifier -> CONST .)
    UNSIGNED        reduce using rule 184 (type_specifier -> CONST .)
    FLOAT           reduce using rule 184 (type_specifier -> CONST .)
    DOUBLE          reduce using rule 184 (type_specifier -> CONST .)
    VOID            reduce using rule 184 (type_specifier -> CONST .)
    ENUM            reduce using rule 184 (type_specifier -> CONST .)
    IDENTIFIER      reduce using rule 184 (type_specifier -> CONST .)
    DOUBLECOLON     reduce using rule 184 (type_specifier -> CONST .)
    CLASS           reduce using rule 184 (type_specifier -> CONST .)
    STRUCT          reduce using rule 184 (type_specifier -> CONST .)
    UNION           reduce using rule 184 (type_specifier -> CONST .)
    TEMPLATE        reduce using rule 184 (type_specifier -> CONST .)
    OPERATOR        reduce using rule 184 (type_specifier -> CONST .)
    LSPAREN         reduce using rule 184 (type_specifier -> CONST .)
    COLON           reduce using rule 184 (type_specifier -> CONST .)
    EQUAL           reduce using rule 184 (type_specifier -> CONST .)
    LCPAREN         reduce using rule 184 (type_specifier -> CONST .)
    COMMA           reduce using rule 184 (type_specifier -> CONST .)
    RPAREN          reduce using rule 184 (type_specifier -> CONST .)
    DOT             reduce using rule 184 (type_specifier -> CONST .)
    ARROW           reduce using rule 184 (type_specifier -> CONST .)
    DPLUSOP         reduce using rule 184 (type_specifier -> CONST .)
    DMINUSOP        reduce using rule 184 (type_specifier -> CONST .)
    LTCOMP          reduce using rule 184 (type_specifier -> CONST .)
    MULTEQOP        reduce using rule 184 (type_specifier -> CONST .)
    DIVEQOP         reduce using rule 184 (type_specifier -> CONST .)
    MODEQOP         reduce using rule 184 (type_specifier -> CONST .)
    PLUSEQOP        reduce using rule 184 (type_specifier -> CONST .)
    MINUSEQOP       reduce using rule 184 (type_specifier -> CONST .)
    LSHIFTEQOP      reduce using rule 184 (type_specifier -> CONST .)
    RSHIFTEQOP      reduce using rule 184 (type_specifier -> CONST .)
    BANDEQOP        reduce using rule 184 (type_specifier -> CONST .)
    BOREQOP         reduce using rule 184 (type_specifier -> CONST .)
    DOTSTAR         reduce using rule 184 (type_specifier -> CONST .)
    ARROWSTAR       reduce using rule 184 (type_specifier -> CONST .)
    DIVOP           reduce using rule 184 (type_specifier -> CONST .)
    MODOP           reduce using rule 184 (type_specifier -> CONST .)
    PLUSOP          reduce using rule 184 (type_specifier -> CONST .)
    MINUSOP         reduce using rule 184 (type_specifier -> CONST .)
    LSHIFT          reduce using rule 184 (type_specifier -> CONST .)
    RSHIFT          reduce using rule 184 (type_specifier -> CONST .)
    GTCOMP          reduce using rule 184 (type_specifier -> CONST .)
    LTECOMP         reduce using rule 184 (type_specifier -> CONST .)
    GTECOMP         reduce using rule 184 (type_specifier -> CONST .)
    EQCOMP          reduce using rule 184 (type_specifier -> CONST .)
    NEQCOMP         reduce using rule 184 (type_specifier -> CONST .)
    XOROP           reduce using rule 184 (type_specifier -> CONST .)
    OROP            reduce using rule 184 (type_specifier -> CONST .)
    ANDOP           reduce using rule 184 (type_specifier -> CONST .)
    QUESMARK        reduce using rule 184 (type_specifier -> CONST .)
    RSPAREN         reduce using rule 184 (type_specifier -> CONST .)
    RCPAREN         reduce using rule 184 (type_specifier -> CONST .)


state 31

    (185) type_specifier -> VOLATILE .

    SEMICOLON       reduce using rule 185 (type_specifier -> VOLATILE .)
    TYPEDEF         reduce using rule 185 (type_specifier -> VOLATILE .)
    LPAREN          reduce using rule 185 (type_specifier -> VOLATILE .)
    AUTO            reduce using rule 185 (type_specifier -> VOLATILE .)
    STATIC          reduce using rule 185 (type_specifier -> VOLATILE .)
    EXTERN          reduce using rule 185 (type_specifier -> VOLATILE .)
    CONST           reduce using rule 185 (type_specifier -> VOLATILE .)
    VOLATILE        reduce using rule 185 (type_specifier -> VOLATILE .)
    INLINE          reduce using rule 185 (type_specifier -> VOLATILE .)
    VIRTUAL         reduce using rule 185 (type_specifier -> VOLATILE .)
    BNOP            reduce using rule 185 (type_specifier -> VOLATILE .)
    MULTOP          reduce using rule 185 (type_specifier -> VOLATILE .)
    BANDOP          reduce using rule 185 (type_specifier -> VOLATILE .)
    CHAR            reduce using rule 185 (type_specifier -> VOLATILE .)
    SHORT           reduce using rule 185 (type_specifier -> VOLATILE .)
    INT             reduce using rule 185 (type_specifier -> VOLATILE .)
    LONG            reduce using rule 185 (type_specifier -> VOLATILE .)
    SIGNED          reduce using rule 185 (type_specifier -> VOLATILE .)
    UNSIGNED        reduce using rule 185 (type_specifier -> VOLATILE .)
    FLOAT           reduce using rule 185 (type_specifier -> VOLATILE .)
    DOUBLE          reduce using rule 185 (type_specifier -> VOLATILE .)
    VOID            reduce using rule 185 (type_specifier -> VOLATILE .)
    ENUM            reduce using rule 185 (type_specifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 185 (type_specifier -> VOLATILE .)
    DOUBLECOLON     reduce using rule 185 (type_specifier -> VOLATILE .)
    CLASS           reduce using rule 185 (type_specifier -> VOLATILE .)
    STRUCT          reduce using rule 185 (type_specifier -> VOLATILE .)
    UNION           reduce using rule 185 (type_specifier -> VOLATILE .)
    TEMPLATE        reduce using rule 185 (type_specifier -> VOLATILE .)
    OPERATOR        reduce using rule 185 (type_specifier -> VOLATILE .)
    LSPAREN         reduce using rule 185 (type_specifier -> VOLATILE .)
    COLON           reduce using rule 185 (type_specifier -> VOLATILE .)
    EQUAL           reduce using rule 185 (type_specifier -> VOLATILE .)
    LCPAREN         reduce using rule 185 (type_specifier -> VOLATILE .)
    COMMA           reduce using rule 185 (type_specifier -> VOLATILE .)
    RPAREN          reduce using rule 185 (type_specifier -> VOLATILE .)
    DOT             reduce using rule 185 (type_specifier -> VOLATILE .)
    ARROW           reduce using rule 185 (type_specifier -> VOLATILE .)
    DPLUSOP         reduce using rule 185 (type_specifier -> VOLATILE .)
    DMINUSOP        reduce using rule 185 (type_specifier -> VOLATILE .)
    LTCOMP          reduce using rule 185 (type_specifier -> VOLATILE .)
    MULTEQOP        reduce using rule 185 (type_specifier -> VOLATILE .)
    DIVEQOP         reduce using rule 185 (type_specifier -> VOLATILE .)
    MODEQOP         reduce using rule 185 (type_specifier -> VOLATILE .)
    PLUSEQOP        reduce using rule 185 (type_specifier -> VOLATILE .)
    MINUSEQOP       reduce using rule 185 (type_specifier -> VOLATILE .)
    LSHIFTEQOP      reduce using rule 185 (type_specifier -> VOLATILE .)
    RSHIFTEQOP      reduce using rule 185 (type_specifier -> VOLATILE .)
    BANDEQOP        reduce using rule 185 (type_specifier -> VOLATILE .)
    BOREQOP         reduce using rule 185 (type_specifier -> VOLATILE .)
    DOTSTAR         reduce using rule 185 (type_specifier -> VOLATILE .)
    ARROWSTAR       reduce using rule 185 (type_specifier -> VOLATILE .)
    DIVOP           reduce using rule 185 (type_specifier -> VOLATILE .)
    MODOP           reduce using rule 185 (type_specifier -> VOLATILE .)
    PLUSOP          reduce using rule 185 (type_specifier -> VOLATILE .)
    MINUSOP         reduce using rule 185 (type_specifier -> VOLATILE .)
    LSHIFT          reduce using rule 185 (type_specifier -> VOLATILE .)
    RSHIFT          reduce using rule 185 (type_specifier -> VOLATILE .)
    GTCOMP          reduce using rule 185 (type_specifier -> VOLATILE .)
    LTECOMP         reduce using rule 185 (type_specifier -> VOLATILE .)
    GTECOMP         reduce using rule 185 (type_specifier -> VOLATILE .)
    EQCOMP          reduce using rule 185 (type_specifier -> VOLATILE .)
    NEQCOMP         reduce using rule 185 (type_specifier -> VOLATILE .)
    XOROP           reduce using rule 185 (type_specifier -> VOLATILE .)
    OROP            reduce using rule 185 (type_specifier -> VOLATILE .)
    ANDOP           reduce using rule 185 (type_specifier -> VOLATILE .)
    QUESMARK        reduce using rule 185 (type_specifier -> VOLATILE .)
    RSPAREN         reduce using rule 185 (type_specifier -> VOLATILE .)
    RCPAREN         reduce using rule 185 (type_specifier -> VOLATILE .)


state 32

    (178) fct_specifier -> INLINE .

    SEMICOLON       reduce using rule 178 (fct_specifier -> INLINE .)
    TYPEDEF         reduce using rule 178 (fct_specifier -> INLINE .)
    LPAREN          reduce using rule 178 (fct_specifier -> INLINE .)
    AUTO            reduce using rule 178 (fct_specifier -> INLINE .)
    STATIC          reduce using rule 178 (fct_specifier -> INLINE .)
    EXTERN          reduce using rule 178 (fct_specifier -> INLINE .)
    CONST           reduce using rule 178 (fct_specifier -> INLINE .)
    VOLATILE        reduce using rule 178 (fct_specifier -> INLINE .)
    INLINE          reduce using rule 178 (fct_specifier -> INLINE .)
    VIRTUAL         reduce using rule 178 (fct_specifier -> INLINE .)
    BNOP            reduce using rule 178 (fct_specifier -> INLINE .)
    MULTOP          reduce using rule 178 (fct_specifier -> INLINE .)
    BANDOP          reduce using rule 178 (fct_specifier -> INLINE .)
    CHAR            reduce using rule 178 (fct_specifier -> INLINE .)
    SHORT           reduce using rule 178 (fct_specifier -> INLINE .)
    INT             reduce using rule 178 (fct_specifier -> INLINE .)
    LONG            reduce using rule 178 (fct_specifier -> INLINE .)
    SIGNED          reduce using rule 178 (fct_specifier -> INLINE .)
    UNSIGNED        reduce using rule 178 (fct_specifier -> INLINE .)
    FLOAT           reduce using rule 178 (fct_specifier -> INLINE .)
    DOUBLE          reduce using rule 178 (fct_specifier -> INLINE .)
    VOID            reduce using rule 178 (fct_specifier -> INLINE .)
    ENUM            reduce using rule 178 (fct_specifier -> INLINE .)
    IDENTIFIER      reduce using rule 178 (fct_specifier -> INLINE .)
    DOUBLECOLON     reduce using rule 178 (fct_specifier -> INLINE .)
    CLASS           reduce using rule 178 (fct_specifier -> INLINE .)
    STRUCT          reduce using rule 178 (fct_specifier -> INLINE .)
    UNION           reduce using rule 178 (fct_specifier -> INLINE .)
    TEMPLATE        reduce using rule 178 (fct_specifier -> INLINE .)
    OPERATOR        reduce using rule 178 (fct_specifier -> INLINE .)
    EQUAL           reduce using rule 178 (fct_specifier -> INLINE .)
    LSPAREN         reduce using rule 178 (fct_specifier -> INLINE .)
    COMMA           reduce using rule 178 (fct_specifier -> INLINE .)
    RPAREN          reduce using rule 178 (fct_specifier -> INLINE .)
    GTCOMP          reduce using rule 178 (fct_specifier -> INLINE .)
    COLON           reduce using rule 178 (fct_specifier -> INLINE .)


state 33

    (179) fct_specifier -> VIRTUAL .

    SEMICOLON       reduce using rule 179 (fct_specifier -> VIRTUAL .)
    TYPEDEF         reduce using rule 179 (fct_specifier -> VIRTUAL .)
    LPAREN          reduce using rule 179 (fct_specifier -> VIRTUAL .)
    AUTO            reduce using rule 179 (fct_specifier -> VIRTUAL .)
    STATIC          reduce using rule 179 (fct_specifier -> VIRTUAL .)
    EXTERN          reduce using rule 179 (fct_specifier -> VIRTUAL .)
    CONST           reduce using rule 179 (fct_specifier -> VIRTUAL .)
    VOLATILE        reduce using rule 179 (fct_specifier -> VIRTUAL .)
    INLINE          reduce using rule 179 (fct_specifier -> VIRTUAL .)
    VIRTUAL         reduce using rule 179 (fct_specifier -> VIRTUAL .)
    BNOP            reduce using rule 179 (fct_specifier -> VIRTUAL .)
    MULTOP          reduce using rule 179 (fct_specifier -> VIRTUAL .)
    BANDOP          reduce using rule 179 (fct_specifier -> VIRTUAL .)
    CHAR            reduce using rule 179 (fct_specifier -> VIRTUAL .)
    SHORT           reduce using rule 179 (fct_specifier -> VIRTUAL .)
    INT             reduce using rule 179 (fct_specifier -> VIRTUAL .)
    LONG            reduce using rule 179 (fct_specifier -> VIRTUAL .)
    SIGNED          reduce using rule 179 (fct_specifier -> VIRTUAL .)
    UNSIGNED        reduce using rule 179 (fct_specifier -> VIRTUAL .)
    FLOAT           reduce using rule 179 (fct_specifier -> VIRTUAL .)
    DOUBLE          reduce using rule 179 (fct_specifier -> VIRTUAL .)
    VOID            reduce using rule 179 (fct_specifier -> VIRTUAL .)
    ENUM            reduce using rule 179 (fct_specifier -> VIRTUAL .)
    IDENTIFIER      reduce using rule 179 (fct_specifier -> VIRTUAL .)
    DOUBLECOLON     reduce using rule 179 (fct_specifier -> VIRTUAL .)
    CLASS           reduce using rule 179 (fct_specifier -> VIRTUAL .)
    STRUCT          reduce using rule 179 (fct_specifier -> VIRTUAL .)
    UNION           reduce using rule 179 (fct_specifier -> VIRTUAL .)
    TEMPLATE        reduce using rule 179 (fct_specifier -> VIRTUAL .)
    OPERATOR        reduce using rule 179 (fct_specifier -> VIRTUAL .)
    EQUAL           reduce using rule 179 (fct_specifier -> VIRTUAL .)
    LSPAREN         reduce using rule 179 (fct_specifier -> VIRTUAL .)
    COMMA           reduce using rule 179 (fct_specifier -> VIRTUAL .)
    RPAREN          reduce using rule 179 (fct_specifier -> VIRTUAL .)
    GTCOMP          reduce using rule 179 (fct_specifier -> VIRTUAL .)
    COLON           reduce using rule 179 (fct_specifier -> VIRTUAL .)


state 34

    (298) dname -> name .

    LPAREN          reduce using rule 298 (dname -> name .)
    LSPAREN         reduce using rule 298 (dname -> name .)
    COLON           reduce using rule 298 (dname -> name .)
    EQUAL           reduce using rule 298 (dname -> name .)
    LCPAREN         reduce using rule 298 (dname -> name .)
    SEMICOLON       reduce using rule 298 (dname -> name .)
    COMMA           reduce using rule 298 (dname -> name .)
    RPAREN          reduce using rule 298 (dname -> name .)
    GTCOMP          reduce using rule 298 (dname -> name .)


state 35

    (299) dname -> class_name .
    (391) qualified_type_name -> class_name . DOUBLECOLON qualified_type_name
    (405) qualified_class_name -> class_name .
    (406) qualified_class_name -> class_name . DOUBLECOLON qualified_class_name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 299 (dname -> class_name .)
  ! reduce/reduce conflict for LPAREN resolved using rule 299 (dname -> class_name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 299 (dname -> class_name .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 299 (dname -> class_name .)
  ! reduce/reduce conflict for COMMA resolved using rule 299 (dname -> class_name .)
  ! reduce/reduce conflict for RPAREN resolved using rule 299 (dname -> class_name .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 299 (dname -> class_name .)
  ! reduce/reduce conflict for COLON resolved using rule 299 (dname -> class_name .)
    LPAREN          reduce using rule 299 (dname -> class_name .)
    LSPAREN         reduce using rule 299 (dname -> class_name .)
    COLON           reduce using rule 299 (dname -> class_name .)
    EQUAL           reduce using rule 299 (dname -> class_name .)
    LCPAREN         reduce using rule 299 (dname -> class_name .)
    SEMICOLON       reduce using rule 299 (dname -> class_name .)
    COMMA           reduce using rule 299 (dname -> class_name .)
    RPAREN          reduce using rule 299 (dname -> class_name .)
    GTCOMP          reduce using rule 299 (dname -> class_name .)
    DOUBLECOLON     shift and go to state 89
    TYPEDEF         reduce using rule 405 (qualified_class_name -> class_name .)
    AUTO            reduce using rule 405 (qualified_class_name -> class_name .)
    STATIC          reduce using rule 405 (qualified_class_name -> class_name .)
    EXTERN          reduce using rule 405 (qualified_class_name -> class_name .)
    CONST           reduce using rule 405 (qualified_class_name -> class_name .)
    VOLATILE        reduce using rule 405 (qualified_class_name -> class_name .)
    INLINE          reduce using rule 405 (qualified_class_name -> class_name .)
    VIRTUAL         reduce using rule 405 (qualified_class_name -> class_name .)
    BNOP            reduce using rule 405 (qualified_class_name -> class_name .)
    MULTOP          reduce using rule 405 (qualified_class_name -> class_name .)
    BANDOP          reduce using rule 405 (qualified_class_name -> class_name .)
    CHAR            reduce using rule 405 (qualified_class_name -> class_name .)
    SHORT           reduce using rule 405 (qualified_class_name -> class_name .)
    INT             reduce using rule 405 (qualified_class_name -> class_name .)
    LONG            reduce using rule 405 (qualified_class_name -> class_name .)
    SIGNED          reduce using rule 405 (qualified_class_name -> class_name .)
    UNSIGNED        reduce using rule 405 (qualified_class_name -> class_name .)
    FLOAT           reduce using rule 405 (qualified_class_name -> class_name .)
    DOUBLE          reduce using rule 405 (qualified_class_name -> class_name .)
    VOID            reduce using rule 405 (qualified_class_name -> class_name .)
    ENUM            reduce using rule 405 (qualified_class_name -> class_name .)
    IDENTIFIER      reduce using rule 405 (qualified_class_name -> class_name .)
    CLASS           reduce using rule 405 (qualified_class_name -> class_name .)
    STRUCT          reduce using rule 405 (qualified_class_name -> class_name .)
    UNION           reduce using rule 405 (qualified_class_name -> class_name .)
    TEMPLATE        reduce using rule 405 (qualified_class_name -> class_name .)
    OPERATOR        reduce using rule 405 (qualified_class_name -> class_name .)

  ! DOUBLECOLON     [ reduce using rule 405 (qualified_class_name -> class_name .) ]
  ! SEMICOLON       [ reduce using rule 405 (qualified_class_name -> class_name .) ]
  ! LPAREN          [ reduce using rule 405 (qualified_class_name -> class_name .) ]
  ! EQUAL           [ reduce using rule 405 (qualified_class_name -> class_name .) ]
  ! LSPAREN         [ reduce using rule 405 (qualified_class_name -> class_name .) ]
  ! COMMA           [ reduce using rule 405 (qualified_class_name -> class_name .) ]
  ! RPAREN          [ reduce using rule 405 (qualified_class_name -> class_name .) ]
  ! GTCOMP          [ reduce using rule 405 (qualified_class_name -> class_name .) ]
  ! COLON           [ reduce using rule 405 (qualified_class_name -> class_name .) ]


state 36

    (300) dname -> BNOP . class_name
    (306) name -> BNOP . class_name
    (407) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 91

    class_name                     shift and go to state 90

state 37

    (301) dname -> typedef_name .
    (390) qualified_type_name -> typedef_name .

  ! reduce/reduce conflict for LPAREN resolved using rule 301 (dname -> typedef_name .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 301 (dname -> typedef_name .)
  ! reduce/reduce conflict for COLON resolved using rule 301 (dname -> typedef_name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 301 (dname -> typedef_name .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 301 (dname -> typedef_name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 301 (dname -> typedef_name .)
  ! reduce/reduce conflict for COMMA resolved using rule 301 (dname -> typedef_name .)
  ! reduce/reduce conflict for RPAREN resolved using rule 301 (dname -> typedef_name .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 301 (dname -> typedef_name .)
    LPAREN          reduce using rule 301 (dname -> typedef_name .)
    LSPAREN         reduce using rule 301 (dname -> typedef_name .)
    COLON           reduce using rule 301 (dname -> typedef_name .)
    EQUAL           reduce using rule 301 (dname -> typedef_name .)
    LCPAREN         reduce using rule 301 (dname -> typedef_name .)
    SEMICOLON       reduce using rule 301 (dname -> typedef_name .)
    COMMA           reduce using rule 301 (dname -> typedef_name .)
    RPAREN          reduce using rule 301 (dname -> typedef_name .)
    GTCOMP          reduce using rule 301 (dname -> typedef_name .)
    TYPEDEF         reduce using rule 390 (qualified_type_name -> typedef_name .)
    AUTO            reduce using rule 390 (qualified_type_name -> typedef_name .)
    STATIC          reduce using rule 390 (qualified_type_name -> typedef_name .)
    EXTERN          reduce using rule 390 (qualified_type_name -> typedef_name .)
    CONST           reduce using rule 390 (qualified_type_name -> typedef_name .)
    VOLATILE        reduce using rule 390 (qualified_type_name -> typedef_name .)
    INLINE          reduce using rule 390 (qualified_type_name -> typedef_name .)
    VIRTUAL         reduce using rule 390 (qualified_type_name -> typedef_name .)
    BNOP            reduce using rule 390 (qualified_type_name -> typedef_name .)
    MULTOP          reduce using rule 390 (qualified_type_name -> typedef_name .)
    BANDOP          reduce using rule 390 (qualified_type_name -> typedef_name .)
    CHAR            reduce using rule 390 (qualified_type_name -> typedef_name .)
    SHORT           reduce using rule 390 (qualified_type_name -> typedef_name .)
    INT             reduce using rule 390 (qualified_type_name -> typedef_name .)
    LONG            reduce using rule 390 (qualified_type_name -> typedef_name .)
    SIGNED          reduce using rule 390 (qualified_type_name -> typedef_name .)
    UNSIGNED        reduce using rule 390 (qualified_type_name -> typedef_name .)
    FLOAT           reduce using rule 390 (qualified_type_name -> typedef_name .)
    DOUBLE          reduce using rule 390 (qualified_type_name -> typedef_name .)
    VOID            reduce using rule 390 (qualified_type_name -> typedef_name .)
    ENUM            reduce using rule 390 (qualified_type_name -> typedef_name .)
    IDENTIFIER      reduce using rule 390 (qualified_type_name -> typedef_name .)
    DOUBLECOLON     reduce using rule 390 (qualified_type_name -> typedef_name .)
    CLASS           reduce using rule 390 (qualified_type_name -> typedef_name .)
    STRUCT          reduce using rule 390 (qualified_type_name -> typedef_name .)
    UNION           reduce using rule 390 (qualified_type_name -> typedef_name .)
    TEMPLATE        reduce using rule 390 (qualified_type_name -> typedef_name .)
    OPERATOR        reduce using rule 390 (qualified_type_name -> typedef_name .)

  ! LPAREN          [ reduce using rule 390 (qualified_type_name -> typedef_name .) ]
  ! LSPAREN         [ reduce using rule 390 (qualified_type_name -> typedef_name .) ]
  ! COLON           [ reduce using rule 390 (qualified_type_name -> typedef_name .) ]
  ! EQUAL           [ reduce using rule 390 (qualified_type_name -> typedef_name .) ]
  ! LCPAREN         [ reduce using rule 390 (qualified_type_name -> typedef_name .) ]
  ! SEMICOLON       [ reduce using rule 390 (qualified_type_name -> typedef_name .) ]
  ! COMMA           [ reduce using rule 390 (qualified_type_name -> typedef_name .) ]
  ! RPAREN          [ reduce using rule 390 (qualified_type_name -> typedef_name .) ]
  ! GTCOMP          [ reduce using rule 390 (qualified_type_name -> typedef_name .) ]


state 38

    (302) dname -> qualified_type_name .
    (380) simple_type_name -> qualified_type_name .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 302 (dname -> qualified_type_name .)
  ! reduce/reduce conflict for LPAREN resolved using rule 302 (dname -> qualified_type_name .)
  ! reduce/reduce conflict for COLON resolved using rule 302 (dname -> qualified_type_name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 302 (dname -> qualified_type_name .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 302 (dname -> qualified_type_name .)
  ! reduce/reduce conflict for COMMA resolved using rule 302 (dname -> qualified_type_name .)
  ! reduce/reduce conflict for RPAREN resolved using rule 302 (dname -> qualified_type_name .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 302 (dname -> qualified_type_name .)
    LPAREN          reduce using rule 302 (dname -> qualified_type_name .)
    LSPAREN         reduce using rule 302 (dname -> qualified_type_name .)
    COLON           reduce using rule 302 (dname -> qualified_type_name .)
    EQUAL           reduce using rule 302 (dname -> qualified_type_name .)
    LCPAREN         reduce using rule 302 (dname -> qualified_type_name .)
    SEMICOLON       reduce using rule 302 (dname -> qualified_type_name .)
    COMMA           reduce using rule 302 (dname -> qualified_type_name .)
    RPAREN          reduce using rule 302 (dname -> qualified_type_name .)
    GTCOMP          reduce using rule 302 (dname -> qualified_type_name .)
    TYPEDEF         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    AUTO            reduce using rule 380 (simple_type_name -> qualified_type_name .)
    STATIC          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    EXTERN          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    CONST           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    VOLATILE        reduce using rule 380 (simple_type_name -> qualified_type_name .)
    INLINE          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    VIRTUAL         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    BNOP            reduce using rule 380 (simple_type_name -> qualified_type_name .)
    MULTOP          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    BANDOP          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    CHAR            reduce using rule 380 (simple_type_name -> qualified_type_name .)
    SHORT           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    INT             reduce using rule 380 (simple_type_name -> qualified_type_name .)
    LONG            reduce using rule 380 (simple_type_name -> qualified_type_name .)
    SIGNED          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    UNSIGNED        reduce using rule 380 (simple_type_name -> qualified_type_name .)
    FLOAT           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    DOUBLE          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    VOID            reduce using rule 380 (simple_type_name -> qualified_type_name .)
    ENUM            reduce using rule 380 (simple_type_name -> qualified_type_name .)
    IDENTIFIER      reduce using rule 380 (simple_type_name -> qualified_type_name .)
    DOUBLECOLON     reduce using rule 380 (simple_type_name -> qualified_type_name .)
    CLASS           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    STRUCT          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    UNION           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    TEMPLATE        reduce using rule 380 (simple_type_name -> qualified_type_name .)
    OPERATOR        reduce using rule 380 (simple_type_name -> qualified_type_name .)

  ! SEMICOLON       [ reduce using rule 380 (simple_type_name -> qualified_type_name .) ]
  ! LPAREN          [ reduce using rule 380 (simple_type_name -> qualified_type_name .) ]
  ! COLON           [ reduce using rule 380 (simple_type_name -> qualified_type_name .) ]
  ! EQUAL           [ reduce using rule 380 (simple_type_name -> qualified_type_name .) ]
  ! LSPAREN         [ reduce using rule 380 (simple_type_name -> qualified_type_name .) ]
  ! COMMA           [ reduce using rule 380 (simple_type_name -> qualified_type_name .) ]
  ! RPAREN          [ reduce using rule 380 (simple_type_name -> qualified_type_name .) ]
  ! GTCOMP          [ reduce using rule 380 (simple_type_name -> qualified_type_name .) ]


state 39

    (393) ptr_operator -> MULTOP . cv_qualifier_list
    (394) ptr_operator -> MULTOP .
    (399) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (400) cv_qualifier_list -> . cv_qualifier
    (401) cv_qualifier -> . CONST
    (402) cv_qualifier -> . VOLATILE

    LPAREN          reduce using rule 394 (ptr_operator -> MULTOP .)
    BNOP            reduce using rule 394 (ptr_operator -> MULTOP .)
    MULTOP          reduce using rule 394 (ptr_operator -> MULTOP .)
    BANDOP          reduce using rule 394 (ptr_operator -> MULTOP .)
    IDENTIFIER      reduce using rule 394 (ptr_operator -> MULTOP .)
    DOUBLECOLON     reduce using rule 394 (ptr_operator -> MULTOP .)
    OPERATOR        reduce using rule 394 (ptr_operator -> MULTOP .)
    LSPAREN         reduce using rule 394 (ptr_operator -> MULTOP .)
    COLON           reduce using rule 394 (ptr_operator -> MULTOP .)
    EQUAL           reduce using rule 394 (ptr_operator -> MULTOP .)
    LCPAREN         reduce using rule 394 (ptr_operator -> MULTOP .)
    SEMICOLON       reduce using rule 394 (ptr_operator -> MULTOP .)
    COMMA           reduce using rule 394 (ptr_operator -> MULTOP .)
    RPAREN          reduce using rule 394 (ptr_operator -> MULTOP .)
    DOT             reduce using rule 394 (ptr_operator -> MULTOP .)
    ARROW           reduce using rule 394 (ptr_operator -> MULTOP .)
    DPLUSOP         reduce using rule 394 (ptr_operator -> MULTOP .)
    DMINUSOP        reduce using rule 394 (ptr_operator -> MULTOP .)
    LTCOMP          reduce using rule 394 (ptr_operator -> MULTOP .)
    MULTEQOP        reduce using rule 394 (ptr_operator -> MULTOP .)
    DIVEQOP         reduce using rule 394 (ptr_operator -> MULTOP .)
    MODEQOP         reduce using rule 394 (ptr_operator -> MULTOP .)
    PLUSEQOP        reduce using rule 394 (ptr_operator -> MULTOP .)
    MINUSEQOP       reduce using rule 394 (ptr_operator -> MULTOP .)
    LSHIFTEQOP      reduce using rule 394 (ptr_operator -> MULTOP .)
    RSHIFTEQOP      reduce using rule 394 (ptr_operator -> MULTOP .)
    BANDEQOP        reduce using rule 394 (ptr_operator -> MULTOP .)
    BOREQOP         reduce using rule 394 (ptr_operator -> MULTOP .)
    DOTSTAR         reduce using rule 394 (ptr_operator -> MULTOP .)
    ARROWSTAR       reduce using rule 394 (ptr_operator -> MULTOP .)
    DIVOP           reduce using rule 394 (ptr_operator -> MULTOP .)
    MODOP           reduce using rule 394 (ptr_operator -> MULTOP .)
    PLUSOP          reduce using rule 394 (ptr_operator -> MULTOP .)
    MINUSOP         reduce using rule 394 (ptr_operator -> MULTOP .)
    LSHIFT          reduce using rule 394 (ptr_operator -> MULTOP .)
    RSHIFT          reduce using rule 394 (ptr_operator -> MULTOP .)
    GTCOMP          reduce using rule 394 (ptr_operator -> MULTOP .)
    LTECOMP         reduce using rule 394 (ptr_operator -> MULTOP .)
    GTECOMP         reduce using rule 394 (ptr_operator -> MULTOP .)
    EQCOMP          reduce using rule 394 (ptr_operator -> MULTOP .)
    NEQCOMP         reduce using rule 394 (ptr_operator -> MULTOP .)
    XOROP           reduce using rule 394 (ptr_operator -> MULTOP .)
    OROP            reduce using rule 394 (ptr_operator -> MULTOP .)
    ANDOP           reduce using rule 394 (ptr_operator -> MULTOP .)
    QUESMARK        reduce using rule 394 (ptr_operator -> MULTOP .)
    RSPAREN         reduce using rule 394 (ptr_operator -> MULTOP .)
    RCPAREN         reduce using rule 394 (ptr_operator -> MULTOP .)
    CONST           shift and go to state 94
    VOLATILE        shift and go to state 95

    cv_qualifier_list              shift and go to state 92
    cv_qualifier                   shift and go to state 93

state 40

    (395) ptr_operator -> BANDOP . cv_qualifier_list
    (396) ptr_operator -> BANDOP .
    (399) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (400) cv_qualifier_list -> . cv_qualifier
    (401) cv_qualifier -> . CONST
    (402) cv_qualifier -> . VOLATILE

    LPAREN          reduce using rule 396 (ptr_operator -> BANDOP .)
    BNOP            reduce using rule 396 (ptr_operator -> BANDOP .)
    MULTOP          reduce using rule 396 (ptr_operator -> BANDOP .)
    BANDOP          reduce using rule 396 (ptr_operator -> BANDOP .)
    IDENTIFIER      reduce using rule 396 (ptr_operator -> BANDOP .)
    DOUBLECOLON     reduce using rule 396 (ptr_operator -> BANDOP .)
    OPERATOR        reduce using rule 396 (ptr_operator -> BANDOP .)
    LSPAREN         reduce using rule 396 (ptr_operator -> BANDOP .)
    COLON           reduce using rule 396 (ptr_operator -> BANDOP .)
    EQUAL           reduce using rule 396 (ptr_operator -> BANDOP .)
    LCPAREN         reduce using rule 396 (ptr_operator -> BANDOP .)
    SEMICOLON       reduce using rule 396 (ptr_operator -> BANDOP .)
    COMMA           reduce using rule 396 (ptr_operator -> BANDOP .)
    RPAREN          reduce using rule 396 (ptr_operator -> BANDOP .)
    DOT             reduce using rule 396 (ptr_operator -> BANDOP .)
    ARROW           reduce using rule 396 (ptr_operator -> BANDOP .)
    DPLUSOP         reduce using rule 396 (ptr_operator -> BANDOP .)
    DMINUSOP        reduce using rule 396 (ptr_operator -> BANDOP .)
    LTCOMP          reduce using rule 396 (ptr_operator -> BANDOP .)
    MULTEQOP        reduce using rule 396 (ptr_operator -> BANDOP .)
    DIVEQOP         reduce using rule 396 (ptr_operator -> BANDOP .)
    MODEQOP         reduce using rule 396 (ptr_operator -> BANDOP .)
    PLUSEQOP        reduce using rule 396 (ptr_operator -> BANDOP .)
    MINUSEQOP       reduce using rule 396 (ptr_operator -> BANDOP .)
    LSHIFTEQOP      reduce using rule 396 (ptr_operator -> BANDOP .)
    RSHIFTEQOP      reduce using rule 396 (ptr_operator -> BANDOP .)
    BANDEQOP        reduce using rule 396 (ptr_operator -> BANDOP .)
    BOREQOP         reduce using rule 396 (ptr_operator -> BANDOP .)
    DOTSTAR         reduce using rule 396 (ptr_operator -> BANDOP .)
    ARROWSTAR       reduce using rule 396 (ptr_operator -> BANDOP .)
    DIVOP           reduce using rule 396 (ptr_operator -> BANDOP .)
    MODOP           reduce using rule 396 (ptr_operator -> BANDOP .)
    PLUSOP          reduce using rule 396 (ptr_operator -> BANDOP .)
    MINUSOP         reduce using rule 396 (ptr_operator -> BANDOP .)
    LSHIFT          reduce using rule 396 (ptr_operator -> BANDOP .)
    RSHIFT          reduce using rule 396 (ptr_operator -> BANDOP .)
    GTCOMP          reduce using rule 396 (ptr_operator -> BANDOP .)
    LTECOMP         reduce using rule 396 (ptr_operator -> BANDOP .)
    GTECOMP         reduce using rule 396 (ptr_operator -> BANDOP .)
    EQCOMP          reduce using rule 396 (ptr_operator -> BANDOP .)
    NEQCOMP         reduce using rule 396 (ptr_operator -> BANDOP .)
    XOROP           reduce using rule 396 (ptr_operator -> BANDOP .)
    OROP            reduce using rule 396 (ptr_operator -> BANDOP .)
    ANDOP           reduce using rule 396 (ptr_operator -> BANDOP .)
    QUESMARK        reduce using rule 396 (ptr_operator -> BANDOP .)
    RSPAREN         reduce using rule 396 (ptr_operator -> BANDOP .)
    RCPAREN         reduce using rule 396 (ptr_operator -> BANDOP .)
    CONST           shift and go to state 94
    VOLATILE        shift and go to state 95

    cv_qualifier_list              shift and go to state 96
    cv_qualifier                   shift and go to state 93

state 41

    (397) ptr_operator -> complete_class_name . DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> complete_class_name . DOUBLECOLON MULTOP
    (379) simple_type_name -> complete_class_name .

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    DOUBLECOLON     shift and go to state 97
    SEMICOLON       reduce using rule 379 (simple_type_name -> complete_class_name .)
    TYPEDEF         reduce using rule 379 (simple_type_name -> complete_class_name .)
    LPAREN          reduce using rule 379 (simple_type_name -> complete_class_name .)
    AUTO            reduce using rule 379 (simple_type_name -> complete_class_name .)
    STATIC          reduce using rule 379 (simple_type_name -> complete_class_name .)
    EXTERN          reduce using rule 379 (simple_type_name -> complete_class_name .)
    CONST           reduce using rule 379 (simple_type_name -> complete_class_name .)
    VOLATILE        reduce using rule 379 (simple_type_name -> complete_class_name .)
    INLINE          reduce using rule 379 (simple_type_name -> complete_class_name .)
    VIRTUAL         reduce using rule 379 (simple_type_name -> complete_class_name .)
    BNOP            reduce using rule 379 (simple_type_name -> complete_class_name .)
    MULTOP          reduce using rule 379 (simple_type_name -> complete_class_name .)
    BANDOP          reduce using rule 379 (simple_type_name -> complete_class_name .)
    CHAR            reduce using rule 379 (simple_type_name -> complete_class_name .)
    SHORT           reduce using rule 379 (simple_type_name -> complete_class_name .)
    INT             reduce using rule 379 (simple_type_name -> complete_class_name .)
    LONG            reduce using rule 379 (simple_type_name -> complete_class_name .)
    SIGNED          reduce using rule 379 (simple_type_name -> complete_class_name .)
    UNSIGNED        reduce using rule 379 (simple_type_name -> complete_class_name .)
    FLOAT           reduce using rule 379 (simple_type_name -> complete_class_name .)
    DOUBLE          reduce using rule 379 (simple_type_name -> complete_class_name .)
    VOID            reduce using rule 379 (simple_type_name -> complete_class_name .)
    ENUM            reduce using rule 379 (simple_type_name -> complete_class_name .)
    IDENTIFIER      reduce using rule 379 (simple_type_name -> complete_class_name .)
    CLASS           reduce using rule 379 (simple_type_name -> complete_class_name .)
    STRUCT          reduce using rule 379 (simple_type_name -> complete_class_name .)
    UNION           reduce using rule 379 (simple_type_name -> complete_class_name .)
    TEMPLATE        reduce using rule 379 (simple_type_name -> complete_class_name .)
    OPERATOR        reduce using rule 379 (simple_type_name -> complete_class_name .)
    COLON           reduce using rule 379 (simple_type_name -> complete_class_name .)
    EQUAL           reduce using rule 379 (simple_type_name -> complete_class_name .)
    LSPAREN         reduce using rule 379 (simple_type_name -> complete_class_name .)
    COMMA           reduce using rule 379 (simple_type_name -> complete_class_name .)
    RPAREN          reduce using rule 379 (simple_type_name -> complete_class_name .)
    GTCOMP          reduce using rule 379 (simple_type_name -> complete_class_name .)

  ! DOUBLECOLON     [ reduce using rule 379 (simple_type_name -> complete_class_name .) ]


state 42

    (404) complete_class_name -> DOUBLECOLON . qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 91

    qualified_class_name           shift and go to state 98
    class_name                     shift and go to state 99

state 43

    (381) simple_type_name -> CHAR .

    SEMICOLON       reduce using rule 381 (simple_type_name -> CHAR .)
    TYPEDEF         reduce using rule 381 (simple_type_name -> CHAR .)
    LPAREN          reduce using rule 381 (simple_type_name -> CHAR .)
    AUTO            reduce using rule 381 (simple_type_name -> CHAR .)
    STATIC          reduce using rule 381 (simple_type_name -> CHAR .)
    EXTERN          reduce using rule 381 (simple_type_name -> CHAR .)
    CONST           reduce using rule 381 (simple_type_name -> CHAR .)
    VOLATILE        reduce using rule 381 (simple_type_name -> CHAR .)
    INLINE          reduce using rule 381 (simple_type_name -> CHAR .)
    VIRTUAL         reduce using rule 381 (simple_type_name -> CHAR .)
    BNOP            reduce using rule 381 (simple_type_name -> CHAR .)
    MULTOP          reduce using rule 381 (simple_type_name -> CHAR .)
    BANDOP          reduce using rule 381 (simple_type_name -> CHAR .)
    CHAR            reduce using rule 381 (simple_type_name -> CHAR .)
    SHORT           reduce using rule 381 (simple_type_name -> CHAR .)
    INT             reduce using rule 381 (simple_type_name -> CHAR .)
    LONG            reduce using rule 381 (simple_type_name -> CHAR .)
    SIGNED          reduce using rule 381 (simple_type_name -> CHAR .)
    UNSIGNED        reduce using rule 381 (simple_type_name -> CHAR .)
    FLOAT           reduce using rule 381 (simple_type_name -> CHAR .)
    DOUBLE          reduce using rule 381 (simple_type_name -> CHAR .)
    VOID            reduce using rule 381 (simple_type_name -> CHAR .)
    ENUM            reduce using rule 381 (simple_type_name -> CHAR .)
    IDENTIFIER      reduce using rule 381 (simple_type_name -> CHAR .)
    DOUBLECOLON     reduce using rule 381 (simple_type_name -> CHAR .)
    CLASS           reduce using rule 381 (simple_type_name -> CHAR .)
    STRUCT          reduce using rule 381 (simple_type_name -> CHAR .)
    UNION           reduce using rule 381 (simple_type_name -> CHAR .)
    TEMPLATE        reduce using rule 381 (simple_type_name -> CHAR .)
    OPERATOR        reduce using rule 381 (simple_type_name -> CHAR .)
    LSPAREN         reduce using rule 381 (simple_type_name -> CHAR .)
    COLON           reduce using rule 381 (simple_type_name -> CHAR .)
    EQUAL           reduce using rule 381 (simple_type_name -> CHAR .)
    LCPAREN         reduce using rule 381 (simple_type_name -> CHAR .)
    COMMA           reduce using rule 381 (simple_type_name -> CHAR .)
    RPAREN          reduce using rule 381 (simple_type_name -> CHAR .)
    DOT             reduce using rule 381 (simple_type_name -> CHAR .)
    ARROW           reduce using rule 381 (simple_type_name -> CHAR .)
    DPLUSOP         reduce using rule 381 (simple_type_name -> CHAR .)
    DMINUSOP        reduce using rule 381 (simple_type_name -> CHAR .)
    LTCOMP          reduce using rule 381 (simple_type_name -> CHAR .)
    MULTEQOP        reduce using rule 381 (simple_type_name -> CHAR .)
    DIVEQOP         reduce using rule 381 (simple_type_name -> CHAR .)
    MODEQOP         reduce using rule 381 (simple_type_name -> CHAR .)
    PLUSEQOP        reduce using rule 381 (simple_type_name -> CHAR .)
    MINUSEQOP       reduce using rule 381 (simple_type_name -> CHAR .)
    LSHIFTEQOP      reduce using rule 381 (simple_type_name -> CHAR .)
    RSHIFTEQOP      reduce using rule 381 (simple_type_name -> CHAR .)
    BANDEQOP        reduce using rule 381 (simple_type_name -> CHAR .)
    BOREQOP         reduce using rule 381 (simple_type_name -> CHAR .)
    DOTSTAR         reduce using rule 381 (simple_type_name -> CHAR .)
    ARROWSTAR       reduce using rule 381 (simple_type_name -> CHAR .)
    DIVOP           reduce using rule 381 (simple_type_name -> CHAR .)
    MODOP           reduce using rule 381 (simple_type_name -> CHAR .)
    PLUSOP          reduce using rule 381 (simple_type_name -> CHAR .)
    MINUSOP         reduce using rule 381 (simple_type_name -> CHAR .)
    LSHIFT          reduce using rule 381 (simple_type_name -> CHAR .)
    RSHIFT          reduce using rule 381 (simple_type_name -> CHAR .)
    GTCOMP          reduce using rule 381 (simple_type_name -> CHAR .)
    LTECOMP         reduce using rule 381 (simple_type_name -> CHAR .)
    GTECOMP         reduce using rule 381 (simple_type_name -> CHAR .)
    EQCOMP          reduce using rule 381 (simple_type_name -> CHAR .)
    NEQCOMP         reduce using rule 381 (simple_type_name -> CHAR .)
    XOROP           reduce using rule 381 (simple_type_name -> CHAR .)
    OROP            reduce using rule 381 (simple_type_name -> CHAR .)
    ANDOP           reduce using rule 381 (simple_type_name -> CHAR .)
    QUESMARK        reduce using rule 381 (simple_type_name -> CHAR .)
    RSPAREN         reduce using rule 381 (simple_type_name -> CHAR .)
    RCPAREN         reduce using rule 381 (simple_type_name -> CHAR .)


state 44

    (382) simple_type_name -> SHORT .

    SEMICOLON       reduce using rule 382 (simple_type_name -> SHORT .)
    TYPEDEF         reduce using rule 382 (simple_type_name -> SHORT .)
    LPAREN          reduce using rule 382 (simple_type_name -> SHORT .)
    AUTO            reduce using rule 382 (simple_type_name -> SHORT .)
    STATIC          reduce using rule 382 (simple_type_name -> SHORT .)
    EXTERN          reduce using rule 382 (simple_type_name -> SHORT .)
    CONST           reduce using rule 382 (simple_type_name -> SHORT .)
    VOLATILE        reduce using rule 382 (simple_type_name -> SHORT .)
    INLINE          reduce using rule 382 (simple_type_name -> SHORT .)
    VIRTUAL         reduce using rule 382 (simple_type_name -> SHORT .)
    BNOP            reduce using rule 382 (simple_type_name -> SHORT .)
    MULTOP          reduce using rule 382 (simple_type_name -> SHORT .)
    BANDOP          reduce using rule 382 (simple_type_name -> SHORT .)
    CHAR            reduce using rule 382 (simple_type_name -> SHORT .)
    SHORT           reduce using rule 382 (simple_type_name -> SHORT .)
    INT             reduce using rule 382 (simple_type_name -> SHORT .)
    LONG            reduce using rule 382 (simple_type_name -> SHORT .)
    SIGNED          reduce using rule 382 (simple_type_name -> SHORT .)
    UNSIGNED        reduce using rule 382 (simple_type_name -> SHORT .)
    FLOAT           reduce using rule 382 (simple_type_name -> SHORT .)
    DOUBLE          reduce using rule 382 (simple_type_name -> SHORT .)
    VOID            reduce using rule 382 (simple_type_name -> SHORT .)
    ENUM            reduce using rule 382 (simple_type_name -> SHORT .)
    IDENTIFIER      reduce using rule 382 (simple_type_name -> SHORT .)
    DOUBLECOLON     reduce using rule 382 (simple_type_name -> SHORT .)
    CLASS           reduce using rule 382 (simple_type_name -> SHORT .)
    STRUCT          reduce using rule 382 (simple_type_name -> SHORT .)
    UNION           reduce using rule 382 (simple_type_name -> SHORT .)
    TEMPLATE        reduce using rule 382 (simple_type_name -> SHORT .)
    OPERATOR        reduce using rule 382 (simple_type_name -> SHORT .)
    LSPAREN         reduce using rule 382 (simple_type_name -> SHORT .)
    COLON           reduce using rule 382 (simple_type_name -> SHORT .)
    EQUAL           reduce using rule 382 (simple_type_name -> SHORT .)
    LCPAREN         reduce using rule 382 (simple_type_name -> SHORT .)
    COMMA           reduce using rule 382 (simple_type_name -> SHORT .)
    RPAREN          reduce using rule 382 (simple_type_name -> SHORT .)
    DOT             reduce using rule 382 (simple_type_name -> SHORT .)
    ARROW           reduce using rule 382 (simple_type_name -> SHORT .)
    DPLUSOP         reduce using rule 382 (simple_type_name -> SHORT .)
    DMINUSOP        reduce using rule 382 (simple_type_name -> SHORT .)
    LTCOMP          reduce using rule 382 (simple_type_name -> SHORT .)
    MULTEQOP        reduce using rule 382 (simple_type_name -> SHORT .)
    DIVEQOP         reduce using rule 382 (simple_type_name -> SHORT .)
    MODEQOP         reduce using rule 382 (simple_type_name -> SHORT .)
    PLUSEQOP        reduce using rule 382 (simple_type_name -> SHORT .)
    MINUSEQOP       reduce using rule 382 (simple_type_name -> SHORT .)
    LSHIFTEQOP      reduce using rule 382 (simple_type_name -> SHORT .)
    RSHIFTEQOP      reduce using rule 382 (simple_type_name -> SHORT .)
    BANDEQOP        reduce using rule 382 (simple_type_name -> SHORT .)
    BOREQOP         reduce using rule 382 (simple_type_name -> SHORT .)
    DOTSTAR         reduce using rule 382 (simple_type_name -> SHORT .)
    ARROWSTAR       reduce using rule 382 (simple_type_name -> SHORT .)
    DIVOP           reduce using rule 382 (simple_type_name -> SHORT .)
    MODOP           reduce using rule 382 (simple_type_name -> SHORT .)
    PLUSOP          reduce using rule 382 (simple_type_name -> SHORT .)
    MINUSOP         reduce using rule 382 (simple_type_name -> SHORT .)
    LSHIFT          reduce using rule 382 (simple_type_name -> SHORT .)
    RSHIFT          reduce using rule 382 (simple_type_name -> SHORT .)
    GTCOMP          reduce using rule 382 (simple_type_name -> SHORT .)
    LTECOMP         reduce using rule 382 (simple_type_name -> SHORT .)
    GTECOMP         reduce using rule 382 (simple_type_name -> SHORT .)
    EQCOMP          reduce using rule 382 (simple_type_name -> SHORT .)
    NEQCOMP         reduce using rule 382 (simple_type_name -> SHORT .)
    XOROP           reduce using rule 382 (simple_type_name -> SHORT .)
    OROP            reduce using rule 382 (simple_type_name -> SHORT .)
    ANDOP           reduce using rule 382 (simple_type_name -> SHORT .)
    QUESMARK        reduce using rule 382 (simple_type_name -> SHORT .)
    RSPAREN         reduce using rule 382 (simple_type_name -> SHORT .)
    RCPAREN         reduce using rule 382 (simple_type_name -> SHORT .)


state 45

    (383) simple_type_name -> INT .

    SEMICOLON       reduce using rule 383 (simple_type_name -> INT .)
    TYPEDEF         reduce using rule 383 (simple_type_name -> INT .)
    LPAREN          reduce using rule 383 (simple_type_name -> INT .)
    AUTO            reduce using rule 383 (simple_type_name -> INT .)
    STATIC          reduce using rule 383 (simple_type_name -> INT .)
    EXTERN          reduce using rule 383 (simple_type_name -> INT .)
    CONST           reduce using rule 383 (simple_type_name -> INT .)
    VOLATILE        reduce using rule 383 (simple_type_name -> INT .)
    INLINE          reduce using rule 383 (simple_type_name -> INT .)
    VIRTUAL         reduce using rule 383 (simple_type_name -> INT .)
    BNOP            reduce using rule 383 (simple_type_name -> INT .)
    MULTOP          reduce using rule 383 (simple_type_name -> INT .)
    BANDOP          reduce using rule 383 (simple_type_name -> INT .)
    CHAR            reduce using rule 383 (simple_type_name -> INT .)
    SHORT           reduce using rule 383 (simple_type_name -> INT .)
    INT             reduce using rule 383 (simple_type_name -> INT .)
    LONG            reduce using rule 383 (simple_type_name -> INT .)
    SIGNED          reduce using rule 383 (simple_type_name -> INT .)
    UNSIGNED        reduce using rule 383 (simple_type_name -> INT .)
    FLOAT           reduce using rule 383 (simple_type_name -> INT .)
    DOUBLE          reduce using rule 383 (simple_type_name -> INT .)
    VOID            reduce using rule 383 (simple_type_name -> INT .)
    ENUM            reduce using rule 383 (simple_type_name -> INT .)
    IDENTIFIER      reduce using rule 383 (simple_type_name -> INT .)
    DOUBLECOLON     reduce using rule 383 (simple_type_name -> INT .)
    CLASS           reduce using rule 383 (simple_type_name -> INT .)
    STRUCT          reduce using rule 383 (simple_type_name -> INT .)
    UNION           reduce using rule 383 (simple_type_name -> INT .)
    TEMPLATE        reduce using rule 383 (simple_type_name -> INT .)
    OPERATOR        reduce using rule 383 (simple_type_name -> INT .)
    LSPAREN         reduce using rule 383 (simple_type_name -> INT .)
    COLON           reduce using rule 383 (simple_type_name -> INT .)
    EQUAL           reduce using rule 383 (simple_type_name -> INT .)
    LCPAREN         reduce using rule 383 (simple_type_name -> INT .)
    COMMA           reduce using rule 383 (simple_type_name -> INT .)
    RPAREN          reduce using rule 383 (simple_type_name -> INT .)
    DOT             reduce using rule 383 (simple_type_name -> INT .)
    ARROW           reduce using rule 383 (simple_type_name -> INT .)
    DPLUSOP         reduce using rule 383 (simple_type_name -> INT .)
    DMINUSOP        reduce using rule 383 (simple_type_name -> INT .)
    LTCOMP          reduce using rule 383 (simple_type_name -> INT .)
    MULTEQOP        reduce using rule 383 (simple_type_name -> INT .)
    DIVEQOP         reduce using rule 383 (simple_type_name -> INT .)
    MODEQOP         reduce using rule 383 (simple_type_name -> INT .)
    PLUSEQOP        reduce using rule 383 (simple_type_name -> INT .)
    MINUSEQOP       reduce using rule 383 (simple_type_name -> INT .)
    LSHIFTEQOP      reduce using rule 383 (simple_type_name -> INT .)
    RSHIFTEQOP      reduce using rule 383 (simple_type_name -> INT .)
    BANDEQOP        reduce using rule 383 (simple_type_name -> INT .)
    BOREQOP         reduce using rule 383 (simple_type_name -> INT .)
    DOTSTAR         reduce using rule 383 (simple_type_name -> INT .)
    ARROWSTAR       reduce using rule 383 (simple_type_name -> INT .)
    DIVOP           reduce using rule 383 (simple_type_name -> INT .)
    MODOP           reduce using rule 383 (simple_type_name -> INT .)
    PLUSOP          reduce using rule 383 (simple_type_name -> INT .)
    MINUSOP         reduce using rule 383 (simple_type_name -> INT .)
    LSHIFT          reduce using rule 383 (simple_type_name -> INT .)
    RSHIFT          reduce using rule 383 (simple_type_name -> INT .)
    GTCOMP          reduce using rule 383 (simple_type_name -> INT .)
    LTECOMP         reduce using rule 383 (simple_type_name -> INT .)
    GTECOMP         reduce using rule 383 (simple_type_name -> INT .)
    EQCOMP          reduce using rule 383 (simple_type_name -> INT .)
    NEQCOMP         reduce using rule 383 (simple_type_name -> INT .)
    XOROP           reduce using rule 383 (simple_type_name -> INT .)
    OROP            reduce using rule 383 (simple_type_name -> INT .)
    ANDOP           reduce using rule 383 (simple_type_name -> INT .)
    QUESMARK        reduce using rule 383 (simple_type_name -> INT .)
    RSPAREN         reduce using rule 383 (simple_type_name -> INT .)
    RCPAREN         reduce using rule 383 (simple_type_name -> INT .)


state 46

    (384) simple_type_name -> LONG .

    SEMICOLON       reduce using rule 384 (simple_type_name -> LONG .)
    TYPEDEF         reduce using rule 384 (simple_type_name -> LONG .)
    LPAREN          reduce using rule 384 (simple_type_name -> LONG .)
    AUTO            reduce using rule 384 (simple_type_name -> LONG .)
    STATIC          reduce using rule 384 (simple_type_name -> LONG .)
    EXTERN          reduce using rule 384 (simple_type_name -> LONG .)
    CONST           reduce using rule 384 (simple_type_name -> LONG .)
    VOLATILE        reduce using rule 384 (simple_type_name -> LONG .)
    INLINE          reduce using rule 384 (simple_type_name -> LONG .)
    VIRTUAL         reduce using rule 384 (simple_type_name -> LONG .)
    BNOP            reduce using rule 384 (simple_type_name -> LONG .)
    MULTOP          reduce using rule 384 (simple_type_name -> LONG .)
    BANDOP          reduce using rule 384 (simple_type_name -> LONG .)
    CHAR            reduce using rule 384 (simple_type_name -> LONG .)
    SHORT           reduce using rule 384 (simple_type_name -> LONG .)
    INT             reduce using rule 384 (simple_type_name -> LONG .)
    LONG            reduce using rule 384 (simple_type_name -> LONG .)
    SIGNED          reduce using rule 384 (simple_type_name -> LONG .)
    UNSIGNED        reduce using rule 384 (simple_type_name -> LONG .)
    FLOAT           reduce using rule 384 (simple_type_name -> LONG .)
    DOUBLE          reduce using rule 384 (simple_type_name -> LONG .)
    VOID            reduce using rule 384 (simple_type_name -> LONG .)
    ENUM            reduce using rule 384 (simple_type_name -> LONG .)
    IDENTIFIER      reduce using rule 384 (simple_type_name -> LONG .)
    DOUBLECOLON     reduce using rule 384 (simple_type_name -> LONG .)
    CLASS           reduce using rule 384 (simple_type_name -> LONG .)
    STRUCT          reduce using rule 384 (simple_type_name -> LONG .)
    UNION           reduce using rule 384 (simple_type_name -> LONG .)
    TEMPLATE        reduce using rule 384 (simple_type_name -> LONG .)
    OPERATOR        reduce using rule 384 (simple_type_name -> LONG .)
    LSPAREN         reduce using rule 384 (simple_type_name -> LONG .)
    COLON           reduce using rule 384 (simple_type_name -> LONG .)
    EQUAL           reduce using rule 384 (simple_type_name -> LONG .)
    LCPAREN         reduce using rule 384 (simple_type_name -> LONG .)
    COMMA           reduce using rule 384 (simple_type_name -> LONG .)
    RPAREN          reduce using rule 384 (simple_type_name -> LONG .)
    DOT             reduce using rule 384 (simple_type_name -> LONG .)
    ARROW           reduce using rule 384 (simple_type_name -> LONG .)
    DPLUSOP         reduce using rule 384 (simple_type_name -> LONG .)
    DMINUSOP        reduce using rule 384 (simple_type_name -> LONG .)
    LTCOMP          reduce using rule 384 (simple_type_name -> LONG .)
    MULTEQOP        reduce using rule 384 (simple_type_name -> LONG .)
    DIVEQOP         reduce using rule 384 (simple_type_name -> LONG .)
    MODEQOP         reduce using rule 384 (simple_type_name -> LONG .)
    PLUSEQOP        reduce using rule 384 (simple_type_name -> LONG .)
    MINUSEQOP       reduce using rule 384 (simple_type_name -> LONG .)
    LSHIFTEQOP      reduce using rule 384 (simple_type_name -> LONG .)
    RSHIFTEQOP      reduce using rule 384 (simple_type_name -> LONG .)
    BANDEQOP        reduce using rule 384 (simple_type_name -> LONG .)
    BOREQOP         reduce using rule 384 (simple_type_name -> LONG .)
    DOTSTAR         reduce using rule 384 (simple_type_name -> LONG .)
    ARROWSTAR       reduce using rule 384 (simple_type_name -> LONG .)
    DIVOP           reduce using rule 384 (simple_type_name -> LONG .)
    MODOP           reduce using rule 384 (simple_type_name -> LONG .)
    PLUSOP          reduce using rule 384 (simple_type_name -> LONG .)
    MINUSOP         reduce using rule 384 (simple_type_name -> LONG .)
    LSHIFT          reduce using rule 384 (simple_type_name -> LONG .)
    RSHIFT          reduce using rule 384 (simple_type_name -> LONG .)
    GTCOMP          reduce using rule 384 (simple_type_name -> LONG .)
    LTECOMP         reduce using rule 384 (simple_type_name -> LONG .)
    GTECOMP         reduce using rule 384 (simple_type_name -> LONG .)
    EQCOMP          reduce using rule 384 (simple_type_name -> LONG .)
    NEQCOMP         reduce using rule 384 (simple_type_name -> LONG .)
    XOROP           reduce using rule 384 (simple_type_name -> LONG .)
    OROP            reduce using rule 384 (simple_type_name -> LONG .)
    ANDOP           reduce using rule 384 (simple_type_name -> LONG .)
    QUESMARK        reduce using rule 384 (simple_type_name -> LONG .)
    RSPAREN         reduce using rule 384 (simple_type_name -> LONG .)
    RCPAREN         reduce using rule 384 (simple_type_name -> LONG .)


state 47

    (385) simple_type_name -> SIGNED .

    SEMICOLON       reduce using rule 385 (simple_type_name -> SIGNED .)
    TYPEDEF         reduce using rule 385 (simple_type_name -> SIGNED .)
    LPAREN          reduce using rule 385 (simple_type_name -> SIGNED .)
    AUTO            reduce using rule 385 (simple_type_name -> SIGNED .)
    STATIC          reduce using rule 385 (simple_type_name -> SIGNED .)
    EXTERN          reduce using rule 385 (simple_type_name -> SIGNED .)
    CONST           reduce using rule 385 (simple_type_name -> SIGNED .)
    VOLATILE        reduce using rule 385 (simple_type_name -> SIGNED .)
    INLINE          reduce using rule 385 (simple_type_name -> SIGNED .)
    VIRTUAL         reduce using rule 385 (simple_type_name -> SIGNED .)
    BNOP            reduce using rule 385 (simple_type_name -> SIGNED .)
    MULTOP          reduce using rule 385 (simple_type_name -> SIGNED .)
    BANDOP          reduce using rule 385 (simple_type_name -> SIGNED .)
    CHAR            reduce using rule 385 (simple_type_name -> SIGNED .)
    SHORT           reduce using rule 385 (simple_type_name -> SIGNED .)
    INT             reduce using rule 385 (simple_type_name -> SIGNED .)
    LONG            reduce using rule 385 (simple_type_name -> SIGNED .)
    SIGNED          reduce using rule 385 (simple_type_name -> SIGNED .)
    UNSIGNED        reduce using rule 385 (simple_type_name -> SIGNED .)
    FLOAT           reduce using rule 385 (simple_type_name -> SIGNED .)
    DOUBLE          reduce using rule 385 (simple_type_name -> SIGNED .)
    VOID            reduce using rule 385 (simple_type_name -> SIGNED .)
    ENUM            reduce using rule 385 (simple_type_name -> SIGNED .)
    IDENTIFIER      reduce using rule 385 (simple_type_name -> SIGNED .)
    DOUBLECOLON     reduce using rule 385 (simple_type_name -> SIGNED .)
    CLASS           reduce using rule 385 (simple_type_name -> SIGNED .)
    STRUCT          reduce using rule 385 (simple_type_name -> SIGNED .)
    UNION           reduce using rule 385 (simple_type_name -> SIGNED .)
    TEMPLATE        reduce using rule 385 (simple_type_name -> SIGNED .)
    OPERATOR        reduce using rule 385 (simple_type_name -> SIGNED .)
    LSPAREN         reduce using rule 385 (simple_type_name -> SIGNED .)
    COLON           reduce using rule 385 (simple_type_name -> SIGNED .)
    EQUAL           reduce using rule 385 (simple_type_name -> SIGNED .)
    LCPAREN         reduce using rule 385 (simple_type_name -> SIGNED .)
    COMMA           reduce using rule 385 (simple_type_name -> SIGNED .)
    RPAREN          reduce using rule 385 (simple_type_name -> SIGNED .)
    DOT             reduce using rule 385 (simple_type_name -> SIGNED .)
    ARROW           reduce using rule 385 (simple_type_name -> SIGNED .)
    DPLUSOP         reduce using rule 385 (simple_type_name -> SIGNED .)
    DMINUSOP        reduce using rule 385 (simple_type_name -> SIGNED .)
    LTCOMP          reduce using rule 385 (simple_type_name -> SIGNED .)
    MULTEQOP        reduce using rule 385 (simple_type_name -> SIGNED .)
    DIVEQOP         reduce using rule 385 (simple_type_name -> SIGNED .)
    MODEQOP         reduce using rule 385 (simple_type_name -> SIGNED .)
    PLUSEQOP        reduce using rule 385 (simple_type_name -> SIGNED .)
    MINUSEQOP       reduce using rule 385 (simple_type_name -> SIGNED .)
    LSHIFTEQOP      reduce using rule 385 (simple_type_name -> SIGNED .)
    RSHIFTEQOP      reduce using rule 385 (simple_type_name -> SIGNED .)
    BANDEQOP        reduce using rule 385 (simple_type_name -> SIGNED .)
    BOREQOP         reduce using rule 385 (simple_type_name -> SIGNED .)
    DOTSTAR         reduce using rule 385 (simple_type_name -> SIGNED .)
    ARROWSTAR       reduce using rule 385 (simple_type_name -> SIGNED .)
    DIVOP           reduce using rule 385 (simple_type_name -> SIGNED .)
    MODOP           reduce using rule 385 (simple_type_name -> SIGNED .)
    PLUSOP          reduce using rule 385 (simple_type_name -> SIGNED .)
    MINUSOP         reduce using rule 385 (simple_type_name -> SIGNED .)
    LSHIFT          reduce using rule 385 (simple_type_name -> SIGNED .)
    RSHIFT          reduce using rule 385 (simple_type_name -> SIGNED .)
    GTCOMP          reduce using rule 385 (simple_type_name -> SIGNED .)
    LTECOMP         reduce using rule 385 (simple_type_name -> SIGNED .)
    GTECOMP         reduce using rule 385 (simple_type_name -> SIGNED .)
    EQCOMP          reduce using rule 385 (simple_type_name -> SIGNED .)
    NEQCOMP         reduce using rule 385 (simple_type_name -> SIGNED .)
    XOROP           reduce using rule 385 (simple_type_name -> SIGNED .)
    OROP            reduce using rule 385 (simple_type_name -> SIGNED .)
    ANDOP           reduce using rule 385 (simple_type_name -> SIGNED .)
    QUESMARK        reduce using rule 385 (simple_type_name -> SIGNED .)
    RSPAREN         reduce using rule 385 (simple_type_name -> SIGNED .)
    RCPAREN         reduce using rule 385 (simple_type_name -> SIGNED .)


state 48

    (386) simple_type_name -> UNSIGNED .

    SEMICOLON       reduce using rule 386 (simple_type_name -> UNSIGNED .)
    TYPEDEF         reduce using rule 386 (simple_type_name -> UNSIGNED .)
    LPAREN          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    AUTO            reduce using rule 386 (simple_type_name -> UNSIGNED .)
    STATIC          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    EXTERN          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    CONST           reduce using rule 386 (simple_type_name -> UNSIGNED .)
    VOLATILE        reduce using rule 386 (simple_type_name -> UNSIGNED .)
    INLINE          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    VIRTUAL         reduce using rule 386 (simple_type_name -> UNSIGNED .)
    BNOP            reduce using rule 386 (simple_type_name -> UNSIGNED .)
    MULTOP          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    BANDOP          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    CHAR            reduce using rule 386 (simple_type_name -> UNSIGNED .)
    SHORT           reduce using rule 386 (simple_type_name -> UNSIGNED .)
    INT             reduce using rule 386 (simple_type_name -> UNSIGNED .)
    LONG            reduce using rule 386 (simple_type_name -> UNSIGNED .)
    SIGNED          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    UNSIGNED        reduce using rule 386 (simple_type_name -> UNSIGNED .)
    FLOAT           reduce using rule 386 (simple_type_name -> UNSIGNED .)
    DOUBLE          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    VOID            reduce using rule 386 (simple_type_name -> UNSIGNED .)
    ENUM            reduce using rule 386 (simple_type_name -> UNSIGNED .)
    IDENTIFIER      reduce using rule 386 (simple_type_name -> UNSIGNED .)
    DOUBLECOLON     reduce using rule 386 (simple_type_name -> UNSIGNED .)
    CLASS           reduce using rule 386 (simple_type_name -> UNSIGNED .)
    STRUCT          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    UNION           reduce using rule 386 (simple_type_name -> UNSIGNED .)
    TEMPLATE        reduce using rule 386 (simple_type_name -> UNSIGNED .)
    OPERATOR        reduce using rule 386 (simple_type_name -> UNSIGNED .)
    LSPAREN         reduce using rule 386 (simple_type_name -> UNSIGNED .)
    COLON           reduce using rule 386 (simple_type_name -> UNSIGNED .)
    EQUAL           reduce using rule 386 (simple_type_name -> UNSIGNED .)
    LCPAREN         reduce using rule 386 (simple_type_name -> UNSIGNED .)
    COMMA           reduce using rule 386 (simple_type_name -> UNSIGNED .)
    RPAREN          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    DOT             reduce using rule 386 (simple_type_name -> UNSIGNED .)
    ARROW           reduce using rule 386 (simple_type_name -> UNSIGNED .)
    DPLUSOP         reduce using rule 386 (simple_type_name -> UNSIGNED .)
    DMINUSOP        reduce using rule 386 (simple_type_name -> UNSIGNED .)
    LTCOMP          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    MULTEQOP        reduce using rule 386 (simple_type_name -> UNSIGNED .)
    DIVEQOP         reduce using rule 386 (simple_type_name -> UNSIGNED .)
    MODEQOP         reduce using rule 386 (simple_type_name -> UNSIGNED .)
    PLUSEQOP        reduce using rule 386 (simple_type_name -> UNSIGNED .)
    MINUSEQOP       reduce using rule 386 (simple_type_name -> UNSIGNED .)
    LSHIFTEQOP      reduce using rule 386 (simple_type_name -> UNSIGNED .)
    RSHIFTEQOP      reduce using rule 386 (simple_type_name -> UNSIGNED .)
    BANDEQOP        reduce using rule 386 (simple_type_name -> UNSIGNED .)
    BOREQOP         reduce using rule 386 (simple_type_name -> UNSIGNED .)
    DOTSTAR         reduce using rule 386 (simple_type_name -> UNSIGNED .)
    ARROWSTAR       reduce using rule 386 (simple_type_name -> UNSIGNED .)
    DIVOP           reduce using rule 386 (simple_type_name -> UNSIGNED .)
    MODOP           reduce using rule 386 (simple_type_name -> UNSIGNED .)
    PLUSOP          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    MINUSOP         reduce using rule 386 (simple_type_name -> UNSIGNED .)
    LSHIFT          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    RSHIFT          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    GTCOMP          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    LTECOMP         reduce using rule 386 (simple_type_name -> UNSIGNED .)
    GTECOMP         reduce using rule 386 (simple_type_name -> UNSIGNED .)
    EQCOMP          reduce using rule 386 (simple_type_name -> UNSIGNED .)
    NEQCOMP         reduce using rule 386 (simple_type_name -> UNSIGNED .)
    XOROP           reduce using rule 386 (simple_type_name -> UNSIGNED .)
    OROP            reduce using rule 386 (simple_type_name -> UNSIGNED .)
    ANDOP           reduce using rule 386 (simple_type_name -> UNSIGNED .)
    QUESMARK        reduce using rule 386 (simple_type_name -> UNSIGNED .)
    RSPAREN         reduce using rule 386 (simple_type_name -> UNSIGNED .)
    RCPAREN         reduce using rule 386 (simple_type_name -> UNSIGNED .)


state 49

    (387) simple_type_name -> FLOAT .

    SEMICOLON       reduce using rule 387 (simple_type_name -> FLOAT .)
    TYPEDEF         reduce using rule 387 (simple_type_name -> FLOAT .)
    LPAREN          reduce using rule 387 (simple_type_name -> FLOAT .)
    AUTO            reduce using rule 387 (simple_type_name -> FLOAT .)
    STATIC          reduce using rule 387 (simple_type_name -> FLOAT .)
    EXTERN          reduce using rule 387 (simple_type_name -> FLOAT .)
    CONST           reduce using rule 387 (simple_type_name -> FLOAT .)
    VOLATILE        reduce using rule 387 (simple_type_name -> FLOAT .)
    INLINE          reduce using rule 387 (simple_type_name -> FLOAT .)
    VIRTUAL         reduce using rule 387 (simple_type_name -> FLOAT .)
    BNOP            reduce using rule 387 (simple_type_name -> FLOAT .)
    MULTOP          reduce using rule 387 (simple_type_name -> FLOAT .)
    BANDOP          reduce using rule 387 (simple_type_name -> FLOAT .)
    CHAR            reduce using rule 387 (simple_type_name -> FLOAT .)
    SHORT           reduce using rule 387 (simple_type_name -> FLOAT .)
    INT             reduce using rule 387 (simple_type_name -> FLOAT .)
    LONG            reduce using rule 387 (simple_type_name -> FLOAT .)
    SIGNED          reduce using rule 387 (simple_type_name -> FLOAT .)
    UNSIGNED        reduce using rule 387 (simple_type_name -> FLOAT .)
    FLOAT           reduce using rule 387 (simple_type_name -> FLOAT .)
    DOUBLE          reduce using rule 387 (simple_type_name -> FLOAT .)
    VOID            reduce using rule 387 (simple_type_name -> FLOAT .)
    ENUM            reduce using rule 387 (simple_type_name -> FLOAT .)
    IDENTIFIER      reduce using rule 387 (simple_type_name -> FLOAT .)
    DOUBLECOLON     reduce using rule 387 (simple_type_name -> FLOAT .)
    CLASS           reduce using rule 387 (simple_type_name -> FLOAT .)
    STRUCT          reduce using rule 387 (simple_type_name -> FLOAT .)
    UNION           reduce using rule 387 (simple_type_name -> FLOAT .)
    TEMPLATE        reduce using rule 387 (simple_type_name -> FLOAT .)
    OPERATOR        reduce using rule 387 (simple_type_name -> FLOAT .)
    LSPAREN         reduce using rule 387 (simple_type_name -> FLOAT .)
    COLON           reduce using rule 387 (simple_type_name -> FLOAT .)
    EQUAL           reduce using rule 387 (simple_type_name -> FLOAT .)
    LCPAREN         reduce using rule 387 (simple_type_name -> FLOAT .)
    COMMA           reduce using rule 387 (simple_type_name -> FLOAT .)
    RPAREN          reduce using rule 387 (simple_type_name -> FLOAT .)
    DOT             reduce using rule 387 (simple_type_name -> FLOAT .)
    ARROW           reduce using rule 387 (simple_type_name -> FLOAT .)
    DPLUSOP         reduce using rule 387 (simple_type_name -> FLOAT .)
    DMINUSOP        reduce using rule 387 (simple_type_name -> FLOAT .)
    LTCOMP          reduce using rule 387 (simple_type_name -> FLOAT .)
    MULTEQOP        reduce using rule 387 (simple_type_name -> FLOAT .)
    DIVEQOP         reduce using rule 387 (simple_type_name -> FLOAT .)
    MODEQOP         reduce using rule 387 (simple_type_name -> FLOAT .)
    PLUSEQOP        reduce using rule 387 (simple_type_name -> FLOAT .)
    MINUSEQOP       reduce using rule 387 (simple_type_name -> FLOAT .)
    LSHIFTEQOP      reduce using rule 387 (simple_type_name -> FLOAT .)
    RSHIFTEQOP      reduce using rule 387 (simple_type_name -> FLOAT .)
    BANDEQOP        reduce using rule 387 (simple_type_name -> FLOAT .)
    BOREQOP         reduce using rule 387 (simple_type_name -> FLOAT .)
    DOTSTAR         reduce using rule 387 (simple_type_name -> FLOAT .)
    ARROWSTAR       reduce using rule 387 (simple_type_name -> FLOAT .)
    DIVOP           reduce using rule 387 (simple_type_name -> FLOAT .)
    MODOP           reduce using rule 387 (simple_type_name -> FLOAT .)
    PLUSOP          reduce using rule 387 (simple_type_name -> FLOAT .)
    MINUSOP         reduce using rule 387 (simple_type_name -> FLOAT .)
    LSHIFT          reduce using rule 387 (simple_type_name -> FLOAT .)
    RSHIFT          reduce using rule 387 (simple_type_name -> FLOAT .)
    GTCOMP          reduce using rule 387 (simple_type_name -> FLOAT .)
    LTECOMP         reduce using rule 387 (simple_type_name -> FLOAT .)
    GTECOMP         reduce using rule 387 (simple_type_name -> FLOAT .)
    EQCOMP          reduce using rule 387 (simple_type_name -> FLOAT .)
    NEQCOMP         reduce using rule 387 (simple_type_name -> FLOAT .)
    XOROP           reduce using rule 387 (simple_type_name -> FLOAT .)
    OROP            reduce using rule 387 (simple_type_name -> FLOAT .)
    ANDOP           reduce using rule 387 (simple_type_name -> FLOAT .)
    QUESMARK        reduce using rule 387 (simple_type_name -> FLOAT .)
    RSPAREN         reduce using rule 387 (simple_type_name -> FLOAT .)
    RCPAREN         reduce using rule 387 (simple_type_name -> FLOAT .)


state 50

    (388) simple_type_name -> DOUBLE .

    SEMICOLON       reduce using rule 388 (simple_type_name -> DOUBLE .)
    TYPEDEF         reduce using rule 388 (simple_type_name -> DOUBLE .)
    LPAREN          reduce using rule 388 (simple_type_name -> DOUBLE .)
    AUTO            reduce using rule 388 (simple_type_name -> DOUBLE .)
    STATIC          reduce using rule 388 (simple_type_name -> DOUBLE .)
    EXTERN          reduce using rule 388 (simple_type_name -> DOUBLE .)
    CONST           reduce using rule 388 (simple_type_name -> DOUBLE .)
    VOLATILE        reduce using rule 388 (simple_type_name -> DOUBLE .)
    INLINE          reduce using rule 388 (simple_type_name -> DOUBLE .)
    VIRTUAL         reduce using rule 388 (simple_type_name -> DOUBLE .)
    BNOP            reduce using rule 388 (simple_type_name -> DOUBLE .)
    MULTOP          reduce using rule 388 (simple_type_name -> DOUBLE .)
    BANDOP          reduce using rule 388 (simple_type_name -> DOUBLE .)
    CHAR            reduce using rule 388 (simple_type_name -> DOUBLE .)
    SHORT           reduce using rule 388 (simple_type_name -> DOUBLE .)
    INT             reduce using rule 388 (simple_type_name -> DOUBLE .)
    LONG            reduce using rule 388 (simple_type_name -> DOUBLE .)
    SIGNED          reduce using rule 388 (simple_type_name -> DOUBLE .)
    UNSIGNED        reduce using rule 388 (simple_type_name -> DOUBLE .)
    FLOAT           reduce using rule 388 (simple_type_name -> DOUBLE .)
    DOUBLE          reduce using rule 388 (simple_type_name -> DOUBLE .)
    VOID            reduce using rule 388 (simple_type_name -> DOUBLE .)
    ENUM            reduce using rule 388 (simple_type_name -> DOUBLE .)
    IDENTIFIER      reduce using rule 388 (simple_type_name -> DOUBLE .)
    DOUBLECOLON     reduce using rule 388 (simple_type_name -> DOUBLE .)
    CLASS           reduce using rule 388 (simple_type_name -> DOUBLE .)
    STRUCT          reduce using rule 388 (simple_type_name -> DOUBLE .)
    UNION           reduce using rule 388 (simple_type_name -> DOUBLE .)
    TEMPLATE        reduce using rule 388 (simple_type_name -> DOUBLE .)
    OPERATOR        reduce using rule 388 (simple_type_name -> DOUBLE .)
    LSPAREN         reduce using rule 388 (simple_type_name -> DOUBLE .)
    COLON           reduce using rule 388 (simple_type_name -> DOUBLE .)
    EQUAL           reduce using rule 388 (simple_type_name -> DOUBLE .)
    LCPAREN         reduce using rule 388 (simple_type_name -> DOUBLE .)
    COMMA           reduce using rule 388 (simple_type_name -> DOUBLE .)
    RPAREN          reduce using rule 388 (simple_type_name -> DOUBLE .)
    DOT             reduce using rule 388 (simple_type_name -> DOUBLE .)
    ARROW           reduce using rule 388 (simple_type_name -> DOUBLE .)
    DPLUSOP         reduce using rule 388 (simple_type_name -> DOUBLE .)
    DMINUSOP        reduce using rule 388 (simple_type_name -> DOUBLE .)
    LTCOMP          reduce using rule 388 (simple_type_name -> DOUBLE .)
    MULTEQOP        reduce using rule 388 (simple_type_name -> DOUBLE .)
    DIVEQOP         reduce using rule 388 (simple_type_name -> DOUBLE .)
    MODEQOP         reduce using rule 388 (simple_type_name -> DOUBLE .)
    PLUSEQOP        reduce using rule 388 (simple_type_name -> DOUBLE .)
    MINUSEQOP       reduce using rule 388 (simple_type_name -> DOUBLE .)
    LSHIFTEQOP      reduce using rule 388 (simple_type_name -> DOUBLE .)
    RSHIFTEQOP      reduce using rule 388 (simple_type_name -> DOUBLE .)
    BANDEQOP        reduce using rule 388 (simple_type_name -> DOUBLE .)
    BOREQOP         reduce using rule 388 (simple_type_name -> DOUBLE .)
    DOTSTAR         reduce using rule 388 (simple_type_name -> DOUBLE .)
    ARROWSTAR       reduce using rule 388 (simple_type_name -> DOUBLE .)
    DIVOP           reduce using rule 388 (simple_type_name -> DOUBLE .)
    MODOP           reduce using rule 388 (simple_type_name -> DOUBLE .)
    PLUSOP          reduce using rule 388 (simple_type_name -> DOUBLE .)
    MINUSOP         reduce using rule 388 (simple_type_name -> DOUBLE .)
    LSHIFT          reduce using rule 388 (simple_type_name -> DOUBLE .)
    RSHIFT          reduce using rule 388 (simple_type_name -> DOUBLE .)
    GTCOMP          reduce using rule 388 (simple_type_name -> DOUBLE .)
    LTECOMP         reduce using rule 388 (simple_type_name -> DOUBLE .)
    GTECOMP         reduce using rule 388 (simple_type_name -> DOUBLE .)
    EQCOMP          reduce using rule 388 (simple_type_name -> DOUBLE .)
    NEQCOMP         reduce using rule 388 (simple_type_name -> DOUBLE .)
    XOROP           reduce using rule 388 (simple_type_name -> DOUBLE .)
    OROP            reduce using rule 388 (simple_type_name -> DOUBLE .)
    ANDOP           reduce using rule 388 (simple_type_name -> DOUBLE .)
    QUESMARK        reduce using rule 388 (simple_type_name -> DOUBLE .)
    RSPAREN         reduce using rule 388 (simple_type_name -> DOUBLE .)
    RCPAREN         reduce using rule 388 (simple_type_name -> DOUBLE .)


state 51

    (389) simple_type_name -> VOID .

    SEMICOLON       reduce using rule 389 (simple_type_name -> VOID .)
    TYPEDEF         reduce using rule 389 (simple_type_name -> VOID .)
    LPAREN          reduce using rule 389 (simple_type_name -> VOID .)
    AUTO            reduce using rule 389 (simple_type_name -> VOID .)
    STATIC          reduce using rule 389 (simple_type_name -> VOID .)
    EXTERN          reduce using rule 389 (simple_type_name -> VOID .)
    CONST           reduce using rule 389 (simple_type_name -> VOID .)
    VOLATILE        reduce using rule 389 (simple_type_name -> VOID .)
    INLINE          reduce using rule 389 (simple_type_name -> VOID .)
    VIRTUAL         reduce using rule 389 (simple_type_name -> VOID .)
    BNOP            reduce using rule 389 (simple_type_name -> VOID .)
    MULTOP          reduce using rule 389 (simple_type_name -> VOID .)
    BANDOP          reduce using rule 389 (simple_type_name -> VOID .)
    CHAR            reduce using rule 389 (simple_type_name -> VOID .)
    SHORT           reduce using rule 389 (simple_type_name -> VOID .)
    INT             reduce using rule 389 (simple_type_name -> VOID .)
    LONG            reduce using rule 389 (simple_type_name -> VOID .)
    SIGNED          reduce using rule 389 (simple_type_name -> VOID .)
    UNSIGNED        reduce using rule 389 (simple_type_name -> VOID .)
    FLOAT           reduce using rule 389 (simple_type_name -> VOID .)
    DOUBLE          reduce using rule 389 (simple_type_name -> VOID .)
    VOID            reduce using rule 389 (simple_type_name -> VOID .)
    ENUM            reduce using rule 389 (simple_type_name -> VOID .)
    IDENTIFIER      reduce using rule 389 (simple_type_name -> VOID .)
    DOUBLECOLON     reduce using rule 389 (simple_type_name -> VOID .)
    CLASS           reduce using rule 389 (simple_type_name -> VOID .)
    STRUCT          reduce using rule 389 (simple_type_name -> VOID .)
    UNION           reduce using rule 389 (simple_type_name -> VOID .)
    TEMPLATE        reduce using rule 389 (simple_type_name -> VOID .)
    OPERATOR        reduce using rule 389 (simple_type_name -> VOID .)
    LSPAREN         reduce using rule 389 (simple_type_name -> VOID .)
    COLON           reduce using rule 389 (simple_type_name -> VOID .)
    EQUAL           reduce using rule 389 (simple_type_name -> VOID .)
    LCPAREN         reduce using rule 389 (simple_type_name -> VOID .)
    COMMA           reduce using rule 389 (simple_type_name -> VOID .)
    RPAREN          reduce using rule 389 (simple_type_name -> VOID .)
    DOT             reduce using rule 389 (simple_type_name -> VOID .)
    ARROW           reduce using rule 389 (simple_type_name -> VOID .)
    DPLUSOP         reduce using rule 389 (simple_type_name -> VOID .)
    DMINUSOP        reduce using rule 389 (simple_type_name -> VOID .)
    LTCOMP          reduce using rule 389 (simple_type_name -> VOID .)
    MULTEQOP        reduce using rule 389 (simple_type_name -> VOID .)
    DIVEQOP         reduce using rule 389 (simple_type_name -> VOID .)
    MODEQOP         reduce using rule 389 (simple_type_name -> VOID .)
    PLUSEQOP        reduce using rule 389 (simple_type_name -> VOID .)
    MINUSEQOP       reduce using rule 389 (simple_type_name -> VOID .)
    LSHIFTEQOP      reduce using rule 389 (simple_type_name -> VOID .)
    RSHIFTEQOP      reduce using rule 389 (simple_type_name -> VOID .)
    BANDEQOP        reduce using rule 389 (simple_type_name -> VOID .)
    BOREQOP         reduce using rule 389 (simple_type_name -> VOID .)
    DOTSTAR         reduce using rule 389 (simple_type_name -> VOID .)
    ARROWSTAR       reduce using rule 389 (simple_type_name -> VOID .)
    DIVOP           reduce using rule 389 (simple_type_name -> VOID .)
    MODOP           reduce using rule 389 (simple_type_name -> VOID .)
    PLUSOP          reduce using rule 389 (simple_type_name -> VOID .)
    MINUSOP         reduce using rule 389 (simple_type_name -> VOID .)
    LSHIFT          reduce using rule 389 (simple_type_name -> VOID .)
    RSHIFT          reduce using rule 389 (simple_type_name -> VOID .)
    GTCOMP          reduce using rule 389 (simple_type_name -> VOID .)
    LTECOMP         reduce using rule 389 (simple_type_name -> VOID .)
    GTECOMP         reduce using rule 389 (simple_type_name -> VOID .)
    EQCOMP          reduce using rule 389 (simple_type_name -> VOID .)
    NEQCOMP         reduce using rule 389 (simple_type_name -> VOID .)
    XOROP           reduce using rule 389 (simple_type_name -> VOID .)
    OROP            reduce using rule 389 (simple_type_name -> VOID .)
    ANDOP           reduce using rule 389 (simple_type_name -> VOID .)
    QUESMARK        reduce using rule 389 (simple_type_name -> VOID .)
    RSPAREN         reduce using rule 389 (simple_type_name -> VOID .)
    RCPAREN         reduce using rule 389 (simple_type_name -> VOID .)


state 52

    (186) class_specifier -> class_head . LCPAREN member_list RCPAREN
    (187) class_specifier -> class_head . LCPAREN RCPAREN

    LCPAREN         shift and go to state 100


state 53

    (18) enum_specifier -> ENUM . IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> ENUM . LCPAREN enum_list RCPAREN
    (20) enum_specifier -> ENUM . IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> ENUM . LCPAREN RCPAREN
    (373) elaborated_type_specifier -> ENUM . enum_name
    (374) enum_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 101
    LCPAREN         shift and go to state 102

    enum_name                      shift and go to state 103

state 54

    (303) name -> IDENTIFIER .
    (407) class_name -> IDENTIFIER .
    (392) typedef_name -> IDENTIFIER .

  ! reduce/reduce conflict for LPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for COLON resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for COLON resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TEMPLATE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 303 (name -> IDENTIFIER .)
    LPAREN          reduce using rule 303 (name -> IDENTIFIER .)
    LSPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    COLON           reduce using rule 303 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 303 (name -> IDENTIFIER .)
    LCPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 303 (name -> IDENTIFIER .)
    COMMA           reduce using rule 303 (name -> IDENTIFIER .)
    RPAREN          reduce using rule 303 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    DOT             reduce using rule 303 (name -> IDENTIFIER .)
    ARROW           reduce using rule 303 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 303 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 303 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 303 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 303 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 303 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 303 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 303 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 303 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 303 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 303 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 303 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 303 (name -> IDENTIFIER .)
    MODOP           reduce using rule 303 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 303 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 303 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 303 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 303 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 303 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 303 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 303 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 303 (name -> IDENTIFIER .)
    XOROP           reduce using rule 303 (name -> IDENTIFIER .)
    OROP            reduce using rule 303 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 303 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 303 (name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    AUTO            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STATIC          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    EXTERN          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CONST           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INLINE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    BNOP            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CHAR            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SHORT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INT             reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LONG            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SIGNED          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    FLOAT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOID            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    ENUM            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CLASS           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STRUCT          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNION           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    TEMPLATE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 392 (typedef_name -> IDENTIFIER .)

  ! DOUBLECOLON     [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TEMPLATE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! GTCOMP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! GTCOMP          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]


state 55

    (371) elaborated_type_specifier -> class_key . IDENTIFIER
    (372) elaborated_type_specifier -> class_key . class_name
    (354) class_head -> class_key . IDENTIFIER base_spec
    (355) class_head -> class_key . base_spec
    (356) class_head -> class_key . IDENTIFIER
    (357) class_head -> class_key .
    (358) class_head -> class_key . class_name base_spec
    (359) class_head -> class_key . class_name
    (407) class_name -> . IDENTIFIER
    (360) base_spec -> . COLON base_list

    IDENTIFIER      shift and go to state 104
    LCPAREN         reduce using rule 357 (class_head -> class_key .)
    COLON           shift and go to state 107

    class_name                     shift and go to state 105
    base_spec                      shift and go to state 106

state 56

    (304) name -> operator_function_name .

    LPAREN          reduce using rule 304 (name -> operator_function_name .)
    LSPAREN         reduce using rule 304 (name -> operator_function_name .)
    COLON           reduce using rule 304 (name -> operator_function_name .)
    EQUAL           reduce using rule 304 (name -> operator_function_name .)
    LCPAREN         reduce using rule 304 (name -> operator_function_name .)
    SEMICOLON       reduce using rule 304 (name -> operator_function_name .)
    COMMA           reduce using rule 304 (name -> operator_function_name .)
    RPAREN          reduce using rule 304 (name -> operator_function_name .)
    DOT             reduce using rule 304 (name -> operator_function_name .)
    ARROW           reduce using rule 304 (name -> operator_function_name .)
    DPLUSOP         reduce using rule 304 (name -> operator_function_name .)
    DMINUSOP        reduce using rule 304 (name -> operator_function_name .)
    LTCOMP          reduce using rule 304 (name -> operator_function_name .)
    MULTEQOP        reduce using rule 304 (name -> operator_function_name .)
    DIVEQOP         reduce using rule 304 (name -> operator_function_name .)
    MODEQOP         reduce using rule 304 (name -> operator_function_name .)
    PLUSEQOP        reduce using rule 304 (name -> operator_function_name .)
    MINUSEQOP       reduce using rule 304 (name -> operator_function_name .)
    LSHIFTEQOP      reduce using rule 304 (name -> operator_function_name .)
    RSHIFTEQOP      reduce using rule 304 (name -> operator_function_name .)
    BANDEQOP        reduce using rule 304 (name -> operator_function_name .)
    BOREQOP         reduce using rule 304 (name -> operator_function_name .)
    DOTSTAR         reduce using rule 304 (name -> operator_function_name .)
    ARROWSTAR       reduce using rule 304 (name -> operator_function_name .)
    MULTOP          reduce using rule 304 (name -> operator_function_name .)
    DIVOP           reduce using rule 304 (name -> operator_function_name .)
    MODOP           reduce using rule 304 (name -> operator_function_name .)
    PLUSOP          reduce using rule 304 (name -> operator_function_name .)
    MINUSOP         reduce using rule 304 (name -> operator_function_name .)
    LSHIFT          reduce using rule 304 (name -> operator_function_name .)
    RSHIFT          reduce using rule 304 (name -> operator_function_name .)
    GTCOMP          reduce using rule 304 (name -> operator_function_name .)
    LTECOMP         reduce using rule 304 (name -> operator_function_name .)
    GTECOMP         reduce using rule 304 (name -> operator_function_name .)
    EQCOMP          reduce using rule 304 (name -> operator_function_name .)
    NEQCOMP         reduce using rule 304 (name -> operator_function_name .)
    BANDOP          reduce using rule 304 (name -> operator_function_name .)
    XOROP           reduce using rule 304 (name -> operator_function_name .)
    OROP            reduce using rule 304 (name -> operator_function_name .)
    ANDOP           reduce using rule 304 (name -> operator_function_name .)
    QUESMARK        reduce using rule 304 (name -> operator_function_name .)
    RSPAREN         reduce using rule 304 (name -> operator_function_name .)
    RCPAREN         reduce using rule 304 (name -> operator_function_name .)


state 57

    (305) name -> conversion_function_name .

    LPAREN          reduce using rule 305 (name -> conversion_function_name .)
    LSPAREN         reduce using rule 305 (name -> conversion_function_name .)
    COLON           reduce using rule 305 (name -> conversion_function_name .)
    EQUAL           reduce using rule 305 (name -> conversion_function_name .)
    LCPAREN         reduce using rule 305 (name -> conversion_function_name .)
    SEMICOLON       reduce using rule 305 (name -> conversion_function_name .)
    COMMA           reduce using rule 305 (name -> conversion_function_name .)
    RPAREN          reduce using rule 305 (name -> conversion_function_name .)
    DOT             reduce using rule 305 (name -> conversion_function_name .)
    ARROW           reduce using rule 305 (name -> conversion_function_name .)
    DPLUSOP         reduce using rule 305 (name -> conversion_function_name .)
    DMINUSOP        reduce using rule 305 (name -> conversion_function_name .)
    LTCOMP          reduce using rule 305 (name -> conversion_function_name .)
    MULTEQOP        reduce using rule 305 (name -> conversion_function_name .)
    DIVEQOP         reduce using rule 305 (name -> conversion_function_name .)
    MODEQOP         reduce using rule 305 (name -> conversion_function_name .)
    PLUSEQOP        reduce using rule 305 (name -> conversion_function_name .)
    MINUSEQOP       reduce using rule 305 (name -> conversion_function_name .)
    LSHIFTEQOP      reduce using rule 305 (name -> conversion_function_name .)
    RSHIFTEQOP      reduce using rule 305 (name -> conversion_function_name .)
    BANDEQOP        reduce using rule 305 (name -> conversion_function_name .)
    BOREQOP         reduce using rule 305 (name -> conversion_function_name .)
    DOTSTAR         reduce using rule 305 (name -> conversion_function_name .)
    ARROWSTAR       reduce using rule 305 (name -> conversion_function_name .)
    MULTOP          reduce using rule 305 (name -> conversion_function_name .)
    DIVOP           reduce using rule 305 (name -> conversion_function_name .)
    MODOP           reduce using rule 305 (name -> conversion_function_name .)
    PLUSOP          reduce using rule 305 (name -> conversion_function_name .)
    MINUSOP         reduce using rule 305 (name -> conversion_function_name .)
    LSHIFT          reduce using rule 305 (name -> conversion_function_name .)
    RSHIFT          reduce using rule 305 (name -> conversion_function_name .)
    GTCOMP          reduce using rule 305 (name -> conversion_function_name .)
    LTECOMP         reduce using rule 305 (name -> conversion_function_name .)
    GTECOMP         reduce using rule 305 (name -> conversion_function_name .)
    EQCOMP          reduce using rule 305 (name -> conversion_function_name .)
    NEQCOMP         reduce using rule 305 (name -> conversion_function_name .)
    BANDOP          reduce using rule 305 (name -> conversion_function_name .)
    XOROP           reduce using rule 305 (name -> conversion_function_name .)
    OROP            reduce using rule 305 (name -> conversion_function_name .)
    ANDOP           reduce using rule 305 (name -> conversion_function_name .)
    QUESMARK        reduce using rule 305 (name -> conversion_function_name .)
    RSPAREN         reduce using rule 305 (name -> conversion_function_name .)
    RCPAREN         reduce using rule 305 (name -> conversion_function_name .)


state 58

    (307) name -> qualified_name .

    LPAREN          reduce using rule 307 (name -> qualified_name .)
    LSPAREN         reduce using rule 307 (name -> qualified_name .)
    COLON           reduce using rule 307 (name -> qualified_name .)
    EQUAL           reduce using rule 307 (name -> qualified_name .)
    LCPAREN         reduce using rule 307 (name -> qualified_name .)
    SEMICOLON       reduce using rule 307 (name -> qualified_name .)
    COMMA           reduce using rule 307 (name -> qualified_name .)
    RPAREN          reduce using rule 307 (name -> qualified_name .)
    DOT             reduce using rule 307 (name -> qualified_name .)
    ARROW           reduce using rule 307 (name -> qualified_name .)
    DPLUSOP         reduce using rule 307 (name -> qualified_name .)
    DMINUSOP        reduce using rule 307 (name -> qualified_name .)
    LTCOMP          reduce using rule 307 (name -> qualified_name .)
    MULTEQOP        reduce using rule 307 (name -> qualified_name .)
    DIVEQOP         reduce using rule 307 (name -> qualified_name .)
    MODEQOP         reduce using rule 307 (name -> qualified_name .)
    PLUSEQOP        reduce using rule 307 (name -> qualified_name .)
    MINUSEQOP       reduce using rule 307 (name -> qualified_name .)
    LSHIFTEQOP      reduce using rule 307 (name -> qualified_name .)
    RSHIFTEQOP      reduce using rule 307 (name -> qualified_name .)
    BANDEQOP        reduce using rule 307 (name -> qualified_name .)
    BOREQOP         reduce using rule 307 (name -> qualified_name .)
    DOTSTAR         reduce using rule 307 (name -> qualified_name .)
    ARROWSTAR       reduce using rule 307 (name -> qualified_name .)
    MULTOP          reduce using rule 307 (name -> qualified_name .)
    DIVOP           reduce using rule 307 (name -> qualified_name .)
    MODOP           reduce using rule 307 (name -> qualified_name .)
    PLUSOP          reduce using rule 307 (name -> qualified_name .)
    MINUSOP         reduce using rule 307 (name -> qualified_name .)
    LSHIFT          reduce using rule 307 (name -> qualified_name .)
    RSHIFT          reduce using rule 307 (name -> qualified_name .)
    GTCOMP          reduce using rule 307 (name -> qualified_name .)
    LTECOMP         reduce using rule 307 (name -> qualified_name .)
    GTECOMP         reduce using rule 307 (name -> qualified_name .)
    EQCOMP          reduce using rule 307 (name -> qualified_name .)
    NEQCOMP         reduce using rule 307 (name -> qualified_name .)
    BANDOP          reduce using rule 307 (name -> qualified_name .)
    XOROP           reduce using rule 307 (name -> qualified_name .)
    OROP            reduce using rule 307 (name -> qualified_name .)
    ANDOP           reduce using rule 307 (name -> qualified_name .)
    QUESMARK        reduce using rule 307 (name -> qualified_name .)
    RSPAREN         reduce using rule 307 (name -> qualified_name .)
    RCPAREN         reduce using rule 307 (name -> qualified_name .)


state 59

    (403) complete_class_name -> qualified_class_name .
    (308) qualified_name -> qualified_class_name . DOUBLECOLON name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    SEMICOLON       reduce using rule 403 (complete_class_name -> qualified_class_name .)
    TYPEDEF         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    LPAREN          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    AUTO            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    STATIC          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    EXTERN          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    CONST           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    VOLATILE        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    INLINE          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    VIRTUAL         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    BNOP            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    MULTOP          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    BANDOP          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    CHAR            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    SHORT           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    INT             reduce using rule 403 (complete_class_name -> qualified_class_name .)
    LONG            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    SIGNED          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    UNSIGNED        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    FLOAT           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    DOUBLE          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    VOID            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    ENUM            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    IDENTIFIER      reduce using rule 403 (complete_class_name -> qualified_class_name .)
    CLASS           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    STRUCT          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    UNION           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    TEMPLATE        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    OPERATOR        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    EQUAL           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    LSPAREN         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    COMMA           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    RPAREN          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    GTCOMP          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    COLON           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    DOUBLECOLON     shift and go to state 108

  ! DOUBLECOLON     [ reduce using rule 403 (complete_class_name -> qualified_class_name .) ]


state 60

    (375) class_key -> CLASS .

    IDENTIFIER      reduce using rule 375 (class_key -> CLASS .)
    COLON           reduce using rule 375 (class_key -> CLASS .)
    LCPAREN         reduce using rule 375 (class_key -> CLASS .)


state 61

    (376) class_key -> STRUCT .

    IDENTIFIER      reduce using rule 376 (class_key -> STRUCT .)
    COLON           reduce using rule 376 (class_key -> STRUCT .)
    LCPAREN         reduce using rule 376 (class_key -> STRUCT .)


state 62

    (377) class_key -> UNION .

    IDENTIFIER      reduce using rule 377 (class_key -> UNION .)
    COLON           reduce using rule 377 (class_key -> UNION .)
    LCPAREN         reduce using rule 377 (class_key -> UNION .)


state 63

    (314) operator_function_name -> OPERATOR . operator_name
    (309) conversion_function_name -> OPERATOR . conversion_type_name
    (315) operator_name -> . NEW
    (316) operator_name -> . DELETE
    (317) operator_name -> . PLUSOP
    (318) operator_name -> . MINUSOP
    (319) operator_name -> . MULTOP
    (320) operator_name -> . DIVOP
    (321) operator_name -> . MODOP
    (322) operator_name -> . XOROP
    (323) operator_name -> . BANDOP
    (324) operator_name -> . BNOP
    (325) operator_name -> . NOTSYM
    (326) operator_name -> . EQUAL
    (327) operator_name -> . LTCOMP
    (328) operator_name -> . GTCOMP
    (329) operator_name -> . PLUSEQOP
    (330) operator_name -> . MINUSEQOP
    (331) operator_name -> . MULTEQOP
    (332) operator_name -> . DIVEQOP
    (333) operator_name -> . MODEQOP
    (334) operator_name -> . XOREQOP
    (335) operator_name -> . BANDEQOP
    (336) operator_name -> . LSHIFT
    (337) operator_name -> . RSHIFT
    (338) operator_name -> . RSHIFTEQOP
    (339) operator_name -> . LSHIFTEQOP
    (340) operator_name -> . EQCOMP
    (341) operator_name -> . NEQCOMP
    (342) operator_name -> . LTECOMP
    (343) operator_name -> . GTECOMP
    (344) operator_name -> . ANDOP
    (345) operator_name -> . OROP
    (346) operator_name -> . DPLUSOP
    (347) operator_name -> . DMINUSOP
    (348) operator_name -> . COMMA
    (349) operator_name -> . ARROWSTAR
    (350) operator_name -> . ARROW
    (351) operator_name -> . LPAREN RPAREN
    (352) operator_name -> . LSPAREN RSPAREN
    (310) conversion_type_name -> . type_specifier_list ptr_operator
    (311) conversion_type_name -> . type_specifier_list
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    NEW             shift and go to state 111
    DELETE          shift and go to state 112
    PLUSOP          shift and go to state 113
    MINUSOP         shift and go to state 114
    MULTOP          shift and go to state 115
    DIVOP           shift and go to state 116
    MODOP           shift and go to state 117
    XOROP           shift and go to state 118
    BANDOP          shift and go to state 119
    BNOP            shift and go to state 120
    NOTSYM          shift and go to state 121
    EQUAL           shift and go to state 122
    LTCOMP          shift and go to state 123
    GTCOMP          shift and go to state 124
    PLUSEQOP        shift and go to state 125
    MINUSEQOP       shift and go to state 126
    MULTEQOP        shift and go to state 127
    DIVEQOP         shift and go to state 128
    MODEQOP         shift and go to state 129
    XOREQOP         shift and go to state 130
    BANDEQOP        shift and go to state 131
    LSHIFT          shift and go to state 132
    RSHIFT          shift and go to state 133
    RSHIFTEQOP      shift and go to state 134
    LSHIFTEQOP      shift and go to state 135
    EQCOMP          shift and go to state 136
    NEQCOMP         shift and go to state 137
    LTECOMP         shift and go to state 138
    GTECOMP         shift and go to state 139
    ANDOP           shift and go to state 140
    OROP            shift and go to state 141
    DPLUSOP         shift and go to state 142
    DMINUSOP        shift and go to state 143
    COMMA           shift and go to state 144
    ARROWSTAR       shift and go to state 145
    ARROW           shift and go to state 146
    LPAREN          shift and go to state 147
    LSPAREN         shift and go to state 148
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    IDENTIFIER      shift and go to state 153

    operator_name                  shift and go to state 109
    conversion_type_name           shift and go to state 110
    type_specifier_list            shift and go to state 149
    type_specifier                 shift and go to state 150
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 155
    typedef_name                   shift and go to state 156

state 64

    (9) declaration_seq -> declaration_seq declaration .

    ASM             reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TEMPLATE        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    EXTERN          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    TYPEDEF         reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    LPAREN          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    AUTO            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    STATIC          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    CONST           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    VOLATILE        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    INLINE          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    VIRTUAL         reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    BNOP            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    MULTOP          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    BANDOP          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    CHAR            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    SHORT           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    INT             reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    LONG            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    SIGNED          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    UNSIGNED        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    FLOAT           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    DOUBLE          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    VOID            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    ENUM            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    IDENTIFIER      reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    DOUBLECOLON     reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    CLASS           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    STRUCT          reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    UNION           reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    OPERATOR        reduce using rule 9 (declaration_seq -> declaration_seq declaration .)
    $end            reduce using rule 9 (declaration_seq -> declaration_seq declaration .)


state 65

    (245) declaration -> decl_specifiers declarator_list . SEMICOLON
    (259) declarator_list -> declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 157
    COMMA           shift and go to state 72


state 66

    (246) declaration -> decl_specifiers SEMICOLON .

    ASM             reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    TEMPLATE        reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    EXTERN          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    TYPEDEF         reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    LPAREN          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    AUTO            reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    STATIC          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    CONST           reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    VOLATILE        reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    INLINE          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    VIRTUAL         reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    BNOP            reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    MULTOP          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    BANDOP          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    CHAR            reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    SHORT           reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    INT             reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    LONG            reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    SIGNED          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    UNSIGNED        reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    FLOAT           reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    DOUBLE          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    VOID            reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    ENUM            reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    IDENTIFIER      reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    DOUBLECOLON     reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    CLASS           reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    STRUCT          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    UNION           reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    OPERATOR        reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    $end            reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    RCPAREN         reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    CASE            reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    DEFAULT         reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    SEMICOLON       reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    LCPAREN         reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    IF              reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    SWITCH          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    WHILE           reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    DO              reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    FOR             reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    BREAK           reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    CONTINUE        reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    RETURN          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    GOTO            reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    TRY             reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    DPLUSOP         reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    DMINUSOP        reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    SIZEOF          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    PLUSOP          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    MINUSOP         reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    NOTSYM          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    NEW             reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    DELETE          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    THIS            reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    NUMBER          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    STRING          reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    SCHAR           reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)
    ELSE            reduce using rule 246 (declaration -> decl_specifiers SEMICOLON .)


state 67

    (169) decl_specifiers -> decl_specifiers decl_specifier .

    SEMICOLON       reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    TYPEDEF         reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    LPAREN          reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    AUTO            reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    STATIC          reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    EXTERN          reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    CONST           reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    VOLATILE        reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    INLINE          reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    VIRTUAL         reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    BNOP            reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    MULTOP          reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    BANDOP          reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    CHAR            reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    SHORT           reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    INT             reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    LONG            reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    SIGNED          reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    UNSIGNED        reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    FLOAT           reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    DOUBLE          reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    VOID            reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    ENUM            reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    IDENTIFIER      reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    DOUBLECOLON     reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    CLASS           reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    STRUCT          reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    UNION           reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    TEMPLATE        reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    OPERATOR        reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    EQUAL           reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    LSPAREN         reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    COMMA           reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    RPAREN          reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    GTCOMP          reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)
    COLON           reduce using rule 169 (decl_specifiers -> decl_specifiers decl_specifier .)


state 68

    (199) function_definition -> decl_specifiers declarator . ctor_initializer fct_body
    (201) function_definition -> decl_specifiers declarator . fct_body
    (293) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (295) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (296) declarator -> declarator . LSPAREN RSPAREN
    (260) init_declarator -> declarator . initializer
    (261) init_declarator -> declarator .
    (276) ctor_initializer -> . COLON mem_initializer_list
    (203) fct_body -> . compound_statement
    (262) initializer -> . EQUAL assignment_expression
    (263) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (264) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (265) initializer -> . LPAREN expression_list RPAREN
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN

    LPAREN          shift and go to state 80
    LSPAREN         shift and go to state 81
    SEMICOLON       reduce using rule 261 (init_declarator -> declarator .)
    COMMA           reduce using rule 261 (init_declarator -> declarator .)
    COLON           shift and go to state 82
    EQUAL           shift and go to state 84
    LCPAREN         shift and go to state 85

    ctor_initializer               shift and go to state 158
    fct_body                       shift and go to state 159
    initializer                    shift and go to state 79
    compound_statement             shift and go to state 83

state 69

    (177) storage_class_specifier -> EXTERN .

    SEMICOLON       reduce using rule 177 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 177 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 177 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 177 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 177 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    VIRTUAL         reduce using rule 177 (storage_class_specifier -> EXTERN .)
    BNOP            reduce using rule 177 (storage_class_specifier -> EXTERN .)
    MULTOP          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    BANDOP          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 177 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 177 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 177 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 177 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 177 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 177 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 177 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 177 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 177 (storage_class_specifier -> EXTERN .)
    DOUBLECOLON     reduce using rule 177 (storage_class_specifier -> EXTERN .)
    CLASS           reduce using rule 177 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 177 (storage_class_specifier -> EXTERN .)
    TEMPLATE        reduce using rule 177 (storage_class_specifier -> EXTERN .)
    OPERATOR        reduce using rule 177 (storage_class_specifier -> EXTERN .)
    EQUAL           reduce using rule 177 (storage_class_specifier -> EXTERN .)
    LSPAREN         reduce using rule 177 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 177 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    GTCOMP          reduce using rule 177 (storage_class_specifier -> EXTERN .)
    COLON           reduce using rule 177 (storage_class_specifier -> EXTERN .)


state 70

    (378) class_key -> TEMPLATE .

    IDENTIFIER      reduce using rule 378 (class_key -> TEMPLATE .)
    COLON           reduce using rule 378 (class_key -> TEMPLATE .)
    LCPAREN         reduce using rule 378 (class_key -> TEMPLATE .)


state 71

    (247) declaration -> declarator_list SEMICOLON .

    ASM             reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    EXTERN          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    LPAREN          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    AUTO            reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    STATIC          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    CONST           reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    INLINE          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    BNOP            reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    MULTOP          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    BANDOP          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    CHAR            reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    SHORT           reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    INT             reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    LONG            reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    SIGNED          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    FLOAT           reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    VOID            reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    ENUM            reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    DOUBLECOLON     reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    CLASS           reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    STRUCT          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    UNION           reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    $end            reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    CASE            reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    LCPAREN         reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    IF              reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    SWITCH          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    WHILE           reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    DO              reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    FOR             reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    BREAK           reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    RETURN          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    GOTO            reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    TRY             reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    DPLUSOP         reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    DMINUSOP        reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    PLUSOP          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    MINUSOP         reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    NOTSYM          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    NEW             reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    DELETE          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    THIS            reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    NUMBER          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    STRING          reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    SCHAR           reduce using rule 247 (declaration -> declarator_list SEMICOLON .)
    ELSE            reduce using rule 247 (declaration -> declarator_list SEMICOLON .)


state 72

    (259) declarator_list -> declarator_list COMMA . init_declarator
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    LPAREN          shift and go to state 14
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 42
    OPERATOR        shift and go to state 63

    init_declarator                shift and go to state 160
    declarator                     shift and go to state 161
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 75
    complete_class_name            shift and go to state 76
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59

state 73

    (270) asm_declaration -> ASM LPAREN . STRING RPAREN SEMICOLON

    STRING          shift and go to state 162


state 74

    (297) declarator -> LPAREN declarator . RPAREN
    (293) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (295) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (296) declarator -> declarator . LSPAREN RSPAREN

    RPAREN          shift and go to state 164
    LPAREN          shift and go to state 163
    LSPAREN         shift and go to state 81


state 75

    (302) dname -> qualified_type_name .

    RPAREN          reduce using rule 302 (dname -> qualified_type_name .)
    LPAREN          reduce using rule 302 (dname -> qualified_type_name .)
    LSPAREN         reduce using rule 302 (dname -> qualified_type_name .)
    COLON           reduce using rule 302 (dname -> qualified_type_name .)
    EQUAL           reduce using rule 302 (dname -> qualified_type_name .)
    LCPAREN         reduce using rule 302 (dname -> qualified_type_name .)
    SEMICOLON       reduce using rule 302 (dname -> qualified_type_name .)
    COMMA           reduce using rule 302 (dname -> qualified_type_name .)
    GTCOMP          reduce using rule 302 (dname -> qualified_type_name .)


state 76

    (397) ptr_operator -> complete_class_name . DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> complete_class_name . DOUBLECOLON MULTOP

    DOUBLECOLON     shift and go to state 97


state 77

    (200) function_definition -> declarator ctor_initializer . fct_body
    (203) fct_body -> . compound_statement
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 85

    fct_body                       shift and go to state 165
    compound_statement             shift and go to state 83

state 78

    (202) function_definition -> declarator fct_body .

    ASM             reduce using rule 202 (function_definition -> declarator fct_body .)
    TEMPLATE        reduce using rule 202 (function_definition -> declarator fct_body .)
    EXTERN          reduce using rule 202 (function_definition -> declarator fct_body .)
    TYPEDEF         reduce using rule 202 (function_definition -> declarator fct_body .)
    LPAREN          reduce using rule 202 (function_definition -> declarator fct_body .)
    AUTO            reduce using rule 202 (function_definition -> declarator fct_body .)
    STATIC          reduce using rule 202 (function_definition -> declarator fct_body .)
    CONST           reduce using rule 202 (function_definition -> declarator fct_body .)
    VOLATILE        reduce using rule 202 (function_definition -> declarator fct_body .)
    INLINE          reduce using rule 202 (function_definition -> declarator fct_body .)
    VIRTUAL         reduce using rule 202 (function_definition -> declarator fct_body .)
    BNOP            reduce using rule 202 (function_definition -> declarator fct_body .)
    MULTOP          reduce using rule 202 (function_definition -> declarator fct_body .)
    BANDOP          reduce using rule 202 (function_definition -> declarator fct_body .)
    CHAR            reduce using rule 202 (function_definition -> declarator fct_body .)
    SHORT           reduce using rule 202 (function_definition -> declarator fct_body .)
    INT             reduce using rule 202 (function_definition -> declarator fct_body .)
    LONG            reduce using rule 202 (function_definition -> declarator fct_body .)
    SIGNED          reduce using rule 202 (function_definition -> declarator fct_body .)
    UNSIGNED        reduce using rule 202 (function_definition -> declarator fct_body .)
    FLOAT           reduce using rule 202 (function_definition -> declarator fct_body .)
    DOUBLE          reduce using rule 202 (function_definition -> declarator fct_body .)
    VOID            reduce using rule 202 (function_definition -> declarator fct_body .)
    ENUM            reduce using rule 202 (function_definition -> declarator fct_body .)
    IDENTIFIER      reduce using rule 202 (function_definition -> declarator fct_body .)
    DOUBLECOLON     reduce using rule 202 (function_definition -> declarator fct_body .)
    CLASS           reduce using rule 202 (function_definition -> declarator fct_body .)
    STRUCT          reduce using rule 202 (function_definition -> declarator fct_body .)
    UNION           reduce using rule 202 (function_definition -> declarator fct_body .)
    OPERATOR        reduce using rule 202 (function_definition -> declarator fct_body .)
    $end            reduce using rule 202 (function_definition -> declarator fct_body .)
    RCPAREN         reduce using rule 202 (function_definition -> declarator fct_body .)
    CASE            reduce using rule 202 (function_definition -> declarator fct_body .)
    DEFAULT         reduce using rule 202 (function_definition -> declarator fct_body .)
    SEMICOLON       reduce using rule 202 (function_definition -> declarator fct_body .)
    LCPAREN         reduce using rule 202 (function_definition -> declarator fct_body .)
    IF              reduce using rule 202 (function_definition -> declarator fct_body .)
    SWITCH          reduce using rule 202 (function_definition -> declarator fct_body .)
    WHILE           reduce using rule 202 (function_definition -> declarator fct_body .)
    DO              reduce using rule 202 (function_definition -> declarator fct_body .)
    FOR             reduce using rule 202 (function_definition -> declarator fct_body .)
    BREAK           reduce using rule 202 (function_definition -> declarator fct_body .)
    CONTINUE        reduce using rule 202 (function_definition -> declarator fct_body .)
    RETURN          reduce using rule 202 (function_definition -> declarator fct_body .)
    GOTO            reduce using rule 202 (function_definition -> declarator fct_body .)
    TRY             reduce using rule 202 (function_definition -> declarator fct_body .)
    DPLUSOP         reduce using rule 202 (function_definition -> declarator fct_body .)
    DMINUSOP        reduce using rule 202 (function_definition -> declarator fct_body .)
    SIZEOF          reduce using rule 202 (function_definition -> declarator fct_body .)
    PLUSOP          reduce using rule 202 (function_definition -> declarator fct_body .)
    MINUSOP         reduce using rule 202 (function_definition -> declarator fct_body .)
    NOTSYM          reduce using rule 202 (function_definition -> declarator fct_body .)
    NEW             reduce using rule 202 (function_definition -> declarator fct_body .)
    DELETE          reduce using rule 202 (function_definition -> declarator fct_body .)
    THIS            reduce using rule 202 (function_definition -> declarator fct_body .)
    NUMBER          reduce using rule 202 (function_definition -> declarator fct_body .)
    STRING          reduce using rule 202 (function_definition -> declarator fct_body .)
    SCHAR           reduce using rule 202 (function_definition -> declarator fct_body .)
    ELSE            reduce using rule 202 (function_definition -> declarator fct_body .)
    PRIVATE         reduce using rule 202 (function_definition -> declarator fct_body .)
    PROTECTED       reduce using rule 202 (function_definition -> declarator fct_body .)
    PUBLIC          reduce using rule 202 (function_definition -> declarator fct_body .)
    COLON           reduce using rule 202 (function_definition -> declarator fct_body .)


state 79

    (260) init_declarator -> declarator initializer .

    SEMICOLON       reduce using rule 260 (init_declarator -> declarator initializer .)
    COMMA           reduce using rule 260 (init_declarator -> declarator initializer .)


state 80

    (293) declarator -> declarator LPAREN . argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> declarator LPAREN . argument_declaration_list RPAREN
    (265) initializer -> LPAREN . expression_list RPAREN
    (159) argument_declaration_list -> . arg_declaration_list
    (160) argument_declaration_list -> .
    (283) expression_list -> . assignment_expression
    (284) expression_list -> . expression_list COMMA assignment_expression
    (161) arg_declaration_list -> . argument_declaration
    (162) arg_declaration_list -> . arg_declaration_list COMMA argument_declaration
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (163) argument_declaration -> . decl_specifiers declarator
    (164) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (165) argument_declaration -> . decl_specifiers abstract_declarator
    (166) argument_declaration -> . decl_specifiers
    (167) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (168) argument_declaration -> . decl_specifiers EQUAL expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 160 (argument_declaration_list -> .)
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    TYPEDEF         shift and go to state 21
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 69
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    ENUM            shift and go to state 53
    OPERATOR        shift and go to state 63
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70

    argument_declaration_list      shift and go to state 167
    expression_list                shift and go to state 168
    arg_declaration_list           shift and go to state 169
    assignment_expression          shift and go to state 170
    argument_declaration           shift and go to state 171
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifiers                shift and go to state 174
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    decl_specifier                 shift and go to state 11
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 187
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 81

    (295) declarator -> declarator LSPAREN . constant_expression RSPAREN
    (296) declarator -> declarator LSPAREN . RSPAREN
    (26) constant_expression -> . conditional_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    RSPAREN         shift and go to state 213
    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    constant_expression            shift and go to state 212
    conditional_expression         shift and go to state 214
    logical_OR_expression          shift and go to state 175
    logical_AND_expression         shift and go to state 184
    inclusive_OR_expression        shift and go to state 197
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 82

    (276) ctor_initializer -> COLON . mem_initializer_list
    (277) mem_initializer_list -> . mem_initializer
    (278) mem_initializer_list -> . mem_initializer COMMA mem_initializer_list
    (279) mem_initializer -> . complete_class_name LPAREN expression_list RPAREN
    (280) mem_initializer -> . complete_class_name LPAREN RPAREN
    (281) mem_initializer -> . IDENTIFIER LPAREN expression_list RPAREN
    (282) mem_initializer -> . IDENTIFIER LPAREN RPAREN
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 221
    DOUBLECOLON     shift and go to state 42

    mem_initializer_list           shift and go to state 218
    mem_initializer                shift and go to state 219
    complete_class_name            shift and go to state 220
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 83

    (203) fct_body -> compound_statement .

    ASM             reduce using rule 203 (fct_body -> compound_statement .)
    TEMPLATE        reduce using rule 203 (fct_body -> compound_statement .)
    EXTERN          reduce using rule 203 (fct_body -> compound_statement .)
    TYPEDEF         reduce using rule 203 (fct_body -> compound_statement .)
    LPAREN          reduce using rule 203 (fct_body -> compound_statement .)
    AUTO            reduce using rule 203 (fct_body -> compound_statement .)
    STATIC          reduce using rule 203 (fct_body -> compound_statement .)
    CONST           reduce using rule 203 (fct_body -> compound_statement .)
    VOLATILE        reduce using rule 203 (fct_body -> compound_statement .)
    INLINE          reduce using rule 203 (fct_body -> compound_statement .)
    VIRTUAL         reduce using rule 203 (fct_body -> compound_statement .)
    BNOP            reduce using rule 203 (fct_body -> compound_statement .)
    MULTOP          reduce using rule 203 (fct_body -> compound_statement .)
    BANDOP          reduce using rule 203 (fct_body -> compound_statement .)
    CHAR            reduce using rule 203 (fct_body -> compound_statement .)
    SHORT           reduce using rule 203 (fct_body -> compound_statement .)
    INT             reduce using rule 203 (fct_body -> compound_statement .)
    LONG            reduce using rule 203 (fct_body -> compound_statement .)
    SIGNED          reduce using rule 203 (fct_body -> compound_statement .)
    UNSIGNED        reduce using rule 203 (fct_body -> compound_statement .)
    FLOAT           reduce using rule 203 (fct_body -> compound_statement .)
    DOUBLE          reduce using rule 203 (fct_body -> compound_statement .)
    VOID            reduce using rule 203 (fct_body -> compound_statement .)
    ENUM            reduce using rule 203 (fct_body -> compound_statement .)
    IDENTIFIER      reduce using rule 203 (fct_body -> compound_statement .)
    DOUBLECOLON     reduce using rule 203 (fct_body -> compound_statement .)
    CLASS           reduce using rule 203 (fct_body -> compound_statement .)
    STRUCT          reduce using rule 203 (fct_body -> compound_statement .)
    UNION           reduce using rule 203 (fct_body -> compound_statement .)
    OPERATOR        reduce using rule 203 (fct_body -> compound_statement .)
    $end            reduce using rule 203 (fct_body -> compound_statement .)
    RCPAREN         reduce using rule 203 (fct_body -> compound_statement .)
    CASE            reduce using rule 203 (fct_body -> compound_statement .)
    DEFAULT         reduce using rule 203 (fct_body -> compound_statement .)
    SEMICOLON       reduce using rule 203 (fct_body -> compound_statement .)
    LCPAREN         reduce using rule 203 (fct_body -> compound_statement .)
    IF              reduce using rule 203 (fct_body -> compound_statement .)
    SWITCH          reduce using rule 203 (fct_body -> compound_statement .)
    WHILE           reduce using rule 203 (fct_body -> compound_statement .)
    DO              reduce using rule 203 (fct_body -> compound_statement .)
    FOR             reduce using rule 203 (fct_body -> compound_statement .)
    BREAK           reduce using rule 203 (fct_body -> compound_statement .)
    CONTINUE        reduce using rule 203 (fct_body -> compound_statement .)
    RETURN          reduce using rule 203 (fct_body -> compound_statement .)
    GOTO            reduce using rule 203 (fct_body -> compound_statement .)
    TRY             reduce using rule 203 (fct_body -> compound_statement .)
    DPLUSOP         reduce using rule 203 (fct_body -> compound_statement .)
    DMINUSOP        reduce using rule 203 (fct_body -> compound_statement .)
    SIZEOF          reduce using rule 203 (fct_body -> compound_statement .)
    PLUSOP          reduce using rule 203 (fct_body -> compound_statement .)
    MINUSOP         reduce using rule 203 (fct_body -> compound_statement .)
    NOTSYM          reduce using rule 203 (fct_body -> compound_statement .)
    NEW             reduce using rule 203 (fct_body -> compound_statement .)
    DELETE          reduce using rule 203 (fct_body -> compound_statement .)
    THIS            reduce using rule 203 (fct_body -> compound_statement .)
    NUMBER          reduce using rule 203 (fct_body -> compound_statement .)
    STRING          reduce using rule 203 (fct_body -> compound_statement .)
    SCHAR           reduce using rule 203 (fct_body -> compound_statement .)
    ELSE            reduce using rule 203 (fct_body -> compound_statement .)
    PRIVATE         reduce using rule 203 (fct_body -> compound_statement .)
    PROTECTED       reduce using rule 203 (fct_body -> compound_statement .)
    PUBLIC          reduce using rule 203 (fct_body -> compound_statement .)
    COLON           reduce using rule 203 (fct_body -> compound_statement .)


state 84

    (262) initializer -> EQUAL . assignment_expression
    (263) initializer -> EQUAL . LCPAREN initializer_list RCPAREN
    (264) initializer -> EQUAL . LCPAREN initializer_list COMMA RCPAREN
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 223
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    assignment_expression          shift and go to state 222
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 85

    (204) compound_statement -> LCPAREN . statement_list RCPAREN
    (205) compound_statement -> LCPAREN . RCPAREN
    (206) statement_list -> . statement
    (207) statement_list -> . statement_list statement
    (208) statement -> . labeled_statement
    (209) statement -> . expression_statement
    (210) statement -> . compound_statement
    (211) statement -> . selection_statement
    (212) statement -> . iteration_statement
    (213) statement -> . jump_statement
    (214) statement -> . declaration_statement
    (215) statement -> . try_block
    (231) labeled_statement -> . IDENTIFIER COLON statement
    (232) labeled_statement -> . CASE constant_expression COLON statement
    (233) labeled_statement -> . DEFAULT COLON statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN
    (221) selection_statement -> . IF LPAREN expression RPAREN statement
    (222) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (223) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (234) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (235) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (236) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (216) jump_statement -> . BREAK SEMICOLON
    (217) jump_statement -> . CONTINUE SEMICOLON
    (218) jump_statement -> . RETURN expression SEMICOLON
    (219) jump_statement -> . RETURN SEMICOLON
    (220) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (244) declaration_statement -> . declaration
    (224) try_block -> . TRY compound_statement handler_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 225
    IDENTIFIER      shift and go to state 235
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237
    SEMICOLON       shift and go to state 239
    LCPAREN         shift and go to state 85
    IF              shift and go to state 240
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 243
    DO              shift and go to state 244
    FOR             shift and go to state 245
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 247
    RETURN          shift and go to state 248
    GOTO            shift and go to state 249
    TRY             shift and go to state 251
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    statement_list                 shift and go to state 224
    statement                      shift and go to state 226
    labeled_statement              shift and go to state 227
    expression_statement           shift and go to state 228
    compound_statement             shift and go to state 229
    selection_statement            shift and go to state 230
    iteration_statement            shift and go to state 231
    jump_statement                 shift and go to state 232
    declaration_statement          shift and go to state 233
    try_block                      shift and go to state 234
    expression                     shift and go to state 238
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 86

    (252) template_declaration -> TEMPLATE LTCOMP . template_argument_list GTCOMP declaration
    (253) template_argument_list -> . template_argument
    (254) template_argument_list -> . template_argument_list COMMA template_argument
    (255) template_argument -> . type_argument
    (256) template_argument -> . argument_declaration
    (257) type_argument -> . CLASS IDENTIFIER
    (163) argument_declaration -> . decl_specifiers declarator
    (164) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (165) argument_declaration -> . decl_specifiers abstract_declarator
    (166) argument_declaration -> . decl_specifiers
    (167) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (168) argument_declaration -> . decl_specifiers EQUAL expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    CLASS           shift and go to state 261
    TYPEDEF         shift and go to state 21
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 69
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    IDENTIFIER      shift and go to state 153

    template_argument_list         shift and go to state 257
    template_argument              shift and go to state 258
    type_argument                  shift and go to state 259
    argument_declaration           shift and go to state 260
    decl_specifiers                shift and go to state 174
    decl_specifier                 shift and go to state 11
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 155
    typedef_name                   shift and go to state 156

state 87

    (271) linkage_specification -> EXTERN STRING . LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> EXTERN STRING . LCPAREN RCPAREN
    (273) linkage_specification -> EXTERN STRING . declaration
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    LCPAREN         shift and go to state 262
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 14
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    declaration                    shift and go to state 263
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59

state 88

    (292) declarator -> ptr_operator declarator .
    (293) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (295) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (296) declarator -> declarator . LSPAREN RSPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    COLON           reduce using rule 292 (declarator -> ptr_operator declarator .)
    EQUAL           reduce using rule 292 (declarator -> ptr_operator declarator .)
    LCPAREN         reduce using rule 292 (declarator -> ptr_operator declarator .)
    SEMICOLON       reduce using rule 292 (declarator -> ptr_operator declarator .)
    COMMA           reduce using rule 292 (declarator -> ptr_operator declarator .)
    RPAREN          reduce using rule 292 (declarator -> ptr_operator declarator .)
    GTCOMP          reduce using rule 292 (declarator -> ptr_operator declarator .)
    LPAREN          shift and go to state 163
    LSPAREN         shift and go to state 81

  ! LPAREN          [ reduce using rule 292 (declarator -> ptr_operator declarator .) ]
  ! LSPAREN         [ reduce using rule 292 (declarator -> ptr_operator declarator .) ]


state 89

    (391) qualified_type_name -> class_name DOUBLECOLON . qualified_type_name
    (406) qualified_class_name -> class_name DOUBLECOLON . qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 153

    class_name                     shift and go to state 154
    qualified_type_name            shift and go to state 264
    qualified_class_name           shift and go to state 265
    typedef_name                   shift and go to state 156

state 90

    (300) dname -> BNOP class_name .
    (306) name -> BNOP class_name .

  ! reduce/reduce conflict for LPAREN resolved using rule 300 (dname -> BNOP class_name .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 300 (dname -> BNOP class_name .)
  ! reduce/reduce conflict for COLON resolved using rule 300 (dname -> BNOP class_name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 300 (dname -> BNOP class_name .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 300 (dname -> BNOP class_name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 300 (dname -> BNOP class_name .)
  ! reduce/reduce conflict for COMMA resolved using rule 300 (dname -> BNOP class_name .)
  ! reduce/reduce conflict for RPAREN resolved using rule 300 (dname -> BNOP class_name .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 300 (dname -> BNOP class_name .)
    LPAREN          reduce using rule 300 (dname -> BNOP class_name .)
    LSPAREN         reduce using rule 300 (dname -> BNOP class_name .)
    COLON           reduce using rule 300 (dname -> BNOP class_name .)
    EQUAL           reduce using rule 300 (dname -> BNOP class_name .)
    LCPAREN         reduce using rule 300 (dname -> BNOP class_name .)
    SEMICOLON       reduce using rule 300 (dname -> BNOP class_name .)
    COMMA           reduce using rule 300 (dname -> BNOP class_name .)
    RPAREN          reduce using rule 300 (dname -> BNOP class_name .)
    GTCOMP          reduce using rule 300 (dname -> BNOP class_name .)
    DOT             reduce using rule 306 (name -> BNOP class_name .)
    ARROW           reduce using rule 306 (name -> BNOP class_name .)
    DPLUSOP         reduce using rule 306 (name -> BNOP class_name .)
    DMINUSOP        reduce using rule 306 (name -> BNOP class_name .)
    LTCOMP          reduce using rule 306 (name -> BNOP class_name .)
    MULTEQOP        reduce using rule 306 (name -> BNOP class_name .)
    DIVEQOP         reduce using rule 306 (name -> BNOP class_name .)
    MODEQOP         reduce using rule 306 (name -> BNOP class_name .)
    PLUSEQOP        reduce using rule 306 (name -> BNOP class_name .)
    MINUSEQOP       reduce using rule 306 (name -> BNOP class_name .)
    LSHIFTEQOP      reduce using rule 306 (name -> BNOP class_name .)
    RSHIFTEQOP      reduce using rule 306 (name -> BNOP class_name .)
    BANDEQOP        reduce using rule 306 (name -> BNOP class_name .)
    BOREQOP         reduce using rule 306 (name -> BNOP class_name .)
    DOTSTAR         reduce using rule 306 (name -> BNOP class_name .)
    ARROWSTAR       reduce using rule 306 (name -> BNOP class_name .)
    MULTOP          reduce using rule 306 (name -> BNOP class_name .)
    DIVOP           reduce using rule 306 (name -> BNOP class_name .)
    MODOP           reduce using rule 306 (name -> BNOP class_name .)
    PLUSOP          reduce using rule 306 (name -> BNOP class_name .)
    MINUSOP         reduce using rule 306 (name -> BNOP class_name .)
    LSHIFT          reduce using rule 306 (name -> BNOP class_name .)
    RSHIFT          reduce using rule 306 (name -> BNOP class_name .)
    LTECOMP         reduce using rule 306 (name -> BNOP class_name .)
    GTECOMP         reduce using rule 306 (name -> BNOP class_name .)
    EQCOMP          reduce using rule 306 (name -> BNOP class_name .)
    NEQCOMP         reduce using rule 306 (name -> BNOP class_name .)
    BANDOP          reduce using rule 306 (name -> BNOP class_name .)
    XOROP           reduce using rule 306 (name -> BNOP class_name .)
    OROP            reduce using rule 306 (name -> BNOP class_name .)
    ANDOP           reduce using rule 306 (name -> BNOP class_name .)
    QUESMARK        reduce using rule 306 (name -> BNOP class_name .)

  ! LPAREN          [ reduce using rule 306 (name -> BNOP class_name .) ]
  ! LSPAREN         [ reduce using rule 306 (name -> BNOP class_name .) ]
  ! COLON           [ reduce using rule 306 (name -> BNOP class_name .) ]
  ! EQUAL           [ reduce using rule 306 (name -> BNOP class_name .) ]
  ! LCPAREN         [ reduce using rule 306 (name -> BNOP class_name .) ]
  ! SEMICOLON       [ reduce using rule 306 (name -> BNOP class_name .) ]
  ! COMMA           [ reduce using rule 306 (name -> BNOP class_name .) ]
  ! RPAREN          [ reduce using rule 306 (name -> BNOP class_name .) ]
  ! GTCOMP          [ reduce using rule 306 (name -> BNOP class_name .) ]


state 91

    (407) class_name -> IDENTIFIER .

    LPAREN          reduce using rule 407 (class_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 407 (class_name -> IDENTIFIER .)
    COLON           reduce using rule 407 (class_name -> IDENTIFIER .)
    EQUAL           reduce using rule 407 (class_name -> IDENTIFIER .)
    LCPAREN         reduce using rule 407 (class_name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 407 (class_name -> IDENTIFIER .)
    COMMA           reduce using rule 407 (class_name -> IDENTIFIER .)
    RPAREN          reduce using rule 407 (class_name -> IDENTIFIER .)
    GTCOMP          reduce using rule 407 (class_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 407 (class_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 407 (class_name -> IDENTIFIER .)
    AUTO            reduce using rule 407 (class_name -> IDENTIFIER .)
    STATIC          reduce using rule 407 (class_name -> IDENTIFIER .)
    EXTERN          reduce using rule 407 (class_name -> IDENTIFIER .)
    CONST           reduce using rule 407 (class_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 407 (class_name -> IDENTIFIER .)
    INLINE          reduce using rule 407 (class_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 407 (class_name -> IDENTIFIER .)
    BNOP            reduce using rule 407 (class_name -> IDENTIFIER .)
    MULTOP          reduce using rule 407 (class_name -> IDENTIFIER .)
    BANDOP          reduce using rule 407 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 407 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 407 (class_name -> IDENTIFIER .)
    INT             reduce using rule 407 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 407 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 407 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 407 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 407 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 407 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 407 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 407 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 407 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 407 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 407 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 407 (class_name -> IDENTIFIER .)
    TEMPLATE        reduce using rule 407 (class_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 407 (class_name -> IDENTIFIER .)
    DOT             reduce using rule 407 (class_name -> IDENTIFIER .)
    ARROW           reduce using rule 407 (class_name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 407 (class_name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 407 (class_name -> IDENTIFIER .)
    LTCOMP          reduce using rule 407 (class_name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 407 (class_name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 407 (class_name -> IDENTIFIER .)
    MODEQOP         reduce using rule 407 (class_name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 407 (class_name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 407 (class_name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 407 (class_name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 407 (class_name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 407 (class_name -> IDENTIFIER .)
    BOREQOP         reduce using rule 407 (class_name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 407 (class_name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 407 (class_name -> IDENTIFIER .)
    DIVOP           reduce using rule 407 (class_name -> IDENTIFIER .)
    MODOP           reduce using rule 407 (class_name -> IDENTIFIER .)
    PLUSOP          reduce using rule 407 (class_name -> IDENTIFIER .)
    MINUSOP         reduce using rule 407 (class_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 407 (class_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 407 (class_name -> IDENTIFIER .)
    LTECOMP         reduce using rule 407 (class_name -> IDENTIFIER .)
    GTECOMP         reduce using rule 407 (class_name -> IDENTIFIER .)
    EQCOMP          reduce using rule 407 (class_name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 407 (class_name -> IDENTIFIER .)
    XOROP           reduce using rule 407 (class_name -> IDENTIFIER .)
    OROP            reduce using rule 407 (class_name -> IDENTIFIER .)
    ANDOP           reduce using rule 407 (class_name -> IDENTIFIER .)
    QUESMARK        reduce using rule 407 (class_name -> IDENTIFIER .)
    RSPAREN         reduce using rule 407 (class_name -> IDENTIFIER .)
    RCPAREN         reduce using rule 407 (class_name -> IDENTIFIER .)


state 92

    (393) ptr_operator -> MULTOP cv_qualifier_list .

    LPAREN          reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    BNOP            reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    MULTOP          reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    BANDOP          reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    IDENTIFIER      reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    DOUBLECOLON     reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    OPERATOR        reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    LSPAREN         reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    COLON           reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    EQUAL           reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    LCPAREN         reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    SEMICOLON       reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    COMMA           reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    RPAREN          reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    DOT             reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    ARROW           reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    DPLUSOP         reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    DMINUSOP        reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    LTCOMP          reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    MULTEQOP        reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    DIVEQOP         reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    MODEQOP         reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    PLUSEQOP        reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    MINUSEQOP       reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    LSHIFTEQOP      reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    RSHIFTEQOP      reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    BANDEQOP        reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    BOREQOP         reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    DOTSTAR         reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    ARROWSTAR       reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    DIVOP           reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    MODOP           reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    PLUSOP          reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    MINUSOP         reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    LSHIFT          reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    RSHIFT          reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    GTCOMP          reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    LTECOMP         reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    GTECOMP         reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    EQCOMP          reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    NEQCOMP         reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    XOROP           reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    OROP            reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    ANDOP           reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    QUESMARK        reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    RSPAREN         reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)
    RCPAREN         reduce using rule 393 (ptr_operator -> MULTOP cv_qualifier_list .)


state 93

    (399) cv_qualifier_list -> cv_qualifier . cv_qualifier_list
    (400) cv_qualifier_list -> cv_qualifier .
    (399) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (400) cv_qualifier_list -> . cv_qualifier
    (401) cv_qualifier -> . CONST
    (402) cv_qualifier -> . VOLATILE

    LPAREN          reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    BNOP            reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    MULTOP          reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    BANDOP          reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    IDENTIFIER      reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    DOUBLECOLON     reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    OPERATOR        reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    LSPAREN         reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    COLON           reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    EQUAL           reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    LCPAREN         reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    SEMICOLON       reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    COMMA           reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    RPAREN          reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    DOT             reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    ARROW           reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    DPLUSOP         reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    DMINUSOP        reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    LTCOMP          reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    MULTEQOP        reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    DIVEQOP         reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    MODEQOP         reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    PLUSEQOP        reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    MINUSEQOP       reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    LSHIFTEQOP      reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    RSHIFTEQOP      reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    BANDEQOP        reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    BOREQOP         reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    DOTSTAR         reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    ARROWSTAR       reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    DIVOP           reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    MODOP           reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    PLUSOP          reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    MINUSOP         reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    LSHIFT          reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    RSHIFT          reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    GTCOMP          reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    LTECOMP         reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    GTECOMP         reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    EQCOMP          reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    NEQCOMP         reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    XOROP           reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    OROP            reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    ANDOP           reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    QUESMARK        reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    RSPAREN         reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    RCPAREN         reduce using rule 400 (cv_qualifier_list -> cv_qualifier .)
    CONST           shift and go to state 94
    VOLATILE        shift and go to state 95

    cv_qualifier                   shift and go to state 93
    cv_qualifier_list              shift and go to state 266

state 94

    (401) cv_qualifier -> CONST .

    CONST           reduce using rule 401 (cv_qualifier -> CONST .)
    VOLATILE        reduce using rule 401 (cv_qualifier -> CONST .)
    LPAREN          reduce using rule 401 (cv_qualifier -> CONST .)
    BNOP            reduce using rule 401 (cv_qualifier -> CONST .)
    MULTOP          reduce using rule 401 (cv_qualifier -> CONST .)
    BANDOP          reduce using rule 401 (cv_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 401 (cv_qualifier -> CONST .)
    DOUBLECOLON     reduce using rule 401 (cv_qualifier -> CONST .)
    OPERATOR        reduce using rule 401 (cv_qualifier -> CONST .)
    LSPAREN         reduce using rule 401 (cv_qualifier -> CONST .)
    COLON           reduce using rule 401 (cv_qualifier -> CONST .)
    EQUAL           reduce using rule 401 (cv_qualifier -> CONST .)
    LCPAREN         reduce using rule 401 (cv_qualifier -> CONST .)
    SEMICOLON       reduce using rule 401 (cv_qualifier -> CONST .)
    COMMA           reduce using rule 401 (cv_qualifier -> CONST .)
    RPAREN          reduce using rule 401 (cv_qualifier -> CONST .)
    DOT             reduce using rule 401 (cv_qualifier -> CONST .)
    ARROW           reduce using rule 401 (cv_qualifier -> CONST .)
    DPLUSOP         reduce using rule 401 (cv_qualifier -> CONST .)
    DMINUSOP        reduce using rule 401 (cv_qualifier -> CONST .)
    LTCOMP          reduce using rule 401 (cv_qualifier -> CONST .)
    MULTEQOP        reduce using rule 401 (cv_qualifier -> CONST .)
    DIVEQOP         reduce using rule 401 (cv_qualifier -> CONST .)
    MODEQOP         reduce using rule 401 (cv_qualifier -> CONST .)
    PLUSEQOP        reduce using rule 401 (cv_qualifier -> CONST .)
    MINUSEQOP       reduce using rule 401 (cv_qualifier -> CONST .)
    LSHIFTEQOP      reduce using rule 401 (cv_qualifier -> CONST .)
    RSHIFTEQOP      reduce using rule 401 (cv_qualifier -> CONST .)
    BANDEQOP        reduce using rule 401 (cv_qualifier -> CONST .)
    BOREQOP         reduce using rule 401 (cv_qualifier -> CONST .)
    DOTSTAR         reduce using rule 401 (cv_qualifier -> CONST .)
    ARROWSTAR       reduce using rule 401 (cv_qualifier -> CONST .)
    DIVOP           reduce using rule 401 (cv_qualifier -> CONST .)
    MODOP           reduce using rule 401 (cv_qualifier -> CONST .)
    PLUSOP          reduce using rule 401 (cv_qualifier -> CONST .)
    MINUSOP         reduce using rule 401 (cv_qualifier -> CONST .)
    LSHIFT          reduce using rule 401 (cv_qualifier -> CONST .)
    RSHIFT          reduce using rule 401 (cv_qualifier -> CONST .)
    GTCOMP          reduce using rule 401 (cv_qualifier -> CONST .)
    LTECOMP         reduce using rule 401 (cv_qualifier -> CONST .)
    GTECOMP         reduce using rule 401 (cv_qualifier -> CONST .)
    EQCOMP          reduce using rule 401 (cv_qualifier -> CONST .)
    NEQCOMP         reduce using rule 401 (cv_qualifier -> CONST .)
    XOROP           reduce using rule 401 (cv_qualifier -> CONST .)
    OROP            reduce using rule 401 (cv_qualifier -> CONST .)
    ANDOP           reduce using rule 401 (cv_qualifier -> CONST .)
    QUESMARK        reduce using rule 401 (cv_qualifier -> CONST .)
    RSPAREN         reduce using rule 401 (cv_qualifier -> CONST .)
    RCPAREN         reduce using rule 401 (cv_qualifier -> CONST .)


state 95

    (402) cv_qualifier -> VOLATILE .

    CONST           reduce using rule 402 (cv_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 402 (cv_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 402 (cv_qualifier -> VOLATILE .)
    BNOP            reduce using rule 402 (cv_qualifier -> VOLATILE .)
    MULTOP          reduce using rule 402 (cv_qualifier -> VOLATILE .)
    BANDOP          reduce using rule 402 (cv_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 402 (cv_qualifier -> VOLATILE .)
    DOUBLECOLON     reduce using rule 402 (cv_qualifier -> VOLATILE .)
    OPERATOR        reduce using rule 402 (cv_qualifier -> VOLATILE .)
    LSPAREN         reduce using rule 402 (cv_qualifier -> VOLATILE .)
    COLON           reduce using rule 402 (cv_qualifier -> VOLATILE .)
    EQUAL           reduce using rule 402 (cv_qualifier -> VOLATILE .)
    LCPAREN         reduce using rule 402 (cv_qualifier -> VOLATILE .)
    SEMICOLON       reduce using rule 402 (cv_qualifier -> VOLATILE .)
    COMMA           reduce using rule 402 (cv_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 402 (cv_qualifier -> VOLATILE .)
    DOT             reduce using rule 402 (cv_qualifier -> VOLATILE .)
    ARROW           reduce using rule 402 (cv_qualifier -> VOLATILE .)
    DPLUSOP         reduce using rule 402 (cv_qualifier -> VOLATILE .)
    DMINUSOP        reduce using rule 402 (cv_qualifier -> VOLATILE .)
    LTCOMP          reduce using rule 402 (cv_qualifier -> VOLATILE .)
    MULTEQOP        reduce using rule 402 (cv_qualifier -> VOLATILE .)
    DIVEQOP         reduce using rule 402 (cv_qualifier -> VOLATILE .)
    MODEQOP         reduce using rule 402 (cv_qualifier -> VOLATILE .)
    PLUSEQOP        reduce using rule 402 (cv_qualifier -> VOLATILE .)
    MINUSEQOP       reduce using rule 402 (cv_qualifier -> VOLATILE .)
    LSHIFTEQOP      reduce using rule 402 (cv_qualifier -> VOLATILE .)
    RSHIFTEQOP      reduce using rule 402 (cv_qualifier -> VOLATILE .)
    BANDEQOP        reduce using rule 402 (cv_qualifier -> VOLATILE .)
    BOREQOP         reduce using rule 402 (cv_qualifier -> VOLATILE .)
    DOTSTAR         reduce using rule 402 (cv_qualifier -> VOLATILE .)
    ARROWSTAR       reduce using rule 402 (cv_qualifier -> VOLATILE .)
    DIVOP           reduce using rule 402 (cv_qualifier -> VOLATILE .)
    MODOP           reduce using rule 402 (cv_qualifier -> VOLATILE .)
    PLUSOP          reduce using rule 402 (cv_qualifier -> VOLATILE .)
    MINUSOP         reduce using rule 402 (cv_qualifier -> VOLATILE .)
    LSHIFT          reduce using rule 402 (cv_qualifier -> VOLATILE .)
    RSHIFT          reduce using rule 402 (cv_qualifier -> VOLATILE .)
    GTCOMP          reduce using rule 402 (cv_qualifier -> VOLATILE .)
    LTECOMP         reduce using rule 402 (cv_qualifier -> VOLATILE .)
    GTECOMP         reduce using rule 402 (cv_qualifier -> VOLATILE .)
    EQCOMP          reduce using rule 402 (cv_qualifier -> VOLATILE .)
    NEQCOMP         reduce using rule 402 (cv_qualifier -> VOLATILE .)
    XOROP           reduce using rule 402 (cv_qualifier -> VOLATILE .)
    OROP            reduce using rule 402 (cv_qualifier -> VOLATILE .)
    ANDOP           reduce using rule 402 (cv_qualifier -> VOLATILE .)
    QUESMARK        reduce using rule 402 (cv_qualifier -> VOLATILE .)
    RSPAREN         reduce using rule 402 (cv_qualifier -> VOLATILE .)
    RCPAREN         reduce using rule 402 (cv_qualifier -> VOLATILE .)


state 96

    (395) ptr_operator -> BANDOP cv_qualifier_list .

    LPAREN          reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    BNOP            reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    MULTOP          reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    BANDOP          reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    IDENTIFIER      reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    DOUBLECOLON     reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    OPERATOR        reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    LSPAREN         reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    COLON           reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    EQUAL           reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    LCPAREN         reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    SEMICOLON       reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    COMMA           reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    RPAREN          reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    DOT             reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    ARROW           reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    DPLUSOP         reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    DMINUSOP        reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    LTCOMP          reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    MULTEQOP        reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    DIVEQOP         reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    MODEQOP         reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    PLUSEQOP        reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    MINUSEQOP       reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    LSHIFTEQOP      reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    RSHIFTEQOP      reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    BANDEQOP        reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    BOREQOP         reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    DOTSTAR         reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    ARROWSTAR       reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    DIVOP           reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    MODOP           reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    PLUSOP          reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    MINUSOP         reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    LSHIFT          reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    RSHIFT          reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    GTCOMP          reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    LTECOMP         reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    GTECOMP         reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    EQCOMP          reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    NEQCOMP         reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    XOROP           reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    OROP            reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    ANDOP           reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    QUESMARK        reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    RSPAREN         reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)
    RCPAREN         reduce using rule 395 (ptr_operator -> BANDOP cv_qualifier_list .)


state 97

    (397) ptr_operator -> complete_class_name DOUBLECOLON . MULTOP cv_qualifier_list
    (398) ptr_operator -> complete_class_name DOUBLECOLON . MULTOP

    MULTOP          shift and go to state 267


state 98

    (404) complete_class_name -> DOUBLECOLON qualified_class_name .

    DOUBLECOLON     reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    SEMICOLON       reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    TYPEDEF         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LPAREN          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    AUTO            reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    STATIC          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    EXTERN          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    CONST           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    VOLATILE        reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    INLINE          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    VIRTUAL         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    BNOP            reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    MULTOP          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    BANDOP          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    CHAR            reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    SHORT           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    INT             reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LONG            reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    SIGNED          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    UNSIGNED        reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    FLOAT           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DOUBLE          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    VOID            reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    ENUM            reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    IDENTIFIER      reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    CLASS           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    STRUCT          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    UNION           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    TEMPLATE        reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    OPERATOR        reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LSPAREN         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    COLON           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    EQUAL           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LCPAREN         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    COMMA           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    RPAREN          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DOT             reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    ARROW           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DPLUSOP         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DMINUSOP        reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LTCOMP          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    MULTEQOP        reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DIVEQOP         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    MODEQOP         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    PLUSEQOP        reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    MINUSEQOP       reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LSHIFTEQOP      reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    RSHIFTEQOP      reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    BANDEQOP        reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    BOREQOP         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DOTSTAR         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    ARROWSTAR       reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DIVOP           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    MODOP           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    PLUSOP          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    MINUSOP         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LSHIFT          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    RSHIFT          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    GTCOMP          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LTECOMP         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    GTECOMP         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    EQCOMP          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    NEQCOMP         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    XOROP           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    OROP            reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    ANDOP           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    QUESMARK        reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    RSPAREN         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    RCPAREN         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)


state 99

    (405) qualified_class_name -> class_name .
    (406) qualified_class_name -> class_name . DOUBLECOLON qualified_class_name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    SEMICOLON       reduce using rule 405 (qualified_class_name -> class_name .)
    TYPEDEF         reduce using rule 405 (qualified_class_name -> class_name .)
    LPAREN          reduce using rule 405 (qualified_class_name -> class_name .)
    AUTO            reduce using rule 405 (qualified_class_name -> class_name .)
    STATIC          reduce using rule 405 (qualified_class_name -> class_name .)
    EXTERN          reduce using rule 405 (qualified_class_name -> class_name .)
    CONST           reduce using rule 405 (qualified_class_name -> class_name .)
    VOLATILE        reduce using rule 405 (qualified_class_name -> class_name .)
    INLINE          reduce using rule 405 (qualified_class_name -> class_name .)
    VIRTUAL         reduce using rule 405 (qualified_class_name -> class_name .)
    BNOP            reduce using rule 405 (qualified_class_name -> class_name .)
    MULTOP          reduce using rule 405 (qualified_class_name -> class_name .)
    BANDOP          reduce using rule 405 (qualified_class_name -> class_name .)
    CHAR            reduce using rule 405 (qualified_class_name -> class_name .)
    SHORT           reduce using rule 405 (qualified_class_name -> class_name .)
    INT             reduce using rule 405 (qualified_class_name -> class_name .)
    LONG            reduce using rule 405 (qualified_class_name -> class_name .)
    SIGNED          reduce using rule 405 (qualified_class_name -> class_name .)
    UNSIGNED        reduce using rule 405 (qualified_class_name -> class_name .)
    FLOAT           reduce using rule 405 (qualified_class_name -> class_name .)
    DOUBLE          reduce using rule 405 (qualified_class_name -> class_name .)
    VOID            reduce using rule 405 (qualified_class_name -> class_name .)
    ENUM            reduce using rule 405 (qualified_class_name -> class_name .)
    IDENTIFIER      reduce using rule 405 (qualified_class_name -> class_name .)
    CLASS           reduce using rule 405 (qualified_class_name -> class_name .)
    STRUCT          reduce using rule 405 (qualified_class_name -> class_name .)
    UNION           reduce using rule 405 (qualified_class_name -> class_name .)
    TEMPLATE        reduce using rule 405 (qualified_class_name -> class_name .)
    OPERATOR        reduce using rule 405 (qualified_class_name -> class_name .)
    LSPAREN         reduce using rule 405 (qualified_class_name -> class_name .)
    COLON           reduce using rule 405 (qualified_class_name -> class_name .)
    EQUAL           reduce using rule 405 (qualified_class_name -> class_name .)
    LCPAREN         reduce using rule 405 (qualified_class_name -> class_name .)
    COMMA           reduce using rule 405 (qualified_class_name -> class_name .)
    RPAREN          reduce using rule 405 (qualified_class_name -> class_name .)
    DOT             reduce using rule 405 (qualified_class_name -> class_name .)
    ARROW           reduce using rule 405 (qualified_class_name -> class_name .)
    DPLUSOP         reduce using rule 405 (qualified_class_name -> class_name .)
    DMINUSOP        reduce using rule 405 (qualified_class_name -> class_name .)
    LTCOMP          reduce using rule 405 (qualified_class_name -> class_name .)
    MULTEQOP        reduce using rule 405 (qualified_class_name -> class_name .)
    DIVEQOP         reduce using rule 405 (qualified_class_name -> class_name .)
    MODEQOP         reduce using rule 405 (qualified_class_name -> class_name .)
    PLUSEQOP        reduce using rule 405 (qualified_class_name -> class_name .)
    MINUSEQOP       reduce using rule 405 (qualified_class_name -> class_name .)
    LSHIFTEQOP      reduce using rule 405 (qualified_class_name -> class_name .)
    RSHIFTEQOP      reduce using rule 405 (qualified_class_name -> class_name .)
    BANDEQOP        reduce using rule 405 (qualified_class_name -> class_name .)
    BOREQOP         reduce using rule 405 (qualified_class_name -> class_name .)
    DOTSTAR         reduce using rule 405 (qualified_class_name -> class_name .)
    ARROWSTAR       reduce using rule 405 (qualified_class_name -> class_name .)
    DIVOP           reduce using rule 405 (qualified_class_name -> class_name .)
    MODOP           reduce using rule 405 (qualified_class_name -> class_name .)
    PLUSOP          reduce using rule 405 (qualified_class_name -> class_name .)
    MINUSOP         reduce using rule 405 (qualified_class_name -> class_name .)
    LSHIFT          reduce using rule 405 (qualified_class_name -> class_name .)
    RSHIFT          reduce using rule 405 (qualified_class_name -> class_name .)
    GTCOMP          reduce using rule 405 (qualified_class_name -> class_name .)
    LTECOMP         reduce using rule 405 (qualified_class_name -> class_name .)
    GTECOMP         reduce using rule 405 (qualified_class_name -> class_name .)
    EQCOMP          reduce using rule 405 (qualified_class_name -> class_name .)
    NEQCOMP         reduce using rule 405 (qualified_class_name -> class_name .)
    XOROP           reduce using rule 405 (qualified_class_name -> class_name .)
    OROP            reduce using rule 405 (qualified_class_name -> class_name .)
    ANDOP           reduce using rule 405 (qualified_class_name -> class_name .)
    QUESMARK        reduce using rule 405 (qualified_class_name -> class_name .)
    RSPAREN         reduce using rule 405 (qualified_class_name -> class_name .)
    RCPAREN         reduce using rule 405 (qualified_class_name -> class_name .)
    DOUBLECOLON     shift and go to state 268

  ! DOUBLECOLON     [ reduce using rule 405 (qualified_class_name -> class_name .) ]


state 100

    (186) class_specifier -> class_head LCPAREN . member_list RCPAREN
    (187) class_specifier -> class_head LCPAREN . RCPAREN
    (188) member_list -> . member_declaration member_list
    (189) member_list -> . member_declaration
    (190) member_list -> . access_specifier COLON member_list
    (191) member_list -> . access_specifier COLON
    (192) member_declaration -> . decl_specifiers member_declarator_list SEMICOLON
    (193) member_declaration -> . member_declarator_list SEMICOLON
    (194) member_declaration -> . decl_specifiers SEMICOLON
    (195) member_declaration -> . SEMICOLON
    (196) member_declaration -> . function_definition SEMICOLON
    (197) member_declaration -> . function_definition
    (198) member_declaration -> . qualified_name SEMICOLON
    (368) access_specifier -> . PRIVATE
    (369) access_specifier -> . PROTECTED
    (370) access_specifier -> . PUBLIC
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (285) member_declarator_list -> . member_declarator
    (286) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (287) member_declarator -> . declarator pure_specifier
    (288) member_declarator -> . declarator
    (289) member_declarator -> . IDENTIFIER COLON constant_expression
    (290) member_declarator -> . COLON constant_expression
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (407) class_name -> . IDENTIFIER
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name

    RCPAREN         shift and go to state 270
    SEMICOLON       shift and go to state 276
    PRIVATE         shift and go to state 279
    PROTECTED       shift and go to state 280
    PUBLIC          shift and go to state 281
    TYPEDEF         shift and go to state 21
    IDENTIFIER      shift and go to state 285
    COLON           shift and go to state 273
    LPAREN          shift and go to state 14
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 69
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    OPERATOR        shift and go to state 63

    class_head                     shift and go to state 52
    member_list                    shift and go to state 269
    member_declaration             shift and go to state 271
    access_specifier               shift and go to state 272
    decl_specifiers                shift and go to state 274
    member_declarator_list         shift and go to state 275
    function_definition            shift and go to state 277
    qualified_name                 shift and go to state 278
    decl_specifier                 shift and go to state 11
    member_declarator              shift and go to state 282
    declarator                     shift and go to state 283
    qualified_class_name           shift and go to state 284
    name                           shift and go to state 34
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    class_name                     shift and go to state 286
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    class_key                      shift and go to state 55
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57

state 101

    (18) enum_specifier -> ENUM IDENTIFIER . LCPAREN enum_list RCPAREN
    (20) enum_specifier -> ENUM IDENTIFIER . LCPAREN RCPAREN
    (374) enum_name -> IDENTIFIER .

  ! shift/reduce conflict for LCPAREN resolved as shift
    LCPAREN         shift and go to state 287
    SEMICOLON       reduce using rule 374 (enum_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 374 (enum_name -> IDENTIFIER .)
    LPAREN          reduce using rule 374 (enum_name -> IDENTIFIER .)
    AUTO            reduce using rule 374 (enum_name -> IDENTIFIER .)
    STATIC          reduce using rule 374 (enum_name -> IDENTIFIER .)
    EXTERN          reduce using rule 374 (enum_name -> IDENTIFIER .)
    CONST           reduce using rule 374 (enum_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 374 (enum_name -> IDENTIFIER .)
    INLINE          reduce using rule 374 (enum_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 374 (enum_name -> IDENTIFIER .)
    BNOP            reduce using rule 374 (enum_name -> IDENTIFIER .)
    MULTOP          reduce using rule 374 (enum_name -> IDENTIFIER .)
    BANDOP          reduce using rule 374 (enum_name -> IDENTIFIER .)
    CHAR            reduce using rule 374 (enum_name -> IDENTIFIER .)
    SHORT           reduce using rule 374 (enum_name -> IDENTIFIER .)
    INT             reduce using rule 374 (enum_name -> IDENTIFIER .)
    LONG            reduce using rule 374 (enum_name -> IDENTIFIER .)
    SIGNED          reduce using rule 374 (enum_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 374 (enum_name -> IDENTIFIER .)
    FLOAT           reduce using rule 374 (enum_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 374 (enum_name -> IDENTIFIER .)
    VOID            reduce using rule 374 (enum_name -> IDENTIFIER .)
    ENUM            reduce using rule 374 (enum_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 374 (enum_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 374 (enum_name -> IDENTIFIER .)
    CLASS           reduce using rule 374 (enum_name -> IDENTIFIER .)
    STRUCT          reduce using rule 374 (enum_name -> IDENTIFIER .)
    UNION           reduce using rule 374 (enum_name -> IDENTIFIER .)
    TEMPLATE        reduce using rule 374 (enum_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 374 (enum_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 374 (enum_name -> IDENTIFIER .)
    COLON           reduce using rule 374 (enum_name -> IDENTIFIER .)
    EQUAL           reduce using rule 374 (enum_name -> IDENTIFIER .)
    COMMA           reduce using rule 374 (enum_name -> IDENTIFIER .)
    RPAREN          reduce using rule 374 (enum_name -> IDENTIFIER .)
    DOT             reduce using rule 374 (enum_name -> IDENTIFIER .)
    ARROW           reduce using rule 374 (enum_name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 374 (enum_name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 374 (enum_name -> IDENTIFIER .)
    LTCOMP          reduce using rule 374 (enum_name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 374 (enum_name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 374 (enum_name -> IDENTIFIER .)
    MODEQOP         reduce using rule 374 (enum_name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 374 (enum_name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 374 (enum_name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 374 (enum_name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 374 (enum_name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 374 (enum_name -> IDENTIFIER .)
    BOREQOP         reduce using rule 374 (enum_name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 374 (enum_name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 374 (enum_name -> IDENTIFIER .)
    DIVOP           reduce using rule 374 (enum_name -> IDENTIFIER .)
    MODOP           reduce using rule 374 (enum_name -> IDENTIFIER .)
    PLUSOP          reduce using rule 374 (enum_name -> IDENTIFIER .)
    MINUSOP         reduce using rule 374 (enum_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 374 (enum_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 374 (enum_name -> IDENTIFIER .)
    GTCOMP          reduce using rule 374 (enum_name -> IDENTIFIER .)
    LTECOMP         reduce using rule 374 (enum_name -> IDENTIFIER .)
    GTECOMP         reduce using rule 374 (enum_name -> IDENTIFIER .)
    EQCOMP          reduce using rule 374 (enum_name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 374 (enum_name -> IDENTIFIER .)
    XOROP           reduce using rule 374 (enum_name -> IDENTIFIER .)
    OROP            reduce using rule 374 (enum_name -> IDENTIFIER .)
    ANDOP           reduce using rule 374 (enum_name -> IDENTIFIER .)
    QUESMARK        reduce using rule 374 (enum_name -> IDENTIFIER .)
    RSPAREN         reduce using rule 374 (enum_name -> IDENTIFIER .)
    RCPAREN         reduce using rule 374 (enum_name -> IDENTIFIER .)

  ! LCPAREN         [ reduce using rule 374 (enum_name -> IDENTIFIER .) ]


state 102

    (19) enum_specifier -> ENUM LCPAREN . enum_list RCPAREN
    (21) enum_specifier -> ENUM LCPAREN . RCPAREN
    (22) enum_list -> . enumerator
    (23) enum_list -> . enum_list COMMA enumerator
    (24) enumerator -> . IDENTIFIER
    (25) enumerator -> . IDENTIFIER EQUAL constant_expression

    RCPAREN         shift and go to state 289
    IDENTIFIER      shift and go to state 291

    enum_list                      shift and go to state 288
    enumerator                     shift and go to state 290

state 103

    (373) elaborated_type_specifier -> ENUM enum_name .

    SEMICOLON       reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    TYPEDEF         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    LPAREN          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    AUTO            reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    STATIC          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    EXTERN          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    CONST           reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    VOLATILE        reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    INLINE          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    VIRTUAL         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    BNOP            reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    MULTOP          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    BANDOP          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    CHAR            reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    SHORT           reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    INT             reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    LONG            reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    SIGNED          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    UNSIGNED        reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    FLOAT           reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    DOUBLE          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    VOID            reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    ENUM            reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    IDENTIFIER      reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    DOUBLECOLON     reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    CLASS           reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    STRUCT          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    UNION           reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    TEMPLATE        reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    OPERATOR        reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    LSPAREN         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    COLON           reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    EQUAL           reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    LCPAREN         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    COMMA           reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    RPAREN          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    DOT             reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    ARROW           reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    DPLUSOP         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    DMINUSOP        reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    LTCOMP          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    MULTEQOP        reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    DIVEQOP         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    MODEQOP         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    PLUSEQOP        reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    MINUSEQOP       reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    LSHIFTEQOP      reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    RSHIFTEQOP      reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    BANDEQOP        reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    BOREQOP         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    DOTSTAR         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    ARROWSTAR       reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    DIVOP           reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    MODOP           reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    PLUSOP          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    MINUSOP         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    LSHIFT          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    RSHIFT          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    GTCOMP          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    LTECOMP         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    GTECOMP         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    EQCOMP          reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    NEQCOMP         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    XOROP           reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    OROP            reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    ANDOP           reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    QUESMARK        reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    RSPAREN         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)
    RCPAREN         reduce using rule 373 (elaborated_type_specifier -> ENUM enum_name .)


state 104

    (371) elaborated_type_specifier -> class_key IDENTIFIER .
    (354) class_head -> class_key IDENTIFIER . base_spec
    (356) class_head -> class_key IDENTIFIER .
    (407) class_name -> IDENTIFIER .
    (360) base_spec -> . COLON base_list

  ! reduce/reduce conflict for LCPAREN resolved using rule 356 (class_head -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for COLON resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for TEMPLATE resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 356 (class_head -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for DOT resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for ARROW resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for DPLUSOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for DMINUSOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for LTCOMP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for MULTEQOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for DIVEQOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for MODEQOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for PLUSEQOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for MINUSEQOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for LSHIFTEQOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for RSHIFTEQOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for BANDEQOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for BOREQOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for DOTSTAR resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for ARROWSTAR resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for DIVOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for MODOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for PLUSOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for MINUSOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for LTECOMP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for GTECOMP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for EQCOMP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for NEQCOMP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for XOROP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for OROP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for ANDOP resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for QUESMARK resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! reduce/reduce conflict for RCPAREN resolved using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
    SEMICOLON       reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    TYPEDEF         reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LPAREN          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    AUTO            reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    STATIC          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    EXTERN          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    CONST           reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    VOLATILE        reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    INLINE          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    VIRTUAL         reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    BNOP            reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MULTOP          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    BANDOP          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    CHAR            reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    SHORT           reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    INT             reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LONG            reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    SIGNED          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    UNSIGNED        reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    FLOAT           reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DOUBLE          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    VOID            reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    ENUM            reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    IDENTIFIER      reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DOUBLECOLON     reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    CLASS           reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    STRUCT          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    UNION           reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    TEMPLATE        reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    OPERATOR        reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LSPAREN         reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    EQUAL           reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    COMMA           reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RPAREN          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DOT             reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    ARROW           reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DPLUSOP         reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DMINUSOP        reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LTCOMP          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MULTEQOP        reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DIVEQOP         reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MODEQOP         reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    PLUSEQOP        reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MINUSEQOP       reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    BANDEQOP        reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    BOREQOP         reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DOTSTAR         reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    ARROWSTAR       reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    DIVOP           reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MODOP           reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    PLUSOP          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    MINUSOP         reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LSHIFT          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RSHIFT          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    GTCOMP          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LTECOMP         reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    GTECOMP         reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    EQCOMP          reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    NEQCOMP         reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    XOROP           reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    OROP            reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    ANDOP           reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    QUESMARK        reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RSPAREN         reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    RCPAREN         reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .)
    LCPAREN         reduce using rule 356 (class_head -> class_key IDENTIFIER .)
    COLON           shift and go to state 107

  ! COLON           [ reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 371 (elaborated_type_specifier -> class_key IDENTIFIER .) ]
  ! COLON           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TEMPLATE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ARROW           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DPLUSOP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DMINUSOP        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LTCOMP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MULTEQOP        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DIVEQOP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MODEQOP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! PLUSEQOP        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MINUSEQOP       [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LSHIFTEQOP      [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RSHIFTEQOP      [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BANDEQOP        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BOREQOP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DOTSTAR         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ARROWSTAR       [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DIVOP           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MODOP           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! PLUSOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MINUSOP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LSHIFT          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RSHIFT          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! GTCOMP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LTECOMP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! GTECOMP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EQCOMP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! NEQCOMP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! XOROP           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! OROP            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ANDOP           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! QUESMARK        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RSPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RCPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]

    base_spec                      shift and go to state 292

state 105

    (372) elaborated_type_specifier -> class_key class_name .
    (358) class_head -> class_key class_name . base_spec
    (359) class_head -> class_key class_name .
    (360) base_spec -> . COLON base_list

  ! reduce/reduce conflict for LCPAREN resolved using rule 359 (class_head -> class_key class_name .)
  ! shift/reduce conflict for COLON resolved as shift
    SEMICOLON       reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    TYPEDEF         reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    LPAREN          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    AUTO            reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    STATIC          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    EXTERN          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    CONST           reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    VOLATILE        reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    INLINE          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    VIRTUAL         reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    BNOP            reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    MULTOP          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    BANDOP          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    CHAR            reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    SHORT           reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    INT             reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    LONG            reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    SIGNED          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    UNSIGNED        reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    FLOAT           reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    DOUBLE          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    VOID            reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    ENUM            reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    IDENTIFIER      reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    DOUBLECOLON     reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    CLASS           reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    STRUCT          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    UNION           reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    TEMPLATE        reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    OPERATOR        reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    LSPAREN         reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    EQUAL           reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    COMMA           reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    RPAREN          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    DOT             reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    ARROW           reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    DPLUSOP         reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    DMINUSOP        reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    LTCOMP          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    MULTEQOP        reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    DIVEQOP         reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    MODEQOP         reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    PLUSEQOP        reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    MINUSEQOP       reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    LSHIFTEQOP      reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    RSHIFTEQOP      reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    BANDEQOP        reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    BOREQOP         reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    DOTSTAR         reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    ARROWSTAR       reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    DIVOP           reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    MODOP           reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    PLUSOP          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    MINUSOP         reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    LSHIFT          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    RSHIFT          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    GTCOMP          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    LTECOMP         reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    GTECOMP         reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    EQCOMP          reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    NEQCOMP         reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    XOROP           reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    OROP            reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    ANDOP           reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    QUESMARK        reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    RSPAREN         reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    RCPAREN         reduce using rule 372 (elaborated_type_specifier -> class_key class_name .)
    LCPAREN         reduce using rule 359 (class_head -> class_key class_name .)
    COLON           shift and go to state 107

  ! COLON           [ reduce using rule 372 (elaborated_type_specifier -> class_key class_name .) ]
  ! LCPAREN         [ reduce using rule 372 (elaborated_type_specifier -> class_key class_name .) ]

    base_spec                      shift and go to state 293

state 106

    (355) class_head -> class_key base_spec .

    LCPAREN         reduce using rule 355 (class_head -> class_key base_spec .)


state 107

    (360) base_spec -> COLON . base_list
    (361) base_list -> . base_specifier
    (362) base_list -> . base_list COMMA base_specifier
    (363) base_specifier -> . complete_class_name
    (364) base_specifier -> . VIRTUAL access_specifier complete_class_name
    (365) base_specifier -> . VIRTUAL complete_class_name
    (366) base_specifier -> . access_specifier VIRTUAL complete_class_name
    (367) base_specifier -> . access_specifier complete_class_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (368) access_specifier -> . PRIVATE
    (369) access_specifier -> . PROTECTED
    (370) access_specifier -> . PUBLIC
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    VIRTUAL         shift and go to state 297
    DOUBLECOLON     shift and go to state 42
    PRIVATE         shift and go to state 279
    PROTECTED       shift and go to state 280
    PUBLIC          shift and go to state 281
    IDENTIFIER      shift and go to state 91

    base_list                      shift and go to state 294
    base_specifier                 shift and go to state 295
    complete_class_name            shift and go to state 296
    access_specifier               shift and go to state 298
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 108

    (308) qualified_name -> qualified_class_name DOUBLECOLON . name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 301
    BNOP            shift and go to state 302
    OPERATOR        shift and go to state 63

    qualified_class_name           shift and go to state 299
    name                           shift and go to state 300
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 99
    qualified_name                 shift and go to state 58

state 109

    (314) operator_function_name -> OPERATOR operator_name .

    LPAREN          reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    LSPAREN         reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    COLON           reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    EQUAL           reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    LCPAREN         reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    SEMICOLON       reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    COMMA           reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    RPAREN          reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    DOT             reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    ARROW           reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    DPLUSOP         reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    DMINUSOP        reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    LTCOMP          reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    MULTEQOP        reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    DIVEQOP         reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    MODEQOP         reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    PLUSEQOP        reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    MINUSEQOP       reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    LSHIFTEQOP      reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    RSHIFTEQOP      reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    BANDEQOP        reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    BOREQOP         reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    DOTSTAR         reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    ARROWSTAR       reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    MULTOP          reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    DIVOP           reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    MODOP           reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    PLUSOP          reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    MINUSOP         reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    LSHIFT          reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    RSHIFT          reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    GTCOMP          reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    LTECOMP         reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    GTECOMP         reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    EQCOMP          reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    NEQCOMP         reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    BANDOP          reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    XOROP           reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    OROP            reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    ANDOP           reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    QUESMARK        reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    RSPAREN         reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)
    RCPAREN         reduce using rule 314 (operator_function_name -> OPERATOR operator_name .)


state 110

    (309) conversion_function_name -> OPERATOR conversion_type_name .

    LPAREN          reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    LSPAREN         reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    COLON           reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    EQUAL           reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    LCPAREN         reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    SEMICOLON       reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    COMMA           reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    RPAREN          reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    DOT             reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    ARROW           reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    DPLUSOP         reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    DMINUSOP        reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    LTCOMP          reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    MULTEQOP        reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    DIVEQOP         reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    MODEQOP         reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    PLUSEQOP        reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    MINUSEQOP       reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    LSHIFTEQOP      reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    RSHIFTEQOP      reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    BANDEQOP        reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    BOREQOP         reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    DOTSTAR         reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    ARROWSTAR       reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    MULTOP          reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    DIVOP           reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    MODOP           reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    PLUSOP          reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    MINUSOP         reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    LSHIFT          reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    RSHIFT          reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    GTCOMP          reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    LTECOMP         reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    GTECOMP         reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    EQCOMP          reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    NEQCOMP         reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    BANDOP          reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    XOROP           reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    OROP            reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    ANDOP           reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    QUESMARK        reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    RSPAREN         reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)
    RCPAREN         reduce using rule 309 (conversion_function_name -> OPERATOR conversion_type_name .)


state 111

    (315) operator_name -> NEW .

    LPAREN          reduce using rule 315 (operator_name -> NEW .)
    LSPAREN         reduce using rule 315 (operator_name -> NEW .)
    COLON           reduce using rule 315 (operator_name -> NEW .)
    EQUAL           reduce using rule 315 (operator_name -> NEW .)
    LCPAREN         reduce using rule 315 (operator_name -> NEW .)
    SEMICOLON       reduce using rule 315 (operator_name -> NEW .)
    COMMA           reduce using rule 315 (operator_name -> NEW .)
    RPAREN          reduce using rule 315 (operator_name -> NEW .)
    DOT             reduce using rule 315 (operator_name -> NEW .)
    ARROW           reduce using rule 315 (operator_name -> NEW .)
    DPLUSOP         reduce using rule 315 (operator_name -> NEW .)
    DMINUSOP        reduce using rule 315 (operator_name -> NEW .)
    LTCOMP          reduce using rule 315 (operator_name -> NEW .)
    MULTEQOP        reduce using rule 315 (operator_name -> NEW .)
    DIVEQOP         reduce using rule 315 (operator_name -> NEW .)
    MODEQOP         reduce using rule 315 (operator_name -> NEW .)
    PLUSEQOP        reduce using rule 315 (operator_name -> NEW .)
    MINUSEQOP       reduce using rule 315 (operator_name -> NEW .)
    LSHIFTEQOP      reduce using rule 315 (operator_name -> NEW .)
    RSHIFTEQOP      reduce using rule 315 (operator_name -> NEW .)
    BANDEQOP        reduce using rule 315 (operator_name -> NEW .)
    BOREQOP         reduce using rule 315 (operator_name -> NEW .)
    DOTSTAR         reduce using rule 315 (operator_name -> NEW .)
    ARROWSTAR       reduce using rule 315 (operator_name -> NEW .)
    MULTOP          reduce using rule 315 (operator_name -> NEW .)
    DIVOP           reduce using rule 315 (operator_name -> NEW .)
    MODOP           reduce using rule 315 (operator_name -> NEW .)
    PLUSOP          reduce using rule 315 (operator_name -> NEW .)
    MINUSOP         reduce using rule 315 (operator_name -> NEW .)
    LSHIFT          reduce using rule 315 (operator_name -> NEW .)
    RSHIFT          reduce using rule 315 (operator_name -> NEW .)
    GTCOMP          reduce using rule 315 (operator_name -> NEW .)
    LTECOMP         reduce using rule 315 (operator_name -> NEW .)
    GTECOMP         reduce using rule 315 (operator_name -> NEW .)
    EQCOMP          reduce using rule 315 (operator_name -> NEW .)
    NEQCOMP         reduce using rule 315 (operator_name -> NEW .)
    BANDOP          reduce using rule 315 (operator_name -> NEW .)
    XOROP           reduce using rule 315 (operator_name -> NEW .)
    OROP            reduce using rule 315 (operator_name -> NEW .)
    ANDOP           reduce using rule 315 (operator_name -> NEW .)
    QUESMARK        reduce using rule 315 (operator_name -> NEW .)
    RSPAREN         reduce using rule 315 (operator_name -> NEW .)
    RCPAREN         reduce using rule 315 (operator_name -> NEW .)


state 112

    (316) operator_name -> DELETE .

    LPAREN          reduce using rule 316 (operator_name -> DELETE .)
    LSPAREN         reduce using rule 316 (operator_name -> DELETE .)
    COLON           reduce using rule 316 (operator_name -> DELETE .)
    EQUAL           reduce using rule 316 (operator_name -> DELETE .)
    LCPAREN         reduce using rule 316 (operator_name -> DELETE .)
    SEMICOLON       reduce using rule 316 (operator_name -> DELETE .)
    COMMA           reduce using rule 316 (operator_name -> DELETE .)
    RPAREN          reduce using rule 316 (operator_name -> DELETE .)
    DOT             reduce using rule 316 (operator_name -> DELETE .)
    ARROW           reduce using rule 316 (operator_name -> DELETE .)
    DPLUSOP         reduce using rule 316 (operator_name -> DELETE .)
    DMINUSOP        reduce using rule 316 (operator_name -> DELETE .)
    LTCOMP          reduce using rule 316 (operator_name -> DELETE .)
    MULTEQOP        reduce using rule 316 (operator_name -> DELETE .)
    DIVEQOP         reduce using rule 316 (operator_name -> DELETE .)
    MODEQOP         reduce using rule 316 (operator_name -> DELETE .)
    PLUSEQOP        reduce using rule 316 (operator_name -> DELETE .)
    MINUSEQOP       reduce using rule 316 (operator_name -> DELETE .)
    LSHIFTEQOP      reduce using rule 316 (operator_name -> DELETE .)
    RSHIFTEQOP      reduce using rule 316 (operator_name -> DELETE .)
    BANDEQOP        reduce using rule 316 (operator_name -> DELETE .)
    BOREQOP         reduce using rule 316 (operator_name -> DELETE .)
    DOTSTAR         reduce using rule 316 (operator_name -> DELETE .)
    ARROWSTAR       reduce using rule 316 (operator_name -> DELETE .)
    MULTOP          reduce using rule 316 (operator_name -> DELETE .)
    DIVOP           reduce using rule 316 (operator_name -> DELETE .)
    MODOP           reduce using rule 316 (operator_name -> DELETE .)
    PLUSOP          reduce using rule 316 (operator_name -> DELETE .)
    MINUSOP         reduce using rule 316 (operator_name -> DELETE .)
    LSHIFT          reduce using rule 316 (operator_name -> DELETE .)
    RSHIFT          reduce using rule 316 (operator_name -> DELETE .)
    GTCOMP          reduce using rule 316 (operator_name -> DELETE .)
    LTECOMP         reduce using rule 316 (operator_name -> DELETE .)
    GTECOMP         reduce using rule 316 (operator_name -> DELETE .)
    EQCOMP          reduce using rule 316 (operator_name -> DELETE .)
    NEQCOMP         reduce using rule 316 (operator_name -> DELETE .)
    BANDOP          reduce using rule 316 (operator_name -> DELETE .)
    XOROP           reduce using rule 316 (operator_name -> DELETE .)
    OROP            reduce using rule 316 (operator_name -> DELETE .)
    ANDOP           reduce using rule 316 (operator_name -> DELETE .)
    QUESMARK        reduce using rule 316 (operator_name -> DELETE .)
    RSPAREN         reduce using rule 316 (operator_name -> DELETE .)
    RCPAREN         reduce using rule 316 (operator_name -> DELETE .)


state 113

    (317) operator_name -> PLUSOP .

    LPAREN          reduce using rule 317 (operator_name -> PLUSOP .)
    LSPAREN         reduce using rule 317 (operator_name -> PLUSOP .)
    COLON           reduce using rule 317 (operator_name -> PLUSOP .)
    EQUAL           reduce using rule 317 (operator_name -> PLUSOP .)
    LCPAREN         reduce using rule 317 (operator_name -> PLUSOP .)
    SEMICOLON       reduce using rule 317 (operator_name -> PLUSOP .)
    COMMA           reduce using rule 317 (operator_name -> PLUSOP .)
    RPAREN          reduce using rule 317 (operator_name -> PLUSOP .)
    DOT             reduce using rule 317 (operator_name -> PLUSOP .)
    ARROW           reduce using rule 317 (operator_name -> PLUSOP .)
    DPLUSOP         reduce using rule 317 (operator_name -> PLUSOP .)
    DMINUSOP        reduce using rule 317 (operator_name -> PLUSOP .)
    LTCOMP          reduce using rule 317 (operator_name -> PLUSOP .)
    MULTEQOP        reduce using rule 317 (operator_name -> PLUSOP .)
    DIVEQOP         reduce using rule 317 (operator_name -> PLUSOP .)
    MODEQOP         reduce using rule 317 (operator_name -> PLUSOP .)
    PLUSEQOP        reduce using rule 317 (operator_name -> PLUSOP .)
    MINUSEQOP       reduce using rule 317 (operator_name -> PLUSOP .)
    LSHIFTEQOP      reduce using rule 317 (operator_name -> PLUSOP .)
    RSHIFTEQOP      reduce using rule 317 (operator_name -> PLUSOP .)
    BANDEQOP        reduce using rule 317 (operator_name -> PLUSOP .)
    BOREQOP         reduce using rule 317 (operator_name -> PLUSOP .)
    DOTSTAR         reduce using rule 317 (operator_name -> PLUSOP .)
    ARROWSTAR       reduce using rule 317 (operator_name -> PLUSOP .)
    MULTOP          reduce using rule 317 (operator_name -> PLUSOP .)
    DIVOP           reduce using rule 317 (operator_name -> PLUSOP .)
    MODOP           reduce using rule 317 (operator_name -> PLUSOP .)
    PLUSOP          reduce using rule 317 (operator_name -> PLUSOP .)
    MINUSOP         reduce using rule 317 (operator_name -> PLUSOP .)
    LSHIFT          reduce using rule 317 (operator_name -> PLUSOP .)
    RSHIFT          reduce using rule 317 (operator_name -> PLUSOP .)
    GTCOMP          reduce using rule 317 (operator_name -> PLUSOP .)
    LTECOMP         reduce using rule 317 (operator_name -> PLUSOP .)
    GTECOMP         reduce using rule 317 (operator_name -> PLUSOP .)
    EQCOMP          reduce using rule 317 (operator_name -> PLUSOP .)
    NEQCOMP         reduce using rule 317 (operator_name -> PLUSOP .)
    BANDOP          reduce using rule 317 (operator_name -> PLUSOP .)
    XOROP           reduce using rule 317 (operator_name -> PLUSOP .)
    OROP            reduce using rule 317 (operator_name -> PLUSOP .)
    ANDOP           reduce using rule 317 (operator_name -> PLUSOP .)
    QUESMARK        reduce using rule 317 (operator_name -> PLUSOP .)
    RSPAREN         reduce using rule 317 (operator_name -> PLUSOP .)
    RCPAREN         reduce using rule 317 (operator_name -> PLUSOP .)


state 114

    (318) operator_name -> MINUSOP .

    LPAREN          reduce using rule 318 (operator_name -> MINUSOP .)
    LSPAREN         reduce using rule 318 (operator_name -> MINUSOP .)
    COLON           reduce using rule 318 (operator_name -> MINUSOP .)
    EQUAL           reduce using rule 318 (operator_name -> MINUSOP .)
    LCPAREN         reduce using rule 318 (operator_name -> MINUSOP .)
    SEMICOLON       reduce using rule 318 (operator_name -> MINUSOP .)
    COMMA           reduce using rule 318 (operator_name -> MINUSOP .)
    RPAREN          reduce using rule 318 (operator_name -> MINUSOP .)
    DOT             reduce using rule 318 (operator_name -> MINUSOP .)
    ARROW           reduce using rule 318 (operator_name -> MINUSOP .)
    DPLUSOP         reduce using rule 318 (operator_name -> MINUSOP .)
    DMINUSOP        reduce using rule 318 (operator_name -> MINUSOP .)
    LTCOMP          reduce using rule 318 (operator_name -> MINUSOP .)
    MULTEQOP        reduce using rule 318 (operator_name -> MINUSOP .)
    DIVEQOP         reduce using rule 318 (operator_name -> MINUSOP .)
    MODEQOP         reduce using rule 318 (operator_name -> MINUSOP .)
    PLUSEQOP        reduce using rule 318 (operator_name -> MINUSOP .)
    MINUSEQOP       reduce using rule 318 (operator_name -> MINUSOP .)
    LSHIFTEQOP      reduce using rule 318 (operator_name -> MINUSOP .)
    RSHIFTEQOP      reduce using rule 318 (operator_name -> MINUSOP .)
    BANDEQOP        reduce using rule 318 (operator_name -> MINUSOP .)
    BOREQOP         reduce using rule 318 (operator_name -> MINUSOP .)
    DOTSTAR         reduce using rule 318 (operator_name -> MINUSOP .)
    ARROWSTAR       reduce using rule 318 (operator_name -> MINUSOP .)
    MULTOP          reduce using rule 318 (operator_name -> MINUSOP .)
    DIVOP           reduce using rule 318 (operator_name -> MINUSOP .)
    MODOP           reduce using rule 318 (operator_name -> MINUSOP .)
    PLUSOP          reduce using rule 318 (operator_name -> MINUSOP .)
    MINUSOP         reduce using rule 318 (operator_name -> MINUSOP .)
    LSHIFT          reduce using rule 318 (operator_name -> MINUSOP .)
    RSHIFT          reduce using rule 318 (operator_name -> MINUSOP .)
    GTCOMP          reduce using rule 318 (operator_name -> MINUSOP .)
    LTECOMP         reduce using rule 318 (operator_name -> MINUSOP .)
    GTECOMP         reduce using rule 318 (operator_name -> MINUSOP .)
    EQCOMP          reduce using rule 318 (operator_name -> MINUSOP .)
    NEQCOMP         reduce using rule 318 (operator_name -> MINUSOP .)
    BANDOP          reduce using rule 318 (operator_name -> MINUSOP .)
    XOROP           reduce using rule 318 (operator_name -> MINUSOP .)
    OROP            reduce using rule 318 (operator_name -> MINUSOP .)
    ANDOP           reduce using rule 318 (operator_name -> MINUSOP .)
    QUESMARK        reduce using rule 318 (operator_name -> MINUSOP .)
    RSPAREN         reduce using rule 318 (operator_name -> MINUSOP .)
    RCPAREN         reduce using rule 318 (operator_name -> MINUSOP .)


state 115

    (319) operator_name -> MULTOP .

    LPAREN          reduce using rule 319 (operator_name -> MULTOP .)
    LSPAREN         reduce using rule 319 (operator_name -> MULTOP .)
    COLON           reduce using rule 319 (operator_name -> MULTOP .)
    EQUAL           reduce using rule 319 (operator_name -> MULTOP .)
    LCPAREN         reduce using rule 319 (operator_name -> MULTOP .)
    SEMICOLON       reduce using rule 319 (operator_name -> MULTOP .)
    COMMA           reduce using rule 319 (operator_name -> MULTOP .)
    RPAREN          reduce using rule 319 (operator_name -> MULTOP .)
    DOT             reduce using rule 319 (operator_name -> MULTOP .)
    ARROW           reduce using rule 319 (operator_name -> MULTOP .)
    DPLUSOP         reduce using rule 319 (operator_name -> MULTOP .)
    DMINUSOP        reduce using rule 319 (operator_name -> MULTOP .)
    LTCOMP          reduce using rule 319 (operator_name -> MULTOP .)
    MULTEQOP        reduce using rule 319 (operator_name -> MULTOP .)
    DIVEQOP         reduce using rule 319 (operator_name -> MULTOP .)
    MODEQOP         reduce using rule 319 (operator_name -> MULTOP .)
    PLUSEQOP        reduce using rule 319 (operator_name -> MULTOP .)
    MINUSEQOP       reduce using rule 319 (operator_name -> MULTOP .)
    LSHIFTEQOP      reduce using rule 319 (operator_name -> MULTOP .)
    RSHIFTEQOP      reduce using rule 319 (operator_name -> MULTOP .)
    BANDEQOP        reduce using rule 319 (operator_name -> MULTOP .)
    BOREQOP         reduce using rule 319 (operator_name -> MULTOP .)
    DOTSTAR         reduce using rule 319 (operator_name -> MULTOP .)
    ARROWSTAR       reduce using rule 319 (operator_name -> MULTOP .)
    MULTOP          reduce using rule 319 (operator_name -> MULTOP .)
    DIVOP           reduce using rule 319 (operator_name -> MULTOP .)
    MODOP           reduce using rule 319 (operator_name -> MULTOP .)
    PLUSOP          reduce using rule 319 (operator_name -> MULTOP .)
    MINUSOP         reduce using rule 319 (operator_name -> MULTOP .)
    LSHIFT          reduce using rule 319 (operator_name -> MULTOP .)
    RSHIFT          reduce using rule 319 (operator_name -> MULTOP .)
    GTCOMP          reduce using rule 319 (operator_name -> MULTOP .)
    LTECOMP         reduce using rule 319 (operator_name -> MULTOP .)
    GTECOMP         reduce using rule 319 (operator_name -> MULTOP .)
    EQCOMP          reduce using rule 319 (operator_name -> MULTOP .)
    NEQCOMP         reduce using rule 319 (operator_name -> MULTOP .)
    BANDOP          reduce using rule 319 (operator_name -> MULTOP .)
    XOROP           reduce using rule 319 (operator_name -> MULTOP .)
    OROP            reduce using rule 319 (operator_name -> MULTOP .)
    ANDOP           reduce using rule 319 (operator_name -> MULTOP .)
    QUESMARK        reduce using rule 319 (operator_name -> MULTOP .)
    RSPAREN         reduce using rule 319 (operator_name -> MULTOP .)
    RCPAREN         reduce using rule 319 (operator_name -> MULTOP .)


state 116

    (320) operator_name -> DIVOP .

    LPAREN          reduce using rule 320 (operator_name -> DIVOP .)
    LSPAREN         reduce using rule 320 (operator_name -> DIVOP .)
    COLON           reduce using rule 320 (operator_name -> DIVOP .)
    EQUAL           reduce using rule 320 (operator_name -> DIVOP .)
    LCPAREN         reduce using rule 320 (operator_name -> DIVOP .)
    SEMICOLON       reduce using rule 320 (operator_name -> DIVOP .)
    COMMA           reduce using rule 320 (operator_name -> DIVOP .)
    RPAREN          reduce using rule 320 (operator_name -> DIVOP .)
    DOT             reduce using rule 320 (operator_name -> DIVOP .)
    ARROW           reduce using rule 320 (operator_name -> DIVOP .)
    DPLUSOP         reduce using rule 320 (operator_name -> DIVOP .)
    DMINUSOP        reduce using rule 320 (operator_name -> DIVOP .)
    LTCOMP          reduce using rule 320 (operator_name -> DIVOP .)
    MULTEQOP        reduce using rule 320 (operator_name -> DIVOP .)
    DIVEQOP         reduce using rule 320 (operator_name -> DIVOP .)
    MODEQOP         reduce using rule 320 (operator_name -> DIVOP .)
    PLUSEQOP        reduce using rule 320 (operator_name -> DIVOP .)
    MINUSEQOP       reduce using rule 320 (operator_name -> DIVOP .)
    LSHIFTEQOP      reduce using rule 320 (operator_name -> DIVOP .)
    RSHIFTEQOP      reduce using rule 320 (operator_name -> DIVOP .)
    BANDEQOP        reduce using rule 320 (operator_name -> DIVOP .)
    BOREQOP         reduce using rule 320 (operator_name -> DIVOP .)
    DOTSTAR         reduce using rule 320 (operator_name -> DIVOP .)
    ARROWSTAR       reduce using rule 320 (operator_name -> DIVOP .)
    MULTOP          reduce using rule 320 (operator_name -> DIVOP .)
    DIVOP           reduce using rule 320 (operator_name -> DIVOP .)
    MODOP           reduce using rule 320 (operator_name -> DIVOP .)
    PLUSOP          reduce using rule 320 (operator_name -> DIVOP .)
    MINUSOP         reduce using rule 320 (operator_name -> DIVOP .)
    LSHIFT          reduce using rule 320 (operator_name -> DIVOP .)
    RSHIFT          reduce using rule 320 (operator_name -> DIVOP .)
    GTCOMP          reduce using rule 320 (operator_name -> DIVOP .)
    LTECOMP         reduce using rule 320 (operator_name -> DIVOP .)
    GTECOMP         reduce using rule 320 (operator_name -> DIVOP .)
    EQCOMP          reduce using rule 320 (operator_name -> DIVOP .)
    NEQCOMP         reduce using rule 320 (operator_name -> DIVOP .)
    BANDOP          reduce using rule 320 (operator_name -> DIVOP .)
    XOROP           reduce using rule 320 (operator_name -> DIVOP .)
    OROP            reduce using rule 320 (operator_name -> DIVOP .)
    ANDOP           reduce using rule 320 (operator_name -> DIVOP .)
    QUESMARK        reduce using rule 320 (operator_name -> DIVOP .)
    RSPAREN         reduce using rule 320 (operator_name -> DIVOP .)
    RCPAREN         reduce using rule 320 (operator_name -> DIVOP .)


state 117

    (321) operator_name -> MODOP .

    LPAREN          reduce using rule 321 (operator_name -> MODOP .)
    LSPAREN         reduce using rule 321 (operator_name -> MODOP .)
    COLON           reduce using rule 321 (operator_name -> MODOP .)
    EQUAL           reduce using rule 321 (operator_name -> MODOP .)
    LCPAREN         reduce using rule 321 (operator_name -> MODOP .)
    SEMICOLON       reduce using rule 321 (operator_name -> MODOP .)
    COMMA           reduce using rule 321 (operator_name -> MODOP .)
    RPAREN          reduce using rule 321 (operator_name -> MODOP .)
    DOT             reduce using rule 321 (operator_name -> MODOP .)
    ARROW           reduce using rule 321 (operator_name -> MODOP .)
    DPLUSOP         reduce using rule 321 (operator_name -> MODOP .)
    DMINUSOP        reduce using rule 321 (operator_name -> MODOP .)
    LTCOMP          reduce using rule 321 (operator_name -> MODOP .)
    MULTEQOP        reduce using rule 321 (operator_name -> MODOP .)
    DIVEQOP         reduce using rule 321 (operator_name -> MODOP .)
    MODEQOP         reduce using rule 321 (operator_name -> MODOP .)
    PLUSEQOP        reduce using rule 321 (operator_name -> MODOP .)
    MINUSEQOP       reduce using rule 321 (operator_name -> MODOP .)
    LSHIFTEQOP      reduce using rule 321 (operator_name -> MODOP .)
    RSHIFTEQOP      reduce using rule 321 (operator_name -> MODOP .)
    BANDEQOP        reduce using rule 321 (operator_name -> MODOP .)
    BOREQOP         reduce using rule 321 (operator_name -> MODOP .)
    DOTSTAR         reduce using rule 321 (operator_name -> MODOP .)
    ARROWSTAR       reduce using rule 321 (operator_name -> MODOP .)
    MULTOP          reduce using rule 321 (operator_name -> MODOP .)
    DIVOP           reduce using rule 321 (operator_name -> MODOP .)
    MODOP           reduce using rule 321 (operator_name -> MODOP .)
    PLUSOP          reduce using rule 321 (operator_name -> MODOP .)
    MINUSOP         reduce using rule 321 (operator_name -> MODOP .)
    LSHIFT          reduce using rule 321 (operator_name -> MODOP .)
    RSHIFT          reduce using rule 321 (operator_name -> MODOP .)
    GTCOMP          reduce using rule 321 (operator_name -> MODOP .)
    LTECOMP         reduce using rule 321 (operator_name -> MODOP .)
    GTECOMP         reduce using rule 321 (operator_name -> MODOP .)
    EQCOMP          reduce using rule 321 (operator_name -> MODOP .)
    NEQCOMP         reduce using rule 321 (operator_name -> MODOP .)
    BANDOP          reduce using rule 321 (operator_name -> MODOP .)
    XOROP           reduce using rule 321 (operator_name -> MODOP .)
    OROP            reduce using rule 321 (operator_name -> MODOP .)
    ANDOP           reduce using rule 321 (operator_name -> MODOP .)
    QUESMARK        reduce using rule 321 (operator_name -> MODOP .)
    RSPAREN         reduce using rule 321 (operator_name -> MODOP .)
    RCPAREN         reduce using rule 321 (operator_name -> MODOP .)


state 118

    (322) operator_name -> XOROP .

    LPAREN          reduce using rule 322 (operator_name -> XOROP .)
    LSPAREN         reduce using rule 322 (operator_name -> XOROP .)
    COLON           reduce using rule 322 (operator_name -> XOROP .)
    EQUAL           reduce using rule 322 (operator_name -> XOROP .)
    LCPAREN         reduce using rule 322 (operator_name -> XOROP .)
    SEMICOLON       reduce using rule 322 (operator_name -> XOROP .)
    COMMA           reduce using rule 322 (operator_name -> XOROP .)
    RPAREN          reduce using rule 322 (operator_name -> XOROP .)
    DOT             reduce using rule 322 (operator_name -> XOROP .)
    ARROW           reduce using rule 322 (operator_name -> XOROP .)
    DPLUSOP         reduce using rule 322 (operator_name -> XOROP .)
    DMINUSOP        reduce using rule 322 (operator_name -> XOROP .)
    LTCOMP          reduce using rule 322 (operator_name -> XOROP .)
    MULTEQOP        reduce using rule 322 (operator_name -> XOROP .)
    DIVEQOP         reduce using rule 322 (operator_name -> XOROP .)
    MODEQOP         reduce using rule 322 (operator_name -> XOROP .)
    PLUSEQOP        reduce using rule 322 (operator_name -> XOROP .)
    MINUSEQOP       reduce using rule 322 (operator_name -> XOROP .)
    LSHIFTEQOP      reduce using rule 322 (operator_name -> XOROP .)
    RSHIFTEQOP      reduce using rule 322 (operator_name -> XOROP .)
    BANDEQOP        reduce using rule 322 (operator_name -> XOROP .)
    BOREQOP         reduce using rule 322 (operator_name -> XOROP .)
    DOTSTAR         reduce using rule 322 (operator_name -> XOROP .)
    ARROWSTAR       reduce using rule 322 (operator_name -> XOROP .)
    MULTOP          reduce using rule 322 (operator_name -> XOROP .)
    DIVOP           reduce using rule 322 (operator_name -> XOROP .)
    MODOP           reduce using rule 322 (operator_name -> XOROP .)
    PLUSOP          reduce using rule 322 (operator_name -> XOROP .)
    MINUSOP         reduce using rule 322 (operator_name -> XOROP .)
    LSHIFT          reduce using rule 322 (operator_name -> XOROP .)
    RSHIFT          reduce using rule 322 (operator_name -> XOROP .)
    GTCOMP          reduce using rule 322 (operator_name -> XOROP .)
    LTECOMP         reduce using rule 322 (operator_name -> XOROP .)
    GTECOMP         reduce using rule 322 (operator_name -> XOROP .)
    EQCOMP          reduce using rule 322 (operator_name -> XOROP .)
    NEQCOMP         reduce using rule 322 (operator_name -> XOROP .)
    BANDOP          reduce using rule 322 (operator_name -> XOROP .)
    XOROP           reduce using rule 322 (operator_name -> XOROP .)
    OROP            reduce using rule 322 (operator_name -> XOROP .)
    ANDOP           reduce using rule 322 (operator_name -> XOROP .)
    QUESMARK        reduce using rule 322 (operator_name -> XOROP .)
    RSPAREN         reduce using rule 322 (operator_name -> XOROP .)
    RCPAREN         reduce using rule 322 (operator_name -> XOROP .)


state 119

    (323) operator_name -> BANDOP .

    LPAREN          reduce using rule 323 (operator_name -> BANDOP .)
    LSPAREN         reduce using rule 323 (operator_name -> BANDOP .)
    COLON           reduce using rule 323 (operator_name -> BANDOP .)
    EQUAL           reduce using rule 323 (operator_name -> BANDOP .)
    LCPAREN         reduce using rule 323 (operator_name -> BANDOP .)
    SEMICOLON       reduce using rule 323 (operator_name -> BANDOP .)
    COMMA           reduce using rule 323 (operator_name -> BANDOP .)
    RPAREN          reduce using rule 323 (operator_name -> BANDOP .)
    DOT             reduce using rule 323 (operator_name -> BANDOP .)
    ARROW           reduce using rule 323 (operator_name -> BANDOP .)
    DPLUSOP         reduce using rule 323 (operator_name -> BANDOP .)
    DMINUSOP        reduce using rule 323 (operator_name -> BANDOP .)
    LTCOMP          reduce using rule 323 (operator_name -> BANDOP .)
    MULTEQOP        reduce using rule 323 (operator_name -> BANDOP .)
    DIVEQOP         reduce using rule 323 (operator_name -> BANDOP .)
    MODEQOP         reduce using rule 323 (operator_name -> BANDOP .)
    PLUSEQOP        reduce using rule 323 (operator_name -> BANDOP .)
    MINUSEQOP       reduce using rule 323 (operator_name -> BANDOP .)
    LSHIFTEQOP      reduce using rule 323 (operator_name -> BANDOP .)
    RSHIFTEQOP      reduce using rule 323 (operator_name -> BANDOP .)
    BANDEQOP        reduce using rule 323 (operator_name -> BANDOP .)
    BOREQOP         reduce using rule 323 (operator_name -> BANDOP .)
    DOTSTAR         reduce using rule 323 (operator_name -> BANDOP .)
    ARROWSTAR       reduce using rule 323 (operator_name -> BANDOP .)
    MULTOP          reduce using rule 323 (operator_name -> BANDOP .)
    DIVOP           reduce using rule 323 (operator_name -> BANDOP .)
    MODOP           reduce using rule 323 (operator_name -> BANDOP .)
    PLUSOP          reduce using rule 323 (operator_name -> BANDOP .)
    MINUSOP         reduce using rule 323 (operator_name -> BANDOP .)
    LSHIFT          reduce using rule 323 (operator_name -> BANDOP .)
    RSHIFT          reduce using rule 323 (operator_name -> BANDOP .)
    GTCOMP          reduce using rule 323 (operator_name -> BANDOP .)
    LTECOMP         reduce using rule 323 (operator_name -> BANDOP .)
    GTECOMP         reduce using rule 323 (operator_name -> BANDOP .)
    EQCOMP          reduce using rule 323 (operator_name -> BANDOP .)
    NEQCOMP         reduce using rule 323 (operator_name -> BANDOP .)
    BANDOP          reduce using rule 323 (operator_name -> BANDOP .)
    XOROP           reduce using rule 323 (operator_name -> BANDOP .)
    OROP            reduce using rule 323 (operator_name -> BANDOP .)
    ANDOP           reduce using rule 323 (operator_name -> BANDOP .)
    QUESMARK        reduce using rule 323 (operator_name -> BANDOP .)
    RSPAREN         reduce using rule 323 (operator_name -> BANDOP .)
    RCPAREN         reduce using rule 323 (operator_name -> BANDOP .)


state 120

    (324) operator_name -> BNOP .

    LPAREN          reduce using rule 324 (operator_name -> BNOP .)
    LSPAREN         reduce using rule 324 (operator_name -> BNOP .)
    COLON           reduce using rule 324 (operator_name -> BNOP .)
    EQUAL           reduce using rule 324 (operator_name -> BNOP .)
    LCPAREN         reduce using rule 324 (operator_name -> BNOP .)
    SEMICOLON       reduce using rule 324 (operator_name -> BNOP .)
    COMMA           reduce using rule 324 (operator_name -> BNOP .)
    RPAREN          reduce using rule 324 (operator_name -> BNOP .)
    DOT             reduce using rule 324 (operator_name -> BNOP .)
    ARROW           reduce using rule 324 (operator_name -> BNOP .)
    DPLUSOP         reduce using rule 324 (operator_name -> BNOP .)
    DMINUSOP        reduce using rule 324 (operator_name -> BNOP .)
    LTCOMP          reduce using rule 324 (operator_name -> BNOP .)
    MULTEQOP        reduce using rule 324 (operator_name -> BNOP .)
    DIVEQOP         reduce using rule 324 (operator_name -> BNOP .)
    MODEQOP         reduce using rule 324 (operator_name -> BNOP .)
    PLUSEQOP        reduce using rule 324 (operator_name -> BNOP .)
    MINUSEQOP       reduce using rule 324 (operator_name -> BNOP .)
    LSHIFTEQOP      reduce using rule 324 (operator_name -> BNOP .)
    RSHIFTEQOP      reduce using rule 324 (operator_name -> BNOP .)
    BANDEQOP        reduce using rule 324 (operator_name -> BNOP .)
    BOREQOP         reduce using rule 324 (operator_name -> BNOP .)
    DOTSTAR         reduce using rule 324 (operator_name -> BNOP .)
    ARROWSTAR       reduce using rule 324 (operator_name -> BNOP .)
    MULTOP          reduce using rule 324 (operator_name -> BNOP .)
    DIVOP           reduce using rule 324 (operator_name -> BNOP .)
    MODOP           reduce using rule 324 (operator_name -> BNOP .)
    PLUSOP          reduce using rule 324 (operator_name -> BNOP .)
    MINUSOP         reduce using rule 324 (operator_name -> BNOP .)
    LSHIFT          reduce using rule 324 (operator_name -> BNOP .)
    RSHIFT          reduce using rule 324 (operator_name -> BNOP .)
    GTCOMP          reduce using rule 324 (operator_name -> BNOP .)
    LTECOMP         reduce using rule 324 (operator_name -> BNOP .)
    GTECOMP         reduce using rule 324 (operator_name -> BNOP .)
    EQCOMP          reduce using rule 324 (operator_name -> BNOP .)
    NEQCOMP         reduce using rule 324 (operator_name -> BNOP .)
    BANDOP          reduce using rule 324 (operator_name -> BNOP .)
    XOROP           reduce using rule 324 (operator_name -> BNOP .)
    OROP            reduce using rule 324 (operator_name -> BNOP .)
    ANDOP           reduce using rule 324 (operator_name -> BNOP .)
    QUESMARK        reduce using rule 324 (operator_name -> BNOP .)
    RSPAREN         reduce using rule 324 (operator_name -> BNOP .)
    RCPAREN         reduce using rule 324 (operator_name -> BNOP .)


state 121

    (325) operator_name -> NOTSYM .

    LPAREN          reduce using rule 325 (operator_name -> NOTSYM .)
    LSPAREN         reduce using rule 325 (operator_name -> NOTSYM .)
    COLON           reduce using rule 325 (operator_name -> NOTSYM .)
    EQUAL           reduce using rule 325 (operator_name -> NOTSYM .)
    LCPAREN         reduce using rule 325 (operator_name -> NOTSYM .)
    SEMICOLON       reduce using rule 325 (operator_name -> NOTSYM .)
    COMMA           reduce using rule 325 (operator_name -> NOTSYM .)
    RPAREN          reduce using rule 325 (operator_name -> NOTSYM .)
    DOT             reduce using rule 325 (operator_name -> NOTSYM .)
    ARROW           reduce using rule 325 (operator_name -> NOTSYM .)
    DPLUSOP         reduce using rule 325 (operator_name -> NOTSYM .)
    DMINUSOP        reduce using rule 325 (operator_name -> NOTSYM .)
    LTCOMP          reduce using rule 325 (operator_name -> NOTSYM .)
    MULTEQOP        reduce using rule 325 (operator_name -> NOTSYM .)
    DIVEQOP         reduce using rule 325 (operator_name -> NOTSYM .)
    MODEQOP         reduce using rule 325 (operator_name -> NOTSYM .)
    PLUSEQOP        reduce using rule 325 (operator_name -> NOTSYM .)
    MINUSEQOP       reduce using rule 325 (operator_name -> NOTSYM .)
    LSHIFTEQOP      reduce using rule 325 (operator_name -> NOTSYM .)
    RSHIFTEQOP      reduce using rule 325 (operator_name -> NOTSYM .)
    BANDEQOP        reduce using rule 325 (operator_name -> NOTSYM .)
    BOREQOP         reduce using rule 325 (operator_name -> NOTSYM .)
    DOTSTAR         reduce using rule 325 (operator_name -> NOTSYM .)
    ARROWSTAR       reduce using rule 325 (operator_name -> NOTSYM .)
    MULTOP          reduce using rule 325 (operator_name -> NOTSYM .)
    DIVOP           reduce using rule 325 (operator_name -> NOTSYM .)
    MODOP           reduce using rule 325 (operator_name -> NOTSYM .)
    PLUSOP          reduce using rule 325 (operator_name -> NOTSYM .)
    MINUSOP         reduce using rule 325 (operator_name -> NOTSYM .)
    LSHIFT          reduce using rule 325 (operator_name -> NOTSYM .)
    RSHIFT          reduce using rule 325 (operator_name -> NOTSYM .)
    GTCOMP          reduce using rule 325 (operator_name -> NOTSYM .)
    LTECOMP         reduce using rule 325 (operator_name -> NOTSYM .)
    GTECOMP         reduce using rule 325 (operator_name -> NOTSYM .)
    EQCOMP          reduce using rule 325 (operator_name -> NOTSYM .)
    NEQCOMP         reduce using rule 325 (operator_name -> NOTSYM .)
    BANDOP          reduce using rule 325 (operator_name -> NOTSYM .)
    XOROP           reduce using rule 325 (operator_name -> NOTSYM .)
    OROP            reduce using rule 325 (operator_name -> NOTSYM .)
    ANDOP           reduce using rule 325 (operator_name -> NOTSYM .)
    QUESMARK        reduce using rule 325 (operator_name -> NOTSYM .)
    RSPAREN         reduce using rule 325 (operator_name -> NOTSYM .)
    RCPAREN         reduce using rule 325 (operator_name -> NOTSYM .)


state 122

    (326) operator_name -> EQUAL .

    LPAREN          reduce using rule 326 (operator_name -> EQUAL .)
    LSPAREN         reduce using rule 326 (operator_name -> EQUAL .)
    COLON           reduce using rule 326 (operator_name -> EQUAL .)
    EQUAL           reduce using rule 326 (operator_name -> EQUAL .)
    LCPAREN         reduce using rule 326 (operator_name -> EQUAL .)
    SEMICOLON       reduce using rule 326 (operator_name -> EQUAL .)
    COMMA           reduce using rule 326 (operator_name -> EQUAL .)
    RPAREN          reduce using rule 326 (operator_name -> EQUAL .)
    DOT             reduce using rule 326 (operator_name -> EQUAL .)
    ARROW           reduce using rule 326 (operator_name -> EQUAL .)
    DPLUSOP         reduce using rule 326 (operator_name -> EQUAL .)
    DMINUSOP        reduce using rule 326 (operator_name -> EQUAL .)
    LTCOMP          reduce using rule 326 (operator_name -> EQUAL .)
    MULTEQOP        reduce using rule 326 (operator_name -> EQUAL .)
    DIVEQOP         reduce using rule 326 (operator_name -> EQUAL .)
    MODEQOP         reduce using rule 326 (operator_name -> EQUAL .)
    PLUSEQOP        reduce using rule 326 (operator_name -> EQUAL .)
    MINUSEQOP       reduce using rule 326 (operator_name -> EQUAL .)
    LSHIFTEQOP      reduce using rule 326 (operator_name -> EQUAL .)
    RSHIFTEQOP      reduce using rule 326 (operator_name -> EQUAL .)
    BANDEQOP        reduce using rule 326 (operator_name -> EQUAL .)
    BOREQOP         reduce using rule 326 (operator_name -> EQUAL .)
    DOTSTAR         reduce using rule 326 (operator_name -> EQUAL .)
    ARROWSTAR       reduce using rule 326 (operator_name -> EQUAL .)
    MULTOP          reduce using rule 326 (operator_name -> EQUAL .)
    DIVOP           reduce using rule 326 (operator_name -> EQUAL .)
    MODOP           reduce using rule 326 (operator_name -> EQUAL .)
    PLUSOP          reduce using rule 326 (operator_name -> EQUAL .)
    MINUSOP         reduce using rule 326 (operator_name -> EQUAL .)
    LSHIFT          reduce using rule 326 (operator_name -> EQUAL .)
    RSHIFT          reduce using rule 326 (operator_name -> EQUAL .)
    GTCOMP          reduce using rule 326 (operator_name -> EQUAL .)
    LTECOMP         reduce using rule 326 (operator_name -> EQUAL .)
    GTECOMP         reduce using rule 326 (operator_name -> EQUAL .)
    EQCOMP          reduce using rule 326 (operator_name -> EQUAL .)
    NEQCOMP         reduce using rule 326 (operator_name -> EQUAL .)
    BANDOP          reduce using rule 326 (operator_name -> EQUAL .)
    XOROP           reduce using rule 326 (operator_name -> EQUAL .)
    OROP            reduce using rule 326 (operator_name -> EQUAL .)
    ANDOP           reduce using rule 326 (operator_name -> EQUAL .)
    QUESMARK        reduce using rule 326 (operator_name -> EQUAL .)
    RSPAREN         reduce using rule 326 (operator_name -> EQUAL .)
    RCPAREN         reduce using rule 326 (operator_name -> EQUAL .)


state 123

    (327) operator_name -> LTCOMP .

    LPAREN          reduce using rule 327 (operator_name -> LTCOMP .)
    LSPAREN         reduce using rule 327 (operator_name -> LTCOMP .)
    COLON           reduce using rule 327 (operator_name -> LTCOMP .)
    EQUAL           reduce using rule 327 (operator_name -> LTCOMP .)
    LCPAREN         reduce using rule 327 (operator_name -> LTCOMP .)
    SEMICOLON       reduce using rule 327 (operator_name -> LTCOMP .)
    COMMA           reduce using rule 327 (operator_name -> LTCOMP .)
    RPAREN          reduce using rule 327 (operator_name -> LTCOMP .)
    DOT             reduce using rule 327 (operator_name -> LTCOMP .)
    ARROW           reduce using rule 327 (operator_name -> LTCOMP .)
    DPLUSOP         reduce using rule 327 (operator_name -> LTCOMP .)
    DMINUSOP        reduce using rule 327 (operator_name -> LTCOMP .)
    LTCOMP          reduce using rule 327 (operator_name -> LTCOMP .)
    MULTEQOP        reduce using rule 327 (operator_name -> LTCOMP .)
    DIVEQOP         reduce using rule 327 (operator_name -> LTCOMP .)
    MODEQOP         reduce using rule 327 (operator_name -> LTCOMP .)
    PLUSEQOP        reduce using rule 327 (operator_name -> LTCOMP .)
    MINUSEQOP       reduce using rule 327 (operator_name -> LTCOMP .)
    LSHIFTEQOP      reduce using rule 327 (operator_name -> LTCOMP .)
    RSHIFTEQOP      reduce using rule 327 (operator_name -> LTCOMP .)
    BANDEQOP        reduce using rule 327 (operator_name -> LTCOMP .)
    BOREQOP         reduce using rule 327 (operator_name -> LTCOMP .)
    DOTSTAR         reduce using rule 327 (operator_name -> LTCOMP .)
    ARROWSTAR       reduce using rule 327 (operator_name -> LTCOMP .)
    MULTOP          reduce using rule 327 (operator_name -> LTCOMP .)
    DIVOP           reduce using rule 327 (operator_name -> LTCOMP .)
    MODOP           reduce using rule 327 (operator_name -> LTCOMP .)
    PLUSOP          reduce using rule 327 (operator_name -> LTCOMP .)
    MINUSOP         reduce using rule 327 (operator_name -> LTCOMP .)
    LSHIFT          reduce using rule 327 (operator_name -> LTCOMP .)
    RSHIFT          reduce using rule 327 (operator_name -> LTCOMP .)
    GTCOMP          reduce using rule 327 (operator_name -> LTCOMP .)
    LTECOMP         reduce using rule 327 (operator_name -> LTCOMP .)
    GTECOMP         reduce using rule 327 (operator_name -> LTCOMP .)
    EQCOMP          reduce using rule 327 (operator_name -> LTCOMP .)
    NEQCOMP         reduce using rule 327 (operator_name -> LTCOMP .)
    BANDOP          reduce using rule 327 (operator_name -> LTCOMP .)
    XOROP           reduce using rule 327 (operator_name -> LTCOMP .)
    OROP            reduce using rule 327 (operator_name -> LTCOMP .)
    ANDOP           reduce using rule 327 (operator_name -> LTCOMP .)
    QUESMARK        reduce using rule 327 (operator_name -> LTCOMP .)
    RSPAREN         reduce using rule 327 (operator_name -> LTCOMP .)
    RCPAREN         reduce using rule 327 (operator_name -> LTCOMP .)


state 124

    (328) operator_name -> GTCOMP .

    LPAREN          reduce using rule 328 (operator_name -> GTCOMP .)
    LSPAREN         reduce using rule 328 (operator_name -> GTCOMP .)
    COLON           reduce using rule 328 (operator_name -> GTCOMP .)
    EQUAL           reduce using rule 328 (operator_name -> GTCOMP .)
    LCPAREN         reduce using rule 328 (operator_name -> GTCOMP .)
    SEMICOLON       reduce using rule 328 (operator_name -> GTCOMP .)
    COMMA           reduce using rule 328 (operator_name -> GTCOMP .)
    RPAREN          reduce using rule 328 (operator_name -> GTCOMP .)
    DOT             reduce using rule 328 (operator_name -> GTCOMP .)
    ARROW           reduce using rule 328 (operator_name -> GTCOMP .)
    DPLUSOP         reduce using rule 328 (operator_name -> GTCOMP .)
    DMINUSOP        reduce using rule 328 (operator_name -> GTCOMP .)
    LTCOMP          reduce using rule 328 (operator_name -> GTCOMP .)
    MULTEQOP        reduce using rule 328 (operator_name -> GTCOMP .)
    DIVEQOP         reduce using rule 328 (operator_name -> GTCOMP .)
    MODEQOP         reduce using rule 328 (operator_name -> GTCOMP .)
    PLUSEQOP        reduce using rule 328 (operator_name -> GTCOMP .)
    MINUSEQOP       reduce using rule 328 (operator_name -> GTCOMP .)
    LSHIFTEQOP      reduce using rule 328 (operator_name -> GTCOMP .)
    RSHIFTEQOP      reduce using rule 328 (operator_name -> GTCOMP .)
    BANDEQOP        reduce using rule 328 (operator_name -> GTCOMP .)
    BOREQOP         reduce using rule 328 (operator_name -> GTCOMP .)
    DOTSTAR         reduce using rule 328 (operator_name -> GTCOMP .)
    ARROWSTAR       reduce using rule 328 (operator_name -> GTCOMP .)
    MULTOP          reduce using rule 328 (operator_name -> GTCOMP .)
    DIVOP           reduce using rule 328 (operator_name -> GTCOMP .)
    MODOP           reduce using rule 328 (operator_name -> GTCOMP .)
    PLUSOP          reduce using rule 328 (operator_name -> GTCOMP .)
    MINUSOP         reduce using rule 328 (operator_name -> GTCOMP .)
    LSHIFT          reduce using rule 328 (operator_name -> GTCOMP .)
    RSHIFT          reduce using rule 328 (operator_name -> GTCOMP .)
    GTCOMP          reduce using rule 328 (operator_name -> GTCOMP .)
    LTECOMP         reduce using rule 328 (operator_name -> GTCOMP .)
    GTECOMP         reduce using rule 328 (operator_name -> GTCOMP .)
    EQCOMP          reduce using rule 328 (operator_name -> GTCOMP .)
    NEQCOMP         reduce using rule 328 (operator_name -> GTCOMP .)
    BANDOP          reduce using rule 328 (operator_name -> GTCOMP .)
    XOROP           reduce using rule 328 (operator_name -> GTCOMP .)
    OROP            reduce using rule 328 (operator_name -> GTCOMP .)
    ANDOP           reduce using rule 328 (operator_name -> GTCOMP .)
    QUESMARK        reduce using rule 328 (operator_name -> GTCOMP .)
    RSPAREN         reduce using rule 328 (operator_name -> GTCOMP .)
    RCPAREN         reduce using rule 328 (operator_name -> GTCOMP .)


state 125

    (329) operator_name -> PLUSEQOP .

    LPAREN          reduce using rule 329 (operator_name -> PLUSEQOP .)
    LSPAREN         reduce using rule 329 (operator_name -> PLUSEQOP .)
    COLON           reduce using rule 329 (operator_name -> PLUSEQOP .)
    EQUAL           reduce using rule 329 (operator_name -> PLUSEQOP .)
    LCPAREN         reduce using rule 329 (operator_name -> PLUSEQOP .)
    SEMICOLON       reduce using rule 329 (operator_name -> PLUSEQOP .)
    COMMA           reduce using rule 329 (operator_name -> PLUSEQOP .)
    RPAREN          reduce using rule 329 (operator_name -> PLUSEQOP .)
    DOT             reduce using rule 329 (operator_name -> PLUSEQOP .)
    ARROW           reduce using rule 329 (operator_name -> PLUSEQOP .)
    DPLUSOP         reduce using rule 329 (operator_name -> PLUSEQOP .)
    DMINUSOP        reduce using rule 329 (operator_name -> PLUSEQOP .)
    LTCOMP          reduce using rule 329 (operator_name -> PLUSEQOP .)
    MULTEQOP        reduce using rule 329 (operator_name -> PLUSEQOP .)
    DIVEQOP         reduce using rule 329 (operator_name -> PLUSEQOP .)
    MODEQOP         reduce using rule 329 (operator_name -> PLUSEQOP .)
    PLUSEQOP        reduce using rule 329 (operator_name -> PLUSEQOP .)
    MINUSEQOP       reduce using rule 329 (operator_name -> PLUSEQOP .)
    LSHIFTEQOP      reduce using rule 329 (operator_name -> PLUSEQOP .)
    RSHIFTEQOP      reduce using rule 329 (operator_name -> PLUSEQOP .)
    BANDEQOP        reduce using rule 329 (operator_name -> PLUSEQOP .)
    BOREQOP         reduce using rule 329 (operator_name -> PLUSEQOP .)
    DOTSTAR         reduce using rule 329 (operator_name -> PLUSEQOP .)
    ARROWSTAR       reduce using rule 329 (operator_name -> PLUSEQOP .)
    MULTOP          reduce using rule 329 (operator_name -> PLUSEQOP .)
    DIVOP           reduce using rule 329 (operator_name -> PLUSEQOP .)
    MODOP           reduce using rule 329 (operator_name -> PLUSEQOP .)
    PLUSOP          reduce using rule 329 (operator_name -> PLUSEQOP .)
    MINUSOP         reduce using rule 329 (operator_name -> PLUSEQOP .)
    LSHIFT          reduce using rule 329 (operator_name -> PLUSEQOP .)
    RSHIFT          reduce using rule 329 (operator_name -> PLUSEQOP .)
    GTCOMP          reduce using rule 329 (operator_name -> PLUSEQOP .)
    LTECOMP         reduce using rule 329 (operator_name -> PLUSEQOP .)
    GTECOMP         reduce using rule 329 (operator_name -> PLUSEQOP .)
    EQCOMP          reduce using rule 329 (operator_name -> PLUSEQOP .)
    NEQCOMP         reduce using rule 329 (operator_name -> PLUSEQOP .)
    BANDOP          reduce using rule 329 (operator_name -> PLUSEQOP .)
    XOROP           reduce using rule 329 (operator_name -> PLUSEQOP .)
    OROP            reduce using rule 329 (operator_name -> PLUSEQOP .)
    ANDOP           reduce using rule 329 (operator_name -> PLUSEQOP .)
    QUESMARK        reduce using rule 329 (operator_name -> PLUSEQOP .)
    RSPAREN         reduce using rule 329 (operator_name -> PLUSEQOP .)
    RCPAREN         reduce using rule 329 (operator_name -> PLUSEQOP .)


state 126

    (330) operator_name -> MINUSEQOP .

    LPAREN          reduce using rule 330 (operator_name -> MINUSEQOP .)
    LSPAREN         reduce using rule 330 (operator_name -> MINUSEQOP .)
    COLON           reduce using rule 330 (operator_name -> MINUSEQOP .)
    EQUAL           reduce using rule 330 (operator_name -> MINUSEQOP .)
    LCPAREN         reduce using rule 330 (operator_name -> MINUSEQOP .)
    SEMICOLON       reduce using rule 330 (operator_name -> MINUSEQOP .)
    COMMA           reduce using rule 330 (operator_name -> MINUSEQOP .)
    RPAREN          reduce using rule 330 (operator_name -> MINUSEQOP .)
    DOT             reduce using rule 330 (operator_name -> MINUSEQOP .)
    ARROW           reduce using rule 330 (operator_name -> MINUSEQOP .)
    DPLUSOP         reduce using rule 330 (operator_name -> MINUSEQOP .)
    DMINUSOP        reduce using rule 330 (operator_name -> MINUSEQOP .)
    LTCOMP          reduce using rule 330 (operator_name -> MINUSEQOP .)
    MULTEQOP        reduce using rule 330 (operator_name -> MINUSEQOP .)
    DIVEQOP         reduce using rule 330 (operator_name -> MINUSEQOP .)
    MODEQOP         reduce using rule 330 (operator_name -> MINUSEQOP .)
    PLUSEQOP        reduce using rule 330 (operator_name -> MINUSEQOP .)
    MINUSEQOP       reduce using rule 330 (operator_name -> MINUSEQOP .)
    LSHIFTEQOP      reduce using rule 330 (operator_name -> MINUSEQOP .)
    RSHIFTEQOP      reduce using rule 330 (operator_name -> MINUSEQOP .)
    BANDEQOP        reduce using rule 330 (operator_name -> MINUSEQOP .)
    BOREQOP         reduce using rule 330 (operator_name -> MINUSEQOP .)
    DOTSTAR         reduce using rule 330 (operator_name -> MINUSEQOP .)
    ARROWSTAR       reduce using rule 330 (operator_name -> MINUSEQOP .)
    MULTOP          reduce using rule 330 (operator_name -> MINUSEQOP .)
    DIVOP           reduce using rule 330 (operator_name -> MINUSEQOP .)
    MODOP           reduce using rule 330 (operator_name -> MINUSEQOP .)
    PLUSOP          reduce using rule 330 (operator_name -> MINUSEQOP .)
    MINUSOP         reduce using rule 330 (operator_name -> MINUSEQOP .)
    LSHIFT          reduce using rule 330 (operator_name -> MINUSEQOP .)
    RSHIFT          reduce using rule 330 (operator_name -> MINUSEQOP .)
    GTCOMP          reduce using rule 330 (operator_name -> MINUSEQOP .)
    LTECOMP         reduce using rule 330 (operator_name -> MINUSEQOP .)
    GTECOMP         reduce using rule 330 (operator_name -> MINUSEQOP .)
    EQCOMP          reduce using rule 330 (operator_name -> MINUSEQOP .)
    NEQCOMP         reduce using rule 330 (operator_name -> MINUSEQOP .)
    BANDOP          reduce using rule 330 (operator_name -> MINUSEQOP .)
    XOROP           reduce using rule 330 (operator_name -> MINUSEQOP .)
    OROP            reduce using rule 330 (operator_name -> MINUSEQOP .)
    ANDOP           reduce using rule 330 (operator_name -> MINUSEQOP .)
    QUESMARK        reduce using rule 330 (operator_name -> MINUSEQOP .)
    RSPAREN         reduce using rule 330 (operator_name -> MINUSEQOP .)
    RCPAREN         reduce using rule 330 (operator_name -> MINUSEQOP .)


state 127

    (331) operator_name -> MULTEQOP .

    LPAREN          reduce using rule 331 (operator_name -> MULTEQOP .)
    LSPAREN         reduce using rule 331 (operator_name -> MULTEQOP .)
    COLON           reduce using rule 331 (operator_name -> MULTEQOP .)
    EQUAL           reduce using rule 331 (operator_name -> MULTEQOP .)
    LCPAREN         reduce using rule 331 (operator_name -> MULTEQOP .)
    SEMICOLON       reduce using rule 331 (operator_name -> MULTEQOP .)
    COMMA           reduce using rule 331 (operator_name -> MULTEQOP .)
    RPAREN          reduce using rule 331 (operator_name -> MULTEQOP .)
    DOT             reduce using rule 331 (operator_name -> MULTEQOP .)
    ARROW           reduce using rule 331 (operator_name -> MULTEQOP .)
    DPLUSOP         reduce using rule 331 (operator_name -> MULTEQOP .)
    DMINUSOP        reduce using rule 331 (operator_name -> MULTEQOP .)
    LTCOMP          reduce using rule 331 (operator_name -> MULTEQOP .)
    MULTEQOP        reduce using rule 331 (operator_name -> MULTEQOP .)
    DIVEQOP         reduce using rule 331 (operator_name -> MULTEQOP .)
    MODEQOP         reduce using rule 331 (operator_name -> MULTEQOP .)
    PLUSEQOP        reduce using rule 331 (operator_name -> MULTEQOP .)
    MINUSEQOP       reduce using rule 331 (operator_name -> MULTEQOP .)
    LSHIFTEQOP      reduce using rule 331 (operator_name -> MULTEQOP .)
    RSHIFTEQOP      reduce using rule 331 (operator_name -> MULTEQOP .)
    BANDEQOP        reduce using rule 331 (operator_name -> MULTEQOP .)
    BOREQOP         reduce using rule 331 (operator_name -> MULTEQOP .)
    DOTSTAR         reduce using rule 331 (operator_name -> MULTEQOP .)
    ARROWSTAR       reduce using rule 331 (operator_name -> MULTEQOP .)
    MULTOP          reduce using rule 331 (operator_name -> MULTEQOP .)
    DIVOP           reduce using rule 331 (operator_name -> MULTEQOP .)
    MODOP           reduce using rule 331 (operator_name -> MULTEQOP .)
    PLUSOP          reduce using rule 331 (operator_name -> MULTEQOP .)
    MINUSOP         reduce using rule 331 (operator_name -> MULTEQOP .)
    LSHIFT          reduce using rule 331 (operator_name -> MULTEQOP .)
    RSHIFT          reduce using rule 331 (operator_name -> MULTEQOP .)
    GTCOMP          reduce using rule 331 (operator_name -> MULTEQOP .)
    LTECOMP         reduce using rule 331 (operator_name -> MULTEQOP .)
    GTECOMP         reduce using rule 331 (operator_name -> MULTEQOP .)
    EQCOMP          reduce using rule 331 (operator_name -> MULTEQOP .)
    NEQCOMP         reduce using rule 331 (operator_name -> MULTEQOP .)
    BANDOP          reduce using rule 331 (operator_name -> MULTEQOP .)
    XOROP           reduce using rule 331 (operator_name -> MULTEQOP .)
    OROP            reduce using rule 331 (operator_name -> MULTEQOP .)
    ANDOP           reduce using rule 331 (operator_name -> MULTEQOP .)
    QUESMARK        reduce using rule 331 (operator_name -> MULTEQOP .)
    RSPAREN         reduce using rule 331 (operator_name -> MULTEQOP .)
    RCPAREN         reduce using rule 331 (operator_name -> MULTEQOP .)


state 128

    (332) operator_name -> DIVEQOP .

    LPAREN          reduce using rule 332 (operator_name -> DIVEQOP .)
    LSPAREN         reduce using rule 332 (operator_name -> DIVEQOP .)
    COLON           reduce using rule 332 (operator_name -> DIVEQOP .)
    EQUAL           reduce using rule 332 (operator_name -> DIVEQOP .)
    LCPAREN         reduce using rule 332 (operator_name -> DIVEQOP .)
    SEMICOLON       reduce using rule 332 (operator_name -> DIVEQOP .)
    COMMA           reduce using rule 332 (operator_name -> DIVEQOP .)
    RPAREN          reduce using rule 332 (operator_name -> DIVEQOP .)
    DOT             reduce using rule 332 (operator_name -> DIVEQOP .)
    ARROW           reduce using rule 332 (operator_name -> DIVEQOP .)
    DPLUSOP         reduce using rule 332 (operator_name -> DIVEQOP .)
    DMINUSOP        reduce using rule 332 (operator_name -> DIVEQOP .)
    LTCOMP          reduce using rule 332 (operator_name -> DIVEQOP .)
    MULTEQOP        reduce using rule 332 (operator_name -> DIVEQOP .)
    DIVEQOP         reduce using rule 332 (operator_name -> DIVEQOP .)
    MODEQOP         reduce using rule 332 (operator_name -> DIVEQOP .)
    PLUSEQOP        reduce using rule 332 (operator_name -> DIVEQOP .)
    MINUSEQOP       reduce using rule 332 (operator_name -> DIVEQOP .)
    LSHIFTEQOP      reduce using rule 332 (operator_name -> DIVEQOP .)
    RSHIFTEQOP      reduce using rule 332 (operator_name -> DIVEQOP .)
    BANDEQOP        reduce using rule 332 (operator_name -> DIVEQOP .)
    BOREQOP         reduce using rule 332 (operator_name -> DIVEQOP .)
    DOTSTAR         reduce using rule 332 (operator_name -> DIVEQOP .)
    ARROWSTAR       reduce using rule 332 (operator_name -> DIVEQOP .)
    MULTOP          reduce using rule 332 (operator_name -> DIVEQOP .)
    DIVOP           reduce using rule 332 (operator_name -> DIVEQOP .)
    MODOP           reduce using rule 332 (operator_name -> DIVEQOP .)
    PLUSOP          reduce using rule 332 (operator_name -> DIVEQOP .)
    MINUSOP         reduce using rule 332 (operator_name -> DIVEQOP .)
    LSHIFT          reduce using rule 332 (operator_name -> DIVEQOP .)
    RSHIFT          reduce using rule 332 (operator_name -> DIVEQOP .)
    GTCOMP          reduce using rule 332 (operator_name -> DIVEQOP .)
    LTECOMP         reduce using rule 332 (operator_name -> DIVEQOP .)
    GTECOMP         reduce using rule 332 (operator_name -> DIVEQOP .)
    EQCOMP          reduce using rule 332 (operator_name -> DIVEQOP .)
    NEQCOMP         reduce using rule 332 (operator_name -> DIVEQOP .)
    BANDOP          reduce using rule 332 (operator_name -> DIVEQOP .)
    XOROP           reduce using rule 332 (operator_name -> DIVEQOP .)
    OROP            reduce using rule 332 (operator_name -> DIVEQOP .)
    ANDOP           reduce using rule 332 (operator_name -> DIVEQOP .)
    QUESMARK        reduce using rule 332 (operator_name -> DIVEQOP .)
    RSPAREN         reduce using rule 332 (operator_name -> DIVEQOP .)
    RCPAREN         reduce using rule 332 (operator_name -> DIVEQOP .)


state 129

    (333) operator_name -> MODEQOP .

    LPAREN          reduce using rule 333 (operator_name -> MODEQOP .)
    LSPAREN         reduce using rule 333 (operator_name -> MODEQOP .)
    COLON           reduce using rule 333 (operator_name -> MODEQOP .)
    EQUAL           reduce using rule 333 (operator_name -> MODEQOP .)
    LCPAREN         reduce using rule 333 (operator_name -> MODEQOP .)
    SEMICOLON       reduce using rule 333 (operator_name -> MODEQOP .)
    COMMA           reduce using rule 333 (operator_name -> MODEQOP .)
    RPAREN          reduce using rule 333 (operator_name -> MODEQOP .)
    DOT             reduce using rule 333 (operator_name -> MODEQOP .)
    ARROW           reduce using rule 333 (operator_name -> MODEQOP .)
    DPLUSOP         reduce using rule 333 (operator_name -> MODEQOP .)
    DMINUSOP        reduce using rule 333 (operator_name -> MODEQOP .)
    LTCOMP          reduce using rule 333 (operator_name -> MODEQOP .)
    MULTEQOP        reduce using rule 333 (operator_name -> MODEQOP .)
    DIVEQOP         reduce using rule 333 (operator_name -> MODEQOP .)
    MODEQOP         reduce using rule 333 (operator_name -> MODEQOP .)
    PLUSEQOP        reduce using rule 333 (operator_name -> MODEQOP .)
    MINUSEQOP       reduce using rule 333 (operator_name -> MODEQOP .)
    LSHIFTEQOP      reduce using rule 333 (operator_name -> MODEQOP .)
    RSHIFTEQOP      reduce using rule 333 (operator_name -> MODEQOP .)
    BANDEQOP        reduce using rule 333 (operator_name -> MODEQOP .)
    BOREQOP         reduce using rule 333 (operator_name -> MODEQOP .)
    DOTSTAR         reduce using rule 333 (operator_name -> MODEQOP .)
    ARROWSTAR       reduce using rule 333 (operator_name -> MODEQOP .)
    MULTOP          reduce using rule 333 (operator_name -> MODEQOP .)
    DIVOP           reduce using rule 333 (operator_name -> MODEQOP .)
    MODOP           reduce using rule 333 (operator_name -> MODEQOP .)
    PLUSOP          reduce using rule 333 (operator_name -> MODEQOP .)
    MINUSOP         reduce using rule 333 (operator_name -> MODEQOP .)
    LSHIFT          reduce using rule 333 (operator_name -> MODEQOP .)
    RSHIFT          reduce using rule 333 (operator_name -> MODEQOP .)
    GTCOMP          reduce using rule 333 (operator_name -> MODEQOP .)
    LTECOMP         reduce using rule 333 (operator_name -> MODEQOP .)
    GTECOMP         reduce using rule 333 (operator_name -> MODEQOP .)
    EQCOMP          reduce using rule 333 (operator_name -> MODEQOP .)
    NEQCOMP         reduce using rule 333 (operator_name -> MODEQOP .)
    BANDOP          reduce using rule 333 (operator_name -> MODEQOP .)
    XOROP           reduce using rule 333 (operator_name -> MODEQOP .)
    OROP            reduce using rule 333 (operator_name -> MODEQOP .)
    ANDOP           reduce using rule 333 (operator_name -> MODEQOP .)
    QUESMARK        reduce using rule 333 (operator_name -> MODEQOP .)
    RSPAREN         reduce using rule 333 (operator_name -> MODEQOP .)
    RCPAREN         reduce using rule 333 (operator_name -> MODEQOP .)


state 130

    (334) operator_name -> XOREQOP .

    LPAREN          reduce using rule 334 (operator_name -> XOREQOP .)
    LSPAREN         reduce using rule 334 (operator_name -> XOREQOP .)
    COLON           reduce using rule 334 (operator_name -> XOREQOP .)
    EQUAL           reduce using rule 334 (operator_name -> XOREQOP .)
    LCPAREN         reduce using rule 334 (operator_name -> XOREQOP .)
    SEMICOLON       reduce using rule 334 (operator_name -> XOREQOP .)
    COMMA           reduce using rule 334 (operator_name -> XOREQOP .)
    RPAREN          reduce using rule 334 (operator_name -> XOREQOP .)
    DOT             reduce using rule 334 (operator_name -> XOREQOP .)
    ARROW           reduce using rule 334 (operator_name -> XOREQOP .)
    DPLUSOP         reduce using rule 334 (operator_name -> XOREQOP .)
    DMINUSOP        reduce using rule 334 (operator_name -> XOREQOP .)
    LTCOMP          reduce using rule 334 (operator_name -> XOREQOP .)
    MULTEQOP        reduce using rule 334 (operator_name -> XOREQOP .)
    DIVEQOP         reduce using rule 334 (operator_name -> XOREQOP .)
    MODEQOP         reduce using rule 334 (operator_name -> XOREQOP .)
    PLUSEQOP        reduce using rule 334 (operator_name -> XOREQOP .)
    MINUSEQOP       reduce using rule 334 (operator_name -> XOREQOP .)
    LSHIFTEQOP      reduce using rule 334 (operator_name -> XOREQOP .)
    RSHIFTEQOP      reduce using rule 334 (operator_name -> XOREQOP .)
    BANDEQOP        reduce using rule 334 (operator_name -> XOREQOP .)
    BOREQOP         reduce using rule 334 (operator_name -> XOREQOP .)
    DOTSTAR         reduce using rule 334 (operator_name -> XOREQOP .)
    ARROWSTAR       reduce using rule 334 (operator_name -> XOREQOP .)
    MULTOP          reduce using rule 334 (operator_name -> XOREQOP .)
    DIVOP           reduce using rule 334 (operator_name -> XOREQOP .)
    MODOP           reduce using rule 334 (operator_name -> XOREQOP .)
    PLUSOP          reduce using rule 334 (operator_name -> XOREQOP .)
    MINUSOP         reduce using rule 334 (operator_name -> XOREQOP .)
    LSHIFT          reduce using rule 334 (operator_name -> XOREQOP .)
    RSHIFT          reduce using rule 334 (operator_name -> XOREQOP .)
    GTCOMP          reduce using rule 334 (operator_name -> XOREQOP .)
    LTECOMP         reduce using rule 334 (operator_name -> XOREQOP .)
    GTECOMP         reduce using rule 334 (operator_name -> XOREQOP .)
    EQCOMP          reduce using rule 334 (operator_name -> XOREQOP .)
    NEQCOMP         reduce using rule 334 (operator_name -> XOREQOP .)
    BANDOP          reduce using rule 334 (operator_name -> XOREQOP .)
    XOROP           reduce using rule 334 (operator_name -> XOREQOP .)
    OROP            reduce using rule 334 (operator_name -> XOREQOP .)
    ANDOP           reduce using rule 334 (operator_name -> XOREQOP .)
    QUESMARK        reduce using rule 334 (operator_name -> XOREQOP .)
    RSPAREN         reduce using rule 334 (operator_name -> XOREQOP .)
    RCPAREN         reduce using rule 334 (operator_name -> XOREQOP .)


state 131

    (335) operator_name -> BANDEQOP .

    LPAREN          reduce using rule 335 (operator_name -> BANDEQOP .)
    LSPAREN         reduce using rule 335 (operator_name -> BANDEQOP .)
    COLON           reduce using rule 335 (operator_name -> BANDEQOP .)
    EQUAL           reduce using rule 335 (operator_name -> BANDEQOP .)
    LCPAREN         reduce using rule 335 (operator_name -> BANDEQOP .)
    SEMICOLON       reduce using rule 335 (operator_name -> BANDEQOP .)
    COMMA           reduce using rule 335 (operator_name -> BANDEQOP .)
    RPAREN          reduce using rule 335 (operator_name -> BANDEQOP .)
    DOT             reduce using rule 335 (operator_name -> BANDEQOP .)
    ARROW           reduce using rule 335 (operator_name -> BANDEQOP .)
    DPLUSOP         reduce using rule 335 (operator_name -> BANDEQOP .)
    DMINUSOP        reduce using rule 335 (operator_name -> BANDEQOP .)
    LTCOMP          reduce using rule 335 (operator_name -> BANDEQOP .)
    MULTEQOP        reduce using rule 335 (operator_name -> BANDEQOP .)
    DIVEQOP         reduce using rule 335 (operator_name -> BANDEQOP .)
    MODEQOP         reduce using rule 335 (operator_name -> BANDEQOP .)
    PLUSEQOP        reduce using rule 335 (operator_name -> BANDEQOP .)
    MINUSEQOP       reduce using rule 335 (operator_name -> BANDEQOP .)
    LSHIFTEQOP      reduce using rule 335 (operator_name -> BANDEQOP .)
    RSHIFTEQOP      reduce using rule 335 (operator_name -> BANDEQOP .)
    BANDEQOP        reduce using rule 335 (operator_name -> BANDEQOP .)
    BOREQOP         reduce using rule 335 (operator_name -> BANDEQOP .)
    DOTSTAR         reduce using rule 335 (operator_name -> BANDEQOP .)
    ARROWSTAR       reduce using rule 335 (operator_name -> BANDEQOP .)
    MULTOP          reduce using rule 335 (operator_name -> BANDEQOP .)
    DIVOP           reduce using rule 335 (operator_name -> BANDEQOP .)
    MODOP           reduce using rule 335 (operator_name -> BANDEQOP .)
    PLUSOP          reduce using rule 335 (operator_name -> BANDEQOP .)
    MINUSOP         reduce using rule 335 (operator_name -> BANDEQOP .)
    LSHIFT          reduce using rule 335 (operator_name -> BANDEQOP .)
    RSHIFT          reduce using rule 335 (operator_name -> BANDEQOP .)
    GTCOMP          reduce using rule 335 (operator_name -> BANDEQOP .)
    LTECOMP         reduce using rule 335 (operator_name -> BANDEQOP .)
    GTECOMP         reduce using rule 335 (operator_name -> BANDEQOP .)
    EQCOMP          reduce using rule 335 (operator_name -> BANDEQOP .)
    NEQCOMP         reduce using rule 335 (operator_name -> BANDEQOP .)
    BANDOP          reduce using rule 335 (operator_name -> BANDEQOP .)
    XOROP           reduce using rule 335 (operator_name -> BANDEQOP .)
    OROP            reduce using rule 335 (operator_name -> BANDEQOP .)
    ANDOP           reduce using rule 335 (operator_name -> BANDEQOP .)
    QUESMARK        reduce using rule 335 (operator_name -> BANDEQOP .)
    RSPAREN         reduce using rule 335 (operator_name -> BANDEQOP .)
    RCPAREN         reduce using rule 335 (operator_name -> BANDEQOP .)


state 132

    (336) operator_name -> LSHIFT .

    LPAREN          reduce using rule 336 (operator_name -> LSHIFT .)
    LSPAREN         reduce using rule 336 (operator_name -> LSHIFT .)
    COLON           reduce using rule 336 (operator_name -> LSHIFT .)
    EQUAL           reduce using rule 336 (operator_name -> LSHIFT .)
    LCPAREN         reduce using rule 336 (operator_name -> LSHIFT .)
    SEMICOLON       reduce using rule 336 (operator_name -> LSHIFT .)
    COMMA           reduce using rule 336 (operator_name -> LSHIFT .)
    RPAREN          reduce using rule 336 (operator_name -> LSHIFT .)
    DOT             reduce using rule 336 (operator_name -> LSHIFT .)
    ARROW           reduce using rule 336 (operator_name -> LSHIFT .)
    DPLUSOP         reduce using rule 336 (operator_name -> LSHIFT .)
    DMINUSOP        reduce using rule 336 (operator_name -> LSHIFT .)
    LTCOMP          reduce using rule 336 (operator_name -> LSHIFT .)
    MULTEQOP        reduce using rule 336 (operator_name -> LSHIFT .)
    DIVEQOP         reduce using rule 336 (operator_name -> LSHIFT .)
    MODEQOP         reduce using rule 336 (operator_name -> LSHIFT .)
    PLUSEQOP        reduce using rule 336 (operator_name -> LSHIFT .)
    MINUSEQOP       reduce using rule 336 (operator_name -> LSHIFT .)
    LSHIFTEQOP      reduce using rule 336 (operator_name -> LSHIFT .)
    RSHIFTEQOP      reduce using rule 336 (operator_name -> LSHIFT .)
    BANDEQOP        reduce using rule 336 (operator_name -> LSHIFT .)
    BOREQOP         reduce using rule 336 (operator_name -> LSHIFT .)
    DOTSTAR         reduce using rule 336 (operator_name -> LSHIFT .)
    ARROWSTAR       reduce using rule 336 (operator_name -> LSHIFT .)
    MULTOP          reduce using rule 336 (operator_name -> LSHIFT .)
    DIVOP           reduce using rule 336 (operator_name -> LSHIFT .)
    MODOP           reduce using rule 336 (operator_name -> LSHIFT .)
    PLUSOP          reduce using rule 336 (operator_name -> LSHIFT .)
    MINUSOP         reduce using rule 336 (operator_name -> LSHIFT .)
    LSHIFT          reduce using rule 336 (operator_name -> LSHIFT .)
    RSHIFT          reduce using rule 336 (operator_name -> LSHIFT .)
    GTCOMP          reduce using rule 336 (operator_name -> LSHIFT .)
    LTECOMP         reduce using rule 336 (operator_name -> LSHIFT .)
    GTECOMP         reduce using rule 336 (operator_name -> LSHIFT .)
    EQCOMP          reduce using rule 336 (operator_name -> LSHIFT .)
    NEQCOMP         reduce using rule 336 (operator_name -> LSHIFT .)
    BANDOP          reduce using rule 336 (operator_name -> LSHIFT .)
    XOROP           reduce using rule 336 (operator_name -> LSHIFT .)
    OROP            reduce using rule 336 (operator_name -> LSHIFT .)
    ANDOP           reduce using rule 336 (operator_name -> LSHIFT .)
    QUESMARK        reduce using rule 336 (operator_name -> LSHIFT .)
    RSPAREN         reduce using rule 336 (operator_name -> LSHIFT .)
    RCPAREN         reduce using rule 336 (operator_name -> LSHIFT .)


state 133

    (337) operator_name -> RSHIFT .

    LPAREN          reduce using rule 337 (operator_name -> RSHIFT .)
    LSPAREN         reduce using rule 337 (operator_name -> RSHIFT .)
    COLON           reduce using rule 337 (operator_name -> RSHIFT .)
    EQUAL           reduce using rule 337 (operator_name -> RSHIFT .)
    LCPAREN         reduce using rule 337 (operator_name -> RSHIFT .)
    SEMICOLON       reduce using rule 337 (operator_name -> RSHIFT .)
    COMMA           reduce using rule 337 (operator_name -> RSHIFT .)
    RPAREN          reduce using rule 337 (operator_name -> RSHIFT .)
    DOT             reduce using rule 337 (operator_name -> RSHIFT .)
    ARROW           reduce using rule 337 (operator_name -> RSHIFT .)
    DPLUSOP         reduce using rule 337 (operator_name -> RSHIFT .)
    DMINUSOP        reduce using rule 337 (operator_name -> RSHIFT .)
    LTCOMP          reduce using rule 337 (operator_name -> RSHIFT .)
    MULTEQOP        reduce using rule 337 (operator_name -> RSHIFT .)
    DIVEQOP         reduce using rule 337 (operator_name -> RSHIFT .)
    MODEQOP         reduce using rule 337 (operator_name -> RSHIFT .)
    PLUSEQOP        reduce using rule 337 (operator_name -> RSHIFT .)
    MINUSEQOP       reduce using rule 337 (operator_name -> RSHIFT .)
    LSHIFTEQOP      reduce using rule 337 (operator_name -> RSHIFT .)
    RSHIFTEQOP      reduce using rule 337 (operator_name -> RSHIFT .)
    BANDEQOP        reduce using rule 337 (operator_name -> RSHIFT .)
    BOREQOP         reduce using rule 337 (operator_name -> RSHIFT .)
    DOTSTAR         reduce using rule 337 (operator_name -> RSHIFT .)
    ARROWSTAR       reduce using rule 337 (operator_name -> RSHIFT .)
    MULTOP          reduce using rule 337 (operator_name -> RSHIFT .)
    DIVOP           reduce using rule 337 (operator_name -> RSHIFT .)
    MODOP           reduce using rule 337 (operator_name -> RSHIFT .)
    PLUSOP          reduce using rule 337 (operator_name -> RSHIFT .)
    MINUSOP         reduce using rule 337 (operator_name -> RSHIFT .)
    LSHIFT          reduce using rule 337 (operator_name -> RSHIFT .)
    RSHIFT          reduce using rule 337 (operator_name -> RSHIFT .)
    GTCOMP          reduce using rule 337 (operator_name -> RSHIFT .)
    LTECOMP         reduce using rule 337 (operator_name -> RSHIFT .)
    GTECOMP         reduce using rule 337 (operator_name -> RSHIFT .)
    EQCOMP          reduce using rule 337 (operator_name -> RSHIFT .)
    NEQCOMP         reduce using rule 337 (operator_name -> RSHIFT .)
    BANDOP          reduce using rule 337 (operator_name -> RSHIFT .)
    XOROP           reduce using rule 337 (operator_name -> RSHIFT .)
    OROP            reduce using rule 337 (operator_name -> RSHIFT .)
    ANDOP           reduce using rule 337 (operator_name -> RSHIFT .)
    QUESMARK        reduce using rule 337 (operator_name -> RSHIFT .)
    RSPAREN         reduce using rule 337 (operator_name -> RSHIFT .)
    RCPAREN         reduce using rule 337 (operator_name -> RSHIFT .)


state 134

    (338) operator_name -> RSHIFTEQOP .

    LPAREN          reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    LSPAREN         reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    COLON           reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    EQUAL           reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    LCPAREN         reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    SEMICOLON       reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    COMMA           reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    RPAREN          reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    DOT             reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    ARROW           reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    DPLUSOP         reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    DMINUSOP        reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    LTCOMP          reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    MULTEQOP        reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    DIVEQOP         reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    MODEQOP         reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    PLUSEQOP        reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    MINUSEQOP       reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    LSHIFTEQOP      reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    RSHIFTEQOP      reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    BANDEQOP        reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    BOREQOP         reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    DOTSTAR         reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    ARROWSTAR       reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    MULTOP          reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    DIVOP           reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    MODOP           reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    PLUSOP          reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    MINUSOP         reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    LSHIFT          reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    RSHIFT          reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    GTCOMP          reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    LTECOMP         reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    GTECOMP         reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    EQCOMP          reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    NEQCOMP         reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    BANDOP          reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    XOROP           reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    OROP            reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    ANDOP           reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    QUESMARK        reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    RSPAREN         reduce using rule 338 (operator_name -> RSHIFTEQOP .)
    RCPAREN         reduce using rule 338 (operator_name -> RSHIFTEQOP .)


state 135

    (339) operator_name -> LSHIFTEQOP .

    LPAREN          reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    LSPAREN         reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    COLON           reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    EQUAL           reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    LCPAREN         reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    SEMICOLON       reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    COMMA           reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    RPAREN          reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    DOT             reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    ARROW           reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    DPLUSOP         reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    DMINUSOP        reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    LTCOMP          reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    MULTEQOP        reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    DIVEQOP         reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    MODEQOP         reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    PLUSEQOP        reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    MINUSEQOP       reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    LSHIFTEQOP      reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    RSHIFTEQOP      reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    BANDEQOP        reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    BOREQOP         reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    DOTSTAR         reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    ARROWSTAR       reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    MULTOP          reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    DIVOP           reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    MODOP           reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    PLUSOP          reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    MINUSOP         reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    LSHIFT          reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    RSHIFT          reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    GTCOMP          reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    LTECOMP         reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    GTECOMP         reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    EQCOMP          reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    NEQCOMP         reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    BANDOP          reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    XOROP           reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    OROP            reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    ANDOP           reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    QUESMARK        reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    RSPAREN         reduce using rule 339 (operator_name -> LSHIFTEQOP .)
    RCPAREN         reduce using rule 339 (operator_name -> LSHIFTEQOP .)


state 136

    (340) operator_name -> EQCOMP .

    LPAREN          reduce using rule 340 (operator_name -> EQCOMP .)
    LSPAREN         reduce using rule 340 (operator_name -> EQCOMP .)
    COLON           reduce using rule 340 (operator_name -> EQCOMP .)
    EQUAL           reduce using rule 340 (operator_name -> EQCOMP .)
    LCPAREN         reduce using rule 340 (operator_name -> EQCOMP .)
    SEMICOLON       reduce using rule 340 (operator_name -> EQCOMP .)
    COMMA           reduce using rule 340 (operator_name -> EQCOMP .)
    RPAREN          reduce using rule 340 (operator_name -> EQCOMP .)
    DOT             reduce using rule 340 (operator_name -> EQCOMP .)
    ARROW           reduce using rule 340 (operator_name -> EQCOMP .)
    DPLUSOP         reduce using rule 340 (operator_name -> EQCOMP .)
    DMINUSOP        reduce using rule 340 (operator_name -> EQCOMP .)
    LTCOMP          reduce using rule 340 (operator_name -> EQCOMP .)
    MULTEQOP        reduce using rule 340 (operator_name -> EQCOMP .)
    DIVEQOP         reduce using rule 340 (operator_name -> EQCOMP .)
    MODEQOP         reduce using rule 340 (operator_name -> EQCOMP .)
    PLUSEQOP        reduce using rule 340 (operator_name -> EQCOMP .)
    MINUSEQOP       reduce using rule 340 (operator_name -> EQCOMP .)
    LSHIFTEQOP      reduce using rule 340 (operator_name -> EQCOMP .)
    RSHIFTEQOP      reduce using rule 340 (operator_name -> EQCOMP .)
    BANDEQOP        reduce using rule 340 (operator_name -> EQCOMP .)
    BOREQOP         reduce using rule 340 (operator_name -> EQCOMP .)
    DOTSTAR         reduce using rule 340 (operator_name -> EQCOMP .)
    ARROWSTAR       reduce using rule 340 (operator_name -> EQCOMP .)
    MULTOP          reduce using rule 340 (operator_name -> EQCOMP .)
    DIVOP           reduce using rule 340 (operator_name -> EQCOMP .)
    MODOP           reduce using rule 340 (operator_name -> EQCOMP .)
    PLUSOP          reduce using rule 340 (operator_name -> EQCOMP .)
    MINUSOP         reduce using rule 340 (operator_name -> EQCOMP .)
    LSHIFT          reduce using rule 340 (operator_name -> EQCOMP .)
    RSHIFT          reduce using rule 340 (operator_name -> EQCOMP .)
    GTCOMP          reduce using rule 340 (operator_name -> EQCOMP .)
    LTECOMP         reduce using rule 340 (operator_name -> EQCOMP .)
    GTECOMP         reduce using rule 340 (operator_name -> EQCOMP .)
    EQCOMP          reduce using rule 340 (operator_name -> EQCOMP .)
    NEQCOMP         reduce using rule 340 (operator_name -> EQCOMP .)
    BANDOP          reduce using rule 340 (operator_name -> EQCOMP .)
    XOROP           reduce using rule 340 (operator_name -> EQCOMP .)
    OROP            reduce using rule 340 (operator_name -> EQCOMP .)
    ANDOP           reduce using rule 340 (operator_name -> EQCOMP .)
    QUESMARK        reduce using rule 340 (operator_name -> EQCOMP .)
    RSPAREN         reduce using rule 340 (operator_name -> EQCOMP .)
    RCPAREN         reduce using rule 340 (operator_name -> EQCOMP .)


state 137

    (341) operator_name -> NEQCOMP .

    LPAREN          reduce using rule 341 (operator_name -> NEQCOMP .)
    LSPAREN         reduce using rule 341 (operator_name -> NEQCOMP .)
    COLON           reduce using rule 341 (operator_name -> NEQCOMP .)
    EQUAL           reduce using rule 341 (operator_name -> NEQCOMP .)
    LCPAREN         reduce using rule 341 (operator_name -> NEQCOMP .)
    SEMICOLON       reduce using rule 341 (operator_name -> NEQCOMP .)
    COMMA           reduce using rule 341 (operator_name -> NEQCOMP .)
    RPAREN          reduce using rule 341 (operator_name -> NEQCOMP .)
    DOT             reduce using rule 341 (operator_name -> NEQCOMP .)
    ARROW           reduce using rule 341 (operator_name -> NEQCOMP .)
    DPLUSOP         reduce using rule 341 (operator_name -> NEQCOMP .)
    DMINUSOP        reduce using rule 341 (operator_name -> NEQCOMP .)
    LTCOMP          reduce using rule 341 (operator_name -> NEQCOMP .)
    MULTEQOP        reduce using rule 341 (operator_name -> NEQCOMP .)
    DIVEQOP         reduce using rule 341 (operator_name -> NEQCOMP .)
    MODEQOP         reduce using rule 341 (operator_name -> NEQCOMP .)
    PLUSEQOP        reduce using rule 341 (operator_name -> NEQCOMP .)
    MINUSEQOP       reduce using rule 341 (operator_name -> NEQCOMP .)
    LSHIFTEQOP      reduce using rule 341 (operator_name -> NEQCOMP .)
    RSHIFTEQOP      reduce using rule 341 (operator_name -> NEQCOMP .)
    BANDEQOP        reduce using rule 341 (operator_name -> NEQCOMP .)
    BOREQOP         reduce using rule 341 (operator_name -> NEQCOMP .)
    DOTSTAR         reduce using rule 341 (operator_name -> NEQCOMP .)
    ARROWSTAR       reduce using rule 341 (operator_name -> NEQCOMP .)
    MULTOP          reduce using rule 341 (operator_name -> NEQCOMP .)
    DIVOP           reduce using rule 341 (operator_name -> NEQCOMP .)
    MODOP           reduce using rule 341 (operator_name -> NEQCOMP .)
    PLUSOP          reduce using rule 341 (operator_name -> NEQCOMP .)
    MINUSOP         reduce using rule 341 (operator_name -> NEQCOMP .)
    LSHIFT          reduce using rule 341 (operator_name -> NEQCOMP .)
    RSHIFT          reduce using rule 341 (operator_name -> NEQCOMP .)
    GTCOMP          reduce using rule 341 (operator_name -> NEQCOMP .)
    LTECOMP         reduce using rule 341 (operator_name -> NEQCOMP .)
    GTECOMP         reduce using rule 341 (operator_name -> NEQCOMP .)
    EQCOMP          reduce using rule 341 (operator_name -> NEQCOMP .)
    NEQCOMP         reduce using rule 341 (operator_name -> NEQCOMP .)
    BANDOP          reduce using rule 341 (operator_name -> NEQCOMP .)
    XOROP           reduce using rule 341 (operator_name -> NEQCOMP .)
    OROP            reduce using rule 341 (operator_name -> NEQCOMP .)
    ANDOP           reduce using rule 341 (operator_name -> NEQCOMP .)
    QUESMARK        reduce using rule 341 (operator_name -> NEQCOMP .)
    RSPAREN         reduce using rule 341 (operator_name -> NEQCOMP .)
    RCPAREN         reduce using rule 341 (operator_name -> NEQCOMP .)


state 138

    (342) operator_name -> LTECOMP .

    LPAREN          reduce using rule 342 (operator_name -> LTECOMP .)
    LSPAREN         reduce using rule 342 (operator_name -> LTECOMP .)
    COLON           reduce using rule 342 (operator_name -> LTECOMP .)
    EQUAL           reduce using rule 342 (operator_name -> LTECOMP .)
    LCPAREN         reduce using rule 342 (operator_name -> LTECOMP .)
    SEMICOLON       reduce using rule 342 (operator_name -> LTECOMP .)
    COMMA           reduce using rule 342 (operator_name -> LTECOMP .)
    RPAREN          reduce using rule 342 (operator_name -> LTECOMP .)
    DOT             reduce using rule 342 (operator_name -> LTECOMP .)
    ARROW           reduce using rule 342 (operator_name -> LTECOMP .)
    DPLUSOP         reduce using rule 342 (operator_name -> LTECOMP .)
    DMINUSOP        reduce using rule 342 (operator_name -> LTECOMP .)
    LTCOMP          reduce using rule 342 (operator_name -> LTECOMP .)
    MULTEQOP        reduce using rule 342 (operator_name -> LTECOMP .)
    DIVEQOP         reduce using rule 342 (operator_name -> LTECOMP .)
    MODEQOP         reduce using rule 342 (operator_name -> LTECOMP .)
    PLUSEQOP        reduce using rule 342 (operator_name -> LTECOMP .)
    MINUSEQOP       reduce using rule 342 (operator_name -> LTECOMP .)
    LSHIFTEQOP      reduce using rule 342 (operator_name -> LTECOMP .)
    RSHIFTEQOP      reduce using rule 342 (operator_name -> LTECOMP .)
    BANDEQOP        reduce using rule 342 (operator_name -> LTECOMP .)
    BOREQOP         reduce using rule 342 (operator_name -> LTECOMP .)
    DOTSTAR         reduce using rule 342 (operator_name -> LTECOMP .)
    ARROWSTAR       reduce using rule 342 (operator_name -> LTECOMP .)
    MULTOP          reduce using rule 342 (operator_name -> LTECOMP .)
    DIVOP           reduce using rule 342 (operator_name -> LTECOMP .)
    MODOP           reduce using rule 342 (operator_name -> LTECOMP .)
    PLUSOP          reduce using rule 342 (operator_name -> LTECOMP .)
    MINUSOP         reduce using rule 342 (operator_name -> LTECOMP .)
    LSHIFT          reduce using rule 342 (operator_name -> LTECOMP .)
    RSHIFT          reduce using rule 342 (operator_name -> LTECOMP .)
    GTCOMP          reduce using rule 342 (operator_name -> LTECOMP .)
    LTECOMP         reduce using rule 342 (operator_name -> LTECOMP .)
    GTECOMP         reduce using rule 342 (operator_name -> LTECOMP .)
    EQCOMP          reduce using rule 342 (operator_name -> LTECOMP .)
    NEQCOMP         reduce using rule 342 (operator_name -> LTECOMP .)
    BANDOP          reduce using rule 342 (operator_name -> LTECOMP .)
    XOROP           reduce using rule 342 (operator_name -> LTECOMP .)
    OROP            reduce using rule 342 (operator_name -> LTECOMP .)
    ANDOP           reduce using rule 342 (operator_name -> LTECOMP .)
    QUESMARK        reduce using rule 342 (operator_name -> LTECOMP .)
    RSPAREN         reduce using rule 342 (operator_name -> LTECOMP .)
    RCPAREN         reduce using rule 342 (operator_name -> LTECOMP .)


state 139

    (343) operator_name -> GTECOMP .

    LPAREN          reduce using rule 343 (operator_name -> GTECOMP .)
    LSPAREN         reduce using rule 343 (operator_name -> GTECOMP .)
    COLON           reduce using rule 343 (operator_name -> GTECOMP .)
    EQUAL           reduce using rule 343 (operator_name -> GTECOMP .)
    LCPAREN         reduce using rule 343 (operator_name -> GTECOMP .)
    SEMICOLON       reduce using rule 343 (operator_name -> GTECOMP .)
    COMMA           reduce using rule 343 (operator_name -> GTECOMP .)
    RPAREN          reduce using rule 343 (operator_name -> GTECOMP .)
    DOT             reduce using rule 343 (operator_name -> GTECOMP .)
    ARROW           reduce using rule 343 (operator_name -> GTECOMP .)
    DPLUSOP         reduce using rule 343 (operator_name -> GTECOMP .)
    DMINUSOP        reduce using rule 343 (operator_name -> GTECOMP .)
    LTCOMP          reduce using rule 343 (operator_name -> GTECOMP .)
    MULTEQOP        reduce using rule 343 (operator_name -> GTECOMP .)
    DIVEQOP         reduce using rule 343 (operator_name -> GTECOMP .)
    MODEQOP         reduce using rule 343 (operator_name -> GTECOMP .)
    PLUSEQOP        reduce using rule 343 (operator_name -> GTECOMP .)
    MINUSEQOP       reduce using rule 343 (operator_name -> GTECOMP .)
    LSHIFTEQOP      reduce using rule 343 (operator_name -> GTECOMP .)
    RSHIFTEQOP      reduce using rule 343 (operator_name -> GTECOMP .)
    BANDEQOP        reduce using rule 343 (operator_name -> GTECOMP .)
    BOREQOP         reduce using rule 343 (operator_name -> GTECOMP .)
    DOTSTAR         reduce using rule 343 (operator_name -> GTECOMP .)
    ARROWSTAR       reduce using rule 343 (operator_name -> GTECOMP .)
    MULTOP          reduce using rule 343 (operator_name -> GTECOMP .)
    DIVOP           reduce using rule 343 (operator_name -> GTECOMP .)
    MODOP           reduce using rule 343 (operator_name -> GTECOMP .)
    PLUSOP          reduce using rule 343 (operator_name -> GTECOMP .)
    MINUSOP         reduce using rule 343 (operator_name -> GTECOMP .)
    LSHIFT          reduce using rule 343 (operator_name -> GTECOMP .)
    RSHIFT          reduce using rule 343 (operator_name -> GTECOMP .)
    GTCOMP          reduce using rule 343 (operator_name -> GTECOMP .)
    LTECOMP         reduce using rule 343 (operator_name -> GTECOMP .)
    GTECOMP         reduce using rule 343 (operator_name -> GTECOMP .)
    EQCOMP          reduce using rule 343 (operator_name -> GTECOMP .)
    NEQCOMP         reduce using rule 343 (operator_name -> GTECOMP .)
    BANDOP          reduce using rule 343 (operator_name -> GTECOMP .)
    XOROP           reduce using rule 343 (operator_name -> GTECOMP .)
    OROP            reduce using rule 343 (operator_name -> GTECOMP .)
    ANDOP           reduce using rule 343 (operator_name -> GTECOMP .)
    QUESMARK        reduce using rule 343 (operator_name -> GTECOMP .)
    RSPAREN         reduce using rule 343 (operator_name -> GTECOMP .)
    RCPAREN         reduce using rule 343 (operator_name -> GTECOMP .)


state 140

    (344) operator_name -> ANDOP .

    LPAREN          reduce using rule 344 (operator_name -> ANDOP .)
    LSPAREN         reduce using rule 344 (operator_name -> ANDOP .)
    COLON           reduce using rule 344 (operator_name -> ANDOP .)
    EQUAL           reduce using rule 344 (operator_name -> ANDOP .)
    LCPAREN         reduce using rule 344 (operator_name -> ANDOP .)
    SEMICOLON       reduce using rule 344 (operator_name -> ANDOP .)
    COMMA           reduce using rule 344 (operator_name -> ANDOP .)
    RPAREN          reduce using rule 344 (operator_name -> ANDOP .)
    DOT             reduce using rule 344 (operator_name -> ANDOP .)
    ARROW           reduce using rule 344 (operator_name -> ANDOP .)
    DPLUSOP         reduce using rule 344 (operator_name -> ANDOP .)
    DMINUSOP        reduce using rule 344 (operator_name -> ANDOP .)
    LTCOMP          reduce using rule 344 (operator_name -> ANDOP .)
    MULTEQOP        reduce using rule 344 (operator_name -> ANDOP .)
    DIVEQOP         reduce using rule 344 (operator_name -> ANDOP .)
    MODEQOP         reduce using rule 344 (operator_name -> ANDOP .)
    PLUSEQOP        reduce using rule 344 (operator_name -> ANDOP .)
    MINUSEQOP       reduce using rule 344 (operator_name -> ANDOP .)
    LSHIFTEQOP      reduce using rule 344 (operator_name -> ANDOP .)
    RSHIFTEQOP      reduce using rule 344 (operator_name -> ANDOP .)
    BANDEQOP        reduce using rule 344 (operator_name -> ANDOP .)
    BOREQOP         reduce using rule 344 (operator_name -> ANDOP .)
    DOTSTAR         reduce using rule 344 (operator_name -> ANDOP .)
    ARROWSTAR       reduce using rule 344 (operator_name -> ANDOP .)
    MULTOP          reduce using rule 344 (operator_name -> ANDOP .)
    DIVOP           reduce using rule 344 (operator_name -> ANDOP .)
    MODOP           reduce using rule 344 (operator_name -> ANDOP .)
    PLUSOP          reduce using rule 344 (operator_name -> ANDOP .)
    MINUSOP         reduce using rule 344 (operator_name -> ANDOP .)
    LSHIFT          reduce using rule 344 (operator_name -> ANDOP .)
    RSHIFT          reduce using rule 344 (operator_name -> ANDOP .)
    GTCOMP          reduce using rule 344 (operator_name -> ANDOP .)
    LTECOMP         reduce using rule 344 (operator_name -> ANDOP .)
    GTECOMP         reduce using rule 344 (operator_name -> ANDOP .)
    EQCOMP          reduce using rule 344 (operator_name -> ANDOP .)
    NEQCOMP         reduce using rule 344 (operator_name -> ANDOP .)
    BANDOP          reduce using rule 344 (operator_name -> ANDOP .)
    XOROP           reduce using rule 344 (operator_name -> ANDOP .)
    OROP            reduce using rule 344 (operator_name -> ANDOP .)
    ANDOP           reduce using rule 344 (operator_name -> ANDOP .)
    QUESMARK        reduce using rule 344 (operator_name -> ANDOP .)
    RSPAREN         reduce using rule 344 (operator_name -> ANDOP .)
    RCPAREN         reduce using rule 344 (operator_name -> ANDOP .)


state 141

    (345) operator_name -> OROP .

    LPAREN          reduce using rule 345 (operator_name -> OROP .)
    LSPAREN         reduce using rule 345 (operator_name -> OROP .)
    COLON           reduce using rule 345 (operator_name -> OROP .)
    EQUAL           reduce using rule 345 (operator_name -> OROP .)
    LCPAREN         reduce using rule 345 (operator_name -> OROP .)
    SEMICOLON       reduce using rule 345 (operator_name -> OROP .)
    COMMA           reduce using rule 345 (operator_name -> OROP .)
    RPAREN          reduce using rule 345 (operator_name -> OROP .)
    DOT             reduce using rule 345 (operator_name -> OROP .)
    ARROW           reduce using rule 345 (operator_name -> OROP .)
    DPLUSOP         reduce using rule 345 (operator_name -> OROP .)
    DMINUSOP        reduce using rule 345 (operator_name -> OROP .)
    LTCOMP          reduce using rule 345 (operator_name -> OROP .)
    MULTEQOP        reduce using rule 345 (operator_name -> OROP .)
    DIVEQOP         reduce using rule 345 (operator_name -> OROP .)
    MODEQOP         reduce using rule 345 (operator_name -> OROP .)
    PLUSEQOP        reduce using rule 345 (operator_name -> OROP .)
    MINUSEQOP       reduce using rule 345 (operator_name -> OROP .)
    LSHIFTEQOP      reduce using rule 345 (operator_name -> OROP .)
    RSHIFTEQOP      reduce using rule 345 (operator_name -> OROP .)
    BANDEQOP        reduce using rule 345 (operator_name -> OROP .)
    BOREQOP         reduce using rule 345 (operator_name -> OROP .)
    DOTSTAR         reduce using rule 345 (operator_name -> OROP .)
    ARROWSTAR       reduce using rule 345 (operator_name -> OROP .)
    MULTOP          reduce using rule 345 (operator_name -> OROP .)
    DIVOP           reduce using rule 345 (operator_name -> OROP .)
    MODOP           reduce using rule 345 (operator_name -> OROP .)
    PLUSOP          reduce using rule 345 (operator_name -> OROP .)
    MINUSOP         reduce using rule 345 (operator_name -> OROP .)
    LSHIFT          reduce using rule 345 (operator_name -> OROP .)
    RSHIFT          reduce using rule 345 (operator_name -> OROP .)
    GTCOMP          reduce using rule 345 (operator_name -> OROP .)
    LTECOMP         reduce using rule 345 (operator_name -> OROP .)
    GTECOMP         reduce using rule 345 (operator_name -> OROP .)
    EQCOMP          reduce using rule 345 (operator_name -> OROP .)
    NEQCOMP         reduce using rule 345 (operator_name -> OROP .)
    BANDOP          reduce using rule 345 (operator_name -> OROP .)
    XOROP           reduce using rule 345 (operator_name -> OROP .)
    OROP            reduce using rule 345 (operator_name -> OROP .)
    ANDOP           reduce using rule 345 (operator_name -> OROP .)
    QUESMARK        reduce using rule 345 (operator_name -> OROP .)
    RSPAREN         reduce using rule 345 (operator_name -> OROP .)
    RCPAREN         reduce using rule 345 (operator_name -> OROP .)


state 142

    (346) operator_name -> DPLUSOP .

    LPAREN          reduce using rule 346 (operator_name -> DPLUSOP .)
    LSPAREN         reduce using rule 346 (operator_name -> DPLUSOP .)
    COLON           reduce using rule 346 (operator_name -> DPLUSOP .)
    EQUAL           reduce using rule 346 (operator_name -> DPLUSOP .)
    LCPAREN         reduce using rule 346 (operator_name -> DPLUSOP .)
    SEMICOLON       reduce using rule 346 (operator_name -> DPLUSOP .)
    COMMA           reduce using rule 346 (operator_name -> DPLUSOP .)
    RPAREN          reduce using rule 346 (operator_name -> DPLUSOP .)
    DOT             reduce using rule 346 (operator_name -> DPLUSOP .)
    ARROW           reduce using rule 346 (operator_name -> DPLUSOP .)
    DPLUSOP         reduce using rule 346 (operator_name -> DPLUSOP .)
    DMINUSOP        reduce using rule 346 (operator_name -> DPLUSOP .)
    LTCOMP          reduce using rule 346 (operator_name -> DPLUSOP .)
    MULTEQOP        reduce using rule 346 (operator_name -> DPLUSOP .)
    DIVEQOP         reduce using rule 346 (operator_name -> DPLUSOP .)
    MODEQOP         reduce using rule 346 (operator_name -> DPLUSOP .)
    PLUSEQOP        reduce using rule 346 (operator_name -> DPLUSOP .)
    MINUSEQOP       reduce using rule 346 (operator_name -> DPLUSOP .)
    LSHIFTEQOP      reduce using rule 346 (operator_name -> DPLUSOP .)
    RSHIFTEQOP      reduce using rule 346 (operator_name -> DPLUSOP .)
    BANDEQOP        reduce using rule 346 (operator_name -> DPLUSOP .)
    BOREQOP         reduce using rule 346 (operator_name -> DPLUSOP .)
    DOTSTAR         reduce using rule 346 (operator_name -> DPLUSOP .)
    ARROWSTAR       reduce using rule 346 (operator_name -> DPLUSOP .)
    MULTOP          reduce using rule 346 (operator_name -> DPLUSOP .)
    DIVOP           reduce using rule 346 (operator_name -> DPLUSOP .)
    MODOP           reduce using rule 346 (operator_name -> DPLUSOP .)
    PLUSOP          reduce using rule 346 (operator_name -> DPLUSOP .)
    MINUSOP         reduce using rule 346 (operator_name -> DPLUSOP .)
    LSHIFT          reduce using rule 346 (operator_name -> DPLUSOP .)
    RSHIFT          reduce using rule 346 (operator_name -> DPLUSOP .)
    GTCOMP          reduce using rule 346 (operator_name -> DPLUSOP .)
    LTECOMP         reduce using rule 346 (operator_name -> DPLUSOP .)
    GTECOMP         reduce using rule 346 (operator_name -> DPLUSOP .)
    EQCOMP          reduce using rule 346 (operator_name -> DPLUSOP .)
    NEQCOMP         reduce using rule 346 (operator_name -> DPLUSOP .)
    BANDOP          reduce using rule 346 (operator_name -> DPLUSOP .)
    XOROP           reduce using rule 346 (operator_name -> DPLUSOP .)
    OROP            reduce using rule 346 (operator_name -> DPLUSOP .)
    ANDOP           reduce using rule 346 (operator_name -> DPLUSOP .)
    QUESMARK        reduce using rule 346 (operator_name -> DPLUSOP .)
    RSPAREN         reduce using rule 346 (operator_name -> DPLUSOP .)
    RCPAREN         reduce using rule 346 (operator_name -> DPLUSOP .)


state 143

    (347) operator_name -> DMINUSOP .

    LPAREN          reduce using rule 347 (operator_name -> DMINUSOP .)
    LSPAREN         reduce using rule 347 (operator_name -> DMINUSOP .)
    COLON           reduce using rule 347 (operator_name -> DMINUSOP .)
    EQUAL           reduce using rule 347 (operator_name -> DMINUSOP .)
    LCPAREN         reduce using rule 347 (operator_name -> DMINUSOP .)
    SEMICOLON       reduce using rule 347 (operator_name -> DMINUSOP .)
    COMMA           reduce using rule 347 (operator_name -> DMINUSOP .)
    RPAREN          reduce using rule 347 (operator_name -> DMINUSOP .)
    DOT             reduce using rule 347 (operator_name -> DMINUSOP .)
    ARROW           reduce using rule 347 (operator_name -> DMINUSOP .)
    DPLUSOP         reduce using rule 347 (operator_name -> DMINUSOP .)
    DMINUSOP        reduce using rule 347 (operator_name -> DMINUSOP .)
    LTCOMP          reduce using rule 347 (operator_name -> DMINUSOP .)
    MULTEQOP        reduce using rule 347 (operator_name -> DMINUSOP .)
    DIVEQOP         reduce using rule 347 (operator_name -> DMINUSOP .)
    MODEQOP         reduce using rule 347 (operator_name -> DMINUSOP .)
    PLUSEQOP        reduce using rule 347 (operator_name -> DMINUSOP .)
    MINUSEQOP       reduce using rule 347 (operator_name -> DMINUSOP .)
    LSHIFTEQOP      reduce using rule 347 (operator_name -> DMINUSOP .)
    RSHIFTEQOP      reduce using rule 347 (operator_name -> DMINUSOP .)
    BANDEQOP        reduce using rule 347 (operator_name -> DMINUSOP .)
    BOREQOP         reduce using rule 347 (operator_name -> DMINUSOP .)
    DOTSTAR         reduce using rule 347 (operator_name -> DMINUSOP .)
    ARROWSTAR       reduce using rule 347 (operator_name -> DMINUSOP .)
    MULTOP          reduce using rule 347 (operator_name -> DMINUSOP .)
    DIVOP           reduce using rule 347 (operator_name -> DMINUSOP .)
    MODOP           reduce using rule 347 (operator_name -> DMINUSOP .)
    PLUSOP          reduce using rule 347 (operator_name -> DMINUSOP .)
    MINUSOP         reduce using rule 347 (operator_name -> DMINUSOP .)
    LSHIFT          reduce using rule 347 (operator_name -> DMINUSOP .)
    RSHIFT          reduce using rule 347 (operator_name -> DMINUSOP .)
    GTCOMP          reduce using rule 347 (operator_name -> DMINUSOP .)
    LTECOMP         reduce using rule 347 (operator_name -> DMINUSOP .)
    GTECOMP         reduce using rule 347 (operator_name -> DMINUSOP .)
    EQCOMP          reduce using rule 347 (operator_name -> DMINUSOP .)
    NEQCOMP         reduce using rule 347 (operator_name -> DMINUSOP .)
    BANDOP          reduce using rule 347 (operator_name -> DMINUSOP .)
    XOROP           reduce using rule 347 (operator_name -> DMINUSOP .)
    OROP            reduce using rule 347 (operator_name -> DMINUSOP .)
    ANDOP           reduce using rule 347 (operator_name -> DMINUSOP .)
    QUESMARK        reduce using rule 347 (operator_name -> DMINUSOP .)
    RSPAREN         reduce using rule 347 (operator_name -> DMINUSOP .)
    RCPAREN         reduce using rule 347 (operator_name -> DMINUSOP .)


state 144

    (348) operator_name -> COMMA .

    LPAREN          reduce using rule 348 (operator_name -> COMMA .)
    LSPAREN         reduce using rule 348 (operator_name -> COMMA .)
    COLON           reduce using rule 348 (operator_name -> COMMA .)
    EQUAL           reduce using rule 348 (operator_name -> COMMA .)
    LCPAREN         reduce using rule 348 (operator_name -> COMMA .)
    SEMICOLON       reduce using rule 348 (operator_name -> COMMA .)
    COMMA           reduce using rule 348 (operator_name -> COMMA .)
    RPAREN          reduce using rule 348 (operator_name -> COMMA .)
    DOT             reduce using rule 348 (operator_name -> COMMA .)
    ARROW           reduce using rule 348 (operator_name -> COMMA .)
    DPLUSOP         reduce using rule 348 (operator_name -> COMMA .)
    DMINUSOP        reduce using rule 348 (operator_name -> COMMA .)
    LTCOMP          reduce using rule 348 (operator_name -> COMMA .)
    MULTEQOP        reduce using rule 348 (operator_name -> COMMA .)
    DIVEQOP         reduce using rule 348 (operator_name -> COMMA .)
    MODEQOP         reduce using rule 348 (operator_name -> COMMA .)
    PLUSEQOP        reduce using rule 348 (operator_name -> COMMA .)
    MINUSEQOP       reduce using rule 348 (operator_name -> COMMA .)
    LSHIFTEQOP      reduce using rule 348 (operator_name -> COMMA .)
    RSHIFTEQOP      reduce using rule 348 (operator_name -> COMMA .)
    BANDEQOP        reduce using rule 348 (operator_name -> COMMA .)
    BOREQOP         reduce using rule 348 (operator_name -> COMMA .)
    DOTSTAR         reduce using rule 348 (operator_name -> COMMA .)
    ARROWSTAR       reduce using rule 348 (operator_name -> COMMA .)
    MULTOP          reduce using rule 348 (operator_name -> COMMA .)
    DIVOP           reduce using rule 348 (operator_name -> COMMA .)
    MODOP           reduce using rule 348 (operator_name -> COMMA .)
    PLUSOP          reduce using rule 348 (operator_name -> COMMA .)
    MINUSOP         reduce using rule 348 (operator_name -> COMMA .)
    LSHIFT          reduce using rule 348 (operator_name -> COMMA .)
    RSHIFT          reduce using rule 348 (operator_name -> COMMA .)
    GTCOMP          reduce using rule 348 (operator_name -> COMMA .)
    LTECOMP         reduce using rule 348 (operator_name -> COMMA .)
    GTECOMP         reduce using rule 348 (operator_name -> COMMA .)
    EQCOMP          reduce using rule 348 (operator_name -> COMMA .)
    NEQCOMP         reduce using rule 348 (operator_name -> COMMA .)
    BANDOP          reduce using rule 348 (operator_name -> COMMA .)
    XOROP           reduce using rule 348 (operator_name -> COMMA .)
    OROP            reduce using rule 348 (operator_name -> COMMA .)
    ANDOP           reduce using rule 348 (operator_name -> COMMA .)
    QUESMARK        reduce using rule 348 (operator_name -> COMMA .)
    RSPAREN         reduce using rule 348 (operator_name -> COMMA .)
    RCPAREN         reduce using rule 348 (operator_name -> COMMA .)


state 145

    (349) operator_name -> ARROWSTAR .

    LPAREN          reduce using rule 349 (operator_name -> ARROWSTAR .)
    LSPAREN         reduce using rule 349 (operator_name -> ARROWSTAR .)
    COLON           reduce using rule 349 (operator_name -> ARROWSTAR .)
    EQUAL           reduce using rule 349 (operator_name -> ARROWSTAR .)
    LCPAREN         reduce using rule 349 (operator_name -> ARROWSTAR .)
    SEMICOLON       reduce using rule 349 (operator_name -> ARROWSTAR .)
    COMMA           reduce using rule 349 (operator_name -> ARROWSTAR .)
    RPAREN          reduce using rule 349 (operator_name -> ARROWSTAR .)
    DOT             reduce using rule 349 (operator_name -> ARROWSTAR .)
    ARROW           reduce using rule 349 (operator_name -> ARROWSTAR .)
    DPLUSOP         reduce using rule 349 (operator_name -> ARROWSTAR .)
    DMINUSOP        reduce using rule 349 (operator_name -> ARROWSTAR .)
    LTCOMP          reduce using rule 349 (operator_name -> ARROWSTAR .)
    MULTEQOP        reduce using rule 349 (operator_name -> ARROWSTAR .)
    DIVEQOP         reduce using rule 349 (operator_name -> ARROWSTAR .)
    MODEQOP         reduce using rule 349 (operator_name -> ARROWSTAR .)
    PLUSEQOP        reduce using rule 349 (operator_name -> ARROWSTAR .)
    MINUSEQOP       reduce using rule 349 (operator_name -> ARROWSTAR .)
    LSHIFTEQOP      reduce using rule 349 (operator_name -> ARROWSTAR .)
    RSHIFTEQOP      reduce using rule 349 (operator_name -> ARROWSTAR .)
    BANDEQOP        reduce using rule 349 (operator_name -> ARROWSTAR .)
    BOREQOP         reduce using rule 349 (operator_name -> ARROWSTAR .)
    DOTSTAR         reduce using rule 349 (operator_name -> ARROWSTAR .)
    ARROWSTAR       reduce using rule 349 (operator_name -> ARROWSTAR .)
    MULTOP          reduce using rule 349 (operator_name -> ARROWSTAR .)
    DIVOP           reduce using rule 349 (operator_name -> ARROWSTAR .)
    MODOP           reduce using rule 349 (operator_name -> ARROWSTAR .)
    PLUSOP          reduce using rule 349 (operator_name -> ARROWSTAR .)
    MINUSOP         reduce using rule 349 (operator_name -> ARROWSTAR .)
    LSHIFT          reduce using rule 349 (operator_name -> ARROWSTAR .)
    RSHIFT          reduce using rule 349 (operator_name -> ARROWSTAR .)
    GTCOMP          reduce using rule 349 (operator_name -> ARROWSTAR .)
    LTECOMP         reduce using rule 349 (operator_name -> ARROWSTAR .)
    GTECOMP         reduce using rule 349 (operator_name -> ARROWSTAR .)
    EQCOMP          reduce using rule 349 (operator_name -> ARROWSTAR .)
    NEQCOMP         reduce using rule 349 (operator_name -> ARROWSTAR .)
    BANDOP          reduce using rule 349 (operator_name -> ARROWSTAR .)
    XOROP           reduce using rule 349 (operator_name -> ARROWSTAR .)
    OROP            reduce using rule 349 (operator_name -> ARROWSTAR .)
    ANDOP           reduce using rule 349 (operator_name -> ARROWSTAR .)
    QUESMARK        reduce using rule 349 (operator_name -> ARROWSTAR .)
    RSPAREN         reduce using rule 349 (operator_name -> ARROWSTAR .)
    RCPAREN         reduce using rule 349 (operator_name -> ARROWSTAR .)


state 146

    (350) operator_name -> ARROW .

    LPAREN          reduce using rule 350 (operator_name -> ARROW .)
    LSPAREN         reduce using rule 350 (operator_name -> ARROW .)
    COLON           reduce using rule 350 (operator_name -> ARROW .)
    EQUAL           reduce using rule 350 (operator_name -> ARROW .)
    LCPAREN         reduce using rule 350 (operator_name -> ARROW .)
    SEMICOLON       reduce using rule 350 (operator_name -> ARROW .)
    COMMA           reduce using rule 350 (operator_name -> ARROW .)
    RPAREN          reduce using rule 350 (operator_name -> ARROW .)
    DOT             reduce using rule 350 (operator_name -> ARROW .)
    ARROW           reduce using rule 350 (operator_name -> ARROW .)
    DPLUSOP         reduce using rule 350 (operator_name -> ARROW .)
    DMINUSOP        reduce using rule 350 (operator_name -> ARROW .)
    LTCOMP          reduce using rule 350 (operator_name -> ARROW .)
    MULTEQOP        reduce using rule 350 (operator_name -> ARROW .)
    DIVEQOP         reduce using rule 350 (operator_name -> ARROW .)
    MODEQOP         reduce using rule 350 (operator_name -> ARROW .)
    PLUSEQOP        reduce using rule 350 (operator_name -> ARROW .)
    MINUSEQOP       reduce using rule 350 (operator_name -> ARROW .)
    LSHIFTEQOP      reduce using rule 350 (operator_name -> ARROW .)
    RSHIFTEQOP      reduce using rule 350 (operator_name -> ARROW .)
    BANDEQOP        reduce using rule 350 (operator_name -> ARROW .)
    BOREQOP         reduce using rule 350 (operator_name -> ARROW .)
    DOTSTAR         reduce using rule 350 (operator_name -> ARROW .)
    ARROWSTAR       reduce using rule 350 (operator_name -> ARROW .)
    MULTOP          reduce using rule 350 (operator_name -> ARROW .)
    DIVOP           reduce using rule 350 (operator_name -> ARROW .)
    MODOP           reduce using rule 350 (operator_name -> ARROW .)
    PLUSOP          reduce using rule 350 (operator_name -> ARROW .)
    MINUSOP         reduce using rule 350 (operator_name -> ARROW .)
    LSHIFT          reduce using rule 350 (operator_name -> ARROW .)
    RSHIFT          reduce using rule 350 (operator_name -> ARROW .)
    GTCOMP          reduce using rule 350 (operator_name -> ARROW .)
    LTECOMP         reduce using rule 350 (operator_name -> ARROW .)
    GTECOMP         reduce using rule 350 (operator_name -> ARROW .)
    EQCOMP          reduce using rule 350 (operator_name -> ARROW .)
    NEQCOMP         reduce using rule 350 (operator_name -> ARROW .)
    BANDOP          reduce using rule 350 (operator_name -> ARROW .)
    XOROP           reduce using rule 350 (operator_name -> ARROW .)
    OROP            reduce using rule 350 (operator_name -> ARROW .)
    ANDOP           reduce using rule 350 (operator_name -> ARROW .)
    QUESMARK        reduce using rule 350 (operator_name -> ARROW .)
    RSPAREN         reduce using rule 350 (operator_name -> ARROW .)
    RCPAREN         reduce using rule 350 (operator_name -> ARROW .)


state 147

    (351) operator_name -> LPAREN . RPAREN

    RPAREN          shift and go to state 303


state 148

    (352) operator_name -> LSPAREN . RSPAREN

    RSPAREN         shift and go to state 304


state 149

    (310) conversion_type_name -> type_specifier_list . ptr_operator
    (311) conversion_type_name -> type_specifier_list .
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

  ! shift/reduce conflict for MULTOP resolved as shift
  ! shift/reduce conflict for BANDOP resolved as shift
    LPAREN          reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    LSPAREN         reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    COLON           reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    EQUAL           reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    LCPAREN         reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    SEMICOLON       reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    COMMA           reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    RPAREN          reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    DOT             reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    ARROW           reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    DPLUSOP         reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    DMINUSOP        reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    LTCOMP          reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    MULTEQOP        reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    DIVEQOP         reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    MODEQOP         reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    PLUSEQOP        reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    MINUSEQOP       reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    LSHIFTEQOP      reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    RSHIFTEQOP      reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    BANDEQOP        reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    BOREQOP         reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    DOTSTAR         reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    ARROWSTAR       reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    DIVOP           reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    MODOP           reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    PLUSOP          reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    MINUSOP         reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    LSHIFT          reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    RSHIFT          reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    GTCOMP          reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    LTECOMP         reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    GTECOMP         reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    EQCOMP          reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    NEQCOMP         reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    XOROP           reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    OROP            reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    ANDOP           reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    QUESMARK        reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    RSPAREN         reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    RCPAREN         reduce using rule 311 (conversion_type_name -> type_specifier_list .)
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    DOUBLECOLON     shift and go to state 42
    IDENTIFIER      shift and go to state 91

  ! MULTOP          [ reduce using rule 311 (conversion_type_name -> type_specifier_list .) ]
  ! BANDOP          [ reduce using rule 311 (conversion_type_name -> type_specifier_list .) ]

    ptr_operator                   shift and go to state 305
    complete_class_name            shift and go to state 76
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 150

    (312) type_specifier_list -> type_specifier . type_specifier_list
    (313) type_specifier_list -> type_specifier .
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    MULTOP          reduce using rule 313 (type_specifier_list -> type_specifier .)
    BANDOP          reduce using rule 313 (type_specifier_list -> type_specifier .)
    LPAREN          reduce using rule 313 (type_specifier_list -> type_specifier .)
    LSPAREN         reduce using rule 313 (type_specifier_list -> type_specifier .)
    COLON           reduce using rule 313 (type_specifier_list -> type_specifier .)
    EQUAL           reduce using rule 313 (type_specifier_list -> type_specifier .)
    LCPAREN         reduce using rule 313 (type_specifier_list -> type_specifier .)
    SEMICOLON       reduce using rule 313 (type_specifier_list -> type_specifier .)
    COMMA           reduce using rule 313 (type_specifier_list -> type_specifier .)
    RPAREN          reduce using rule 313 (type_specifier_list -> type_specifier .)
    DOT             reduce using rule 313 (type_specifier_list -> type_specifier .)
    ARROW           reduce using rule 313 (type_specifier_list -> type_specifier .)
    DPLUSOP         reduce using rule 313 (type_specifier_list -> type_specifier .)
    DMINUSOP        reduce using rule 313 (type_specifier_list -> type_specifier .)
    LTCOMP          reduce using rule 313 (type_specifier_list -> type_specifier .)
    MULTEQOP        reduce using rule 313 (type_specifier_list -> type_specifier .)
    DIVEQOP         reduce using rule 313 (type_specifier_list -> type_specifier .)
    MODEQOP         reduce using rule 313 (type_specifier_list -> type_specifier .)
    PLUSEQOP        reduce using rule 313 (type_specifier_list -> type_specifier .)
    MINUSEQOP       reduce using rule 313 (type_specifier_list -> type_specifier .)
    LSHIFTEQOP      reduce using rule 313 (type_specifier_list -> type_specifier .)
    RSHIFTEQOP      reduce using rule 313 (type_specifier_list -> type_specifier .)
    BANDEQOP        reduce using rule 313 (type_specifier_list -> type_specifier .)
    BOREQOP         reduce using rule 313 (type_specifier_list -> type_specifier .)
    DOTSTAR         reduce using rule 313 (type_specifier_list -> type_specifier .)
    ARROWSTAR       reduce using rule 313 (type_specifier_list -> type_specifier .)
    DIVOP           reduce using rule 313 (type_specifier_list -> type_specifier .)
    MODOP           reduce using rule 313 (type_specifier_list -> type_specifier .)
    PLUSOP          reduce using rule 313 (type_specifier_list -> type_specifier .)
    MINUSOP         reduce using rule 313 (type_specifier_list -> type_specifier .)
    LSHIFT          reduce using rule 313 (type_specifier_list -> type_specifier .)
    RSHIFT          reduce using rule 313 (type_specifier_list -> type_specifier .)
    GTCOMP          reduce using rule 313 (type_specifier_list -> type_specifier .)
    LTECOMP         reduce using rule 313 (type_specifier_list -> type_specifier .)
    GTECOMP         reduce using rule 313 (type_specifier_list -> type_specifier .)
    EQCOMP          reduce using rule 313 (type_specifier_list -> type_specifier .)
    NEQCOMP         reduce using rule 313 (type_specifier_list -> type_specifier .)
    XOROP           reduce using rule 313 (type_specifier_list -> type_specifier .)
    OROP            reduce using rule 313 (type_specifier_list -> type_specifier .)
    ANDOP           reduce using rule 313 (type_specifier_list -> type_specifier .)
    QUESMARK        reduce using rule 313 (type_specifier_list -> type_specifier .)
    RSPAREN         reduce using rule 313 (type_specifier_list -> type_specifier .)
    RCPAREN         reduce using rule 313 (type_specifier_list -> type_specifier .)
    BNOP            reduce using rule 313 (type_specifier_list -> type_specifier .)
    OPERATOR        reduce using rule 313 (type_specifier_list -> type_specifier .)
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    IDENTIFIER      shift and go to state 153

  ! DOUBLECOLON     [ reduce using rule 313 (type_specifier_list -> type_specifier .) ]
  ! IDENTIFIER      [ reduce using rule 313 (type_specifier_list -> type_specifier .) ]

    type_specifier                 shift and go to state 150
    type_specifier_list            shift and go to state 306
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 155
    typedef_name                   shift and go to state 156

state 151

    (379) simple_type_name -> complete_class_name .

    CONST           reduce using rule 379 (simple_type_name -> complete_class_name .)
    VOLATILE        reduce using rule 379 (simple_type_name -> complete_class_name .)
    CHAR            reduce using rule 379 (simple_type_name -> complete_class_name .)
    SHORT           reduce using rule 379 (simple_type_name -> complete_class_name .)
    INT             reduce using rule 379 (simple_type_name -> complete_class_name .)
    LONG            reduce using rule 379 (simple_type_name -> complete_class_name .)
    SIGNED          reduce using rule 379 (simple_type_name -> complete_class_name .)
    UNSIGNED        reduce using rule 379 (simple_type_name -> complete_class_name .)
    FLOAT           reduce using rule 379 (simple_type_name -> complete_class_name .)
    DOUBLE          reduce using rule 379 (simple_type_name -> complete_class_name .)
    VOID            reduce using rule 379 (simple_type_name -> complete_class_name .)
    ENUM            reduce using rule 379 (simple_type_name -> complete_class_name .)
    DOUBLECOLON     reduce using rule 379 (simple_type_name -> complete_class_name .)
    CLASS           reduce using rule 379 (simple_type_name -> complete_class_name .)
    STRUCT          reduce using rule 379 (simple_type_name -> complete_class_name .)
    UNION           reduce using rule 379 (simple_type_name -> complete_class_name .)
    TEMPLATE        reduce using rule 379 (simple_type_name -> complete_class_name .)
    IDENTIFIER      reduce using rule 379 (simple_type_name -> complete_class_name .)
    MULTOP          reduce using rule 379 (simple_type_name -> complete_class_name .)
    BANDOP          reduce using rule 379 (simple_type_name -> complete_class_name .)
    LPAREN          reduce using rule 379 (simple_type_name -> complete_class_name .)
    LSPAREN         reduce using rule 379 (simple_type_name -> complete_class_name .)
    COLON           reduce using rule 379 (simple_type_name -> complete_class_name .)
    EQUAL           reduce using rule 379 (simple_type_name -> complete_class_name .)
    LCPAREN         reduce using rule 379 (simple_type_name -> complete_class_name .)
    SEMICOLON       reduce using rule 379 (simple_type_name -> complete_class_name .)
    COMMA           reduce using rule 379 (simple_type_name -> complete_class_name .)
    RPAREN          reduce using rule 379 (simple_type_name -> complete_class_name .)
    DOT             reduce using rule 379 (simple_type_name -> complete_class_name .)
    ARROW           reduce using rule 379 (simple_type_name -> complete_class_name .)
    DPLUSOP         reduce using rule 379 (simple_type_name -> complete_class_name .)
    DMINUSOP        reduce using rule 379 (simple_type_name -> complete_class_name .)
    LTCOMP          reduce using rule 379 (simple_type_name -> complete_class_name .)
    MULTEQOP        reduce using rule 379 (simple_type_name -> complete_class_name .)
    DIVEQOP         reduce using rule 379 (simple_type_name -> complete_class_name .)
    MODEQOP         reduce using rule 379 (simple_type_name -> complete_class_name .)
    PLUSEQOP        reduce using rule 379 (simple_type_name -> complete_class_name .)
    MINUSEQOP       reduce using rule 379 (simple_type_name -> complete_class_name .)
    LSHIFTEQOP      reduce using rule 379 (simple_type_name -> complete_class_name .)
    RSHIFTEQOP      reduce using rule 379 (simple_type_name -> complete_class_name .)
    BANDEQOP        reduce using rule 379 (simple_type_name -> complete_class_name .)
    BOREQOP         reduce using rule 379 (simple_type_name -> complete_class_name .)
    DOTSTAR         reduce using rule 379 (simple_type_name -> complete_class_name .)
    ARROWSTAR       reduce using rule 379 (simple_type_name -> complete_class_name .)
    DIVOP           reduce using rule 379 (simple_type_name -> complete_class_name .)
    MODOP           reduce using rule 379 (simple_type_name -> complete_class_name .)
    PLUSOP          reduce using rule 379 (simple_type_name -> complete_class_name .)
    MINUSOP         reduce using rule 379 (simple_type_name -> complete_class_name .)
    LSHIFT          reduce using rule 379 (simple_type_name -> complete_class_name .)
    RSHIFT          reduce using rule 379 (simple_type_name -> complete_class_name .)
    GTCOMP          reduce using rule 379 (simple_type_name -> complete_class_name .)
    LTECOMP         reduce using rule 379 (simple_type_name -> complete_class_name .)
    GTECOMP         reduce using rule 379 (simple_type_name -> complete_class_name .)
    EQCOMP          reduce using rule 379 (simple_type_name -> complete_class_name .)
    NEQCOMP         reduce using rule 379 (simple_type_name -> complete_class_name .)
    XOROP           reduce using rule 379 (simple_type_name -> complete_class_name .)
    OROP            reduce using rule 379 (simple_type_name -> complete_class_name .)
    ANDOP           reduce using rule 379 (simple_type_name -> complete_class_name .)
    QUESMARK        reduce using rule 379 (simple_type_name -> complete_class_name .)
    RSPAREN         reduce using rule 379 (simple_type_name -> complete_class_name .)
    RCPAREN         reduce using rule 379 (simple_type_name -> complete_class_name .)
    TYPEDEF         reduce using rule 379 (simple_type_name -> complete_class_name .)
    BNOP            reduce using rule 379 (simple_type_name -> complete_class_name .)
    AUTO            reduce using rule 379 (simple_type_name -> complete_class_name .)
    STATIC          reduce using rule 379 (simple_type_name -> complete_class_name .)
    EXTERN          reduce using rule 379 (simple_type_name -> complete_class_name .)
    INLINE          reduce using rule 379 (simple_type_name -> complete_class_name .)
    VIRTUAL         reduce using rule 379 (simple_type_name -> complete_class_name .)
    OPERATOR        reduce using rule 379 (simple_type_name -> complete_class_name .)


state 152

    (380) simple_type_name -> qualified_type_name .

    CONST           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    VOLATILE        reduce using rule 380 (simple_type_name -> qualified_type_name .)
    CHAR            reduce using rule 380 (simple_type_name -> qualified_type_name .)
    SHORT           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    INT             reduce using rule 380 (simple_type_name -> qualified_type_name .)
    LONG            reduce using rule 380 (simple_type_name -> qualified_type_name .)
    SIGNED          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    UNSIGNED        reduce using rule 380 (simple_type_name -> qualified_type_name .)
    FLOAT           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    DOUBLE          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    VOID            reduce using rule 380 (simple_type_name -> qualified_type_name .)
    ENUM            reduce using rule 380 (simple_type_name -> qualified_type_name .)
    DOUBLECOLON     reduce using rule 380 (simple_type_name -> qualified_type_name .)
    CLASS           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    STRUCT          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    UNION           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    TEMPLATE        reduce using rule 380 (simple_type_name -> qualified_type_name .)
    IDENTIFIER      reduce using rule 380 (simple_type_name -> qualified_type_name .)
    MULTOP          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    BANDOP          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    LPAREN          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    LSPAREN         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    COLON           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    EQUAL           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    LCPAREN         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    SEMICOLON       reduce using rule 380 (simple_type_name -> qualified_type_name .)
    COMMA           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    RPAREN          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    DOT             reduce using rule 380 (simple_type_name -> qualified_type_name .)
    ARROW           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    DPLUSOP         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    DMINUSOP        reduce using rule 380 (simple_type_name -> qualified_type_name .)
    LTCOMP          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    MULTEQOP        reduce using rule 380 (simple_type_name -> qualified_type_name .)
    DIVEQOP         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    MODEQOP         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    PLUSEQOP        reduce using rule 380 (simple_type_name -> qualified_type_name .)
    MINUSEQOP       reduce using rule 380 (simple_type_name -> qualified_type_name .)
    LSHIFTEQOP      reduce using rule 380 (simple_type_name -> qualified_type_name .)
    RSHIFTEQOP      reduce using rule 380 (simple_type_name -> qualified_type_name .)
    BANDEQOP        reduce using rule 380 (simple_type_name -> qualified_type_name .)
    BOREQOP         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    DOTSTAR         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    ARROWSTAR       reduce using rule 380 (simple_type_name -> qualified_type_name .)
    DIVOP           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    MODOP           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    PLUSOP          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    MINUSOP         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    LSHIFT          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    RSHIFT          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    GTCOMP          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    LTECOMP         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    GTECOMP         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    EQCOMP          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    NEQCOMP         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    XOROP           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    OROP            reduce using rule 380 (simple_type_name -> qualified_type_name .)
    ANDOP           reduce using rule 380 (simple_type_name -> qualified_type_name .)
    QUESMARK        reduce using rule 380 (simple_type_name -> qualified_type_name .)
    RSPAREN         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    RCPAREN         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    TYPEDEF         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    BNOP            reduce using rule 380 (simple_type_name -> qualified_type_name .)
    AUTO            reduce using rule 380 (simple_type_name -> qualified_type_name .)
    STATIC          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    EXTERN          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    INLINE          reduce using rule 380 (simple_type_name -> qualified_type_name .)
    VIRTUAL         reduce using rule 380 (simple_type_name -> qualified_type_name .)
    OPERATOR        reduce using rule 380 (simple_type_name -> qualified_type_name .)


state 153

    (392) typedef_name -> IDENTIFIER .
    (407) class_name -> IDENTIFIER .

  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TEMPLATE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COLON resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ARROW resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DPLUSOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DMINUSOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LTCOMP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTEQOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DIVEQOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MODEQOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUSEQOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUSEQOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSHIFTEQOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RSHIFTEQOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDEQOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BOREQOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOTSTAR resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ARROWSTAR resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DIVOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MODOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUSOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUSOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LTECOMP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for GTECOMP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQCOMP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for NEQCOMP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for XOROP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OROP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ANDOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for QUESMARK resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RSPAREN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RCPAREN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 392 (typedef_name -> IDENTIFIER .)
    CONST           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CHAR            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SHORT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INT             reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LONG            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SIGNED          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    FLOAT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOID            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    ENUM            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CLASS           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STRUCT          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNION           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    TEMPLATE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 392 (typedef_name -> IDENTIFIER .)
    MULTOP          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    BANDOP          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LPAREN          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    COLON           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    EQUAL           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LCPAREN         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 392 (typedef_name -> IDENTIFIER .)
    COMMA           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    RPAREN          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOT             reduce using rule 392 (typedef_name -> IDENTIFIER .)
    ARROW           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LTCOMP          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    MODEQOP         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 392 (typedef_name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 392 (typedef_name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    BOREQOP         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DIVOP           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    MODOP           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    PLUSOP          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    MINUSOP         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LSHIFT          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    RSHIFT          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    GTCOMP          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LTECOMP         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    GTECOMP         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    EQCOMP          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    XOROP           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    OROP            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    ANDOP           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    QUESMARK        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    RSPAREN         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    RCPAREN         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    BNOP            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    AUTO            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STATIC          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    EXTERN          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INLINE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 392 (typedef_name -> IDENTIFIER .)

  ! DOUBLECOLON     [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TEMPLATE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ARROW           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DPLUSOP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DMINUSOP        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LTCOMP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MULTEQOP        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DIVEQOP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MODEQOP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! PLUSEQOP        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MINUSEQOP       [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LSHIFTEQOP      [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RSHIFTEQOP      [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BANDEQOP        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BOREQOP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DOTSTAR         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ARROWSTAR       [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DIVOP           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MODOP           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! PLUSOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MINUSOP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LSHIFT          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RSHIFT          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! GTCOMP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LTECOMP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! GTECOMP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EQCOMP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! NEQCOMP         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! XOROP           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! OROP            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ANDOP           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! QUESMARK        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RSPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RCPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]


state 154

    (391) qualified_type_name -> class_name . DOUBLECOLON qualified_type_name
    (405) qualified_class_name -> class_name .
    (406) qualified_class_name -> class_name . DOUBLECOLON qualified_class_name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    DOUBLECOLON     shift and go to state 89
    CONST           reduce using rule 405 (qualified_class_name -> class_name .)
    VOLATILE        reduce using rule 405 (qualified_class_name -> class_name .)
    CHAR            reduce using rule 405 (qualified_class_name -> class_name .)
    SHORT           reduce using rule 405 (qualified_class_name -> class_name .)
    INT             reduce using rule 405 (qualified_class_name -> class_name .)
    LONG            reduce using rule 405 (qualified_class_name -> class_name .)
    SIGNED          reduce using rule 405 (qualified_class_name -> class_name .)
    UNSIGNED        reduce using rule 405 (qualified_class_name -> class_name .)
    FLOAT           reduce using rule 405 (qualified_class_name -> class_name .)
    DOUBLE          reduce using rule 405 (qualified_class_name -> class_name .)
    VOID            reduce using rule 405 (qualified_class_name -> class_name .)
    ENUM            reduce using rule 405 (qualified_class_name -> class_name .)
    CLASS           reduce using rule 405 (qualified_class_name -> class_name .)
    STRUCT          reduce using rule 405 (qualified_class_name -> class_name .)
    UNION           reduce using rule 405 (qualified_class_name -> class_name .)
    TEMPLATE        reduce using rule 405 (qualified_class_name -> class_name .)
    IDENTIFIER      reduce using rule 405 (qualified_class_name -> class_name .)
    MULTOP          reduce using rule 405 (qualified_class_name -> class_name .)
    BANDOP          reduce using rule 405 (qualified_class_name -> class_name .)
    LPAREN          reduce using rule 405 (qualified_class_name -> class_name .)
    LSPAREN         reduce using rule 405 (qualified_class_name -> class_name .)
    COLON           reduce using rule 405 (qualified_class_name -> class_name .)
    EQUAL           reduce using rule 405 (qualified_class_name -> class_name .)
    LCPAREN         reduce using rule 405 (qualified_class_name -> class_name .)
    SEMICOLON       reduce using rule 405 (qualified_class_name -> class_name .)
    COMMA           reduce using rule 405 (qualified_class_name -> class_name .)
    RPAREN          reduce using rule 405 (qualified_class_name -> class_name .)
    DOT             reduce using rule 405 (qualified_class_name -> class_name .)
    ARROW           reduce using rule 405 (qualified_class_name -> class_name .)
    DPLUSOP         reduce using rule 405 (qualified_class_name -> class_name .)
    DMINUSOP        reduce using rule 405 (qualified_class_name -> class_name .)
    LTCOMP          reduce using rule 405 (qualified_class_name -> class_name .)
    MULTEQOP        reduce using rule 405 (qualified_class_name -> class_name .)
    DIVEQOP         reduce using rule 405 (qualified_class_name -> class_name .)
    MODEQOP         reduce using rule 405 (qualified_class_name -> class_name .)
    PLUSEQOP        reduce using rule 405 (qualified_class_name -> class_name .)
    MINUSEQOP       reduce using rule 405 (qualified_class_name -> class_name .)
    LSHIFTEQOP      reduce using rule 405 (qualified_class_name -> class_name .)
    RSHIFTEQOP      reduce using rule 405 (qualified_class_name -> class_name .)
    BANDEQOP        reduce using rule 405 (qualified_class_name -> class_name .)
    BOREQOP         reduce using rule 405 (qualified_class_name -> class_name .)
    DOTSTAR         reduce using rule 405 (qualified_class_name -> class_name .)
    ARROWSTAR       reduce using rule 405 (qualified_class_name -> class_name .)
    DIVOP           reduce using rule 405 (qualified_class_name -> class_name .)
    MODOP           reduce using rule 405 (qualified_class_name -> class_name .)
    PLUSOP          reduce using rule 405 (qualified_class_name -> class_name .)
    MINUSOP         reduce using rule 405 (qualified_class_name -> class_name .)
    LSHIFT          reduce using rule 405 (qualified_class_name -> class_name .)
    RSHIFT          reduce using rule 405 (qualified_class_name -> class_name .)
    GTCOMP          reduce using rule 405 (qualified_class_name -> class_name .)
    LTECOMP         reduce using rule 405 (qualified_class_name -> class_name .)
    GTECOMP         reduce using rule 405 (qualified_class_name -> class_name .)
    EQCOMP          reduce using rule 405 (qualified_class_name -> class_name .)
    NEQCOMP         reduce using rule 405 (qualified_class_name -> class_name .)
    XOROP           reduce using rule 405 (qualified_class_name -> class_name .)
    OROP            reduce using rule 405 (qualified_class_name -> class_name .)
    ANDOP           reduce using rule 405 (qualified_class_name -> class_name .)
    QUESMARK        reduce using rule 405 (qualified_class_name -> class_name .)
    RSPAREN         reduce using rule 405 (qualified_class_name -> class_name .)
    RCPAREN         reduce using rule 405 (qualified_class_name -> class_name .)
    TYPEDEF         reduce using rule 405 (qualified_class_name -> class_name .)
    BNOP            reduce using rule 405 (qualified_class_name -> class_name .)
    AUTO            reduce using rule 405 (qualified_class_name -> class_name .)
    STATIC          reduce using rule 405 (qualified_class_name -> class_name .)
    EXTERN          reduce using rule 405 (qualified_class_name -> class_name .)
    INLINE          reduce using rule 405 (qualified_class_name -> class_name .)
    VIRTUAL         reduce using rule 405 (qualified_class_name -> class_name .)
    OPERATOR        reduce using rule 405 (qualified_class_name -> class_name .)

  ! DOUBLECOLON     [ reduce using rule 405 (qualified_class_name -> class_name .) ]


state 155

    (403) complete_class_name -> qualified_class_name .

    CONST           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    VOLATILE        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    CHAR            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    SHORT           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    INT             reduce using rule 403 (complete_class_name -> qualified_class_name .)
    LONG            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    SIGNED          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    UNSIGNED        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    FLOAT           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    DOUBLE          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    VOID            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    ENUM            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    DOUBLECOLON     reduce using rule 403 (complete_class_name -> qualified_class_name .)
    CLASS           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    STRUCT          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    UNION           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    TEMPLATE        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    IDENTIFIER      reduce using rule 403 (complete_class_name -> qualified_class_name .)
    MULTOP          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    BANDOP          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    LPAREN          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    LSPAREN         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    COLON           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    EQUAL           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    LCPAREN         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    SEMICOLON       reduce using rule 403 (complete_class_name -> qualified_class_name .)
    COMMA           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    RPAREN          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    DOT             reduce using rule 403 (complete_class_name -> qualified_class_name .)
    ARROW           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    DPLUSOP         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    DMINUSOP        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    LTCOMP          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    MULTEQOP        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    DIVEQOP         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    MODEQOP         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    PLUSEQOP        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    MINUSEQOP       reduce using rule 403 (complete_class_name -> qualified_class_name .)
    LSHIFTEQOP      reduce using rule 403 (complete_class_name -> qualified_class_name .)
    RSHIFTEQOP      reduce using rule 403 (complete_class_name -> qualified_class_name .)
    BANDEQOP        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    BOREQOP         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    DOTSTAR         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    ARROWSTAR       reduce using rule 403 (complete_class_name -> qualified_class_name .)
    DIVOP           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    MODOP           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    PLUSOP          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    MINUSOP         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    LSHIFT          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    RSHIFT          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    GTCOMP          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    LTECOMP         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    GTECOMP         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    EQCOMP          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    NEQCOMP         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    XOROP           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    OROP            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    ANDOP           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    QUESMARK        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    RSPAREN         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    RCPAREN         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    TYPEDEF         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    BNOP            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    AUTO            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    STATIC          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    EXTERN          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    INLINE          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    VIRTUAL         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    OPERATOR        reduce using rule 403 (complete_class_name -> qualified_class_name .)


state 156

    (390) qualified_type_name -> typedef_name .

    CONST           reduce using rule 390 (qualified_type_name -> typedef_name .)
    VOLATILE        reduce using rule 390 (qualified_type_name -> typedef_name .)
    CHAR            reduce using rule 390 (qualified_type_name -> typedef_name .)
    SHORT           reduce using rule 390 (qualified_type_name -> typedef_name .)
    INT             reduce using rule 390 (qualified_type_name -> typedef_name .)
    LONG            reduce using rule 390 (qualified_type_name -> typedef_name .)
    SIGNED          reduce using rule 390 (qualified_type_name -> typedef_name .)
    UNSIGNED        reduce using rule 390 (qualified_type_name -> typedef_name .)
    FLOAT           reduce using rule 390 (qualified_type_name -> typedef_name .)
    DOUBLE          reduce using rule 390 (qualified_type_name -> typedef_name .)
    VOID            reduce using rule 390 (qualified_type_name -> typedef_name .)
    ENUM            reduce using rule 390 (qualified_type_name -> typedef_name .)
    DOUBLECOLON     reduce using rule 390 (qualified_type_name -> typedef_name .)
    CLASS           reduce using rule 390 (qualified_type_name -> typedef_name .)
    STRUCT          reduce using rule 390 (qualified_type_name -> typedef_name .)
    UNION           reduce using rule 390 (qualified_type_name -> typedef_name .)
    TEMPLATE        reduce using rule 390 (qualified_type_name -> typedef_name .)
    IDENTIFIER      reduce using rule 390 (qualified_type_name -> typedef_name .)
    MULTOP          reduce using rule 390 (qualified_type_name -> typedef_name .)
    BANDOP          reduce using rule 390 (qualified_type_name -> typedef_name .)
    LPAREN          reduce using rule 390 (qualified_type_name -> typedef_name .)
    LSPAREN         reduce using rule 390 (qualified_type_name -> typedef_name .)
    COLON           reduce using rule 390 (qualified_type_name -> typedef_name .)
    EQUAL           reduce using rule 390 (qualified_type_name -> typedef_name .)
    LCPAREN         reduce using rule 390 (qualified_type_name -> typedef_name .)
    SEMICOLON       reduce using rule 390 (qualified_type_name -> typedef_name .)
    COMMA           reduce using rule 390 (qualified_type_name -> typedef_name .)
    RPAREN          reduce using rule 390 (qualified_type_name -> typedef_name .)
    DOT             reduce using rule 390 (qualified_type_name -> typedef_name .)
    ARROW           reduce using rule 390 (qualified_type_name -> typedef_name .)
    DPLUSOP         reduce using rule 390 (qualified_type_name -> typedef_name .)
    DMINUSOP        reduce using rule 390 (qualified_type_name -> typedef_name .)
    LTCOMP          reduce using rule 390 (qualified_type_name -> typedef_name .)
    MULTEQOP        reduce using rule 390 (qualified_type_name -> typedef_name .)
    DIVEQOP         reduce using rule 390 (qualified_type_name -> typedef_name .)
    MODEQOP         reduce using rule 390 (qualified_type_name -> typedef_name .)
    PLUSEQOP        reduce using rule 390 (qualified_type_name -> typedef_name .)
    MINUSEQOP       reduce using rule 390 (qualified_type_name -> typedef_name .)
    LSHIFTEQOP      reduce using rule 390 (qualified_type_name -> typedef_name .)
    RSHIFTEQOP      reduce using rule 390 (qualified_type_name -> typedef_name .)
    BANDEQOP        reduce using rule 390 (qualified_type_name -> typedef_name .)
    BOREQOP         reduce using rule 390 (qualified_type_name -> typedef_name .)
    DOTSTAR         reduce using rule 390 (qualified_type_name -> typedef_name .)
    ARROWSTAR       reduce using rule 390 (qualified_type_name -> typedef_name .)
    DIVOP           reduce using rule 390 (qualified_type_name -> typedef_name .)
    MODOP           reduce using rule 390 (qualified_type_name -> typedef_name .)
    PLUSOP          reduce using rule 390 (qualified_type_name -> typedef_name .)
    MINUSOP         reduce using rule 390 (qualified_type_name -> typedef_name .)
    LSHIFT          reduce using rule 390 (qualified_type_name -> typedef_name .)
    RSHIFT          reduce using rule 390 (qualified_type_name -> typedef_name .)
    GTCOMP          reduce using rule 390 (qualified_type_name -> typedef_name .)
    LTECOMP         reduce using rule 390 (qualified_type_name -> typedef_name .)
    GTECOMP         reduce using rule 390 (qualified_type_name -> typedef_name .)
    EQCOMP          reduce using rule 390 (qualified_type_name -> typedef_name .)
    NEQCOMP         reduce using rule 390 (qualified_type_name -> typedef_name .)
    XOROP           reduce using rule 390 (qualified_type_name -> typedef_name .)
    OROP            reduce using rule 390 (qualified_type_name -> typedef_name .)
    ANDOP           reduce using rule 390 (qualified_type_name -> typedef_name .)
    QUESMARK        reduce using rule 390 (qualified_type_name -> typedef_name .)
    RSPAREN         reduce using rule 390 (qualified_type_name -> typedef_name .)
    RCPAREN         reduce using rule 390 (qualified_type_name -> typedef_name .)
    TYPEDEF         reduce using rule 390 (qualified_type_name -> typedef_name .)
    BNOP            reduce using rule 390 (qualified_type_name -> typedef_name .)
    AUTO            reduce using rule 390 (qualified_type_name -> typedef_name .)
    STATIC          reduce using rule 390 (qualified_type_name -> typedef_name .)
    EXTERN          reduce using rule 390 (qualified_type_name -> typedef_name .)
    INLINE          reduce using rule 390 (qualified_type_name -> typedef_name .)
    VIRTUAL         reduce using rule 390 (qualified_type_name -> typedef_name .)
    OPERATOR        reduce using rule 390 (qualified_type_name -> typedef_name .)


state 157

    (245) declaration -> decl_specifiers declarator_list SEMICOLON .

    ASM             reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    EXTERN          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    LPAREN          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    AUTO            reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    STATIC          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CONST           reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    INLINE          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    BNOP            reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    MULTOP          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    BANDOP          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CHAR            reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SHORT           reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    INT             reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    LONG            reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SIGNED          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    FLOAT           reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    VOID            reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    ENUM            reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DOUBLECOLON     reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CLASS           reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    STRUCT          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    UNION           reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    $end            reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CASE            reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    LCPAREN         reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    IF              reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SWITCH          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    WHILE           reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DO              reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    FOR             reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    BREAK           reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    RETURN          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    GOTO            reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    TRY             reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DPLUSOP         reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DMINUSOP        reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    PLUSOP          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    MINUSOP         reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    NOTSYM          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    NEW             reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    DELETE          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    THIS            reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    NUMBER          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    STRING          reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    SCHAR           reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)
    ELSE            reduce using rule 245 (declaration -> decl_specifiers declarator_list SEMICOLON .)


state 158

    (199) function_definition -> decl_specifiers declarator ctor_initializer . fct_body
    (203) fct_body -> . compound_statement
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 85

    fct_body                       shift and go to state 307
    compound_statement             shift and go to state 83

state 159

    (201) function_definition -> decl_specifiers declarator fct_body .

    ASM             reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    TEMPLATE        reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    EXTERN          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    TYPEDEF         reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    LPAREN          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    AUTO            reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    STATIC          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    CONST           reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    VOLATILE        reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    INLINE          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    VIRTUAL         reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    BNOP            reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    MULTOP          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    BANDOP          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    CHAR            reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    SHORT           reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    INT             reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    LONG            reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    SIGNED          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    UNSIGNED        reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    FLOAT           reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    DOUBLE          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    VOID            reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    ENUM            reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    IDENTIFIER      reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    DOUBLECOLON     reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    CLASS           reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    STRUCT          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    UNION           reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    OPERATOR        reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    $end            reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    RCPAREN         reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    CASE            reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    DEFAULT         reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    SEMICOLON       reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    LCPAREN         reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    IF              reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    SWITCH          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    WHILE           reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    DO              reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    FOR             reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    BREAK           reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    CONTINUE        reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    RETURN          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    GOTO            reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    TRY             reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    DPLUSOP         reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    DMINUSOP        reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    SIZEOF          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    PLUSOP          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    MINUSOP         reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    NOTSYM          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    NEW             reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    DELETE          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    THIS            reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    NUMBER          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    STRING          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    SCHAR           reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    ELSE            reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    PRIVATE         reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    PROTECTED       reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    PUBLIC          reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)
    COLON           reduce using rule 201 (function_definition -> decl_specifiers declarator fct_body .)


state 160

    (259) declarator_list -> declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 259 (declarator_list -> declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 259 (declarator_list -> declarator_list COMMA init_declarator .)


state 161

    (260) init_declarator -> declarator . initializer
    (261) init_declarator -> declarator .
    (293) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (295) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (296) declarator -> declarator . LSPAREN RSPAREN
    (262) initializer -> . EQUAL assignment_expression
    (263) initializer -> . EQUAL LCPAREN initializer_list RCPAREN
    (264) initializer -> . EQUAL LCPAREN initializer_list COMMA RCPAREN
    (265) initializer -> . LPAREN expression_list RPAREN

    SEMICOLON       reduce using rule 261 (init_declarator -> declarator .)
    COMMA           reduce using rule 261 (init_declarator -> declarator .)
    LPAREN          shift and go to state 80
    LSPAREN         shift and go to state 81
    EQUAL           shift and go to state 84

    initializer                    shift and go to state 79

state 162

    (270) asm_declaration -> ASM LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 308


state 163

    (293) declarator -> declarator LPAREN . argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> declarator LPAREN . argument_declaration_list RPAREN
    (159) argument_declaration_list -> . arg_declaration_list
    (160) argument_declaration_list -> .
    (161) arg_declaration_list -> . argument_declaration
    (162) arg_declaration_list -> . arg_declaration_list COMMA argument_declaration
    (163) argument_declaration -> . decl_specifiers declarator
    (164) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (165) argument_declaration -> . decl_specifiers abstract_declarator
    (166) argument_declaration -> . decl_specifiers
    (167) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (168) argument_declaration -> . decl_specifiers EQUAL expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    RPAREN          reduce using rule 160 (argument_declaration_list -> .)
    TYPEDEF         shift and go to state 21
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 69
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    IDENTIFIER      shift and go to state 153

    argument_declaration_list      shift and go to state 167
    arg_declaration_list           shift and go to state 169
    argument_declaration           shift and go to state 171
    decl_specifiers                shift and go to state 174
    decl_specifier                 shift and go to state 11
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 155
    typedef_name                   shift and go to state 156

state 164

    (297) declarator -> LPAREN declarator RPAREN .

    LPAREN          reduce using rule 297 (declarator -> LPAREN declarator RPAREN .)
    LSPAREN         reduce using rule 297 (declarator -> LPAREN declarator RPAREN .)
    COLON           reduce using rule 297 (declarator -> LPAREN declarator RPAREN .)
    EQUAL           reduce using rule 297 (declarator -> LPAREN declarator RPAREN .)
    LCPAREN         reduce using rule 297 (declarator -> LPAREN declarator RPAREN .)
    SEMICOLON       reduce using rule 297 (declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 297 (declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 297 (declarator -> LPAREN declarator RPAREN .)
    GTCOMP          reduce using rule 297 (declarator -> LPAREN declarator RPAREN .)


state 165

    (200) function_definition -> declarator ctor_initializer fct_body .

    ASM             reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    TEMPLATE        reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    EXTERN          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    TYPEDEF         reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    LPAREN          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    AUTO            reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    STATIC          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    CONST           reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    VOLATILE        reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    INLINE          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    VIRTUAL         reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    BNOP            reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    MULTOP          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    BANDOP          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    CHAR            reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    SHORT           reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    INT             reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    LONG            reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    SIGNED          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    UNSIGNED        reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    FLOAT           reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    DOUBLE          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    VOID            reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    ENUM            reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    IDENTIFIER      reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    DOUBLECOLON     reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    CLASS           reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    STRUCT          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    UNION           reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    OPERATOR        reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    $end            reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    RCPAREN         reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    CASE            reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    DEFAULT         reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    SEMICOLON       reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    LCPAREN         reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    IF              reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    SWITCH          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    WHILE           reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    DO              reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    FOR             reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    BREAK           reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    CONTINUE        reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    RETURN          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    GOTO            reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    TRY             reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    DPLUSOP         reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    DMINUSOP        reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    SIZEOF          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    PLUSOP          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    MINUSOP         reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    NOTSYM          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    NEW             reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    DELETE          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    THIS            reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    NUMBER          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    STRING          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    SCHAR           reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    ELSE            reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    PRIVATE         reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    PROTECTED       reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    PUBLIC          reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)
    COLON           reduce using rule 200 (function_definition -> declarator ctor_initializer fct_body .)


state 166

    (139) primary_expression -> LPAREN . expression RPAREN
    (145) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (146) type_name -> . type_specifier_list abstract_declarator
    (147) type_name -> . type_specifier_list
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 309
    type_name                      shift and go to state 310
    cast_expression                shift and go to state 180
    assignment_expression          shift and go to state 252
    type_specifier_list            shift and go to state 311
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    type_specifier                 shift and go to state 150
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    simple_type_name               shift and go to state 312
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    name                           shift and go to state 187
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 167

    (293) declarator -> declarator LPAREN argument_declaration_list . RPAREN cv_qualifier_list
    (294) declarator -> declarator LPAREN argument_declaration_list . RPAREN

    RPAREN          shift and go to state 313


state 168

    (265) initializer -> LPAREN expression_list . RPAREN
    (284) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 314
    COMMA           shift and go to state 315


state 169

    (159) argument_declaration_list -> arg_declaration_list .
    (162) arg_declaration_list -> arg_declaration_list . COMMA argument_declaration

    RPAREN          reduce using rule 159 (argument_declaration_list -> arg_declaration_list .)
    COMMA           shift and go to state 316


state 170

    (283) expression_list -> assignment_expression .

    RPAREN          reduce using rule 283 (expression_list -> assignment_expression .)
    COMMA           reduce using rule 283 (expression_list -> assignment_expression .)


state 171

    (161) arg_declaration_list -> argument_declaration .

    COMMA           reduce using rule 161 (arg_declaration_list -> argument_declaration .)
    RPAREN          reduce using rule 161 (arg_declaration_list -> argument_declaration .)


state 172

    (62) assignment_expression -> conditional_expression .

    RPAREN          reduce using rule 62 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 62 (assignment_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 62 (assignment_expression -> conditional_expression .)
    RCPAREN         reduce using rule 62 (assignment_expression -> conditional_expression .)
    GTCOMP          reduce using rule 62 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 62 (assignment_expression -> conditional_expression .)
    RSPAREN         reduce using rule 62 (assignment_expression -> conditional_expression .)


state 173

    (63) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (144) cast_expression -> unary_expression .
    (64) assignment_operator -> . EQUAL
    (65) assignment_operator -> . MULTEQOP
    (66) assignment_operator -> . DIVEQOP
    (67) assignment_operator -> . MODEQOP
    (68) assignment_operator -> . PLUSEQOP
    (69) assignment_operator -> . MINUSEQOP
    (70) assignment_operator -> . LSHIFTEQOP
    (71) assignment_operator -> . RSHIFTEQOP
    (72) assignment_operator -> . BANDEQOP
    (73) assignment_operator -> . BOREQOP

    DOTSTAR         reduce using rule 144 (cast_expression -> unary_expression .)
    ARROWSTAR       reduce using rule 144 (cast_expression -> unary_expression .)
    MULTOP          reduce using rule 144 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 144 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 144 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 144 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 144 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 144 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 144 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 144 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 144 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 144 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 144 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 144 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 144 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 144 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 144 (cast_expression -> unary_expression .)
    OROP            reduce using rule 144 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 144 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 144 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 144 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 144 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 144 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 144 (cast_expression -> unary_expression .)
    COLON           reduce using rule 144 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 144 (cast_expression -> unary_expression .)
    EQUAL           shift and go to state 318
    MULTEQOP        shift and go to state 319
    DIVEQOP         shift and go to state 320
    MODEQOP         shift and go to state 321
    PLUSEQOP        shift and go to state 322
    MINUSEQOP       shift and go to state 323
    LSHIFTEQOP      shift and go to state 324
    RSHIFTEQOP      shift and go to state 325
    BANDEQOP        shift and go to state 326
    BOREQOP         shift and go to state 327

    assignment_operator            shift and go to state 317

state 174

    (163) argument_declaration -> decl_specifiers . declarator
    (164) argument_declaration -> decl_specifiers . declarator EQUAL expression
    (165) argument_declaration -> decl_specifiers . abstract_declarator
    (166) argument_declaration -> decl_specifiers .
    (167) argument_declaration -> decl_specifiers . abstract_declarator EQUAL expression
    (168) argument_declaration -> decl_specifiers . EQUAL expression
    (169) decl_specifiers -> decl_specifiers . decl_specifier
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (148) abstract_declarator -> . ptr_operator abstract_declarator
    (149) abstract_declarator -> . ptr_operator
    (150) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (151) abstract_declarator -> . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (152) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (153) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (154) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (155) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (156) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (157) abstract_declarator -> . LSPAREN RSPAREN
    (158) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE

    COMMA           reduce using rule 166 (argument_declaration -> decl_specifiers .)
    RPAREN          reduce using rule 166 (argument_declaration -> decl_specifiers .)
    GTCOMP          reduce using rule 166 (argument_declaration -> decl_specifiers .)
    EQUAL           shift and go to state 329
    LPAREN          shift and go to state 332
    LSPAREN         shift and go to state 333
    TYPEDEF         shift and go to state 21
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 69
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 42
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    OPERATOR        shift and go to state 63
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70

    declarator                     shift and go to state 328
    abstract_declarator            shift and go to state 330
    decl_specifier                 shift and go to state 67
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 331
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55

state 175

    (27) conditional_expression -> logical_OR_expression .
    (28) conditional_expression -> logical_OR_expression . QUESMARK expression COLON conditional_expression
    (30) logical_OR_expression -> logical_OR_expression . OROP logical_AND_expression

    RPAREN          reduce using rule 27 (conditional_expression -> logical_OR_expression .)
    COMMA           reduce using rule 27 (conditional_expression -> logical_OR_expression .)
    RSPAREN         reduce using rule 27 (conditional_expression -> logical_OR_expression .)
    SEMICOLON       reduce using rule 27 (conditional_expression -> logical_OR_expression .)
    RCPAREN         reduce using rule 27 (conditional_expression -> logical_OR_expression .)
    COLON           reduce using rule 27 (conditional_expression -> logical_OR_expression .)
    GTCOMP          reduce using rule 27 (conditional_expression -> logical_OR_expression .)
    QUESMARK        shift and go to state 334
    OROP            shift and go to state 335


state 176

    (74) unary_expression -> postfix_expression .
    (124) postfix_expression -> postfix_expression . LSPAREN expression RSPAREN
    (125) postfix_expression -> postfix_expression . LPAREN expression_list RPAREN
    (126) postfix_expression -> postfix_expression . template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> postfix_expression . LPAREN RPAREN
    (130) postfix_expression -> postfix_expression . DOT name
    (131) postfix_expression -> postfix_expression . ARROW name
    (132) postfix_expression -> postfix_expression . DPLUSOP
    (133) postfix_expression -> postfix_expression . DMINUSOP
    (12) template_class_name -> . LTCOMP template_arg_list GTCOMP

  ! shift/reduce conflict for LTCOMP resolved as shift
    EQUAL           reduce using rule 74 (unary_expression -> postfix_expression .)
    MULTEQOP        reduce using rule 74 (unary_expression -> postfix_expression .)
    DIVEQOP         reduce using rule 74 (unary_expression -> postfix_expression .)
    MODEQOP         reduce using rule 74 (unary_expression -> postfix_expression .)
    PLUSEQOP        reduce using rule 74 (unary_expression -> postfix_expression .)
    MINUSEQOP       reduce using rule 74 (unary_expression -> postfix_expression .)
    LSHIFTEQOP      reduce using rule 74 (unary_expression -> postfix_expression .)
    RSHIFTEQOP      reduce using rule 74 (unary_expression -> postfix_expression .)
    BANDEQOP        reduce using rule 74 (unary_expression -> postfix_expression .)
    BOREQOP         reduce using rule 74 (unary_expression -> postfix_expression .)
    DOTSTAR         reduce using rule 74 (unary_expression -> postfix_expression .)
    ARROWSTAR       reduce using rule 74 (unary_expression -> postfix_expression .)
    MULTOP          reduce using rule 74 (unary_expression -> postfix_expression .)
    DIVOP           reduce using rule 74 (unary_expression -> postfix_expression .)
    MODOP           reduce using rule 74 (unary_expression -> postfix_expression .)
    PLUSOP          reduce using rule 74 (unary_expression -> postfix_expression .)
    MINUSOP         reduce using rule 74 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 74 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 74 (unary_expression -> postfix_expression .)
    GTCOMP          reduce using rule 74 (unary_expression -> postfix_expression .)
    LTECOMP         reduce using rule 74 (unary_expression -> postfix_expression .)
    GTECOMP         reduce using rule 74 (unary_expression -> postfix_expression .)
    EQCOMP          reduce using rule 74 (unary_expression -> postfix_expression .)
    NEQCOMP         reduce using rule 74 (unary_expression -> postfix_expression .)
    BANDOP          reduce using rule 74 (unary_expression -> postfix_expression .)
    XOROP           reduce using rule 74 (unary_expression -> postfix_expression .)
    OROP            reduce using rule 74 (unary_expression -> postfix_expression .)
    ANDOP           reduce using rule 74 (unary_expression -> postfix_expression .)
    QUESMARK        reduce using rule 74 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 74 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 74 (unary_expression -> postfix_expression .)
    RSPAREN         reduce using rule 74 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 74 (unary_expression -> postfix_expression .)
    RCPAREN         reduce using rule 74 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 74 (unary_expression -> postfix_expression .)
    LSPAREN         shift and go to state 336
    LPAREN          shift and go to state 337
    DOT             shift and go to state 339
    ARROW           shift and go to state 340
    DPLUSOP         shift and go to state 341
    DMINUSOP        shift and go to state 342
    LTCOMP          shift and go to state 343

  ! LTCOMP          [ reduce using rule 74 (unary_expression -> postfix_expression .) ]

    template_class_name            shift and go to state 338

state 177

    (75) unary_expression -> DPLUSOP . unary_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 345
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    unary_expression               shift and go to state 344
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 178

    (76) unary_expression -> DMINUSOP . unary_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 345
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    unary_expression               shift and go to state 346
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 179

    (77) unary_expression -> unary_operator . cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 347
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 180

    (57) pm_expression -> cast_expression .

    DOTSTAR         reduce using rule 57 (pm_expression -> cast_expression .)
    ARROWSTAR       reduce using rule 57 (pm_expression -> cast_expression .)
    MULTOP          reduce using rule 57 (pm_expression -> cast_expression .)
    DIVOP           reduce using rule 57 (pm_expression -> cast_expression .)
    MODOP           reduce using rule 57 (pm_expression -> cast_expression .)
    PLUSOP          reduce using rule 57 (pm_expression -> cast_expression .)
    MINUSOP         reduce using rule 57 (pm_expression -> cast_expression .)
    LSHIFT          reduce using rule 57 (pm_expression -> cast_expression .)
    RSHIFT          reduce using rule 57 (pm_expression -> cast_expression .)
    LTCOMP          reduce using rule 57 (pm_expression -> cast_expression .)
    GTCOMP          reduce using rule 57 (pm_expression -> cast_expression .)
    LTECOMP         reduce using rule 57 (pm_expression -> cast_expression .)
    GTECOMP         reduce using rule 57 (pm_expression -> cast_expression .)
    EQCOMP          reduce using rule 57 (pm_expression -> cast_expression .)
    NEQCOMP         reduce using rule 57 (pm_expression -> cast_expression .)
    BANDOP          reduce using rule 57 (pm_expression -> cast_expression .)
    XOROP           reduce using rule 57 (pm_expression -> cast_expression .)
    OROP            reduce using rule 57 (pm_expression -> cast_expression .)
    ANDOP           reduce using rule 57 (pm_expression -> cast_expression .)
    QUESMARK        reduce using rule 57 (pm_expression -> cast_expression .)
    RPAREN          reduce using rule 57 (pm_expression -> cast_expression .)
    COMMA           reduce using rule 57 (pm_expression -> cast_expression .)
    RSPAREN         reduce using rule 57 (pm_expression -> cast_expression .)
    SEMICOLON       reduce using rule 57 (pm_expression -> cast_expression .)
    RCPAREN         reduce using rule 57 (pm_expression -> cast_expression .)
    COLON           reduce using rule 57 (pm_expression -> cast_expression .)


state 181

    (78) unary_expression -> SIZEOF . unary_expression
    (79) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 349
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    unary_expression               shift and go to state 348
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 182

    (80) unary_expression -> allocation_expression .

    EQUAL           reduce using rule 80 (unary_expression -> allocation_expression .)
    MULTEQOP        reduce using rule 80 (unary_expression -> allocation_expression .)
    DIVEQOP         reduce using rule 80 (unary_expression -> allocation_expression .)
    MODEQOP         reduce using rule 80 (unary_expression -> allocation_expression .)
    PLUSEQOP        reduce using rule 80 (unary_expression -> allocation_expression .)
    MINUSEQOP       reduce using rule 80 (unary_expression -> allocation_expression .)
    LSHIFTEQOP      reduce using rule 80 (unary_expression -> allocation_expression .)
    RSHIFTEQOP      reduce using rule 80 (unary_expression -> allocation_expression .)
    BANDEQOP        reduce using rule 80 (unary_expression -> allocation_expression .)
    BOREQOP         reduce using rule 80 (unary_expression -> allocation_expression .)
    DOTSTAR         reduce using rule 80 (unary_expression -> allocation_expression .)
    ARROWSTAR       reduce using rule 80 (unary_expression -> allocation_expression .)
    MULTOP          reduce using rule 80 (unary_expression -> allocation_expression .)
    DIVOP           reduce using rule 80 (unary_expression -> allocation_expression .)
    MODOP           reduce using rule 80 (unary_expression -> allocation_expression .)
    PLUSOP          reduce using rule 80 (unary_expression -> allocation_expression .)
    MINUSOP         reduce using rule 80 (unary_expression -> allocation_expression .)
    LSHIFT          reduce using rule 80 (unary_expression -> allocation_expression .)
    RSHIFT          reduce using rule 80 (unary_expression -> allocation_expression .)
    LTCOMP          reduce using rule 80 (unary_expression -> allocation_expression .)
    GTCOMP          reduce using rule 80 (unary_expression -> allocation_expression .)
    LTECOMP         reduce using rule 80 (unary_expression -> allocation_expression .)
    GTECOMP         reduce using rule 80 (unary_expression -> allocation_expression .)
    EQCOMP          reduce using rule 80 (unary_expression -> allocation_expression .)
    NEQCOMP         reduce using rule 80 (unary_expression -> allocation_expression .)
    BANDOP          reduce using rule 80 (unary_expression -> allocation_expression .)
    XOROP           reduce using rule 80 (unary_expression -> allocation_expression .)
    OROP            reduce using rule 80 (unary_expression -> allocation_expression .)
    ANDOP           reduce using rule 80 (unary_expression -> allocation_expression .)
    QUESMARK        reduce using rule 80 (unary_expression -> allocation_expression .)
    RPAREN          reduce using rule 80 (unary_expression -> allocation_expression .)
    COMMA           reduce using rule 80 (unary_expression -> allocation_expression .)
    RSPAREN         reduce using rule 80 (unary_expression -> allocation_expression .)
    SEMICOLON       reduce using rule 80 (unary_expression -> allocation_expression .)
    RCPAREN         reduce using rule 80 (unary_expression -> allocation_expression .)
    COLON           reduce using rule 80 (unary_expression -> allocation_expression .)


state 183

    (81) unary_expression -> deallocation_expression .

    EQUAL           reduce using rule 81 (unary_expression -> deallocation_expression .)
    MULTEQOP        reduce using rule 81 (unary_expression -> deallocation_expression .)
    DIVEQOP         reduce using rule 81 (unary_expression -> deallocation_expression .)
    MODEQOP         reduce using rule 81 (unary_expression -> deallocation_expression .)
    PLUSEQOP        reduce using rule 81 (unary_expression -> deallocation_expression .)
    MINUSEQOP       reduce using rule 81 (unary_expression -> deallocation_expression .)
    LSHIFTEQOP      reduce using rule 81 (unary_expression -> deallocation_expression .)
    RSHIFTEQOP      reduce using rule 81 (unary_expression -> deallocation_expression .)
    BANDEQOP        reduce using rule 81 (unary_expression -> deallocation_expression .)
    BOREQOP         reduce using rule 81 (unary_expression -> deallocation_expression .)
    DOTSTAR         reduce using rule 81 (unary_expression -> deallocation_expression .)
    ARROWSTAR       reduce using rule 81 (unary_expression -> deallocation_expression .)
    MULTOP          reduce using rule 81 (unary_expression -> deallocation_expression .)
    DIVOP           reduce using rule 81 (unary_expression -> deallocation_expression .)
    MODOP           reduce using rule 81 (unary_expression -> deallocation_expression .)
    PLUSOP          reduce using rule 81 (unary_expression -> deallocation_expression .)
    MINUSOP         reduce using rule 81 (unary_expression -> deallocation_expression .)
    LSHIFT          reduce using rule 81 (unary_expression -> deallocation_expression .)
    RSHIFT          reduce using rule 81 (unary_expression -> deallocation_expression .)
    LTCOMP          reduce using rule 81 (unary_expression -> deallocation_expression .)
    GTCOMP          reduce using rule 81 (unary_expression -> deallocation_expression .)
    LTECOMP         reduce using rule 81 (unary_expression -> deallocation_expression .)
    GTECOMP         reduce using rule 81 (unary_expression -> deallocation_expression .)
    EQCOMP          reduce using rule 81 (unary_expression -> deallocation_expression .)
    NEQCOMP         reduce using rule 81 (unary_expression -> deallocation_expression .)
    BANDOP          reduce using rule 81 (unary_expression -> deallocation_expression .)
    XOROP           reduce using rule 81 (unary_expression -> deallocation_expression .)
    OROP            reduce using rule 81 (unary_expression -> deallocation_expression .)
    ANDOP           reduce using rule 81 (unary_expression -> deallocation_expression .)
    QUESMARK        reduce using rule 81 (unary_expression -> deallocation_expression .)
    RPAREN          reduce using rule 81 (unary_expression -> deallocation_expression .)
    COMMA           reduce using rule 81 (unary_expression -> deallocation_expression .)
    RSPAREN         reduce using rule 81 (unary_expression -> deallocation_expression .)
    SEMICOLON       reduce using rule 81 (unary_expression -> deallocation_expression .)
    RCPAREN         reduce using rule 81 (unary_expression -> deallocation_expression .)
    COLON           reduce using rule 81 (unary_expression -> deallocation_expression .)


state 184

    (29) logical_OR_expression -> logical_AND_expression .
    (32) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 29 (logical_OR_expression -> logical_AND_expression .)
    OROP            reduce using rule 29 (logical_OR_expression -> logical_AND_expression .)
    RPAREN          reduce using rule 29 (logical_OR_expression -> logical_AND_expression .)
    COMMA           reduce using rule 29 (logical_OR_expression -> logical_AND_expression .)
    RSPAREN         reduce using rule 29 (logical_OR_expression -> logical_AND_expression .)
    SEMICOLON       reduce using rule 29 (logical_OR_expression -> logical_AND_expression .)
    RCPAREN         reduce using rule 29 (logical_OR_expression -> logical_AND_expression .)
    COLON           reduce using rule 29 (logical_OR_expression -> logical_AND_expression .)
    GTCOMP          reduce using rule 29 (logical_OR_expression -> logical_AND_expression .)
    ANDOP           shift and go to state 350


state 185

    (123) postfix_expression -> primary_expression .

    LSPAREN         reduce using rule 123 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 123 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 123 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 123 (postfix_expression -> primary_expression .)
    DPLUSOP         reduce using rule 123 (postfix_expression -> primary_expression .)
    DMINUSOP        reduce using rule 123 (postfix_expression -> primary_expression .)
    LTCOMP          reduce using rule 123 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 123 (postfix_expression -> primary_expression .)
    MULTEQOP        reduce using rule 123 (postfix_expression -> primary_expression .)
    DIVEQOP         reduce using rule 123 (postfix_expression -> primary_expression .)
    MODEQOP         reduce using rule 123 (postfix_expression -> primary_expression .)
    PLUSEQOP        reduce using rule 123 (postfix_expression -> primary_expression .)
    MINUSEQOP       reduce using rule 123 (postfix_expression -> primary_expression .)
    LSHIFTEQOP      reduce using rule 123 (postfix_expression -> primary_expression .)
    RSHIFTEQOP      reduce using rule 123 (postfix_expression -> primary_expression .)
    BANDEQOP        reduce using rule 123 (postfix_expression -> primary_expression .)
    BOREQOP         reduce using rule 123 (postfix_expression -> primary_expression .)
    DOTSTAR         reduce using rule 123 (postfix_expression -> primary_expression .)
    ARROWSTAR       reduce using rule 123 (postfix_expression -> primary_expression .)
    MULTOP          reduce using rule 123 (postfix_expression -> primary_expression .)
    DIVOP           reduce using rule 123 (postfix_expression -> primary_expression .)
    MODOP           reduce using rule 123 (postfix_expression -> primary_expression .)
    PLUSOP          reduce using rule 123 (postfix_expression -> primary_expression .)
    MINUSOP         reduce using rule 123 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 123 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 123 (postfix_expression -> primary_expression .)
    GTCOMP          reduce using rule 123 (postfix_expression -> primary_expression .)
    LTECOMP         reduce using rule 123 (postfix_expression -> primary_expression .)
    GTECOMP         reduce using rule 123 (postfix_expression -> primary_expression .)
    EQCOMP          reduce using rule 123 (postfix_expression -> primary_expression .)
    NEQCOMP         reduce using rule 123 (postfix_expression -> primary_expression .)
    BANDOP          reduce using rule 123 (postfix_expression -> primary_expression .)
    XOROP           reduce using rule 123 (postfix_expression -> primary_expression .)
    OROP            reduce using rule 123 (postfix_expression -> primary_expression .)
    ANDOP           reduce using rule 123 (postfix_expression -> primary_expression .)
    QUESMARK        reduce using rule 123 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 123 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 123 (postfix_expression -> primary_expression .)
    RSPAREN         reduce using rule 123 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 123 (postfix_expression -> primary_expression .)
    RCPAREN         reduce using rule 123 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 123 (postfix_expression -> primary_expression .)


state 186

    (128) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (129) postfix_expression -> simple_type_name . LPAREN RPAREN
    (180) type_specifier -> simple_type_name .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 351
    EQUAL           reduce using rule 180 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 180 (type_specifier -> simple_type_name .)
    TYPEDEF         reduce using rule 180 (type_specifier -> simple_type_name .)
    BNOP            reduce using rule 180 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 180 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 180 (type_specifier -> simple_type_name .)
    AUTO            reduce using rule 180 (type_specifier -> simple_type_name .)
    STATIC          reduce using rule 180 (type_specifier -> simple_type_name .)
    EXTERN          reduce using rule 180 (type_specifier -> simple_type_name .)
    CONST           reduce using rule 180 (type_specifier -> simple_type_name .)
    VOLATILE        reduce using rule 180 (type_specifier -> simple_type_name .)
    INLINE          reduce using rule 180 (type_specifier -> simple_type_name .)
    VIRTUAL         reduce using rule 180 (type_specifier -> simple_type_name .)
    IDENTIFIER      reduce using rule 180 (type_specifier -> simple_type_name .)
    DOUBLECOLON     reduce using rule 180 (type_specifier -> simple_type_name .)
    CHAR            reduce using rule 180 (type_specifier -> simple_type_name .)
    SHORT           reduce using rule 180 (type_specifier -> simple_type_name .)
    INT             reduce using rule 180 (type_specifier -> simple_type_name .)
    LONG            reduce using rule 180 (type_specifier -> simple_type_name .)
    SIGNED          reduce using rule 180 (type_specifier -> simple_type_name .)
    UNSIGNED        reduce using rule 180 (type_specifier -> simple_type_name .)
    FLOAT           reduce using rule 180 (type_specifier -> simple_type_name .)
    DOUBLE          reduce using rule 180 (type_specifier -> simple_type_name .)
    VOID            reduce using rule 180 (type_specifier -> simple_type_name .)
    ENUM            reduce using rule 180 (type_specifier -> simple_type_name .)
    OPERATOR        reduce using rule 180 (type_specifier -> simple_type_name .)
    CLASS           reduce using rule 180 (type_specifier -> simple_type_name .)
    STRUCT          reduce using rule 180 (type_specifier -> simple_type_name .)
    UNION           reduce using rule 180 (type_specifier -> simple_type_name .)
    TEMPLATE        reduce using rule 180 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 180 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 180 (type_specifier -> simple_type_name .)
    SEMICOLON       reduce using rule 180 (type_specifier -> simple_type_name .)

  ! LPAREN          [ reduce using rule 180 (type_specifier -> simple_type_name .) ]


state 187

    (140) primary_expression -> name .

    LSPAREN         reduce using rule 140 (primary_expression -> name .)
    LPAREN          reduce using rule 140 (primary_expression -> name .)
    DOT             reduce using rule 140 (primary_expression -> name .)
    ARROW           reduce using rule 140 (primary_expression -> name .)
    DPLUSOP         reduce using rule 140 (primary_expression -> name .)
    DMINUSOP        reduce using rule 140 (primary_expression -> name .)
    LTCOMP          reduce using rule 140 (primary_expression -> name .)
    EQUAL           reduce using rule 140 (primary_expression -> name .)
    MULTEQOP        reduce using rule 140 (primary_expression -> name .)
    DIVEQOP         reduce using rule 140 (primary_expression -> name .)
    MODEQOP         reduce using rule 140 (primary_expression -> name .)
    PLUSEQOP        reduce using rule 140 (primary_expression -> name .)
    MINUSEQOP       reduce using rule 140 (primary_expression -> name .)
    LSHIFTEQOP      reduce using rule 140 (primary_expression -> name .)
    RSHIFTEQOP      reduce using rule 140 (primary_expression -> name .)
    BANDEQOP        reduce using rule 140 (primary_expression -> name .)
    BOREQOP         reduce using rule 140 (primary_expression -> name .)
    DOTSTAR         reduce using rule 140 (primary_expression -> name .)
    ARROWSTAR       reduce using rule 140 (primary_expression -> name .)
    MULTOP          reduce using rule 140 (primary_expression -> name .)
    DIVOP           reduce using rule 140 (primary_expression -> name .)
    MODOP           reduce using rule 140 (primary_expression -> name .)
    PLUSOP          reduce using rule 140 (primary_expression -> name .)
    MINUSOP         reduce using rule 140 (primary_expression -> name .)
    LSHIFT          reduce using rule 140 (primary_expression -> name .)
    RSHIFT          reduce using rule 140 (primary_expression -> name .)
    GTCOMP          reduce using rule 140 (primary_expression -> name .)
    LTECOMP         reduce using rule 140 (primary_expression -> name .)
    GTECOMP         reduce using rule 140 (primary_expression -> name .)
    EQCOMP          reduce using rule 140 (primary_expression -> name .)
    NEQCOMP         reduce using rule 140 (primary_expression -> name .)
    BANDOP          reduce using rule 140 (primary_expression -> name .)
    XOROP           reduce using rule 140 (primary_expression -> name .)
    OROP            reduce using rule 140 (primary_expression -> name .)
    ANDOP           reduce using rule 140 (primary_expression -> name .)
    QUESMARK        reduce using rule 140 (primary_expression -> name .)
    RPAREN          reduce using rule 140 (primary_expression -> name .)
    COMMA           reduce using rule 140 (primary_expression -> name .)
    RSPAREN         reduce using rule 140 (primary_expression -> name .)
    SEMICOLON       reduce using rule 140 (primary_expression -> name .)
    RCPAREN         reduce using rule 140 (primary_expression -> name .)
    COLON           reduce using rule 140 (primary_expression -> name .)


state 188

    (117) unary_operator -> MULTOP .

    LPAREN          reduce using rule 117 (unary_operator -> MULTOP .)
    DPLUSOP         reduce using rule 117 (unary_operator -> MULTOP .)
    DMINUSOP        reduce using rule 117 (unary_operator -> MULTOP .)
    SIZEOF          reduce using rule 117 (unary_operator -> MULTOP .)
    MULTOP          reduce using rule 117 (unary_operator -> MULTOP .)
    BANDOP          reduce using rule 117 (unary_operator -> MULTOP .)
    PLUSOP          reduce using rule 117 (unary_operator -> MULTOP .)
    MINUSOP         reduce using rule 117 (unary_operator -> MULTOP .)
    NOTSYM          reduce using rule 117 (unary_operator -> MULTOP .)
    BNOP            reduce using rule 117 (unary_operator -> MULTOP .)
    DOUBLECOLON     reduce using rule 117 (unary_operator -> MULTOP .)
    NEW             reduce using rule 117 (unary_operator -> MULTOP .)
    DELETE          reduce using rule 117 (unary_operator -> MULTOP .)
    THIS            reduce using rule 117 (unary_operator -> MULTOP .)
    CHAR            reduce using rule 117 (unary_operator -> MULTOP .)
    SHORT           reduce using rule 117 (unary_operator -> MULTOP .)
    INT             reduce using rule 117 (unary_operator -> MULTOP .)
    LONG            reduce using rule 117 (unary_operator -> MULTOP .)
    SIGNED          reduce using rule 117 (unary_operator -> MULTOP .)
    UNSIGNED        reduce using rule 117 (unary_operator -> MULTOP .)
    FLOAT           reduce using rule 117 (unary_operator -> MULTOP .)
    DOUBLE          reduce using rule 117 (unary_operator -> MULTOP .)
    VOID            reduce using rule 117 (unary_operator -> MULTOP .)
    NUMBER          reduce using rule 117 (unary_operator -> MULTOP .)
    STRING          reduce using rule 117 (unary_operator -> MULTOP .)
    SCHAR           reduce using rule 117 (unary_operator -> MULTOP .)
    IDENTIFIER      reduce using rule 117 (unary_operator -> MULTOP .)
    OPERATOR        reduce using rule 117 (unary_operator -> MULTOP .)


state 189

    (118) unary_operator -> BANDOP .

    LPAREN          reduce using rule 118 (unary_operator -> BANDOP .)
    DPLUSOP         reduce using rule 118 (unary_operator -> BANDOP .)
    DMINUSOP        reduce using rule 118 (unary_operator -> BANDOP .)
    SIZEOF          reduce using rule 118 (unary_operator -> BANDOP .)
    MULTOP          reduce using rule 118 (unary_operator -> BANDOP .)
    BANDOP          reduce using rule 118 (unary_operator -> BANDOP .)
    PLUSOP          reduce using rule 118 (unary_operator -> BANDOP .)
    MINUSOP         reduce using rule 118 (unary_operator -> BANDOP .)
    NOTSYM          reduce using rule 118 (unary_operator -> BANDOP .)
    BNOP            reduce using rule 118 (unary_operator -> BANDOP .)
    DOUBLECOLON     reduce using rule 118 (unary_operator -> BANDOP .)
    NEW             reduce using rule 118 (unary_operator -> BANDOP .)
    DELETE          reduce using rule 118 (unary_operator -> BANDOP .)
    THIS            reduce using rule 118 (unary_operator -> BANDOP .)
    CHAR            reduce using rule 118 (unary_operator -> BANDOP .)
    SHORT           reduce using rule 118 (unary_operator -> BANDOP .)
    INT             reduce using rule 118 (unary_operator -> BANDOP .)
    LONG            reduce using rule 118 (unary_operator -> BANDOP .)
    SIGNED          reduce using rule 118 (unary_operator -> BANDOP .)
    UNSIGNED        reduce using rule 118 (unary_operator -> BANDOP .)
    FLOAT           reduce using rule 118 (unary_operator -> BANDOP .)
    DOUBLE          reduce using rule 118 (unary_operator -> BANDOP .)
    VOID            reduce using rule 118 (unary_operator -> BANDOP .)
    NUMBER          reduce using rule 118 (unary_operator -> BANDOP .)
    STRING          reduce using rule 118 (unary_operator -> BANDOP .)
    SCHAR           reduce using rule 118 (unary_operator -> BANDOP .)
    IDENTIFIER      reduce using rule 118 (unary_operator -> BANDOP .)
    OPERATOR        reduce using rule 118 (unary_operator -> BANDOP .)


state 190

    (119) unary_operator -> PLUSOP .

    LPAREN          reduce using rule 119 (unary_operator -> PLUSOP .)
    DPLUSOP         reduce using rule 119 (unary_operator -> PLUSOP .)
    DMINUSOP        reduce using rule 119 (unary_operator -> PLUSOP .)
    SIZEOF          reduce using rule 119 (unary_operator -> PLUSOP .)
    MULTOP          reduce using rule 119 (unary_operator -> PLUSOP .)
    BANDOP          reduce using rule 119 (unary_operator -> PLUSOP .)
    PLUSOP          reduce using rule 119 (unary_operator -> PLUSOP .)
    MINUSOP         reduce using rule 119 (unary_operator -> PLUSOP .)
    NOTSYM          reduce using rule 119 (unary_operator -> PLUSOP .)
    BNOP            reduce using rule 119 (unary_operator -> PLUSOP .)
    DOUBLECOLON     reduce using rule 119 (unary_operator -> PLUSOP .)
    NEW             reduce using rule 119 (unary_operator -> PLUSOP .)
    DELETE          reduce using rule 119 (unary_operator -> PLUSOP .)
    THIS            reduce using rule 119 (unary_operator -> PLUSOP .)
    CHAR            reduce using rule 119 (unary_operator -> PLUSOP .)
    SHORT           reduce using rule 119 (unary_operator -> PLUSOP .)
    INT             reduce using rule 119 (unary_operator -> PLUSOP .)
    LONG            reduce using rule 119 (unary_operator -> PLUSOP .)
    SIGNED          reduce using rule 119 (unary_operator -> PLUSOP .)
    UNSIGNED        reduce using rule 119 (unary_operator -> PLUSOP .)
    FLOAT           reduce using rule 119 (unary_operator -> PLUSOP .)
    DOUBLE          reduce using rule 119 (unary_operator -> PLUSOP .)
    VOID            reduce using rule 119 (unary_operator -> PLUSOP .)
    NUMBER          reduce using rule 119 (unary_operator -> PLUSOP .)
    STRING          reduce using rule 119 (unary_operator -> PLUSOP .)
    SCHAR           reduce using rule 119 (unary_operator -> PLUSOP .)
    IDENTIFIER      reduce using rule 119 (unary_operator -> PLUSOP .)
    OPERATOR        reduce using rule 119 (unary_operator -> PLUSOP .)


state 191

    (120) unary_operator -> MINUSOP .

    LPAREN          reduce using rule 120 (unary_operator -> MINUSOP .)
    DPLUSOP         reduce using rule 120 (unary_operator -> MINUSOP .)
    DMINUSOP        reduce using rule 120 (unary_operator -> MINUSOP .)
    SIZEOF          reduce using rule 120 (unary_operator -> MINUSOP .)
    MULTOP          reduce using rule 120 (unary_operator -> MINUSOP .)
    BANDOP          reduce using rule 120 (unary_operator -> MINUSOP .)
    PLUSOP          reduce using rule 120 (unary_operator -> MINUSOP .)
    MINUSOP         reduce using rule 120 (unary_operator -> MINUSOP .)
    NOTSYM          reduce using rule 120 (unary_operator -> MINUSOP .)
    BNOP            reduce using rule 120 (unary_operator -> MINUSOP .)
    DOUBLECOLON     reduce using rule 120 (unary_operator -> MINUSOP .)
    NEW             reduce using rule 120 (unary_operator -> MINUSOP .)
    DELETE          reduce using rule 120 (unary_operator -> MINUSOP .)
    THIS            reduce using rule 120 (unary_operator -> MINUSOP .)
    CHAR            reduce using rule 120 (unary_operator -> MINUSOP .)
    SHORT           reduce using rule 120 (unary_operator -> MINUSOP .)
    INT             reduce using rule 120 (unary_operator -> MINUSOP .)
    LONG            reduce using rule 120 (unary_operator -> MINUSOP .)
    SIGNED          reduce using rule 120 (unary_operator -> MINUSOP .)
    UNSIGNED        reduce using rule 120 (unary_operator -> MINUSOP .)
    FLOAT           reduce using rule 120 (unary_operator -> MINUSOP .)
    DOUBLE          reduce using rule 120 (unary_operator -> MINUSOP .)
    VOID            reduce using rule 120 (unary_operator -> MINUSOP .)
    NUMBER          reduce using rule 120 (unary_operator -> MINUSOP .)
    STRING          reduce using rule 120 (unary_operator -> MINUSOP .)
    SCHAR           reduce using rule 120 (unary_operator -> MINUSOP .)
    IDENTIFIER      reduce using rule 120 (unary_operator -> MINUSOP .)
    OPERATOR        reduce using rule 120 (unary_operator -> MINUSOP .)


state 192

    (121) unary_operator -> NOTSYM .

    LPAREN          reduce using rule 121 (unary_operator -> NOTSYM .)
    DPLUSOP         reduce using rule 121 (unary_operator -> NOTSYM .)
    DMINUSOP        reduce using rule 121 (unary_operator -> NOTSYM .)
    SIZEOF          reduce using rule 121 (unary_operator -> NOTSYM .)
    MULTOP          reduce using rule 121 (unary_operator -> NOTSYM .)
    BANDOP          reduce using rule 121 (unary_operator -> NOTSYM .)
    PLUSOP          reduce using rule 121 (unary_operator -> NOTSYM .)
    MINUSOP         reduce using rule 121 (unary_operator -> NOTSYM .)
    NOTSYM          reduce using rule 121 (unary_operator -> NOTSYM .)
    BNOP            reduce using rule 121 (unary_operator -> NOTSYM .)
    DOUBLECOLON     reduce using rule 121 (unary_operator -> NOTSYM .)
    NEW             reduce using rule 121 (unary_operator -> NOTSYM .)
    DELETE          reduce using rule 121 (unary_operator -> NOTSYM .)
    THIS            reduce using rule 121 (unary_operator -> NOTSYM .)
    CHAR            reduce using rule 121 (unary_operator -> NOTSYM .)
    SHORT           reduce using rule 121 (unary_operator -> NOTSYM .)
    INT             reduce using rule 121 (unary_operator -> NOTSYM .)
    LONG            reduce using rule 121 (unary_operator -> NOTSYM .)
    SIGNED          reduce using rule 121 (unary_operator -> NOTSYM .)
    UNSIGNED        reduce using rule 121 (unary_operator -> NOTSYM .)
    FLOAT           reduce using rule 121 (unary_operator -> NOTSYM .)
    DOUBLE          reduce using rule 121 (unary_operator -> NOTSYM .)
    VOID            reduce using rule 121 (unary_operator -> NOTSYM .)
    NUMBER          reduce using rule 121 (unary_operator -> NOTSYM .)
    STRING          reduce using rule 121 (unary_operator -> NOTSYM .)
    SCHAR           reduce using rule 121 (unary_operator -> NOTSYM .)
    IDENTIFIER      reduce using rule 121 (unary_operator -> NOTSYM .)
    OPERATOR        reduce using rule 121 (unary_operator -> NOTSYM .)


state 193

    (122) unary_operator -> BNOP .
    (306) name -> BNOP . class_name
    (407) class_name -> . IDENTIFIER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LPAREN          reduce using rule 122 (unary_operator -> BNOP .)
    DPLUSOP         reduce using rule 122 (unary_operator -> BNOP .)
    DMINUSOP        reduce using rule 122 (unary_operator -> BNOP .)
    SIZEOF          reduce using rule 122 (unary_operator -> BNOP .)
    MULTOP          reduce using rule 122 (unary_operator -> BNOP .)
    BANDOP          reduce using rule 122 (unary_operator -> BNOP .)
    PLUSOP          reduce using rule 122 (unary_operator -> BNOP .)
    MINUSOP         reduce using rule 122 (unary_operator -> BNOP .)
    NOTSYM          reduce using rule 122 (unary_operator -> BNOP .)
    BNOP            reduce using rule 122 (unary_operator -> BNOP .)
    DOUBLECOLON     reduce using rule 122 (unary_operator -> BNOP .)
    NEW             reduce using rule 122 (unary_operator -> BNOP .)
    DELETE          reduce using rule 122 (unary_operator -> BNOP .)
    THIS            reduce using rule 122 (unary_operator -> BNOP .)
    CHAR            reduce using rule 122 (unary_operator -> BNOP .)
    SHORT           reduce using rule 122 (unary_operator -> BNOP .)
    INT             reduce using rule 122 (unary_operator -> BNOP .)
    LONG            reduce using rule 122 (unary_operator -> BNOP .)
    SIGNED          reduce using rule 122 (unary_operator -> BNOP .)
    UNSIGNED        reduce using rule 122 (unary_operator -> BNOP .)
    FLOAT           reduce using rule 122 (unary_operator -> BNOP .)
    DOUBLE          reduce using rule 122 (unary_operator -> BNOP .)
    VOID            reduce using rule 122 (unary_operator -> BNOP .)
    NUMBER          reduce using rule 122 (unary_operator -> BNOP .)
    STRING          reduce using rule 122 (unary_operator -> BNOP .)
    SCHAR           reduce using rule 122 (unary_operator -> BNOP .)
    OPERATOR        reduce using rule 122 (unary_operator -> BNOP .)
    IDENTIFIER      shift and go to state 91

  ! IDENTIFIER      [ reduce using rule 122 (unary_operator -> BNOP .) ]

    class_name                     shift and go to state 352

state 194

    (86) allocation_expression -> DOUBLECOLON . NEW placement new_type_name new_initializer
    (88) allocation_expression -> DOUBLECOLON . NEW new_type_name new_initializer
    (90) allocation_expression -> DOUBLECOLON . NEW placement new_type_name
    (92) allocation_expression -> DOUBLECOLON . NEW new_type_name
    (94) allocation_expression -> DOUBLECOLON . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> DOUBLECOLON . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> DOUBLECOLON . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> DOUBLECOLON . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> DOUBLECOLON . DELETE cast_expression
    (84) deallocation_expression -> DOUBLECOLON . DELETE LSPAREN RSPAREN cast_expression
    (136) primary_expression -> DOUBLECOLON . IDENTIFIER
    (137) primary_expression -> DOUBLECOLON . operator_function_name
    (138) primary_expression -> DOUBLECOLON . qualified_name
    (404) complete_class_name -> DOUBLECOLON . qualified_class_name
    (314) operator_function_name -> . OPERATOR operator_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    NEW             shift and go to state 353
    DELETE          shift and go to state 354
    IDENTIFIER      shift and go to state 355
    OPERATOR        shift and go to state 359

    operator_function_name         shift and go to state 356
    qualified_name                 shift and go to state 357
    qualified_class_name           shift and go to state 358
    class_name                     shift and go to state 99

state 195

    (87) allocation_expression -> NEW . placement new_type_name new_initializer
    (89) allocation_expression -> NEW . new_type_name new_initializer
    (91) allocation_expression -> NEW . placement new_type_name
    (93) allocation_expression -> NEW . new_type_name
    (95) allocation_expression -> NEW . placement LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> NEW . LPAREN type_name RPAREN new_initializer
    (99) allocation_expression -> NEW . placement LPAREN type_name RPAREN
    (101) allocation_expression -> NEW . LPAREN type_name RPAREN
    (114) placement -> . LPAREN expression_list RPAREN
    (102) new_type_name -> . type_specifier_list new_declarator
    (103) new_type_name -> . type_specifier_list
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 362
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    IDENTIFIER      shift and go to state 153

    placement                      shift and go to state 360
    new_type_name                  shift and go to state 361
    type_specifier_list            shift and go to state 363
    type_specifier                 shift and go to state 150
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 155
    typedef_name                   shift and go to state 156

state 196

    (83) deallocation_expression -> DELETE . cast_expression
    (85) deallocation_expression -> DELETE . LSPAREN RSPAREN cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LSPAREN         shift and go to state 365
    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    cast_expression                shift and go to state 364
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 197

    (31) logical_AND_expression -> inclusive_OR_expression .
    (34) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

  ! shift/reduce conflict for OROP resolved as shift
    ANDOP           reduce using rule 31 (logical_AND_expression -> inclusive_OR_expression .)
    QUESMARK        reduce using rule 31 (logical_AND_expression -> inclusive_OR_expression .)
    RPAREN          reduce using rule 31 (logical_AND_expression -> inclusive_OR_expression .)
    COMMA           reduce using rule 31 (logical_AND_expression -> inclusive_OR_expression .)
    RSPAREN         reduce using rule 31 (logical_AND_expression -> inclusive_OR_expression .)
    SEMICOLON       reduce using rule 31 (logical_AND_expression -> inclusive_OR_expression .)
    RCPAREN         reduce using rule 31 (logical_AND_expression -> inclusive_OR_expression .)
    COLON           reduce using rule 31 (logical_AND_expression -> inclusive_OR_expression .)
    GTCOMP          reduce using rule 31 (logical_AND_expression -> inclusive_OR_expression .)
    OROP            shift and go to state 366

  ! OROP            [ reduce using rule 31 (logical_AND_expression -> inclusive_OR_expression .) ]


state 198

    (134) primary_expression -> literal .

    LSPAREN         reduce using rule 134 (primary_expression -> literal .)
    LPAREN          reduce using rule 134 (primary_expression -> literal .)
    DOT             reduce using rule 134 (primary_expression -> literal .)
    ARROW           reduce using rule 134 (primary_expression -> literal .)
    DPLUSOP         reduce using rule 134 (primary_expression -> literal .)
    DMINUSOP        reduce using rule 134 (primary_expression -> literal .)
    LTCOMP          reduce using rule 134 (primary_expression -> literal .)
    EQUAL           reduce using rule 134 (primary_expression -> literal .)
    MULTEQOP        reduce using rule 134 (primary_expression -> literal .)
    DIVEQOP         reduce using rule 134 (primary_expression -> literal .)
    MODEQOP         reduce using rule 134 (primary_expression -> literal .)
    PLUSEQOP        reduce using rule 134 (primary_expression -> literal .)
    MINUSEQOP       reduce using rule 134 (primary_expression -> literal .)
    LSHIFTEQOP      reduce using rule 134 (primary_expression -> literal .)
    RSHIFTEQOP      reduce using rule 134 (primary_expression -> literal .)
    BANDEQOP        reduce using rule 134 (primary_expression -> literal .)
    BOREQOP         reduce using rule 134 (primary_expression -> literal .)
    DOTSTAR         reduce using rule 134 (primary_expression -> literal .)
    ARROWSTAR       reduce using rule 134 (primary_expression -> literal .)
    MULTOP          reduce using rule 134 (primary_expression -> literal .)
    DIVOP           reduce using rule 134 (primary_expression -> literal .)
    MODOP           reduce using rule 134 (primary_expression -> literal .)
    PLUSOP          reduce using rule 134 (primary_expression -> literal .)
    MINUSOP         reduce using rule 134 (primary_expression -> literal .)
    LSHIFT          reduce using rule 134 (primary_expression -> literal .)
    RSHIFT          reduce using rule 134 (primary_expression -> literal .)
    GTCOMP          reduce using rule 134 (primary_expression -> literal .)
    LTECOMP         reduce using rule 134 (primary_expression -> literal .)
    GTECOMP         reduce using rule 134 (primary_expression -> literal .)
    EQCOMP          reduce using rule 134 (primary_expression -> literal .)
    NEQCOMP         reduce using rule 134 (primary_expression -> literal .)
    BANDOP          reduce using rule 134 (primary_expression -> literal .)
    XOROP           reduce using rule 134 (primary_expression -> literal .)
    OROP            reduce using rule 134 (primary_expression -> literal .)
    ANDOP           reduce using rule 134 (primary_expression -> literal .)
    QUESMARK        reduce using rule 134 (primary_expression -> literal .)
    RPAREN          reduce using rule 134 (primary_expression -> literal .)
    COMMA           reduce using rule 134 (primary_expression -> literal .)
    RSPAREN         reduce using rule 134 (primary_expression -> literal .)
    SEMICOLON       reduce using rule 134 (primary_expression -> literal .)
    RCPAREN         reduce using rule 134 (primary_expression -> literal .)
    COLON           reduce using rule 134 (primary_expression -> literal .)


state 199

    (135) primary_expression -> THIS .

    LSPAREN         reduce using rule 135 (primary_expression -> THIS .)
    LPAREN          reduce using rule 135 (primary_expression -> THIS .)
    DOT             reduce using rule 135 (primary_expression -> THIS .)
    ARROW           reduce using rule 135 (primary_expression -> THIS .)
    DPLUSOP         reduce using rule 135 (primary_expression -> THIS .)
    DMINUSOP        reduce using rule 135 (primary_expression -> THIS .)
    LTCOMP          reduce using rule 135 (primary_expression -> THIS .)
    EQUAL           reduce using rule 135 (primary_expression -> THIS .)
    MULTEQOP        reduce using rule 135 (primary_expression -> THIS .)
    DIVEQOP         reduce using rule 135 (primary_expression -> THIS .)
    MODEQOP         reduce using rule 135 (primary_expression -> THIS .)
    PLUSEQOP        reduce using rule 135 (primary_expression -> THIS .)
    MINUSEQOP       reduce using rule 135 (primary_expression -> THIS .)
    LSHIFTEQOP      reduce using rule 135 (primary_expression -> THIS .)
    RSHIFTEQOP      reduce using rule 135 (primary_expression -> THIS .)
    BANDEQOP        reduce using rule 135 (primary_expression -> THIS .)
    BOREQOP         reduce using rule 135 (primary_expression -> THIS .)
    DOTSTAR         reduce using rule 135 (primary_expression -> THIS .)
    ARROWSTAR       reduce using rule 135 (primary_expression -> THIS .)
    MULTOP          reduce using rule 135 (primary_expression -> THIS .)
    DIVOP           reduce using rule 135 (primary_expression -> THIS .)
    MODOP           reduce using rule 135 (primary_expression -> THIS .)
    PLUSOP          reduce using rule 135 (primary_expression -> THIS .)
    MINUSOP         reduce using rule 135 (primary_expression -> THIS .)
    LSHIFT          reduce using rule 135 (primary_expression -> THIS .)
    RSHIFT          reduce using rule 135 (primary_expression -> THIS .)
    GTCOMP          reduce using rule 135 (primary_expression -> THIS .)
    LTECOMP         reduce using rule 135 (primary_expression -> THIS .)
    GTECOMP         reduce using rule 135 (primary_expression -> THIS .)
    EQCOMP          reduce using rule 135 (primary_expression -> THIS .)
    NEQCOMP         reduce using rule 135 (primary_expression -> THIS .)
    BANDOP          reduce using rule 135 (primary_expression -> THIS .)
    XOROP           reduce using rule 135 (primary_expression -> THIS .)
    OROP            reduce using rule 135 (primary_expression -> THIS .)
    ANDOP           reduce using rule 135 (primary_expression -> THIS .)
    QUESMARK        reduce using rule 135 (primary_expression -> THIS .)
    RPAREN          reduce using rule 135 (primary_expression -> THIS .)
    COMMA           reduce using rule 135 (primary_expression -> THIS .)
    RSPAREN         reduce using rule 135 (primary_expression -> THIS .)
    SEMICOLON       reduce using rule 135 (primary_expression -> THIS .)
    RCPAREN         reduce using rule 135 (primary_expression -> THIS .)
    COLON           reduce using rule 135 (primary_expression -> THIS .)


state 200

    (303) name -> IDENTIFIER .
    (392) typedef_name -> IDENTIFIER .
    (407) class_name -> IDENTIFIER .

  ! reduce/reduce conflict for LPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TEMPLATE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 303 (name -> IDENTIFIER .)
    LSPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    LPAREN          reduce using rule 303 (name -> IDENTIFIER .)
    DOT             reduce using rule 303 (name -> IDENTIFIER .)
    ARROW           reduce using rule 303 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 303 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 303 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 303 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 303 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 303 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 303 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 303 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 303 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 303 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 303 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 303 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 303 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 303 (name -> IDENTIFIER .)
    MODOP           reduce using rule 303 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 303 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 303 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 303 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 303 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 303 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 303 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 303 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 303 (name -> IDENTIFIER .)
    XOROP           reduce using rule 303 (name -> IDENTIFIER .)
    OROP            reduce using rule 303 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 303 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 303 (name -> IDENTIFIER .)
    RPAREN          reduce using rule 303 (name -> IDENTIFIER .)
    COMMA           reduce using rule 303 (name -> IDENTIFIER .)
    RSPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 303 (name -> IDENTIFIER .)
    RCPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    COLON           reduce using rule 303 (name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    BNOP            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    AUTO            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STATIC          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    EXTERN          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CONST           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INLINE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CHAR            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SHORT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INT             reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LONG            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SIGNED          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    FLOAT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOID            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    ENUM            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CLASS           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STRUCT          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNION           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    TEMPLATE        reduce using rule 392 (typedef_name -> IDENTIFIER .)

  ! LPAREN          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! GTCOMP          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TEMPLATE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! GTCOMP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]


state 201

    (33) inclusive_OR_expression -> exclusive_OR_expression .
    (36) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 33 (inclusive_OR_expression -> exclusive_OR_expression .)
    ANDOP           reduce using rule 33 (inclusive_OR_expression -> exclusive_OR_expression .)
    QUESMARK        reduce using rule 33 (inclusive_OR_expression -> exclusive_OR_expression .)
    RPAREN          reduce using rule 33 (inclusive_OR_expression -> exclusive_OR_expression .)
    COMMA           reduce using rule 33 (inclusive_OR_expression -> exclusive_OR_expression .)
    RSPAREN         reduce using rule 33 (inclusive_OR_expression -> exclusive_OR_expression .)
    SEMICOLON       reduce using rule 33 (inclusive_OR_expression -> exclusive_OR_expression .)
    RCPAREN         reduce using rule 33 (inclusive_OR_expression -> exclusive_OR_expression .)
    COLON           reduce using rule 33 (inclusive_OR_expression -> exclusive_OR_expression .)
    GTCOMP          reduce using rule 33 (inclusive_OR_expression -> exclusive_OR_expression .)
    XOROP           shift and go to state 367


state 202

    (141) literal -> NUMBER .

    LSPAREN         reduce using rule 141 (literal -> NUMBER .)
    LPAREN          reduce using rule 141 (literal -> NUMBER .)
    DOT             reduce using rule 141 (literal -> NUMBER .)
    ARROW           reduce using rule 141 (literal -> NUMBER .)
    DPLUSOP         reduce using rule 141 (literal -> NUMBER .)
    DMINUSOP        reduce using rule 141 (literal -> NUMBER .)
    LTCOMP          reduce using rule 141 (literal -> NUMBER .)
    EQUAL           reduce using rule 141 (literal -> NUMBER .)
    MULTEQOP        reduce using rule 141 (literal -> NUMBER .)
    DIVEQOP         reduce using rule 141 (literal -> NUMBER .)
    MODEQOP         reduce using rule 141 (literal -> NUMBER .)
    PLUSEQOP        reduce using rule 141 (literal -> NUMBER .)
    MINUSEQOP       reduce using rule 141 (literal -> NUMBER .)
    LSHIFTEQOP      reduce using rule 141 (literal -> NUMBER .)
    RSHIFTEQOP      reduce using rule 141 (literal -> NUMBER .)
    BANDEQOP        reduce using rule 141 (literal -> NUMBER .)
    BOREQOP         reduce using rule 141 (literal -> NUMBER .)
    DOTSTAR         reduce using rule 141 (literal -> NUMBER .)
    ARROWSTAR       reduce using rule 141 (literal -> NUMBER .)
    MULTOP          reduce using rule 141 (literal -> NUMBER .)
    DIVOP           reduce using rule 141 (literal -> NUMBER .)
    MODOP           reduce using rule 141 (literal -> NUMBER .)
    PLUSOP          reduce using rule 141 (literal -> NUMBER .)
    MINUSOP         reduce using rule 141 (literal -> NUMBER .)
    LSHIFT          reduce using rule 141 (literal -> NUMBER .)
    RSHIFT          reduce using rule 141 (literal -> NUMBER .)
    GTCOMP          reduce using rule 141 (literal -> NUMBER .)
    LTECOMP         reduce using rule 141 (literal -> NUMBER .)
    GTECOMP         reduce using rule 141 (literal -> NUMBER .)
    EQCOMP          reduce using rule 141 (literal -> NUMBER .)
    NEQCOMP         reduce using rule 141 (literal -> NUMBER .)
    BANDOP          reduce using rule 141 (literal -> NUMBER .)
    XOROP           reduce using rule 141 (literal -> NUMBER .)
    OROP            reduce using rule 141 (literal -> NUMBER .)
    ANDOP           reduce using rule 141 (literal -> NUMBER .)
    QUESMARK        reduce using rule 141 (literal -> NUMBER .)
    RPAREN          reduce using rule 141 (literal -> NUMBER .)
    COMMA           reduce using rule 141 (literal -> NUMBER .)
    RSPAREN         reduce using rule 141 (literal -> NUMBER .)
    SEMICOLON       reduce using rule 141 (literal -> NUMBER .)
    RCPAREN         reduce using rule 141 (literal -> NUMBER .)
    COLON           reduce using rule 141 (literal -> NUMBER .)


state 203

    (142) literal -> STRING .

    LSPAREN         reduce using rule 142 (literal -> STRING .)
    LPAREN          reduce using rule 142 (literal -> STRING .)
    DOT             reduce using rule 142 (literal -> STRING .)
    ARROW           reduce using rule 142 (literal -> STRING .)
    DPLUSOP         reduce using rule 142 (literal -> STRING .)
    DMINUSOP        reduce using rule 142 (literal -> STRING .)
    LTCOMP          reduce using rule 142 (literal -> STRING .)
    EQUAL           reduce using rule 142 (literal -> STRING .)
    MULTEQOP        reduce using rule 142 (literal -> STRING .)
    DIVEQOP         reduce using rule 142 (literal -> STRING .)
    MODEQOP         reduce using rule 142 (literal -> STRING .)
    PLUSEQOP        reduce using rule 142 (literal -> STRING .)
    MINUSEQOP       reduce using rule 142 (literal -> STRING .)
    LSHIFTEQOP      reduce using rule 142 (literal -> STRING .)
    RSHIFTEQOP      reduce using rule 142 (literal -> STRING .)
    BANDEQOP        reduce using rule 142 (literal -> STRING .)
    BOREQOP         reduce using rule 142 (literal -> STRING .)
    DOTSTAR         reduce using rule 142 (literal -> STRING .)
    ARROWSTAR       reduce using rule 142 (literal -> STRING .)
    MULTOP          reduce using rule 142 (literal -> STRING .)
    DIVOP           reduce using rule 142 (literal -> STRING .)
    MODOP           reduce using rule 142 (literal -> STRING .)
    PLUSOP          reduce using rule 142 (literal -> STRING .)
    MINUSOP         reduce using rule 142 (literal -> STRING .)
    LSHIFT          reduce using rule 142 (literal -> STRING .)
    RSHIFT          reduce using rule 142 (literal -> STRING .)
    GTCOMP          reduce using rule 142 (literal -> STRING .)
    LTECOMP         reduce using rule 142 (literal -> STRING .)
    GTECOMP         reduce using rule 142 (literal -> STRING .)
    EQCOMP          reduce using rule 142 (literal -> STRING .)
    NEQCOMP         reduce using rule 142 (literal -> STRING .)
    BANDOP          reduce using rule 142 (literal -> STRING .)
    XOROP           reduce using rule 142 (literal -> STRING .)
    OROP            reduce using rule 142 (literal -> STRING .)
    ANDOP           reduce using rule 142 (literal -> STRING .)
    QUESMARK        reduce using rule 142 (literal -> STRING .)
    RPAREN          reduce using rule 142 (literal -> STRING .)
    COMMA           reduce using rule 142 (literal -> STRING .)
    RSPAREN         reduce using rule 142 (literal -> STRING .)
    SEMICOLON       reduce using rule 142 (literal -> STRING .)
    RCPAREN         reduce using rule 142 (literal -> STRING .)
    COLON           reduce using rule 142 (literal -> STRING .)


state 204

    (143) literal -> SCHAR .

    LSPAREN         reduce using rule 143 (literal -> SCHAR .)
    LPAREN          reduce using rule 143 (literal -> SCHAR .)
    DOT             reduce using rule 143 (literal -> SCHAR .)
    ARROW           reduce using rule 143 (literal -> SCHAR .)
    DPLUSOP         reduce using rule 143 (literal -> SCHAR .)
    DMINUSOP        reduce using rule 143 (literal -> SCHAR .)
    LTCOMP          reduce using rule 143 (literal -> SCHAR .)
    EQUAL           reduce using rule 143 (literal -> SCHAR .)
    MULTEQOP        reduce using rule 143 (literal -> SCHAR .)
    DIVEQOP         reduce using rule 143 (literal -> SCHAR .)
    MODEQOP         reduce using rule 143 (literal -> SCHAR .)
    PLUSEQOP        reduce using rule 143 (literal -> SCHAR .)
    MINUSEQOP       reduce using rule 143 (literal -> SCHAR .)
    LSHIFTEQOP      reduce using rule 143 (literal -> SCHAR .)
    RSHIFTEQOP      reduce using rule 143 (literal -> SCHAR .)
    BANDEQOP        reduce using rule 143 (literal -> SCHAR .)
    BOREQOP         reduce using rule 143 (literal -> SCHAR .)
    DOTSTAR         reduce using rule 143 (literal -> SCHAR .)
    ARROWSTAR       reduce using rule 143 (literal -> SCHAR .)
    MULTOP          reduce using rule 143 (literal -> SCHAR .)
    DIVOP           reduce using rule 143 (literal -> SCHAR .)
    MODOP           reduce using rule 143 (literal -> SCHAR .)
    PLUSOP          reduce using rule 143 (literal -> SCHAR .)
    MINUSOP         reduce using rule 143 (literal -> SCHAR .)
    LSHIFT          reduce using rule 143 (literal -> SCHAR .)
    RSHIFT          reduce using rule 143 (literal -> SCHAR .)
    GTCOMP          reduce using rule 143 (literal -> SCHAR .)
    LTECOMP         reduce using rule 143 (literal -> SCHAR .)
    GTECOMP         reduce using rule 143 (literal -> SCHAR .)
    EQCOMP          reduce using rule 143 (literal -> SCHAR .)
    NEQCOMP         reduce using rule 143 (literal -> SCHAR .)
    BANDOP          reduce using rule 143 (literal -> SCHAR .)
    XOROP           reduce using rule 143 (literal -> SCHAR .)
    OROP            reduce using rule 143 (literal -> SCHAR .)
    ANDOP           reduce using rule 143 (literal -> SCHAR .)
    QUESMARK        reduce using rule 143 (literal -> SCHAR .)
    RPAREN          reduce using rule 143 (literal -> SCHAR .)
    COMMA           reduce using rule 143 (literal -> SCHAR .)
    RSPAREN         reduce using rule 143 (literal -> SCHAR .)
    SEMICOLON       reduce using rule 143 (literal -> SCHAR .)
    RCPAREN         reduce using rule 143 (literal -> SCHAR .)
    COLON           reduce using rule 143 (literal -> SCHAR .)


state 205

    (35) exclusive_OR_expression -> AND_expression .
    (38) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 35 (exclusive_OR_expression -> AND_expression .)
    OROP            reduce using rule 35 (exclusive_OR_expression -> AND_expression .)
    ANDOP           reduce using rule 35 (exclusive_OR_expression -> AND_expression .)
    QUESMARK        reduce using rule 35 (exclusive_OR_expression -> AND_expression .)
    RPAREN          reduce using rule 35 (exclusive_OR_expression -> AND_expression .)
    COMMA           reduce using rule 35 (exclusive_OR_expression -> AND_expression .)
    RSPAREN         reduce using rule 35 (exclusive_OR_expression -> AND_expression .)
    SEMICOLON       reduce using rule 35 (exclusive_OR_expression -> AND_expression .)
    RCPAREN         reduce using rule 35 (exclusive_OR_expression -> AND_expression .)
    COLON           reduce using rule 35 (exclusive_OR_expression -> AND_expression .)
    GTCOMP          reduce using rule 35 (exclusive_OR_expression -> AND_expression .)
    BANDOP          shift and go to state 368


state 206

    (37) AND_expression -> equality_expression .
    (40) equality_expression -> equality_expression . EQCOMP relational_expression
    (41) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 37 (AND_expression -> equality_expression .)
    XOROP           reduce using rule 37 (AND_expression -> equality_expression .)
    OROP            reduce using rule 37 (AND_expression -> equality_expression .)
    ANDOP           reduce using rule 37 (AND_expression -> equality_expression .)
    QUESMARK        reduce using rule 37 (AND_expression -> equality_expression .)
    RPAREN          reduce using rule 37 (AND_expression -> equality_expression .)
    COMMA           reduce using rule 37 (AND_expression -> equality_expression .)
    RSPAREN         reduce using rule 37 (AND_expression -> equality_expression .)
    SEMICOLON       reduce using rule 37 (AND_expression -> equality_expression .)
    RCPAREN         reduce using rule 37 (AND_expression -> equality_expression .)
    COLON           reduce using rule 37 (AND_expression -> equality_expression .)
    GTCOMP          reduce using rule 37 (AND_expression -> equality_expression .)
    EQCOMP          shift and go to state 369
    NEQCOMP         shift and go to state 370


state 207

    (39) equality_expression -> relational_expression .
    (43) relational_expression -> relational_expression . LTCOMP shift_expression
    (44) relational_expression -> relational_expression . GTCOMP shift_expression
    (45) relational_expression -> relational_expression . LTECOMP shift_expression
    (46) relational_expression -> relational_expression . GTECOMP shift_expression

  ! shift/reduce conflict for GTCOMP resolved as shift
    EQCOMP          reduce using rule 39 (equality_expression -> relational_expression .)
    NEQCOMP         reduce using rule 39 (equality_expression -> relational_expression .)
    BANDOP          reduce using rule 39 (equality_expression -> relational_expression .)
    XOROP           reduce using rule 39 (equality_expression -> relational_expression .)
    OROP            reduce using rule 39 (equality_expression -> relational_expression .)
    ANDOP           reduce using rule 39 (equality_expression -> relational_expression .)
    QUESMARK        reduce using rule 39 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 39 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 39 (equality_expression -> relational_expression .)
    RSPAREN         reduce using rule 39 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 39 (equality_expression -> relational_expression .)
    RCPAREN         reduce using rule 39 (equality_expression -> relational_expression .)
    COLON           reduce using rule 39 (equality_expression -> relational_expression .)
    LTCOMP          shift and go to state 371
    GTCOMP          shift and go to state 372
    LTECOMP         shift and go to state 373
    GTECOMP         shift and go to state 374

  ! GTCOMP          [ reduce using rule 39 (equality_expression -> relational_expression .) ]


state 208

    (42) relational_expression -> shift_expression .
    (48) shift_expression -> shift_expression . LSHIFT additive_expression
    (49) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 42 (relational_expression -> shift_expression .)
    GTCOMP          reduce using rule 42 (relational_expression -> shift_expression .)
    LTECOMP         reduce using rule 42 (relational_expression -> shift_expression .)
    GTECOMP         reduce using rule 42 (relational_expression -> shift_expression .)
    EQCOMP          reduce using rule 42 (relational_expression -> shift_expression .)
    NEQCOMP         reduce using rule 42 (relational_expression -> shift_expression .)
    BANDOP          reduce using rule 42 (relational_expression -> shift_expression .)
    XOROP           reduce using rule 42 (relational_expression -> shift_expression .)
    OROP            reduce using rule 42 (relational_expression -> shift_expression .)
    ANDOP           reduce using rule 42 (relational_expression -> shift_expression .)
    QUESMARK        reduce using rule 42 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 42 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 42 (relational_expression -> shift_expression .)
    RSPAREN         reduce using rule 42 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 42 (relational_expression -> shift_expression .)
    RCPAREN         reduce using rule 42 (relational_expression -> shift_expression .)
    COLON           reduce using rule 42 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 375
    RSHIFT          shift and go to state 376


state 209

    (47) shift_expression -> additive_expression .
    (51) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (52) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 47 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 47 (shift_expression -> additive_expression .)
    LTCOMP          reduce using rule 47 (shift_expression -> additive_expression .)
    GTCOMP          reduce using rule 47 (shift_expression -> additive_expression .)
    LTECOMP         reduce using rule 47 (shift_expression -> additive_expression .)
    GTECOMP         reduce using rule 47 (shift_expression -> additive_expression .)
    EQCOMP          reduce using rule 47 (shift_expression -> additive_expression .)
    NEQCOMP         reduce using rule 47 (shift_expression -> additive_expression .)
    BANDOP          reduce using rule 47 (shift_expression -> additive_expression .)
    XOROP           reduce using rule 47 (shift_expression -> additive_expression .)
    OROP            reduce using rule 47 (shift_expression -> additive_expression .)
    ANDOP           reduce using rule 47 (shift_expression -> additive_expression .)
    QUESMARK        reduce using rule 47 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 47 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 47 (shift_expression -> additive_expression .)
    RSPAREN         reduce using rule 47 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 47 (shift_expression -> additive_expression .)
    RCPAREN         reduce using rule 47 (shift_expression -> additive_expression .)
    COLON           reduce using rule 47 (shift_expression -> additive_expression .)
    PLUSOP          shift and go to state 377
    MINUSOP         shift and go to state 378


state 210

    (50) additive_expression -> multiplicative_expression .
    (54) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (55) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (56) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    MINUSOP         reduce using rule 50 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    LTCOMP          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    GTCOMP          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    LTECOMP         reduce using rule 50 (additive_expression -> multiplicative_expression .)
    GTECOMP         reduce using rule 50 (additive_expression -> multiplicative_expression .)
    EQCOMP          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    NEQCOMP         reduce using rule 50 (additive_expression -> multiplicative_expression .)
    BANDOP          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    XOROP           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    OROP            reduce using rule 50 (additive_expression -> multiplicative_expression .)
    ANDOP           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    QUESMARK        reduce using rule 50 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 50 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    RSPAREN         reduce using rule 50 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 50 (additive_expression -> multiplicative_expression .)
    RCPAREN         reduce using rule 50 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 50 (additive_expression -> multiplicative_expression .)
    MULTOP          shift and go to state 379
    DIVOP           shift and go to state 380
    MODOP           shift and go to state 381


state 211

    (53) multiplicative_expression -> pm_expression .
    (58) pm_expression -> pm_expression . DOTSTAR cast_expression
    (59) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 53 (multiplicative_expression -> pm_expression .)
    DIVOP           reduce using rule 53 (multiplicative_expression -> pm_expression .)
    MODOP           reduce using rule 53 (multiplicative_expression -> pm_expression .)
    PLUSOP          reduce using rule 53 (multiplicative_expression -> pm_expression .)
    MINUSOP         reduce using rule 53 (multiplicative_expression -> pm_expression .)
    LSHIFT          reduce using rule 53 (multiplicative_expression -> pm_expression .)
    RSHIFT          reduce using rule 53 (multiplicative_expression -> pm_expression .)
    LTCOMP          reduce using rule 53 (multiplicative_expression -> pm_expression .)
    GTCOMP          reduce using rule 53 (multiplicative_expression -> pm_expression .)
    LTECOMP         reduce using rule 53 (multiplicative_expression -> pm_expression .)
    GTECOMP         reduce using rule 53 (multiplicative_expression -> pm_expression .)
    EQCOMP          reduce using rule 53 (multiplicative_expression -> pm_expression .)
    NEQCOMP         reduce using rule 53 (multiplicative_expression -> pm_expression .)
    BANDOP          reduce using rule 53 (multiplicative_expression -> pm_expression .)
    XOROP           reduce using rule 53 (multiplicative_expression -> pm_expression .)
    OROP            reduce using rule 53 (multiplicative_expression -> pm_expression .)
    ANDOP           reduce using rule 53 (multiplicative_expression -> pm_expression .)
    QUESMARK        reduce using rule 53 (multiplicative_expression -> pm_expression .)
    RPAREN          reduce using rule 53 (multiplicative_expression -> pm_expression .)
    COMMA           reduce using rule 53 (multiplicative_expression -> pm_expression .)
    RSPAREN         reduce using rule 53 (multiplicative_expression -> pm_expression .)
    SEMICOLON       reduce using rule 53 (multiplicative_expression -> pm_expression .)
    RCPAREN         reduce using rule 53 (multiplicative_expression -> pm_expression .)
    COLON           reduce using rule 53 (multiplicative_expression -> pm_expression .)
    DOTSTAR         shift and go to state 382
    ARROWSTAR       shift and go to state 383


state 212

    (295) declarator -> declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 384


state 213

    (296) declarator -> declarator LSPAREN RSPAREN .

    LPAREN          reduce using rule 296 (declarator -> declarator LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 296 (declarator -> declarator LSPAREN RSPAREN .)
    COLON           reduce using rule 296 (declarator -> declarator LSPAREN RSPAREN .)
    EQUAL           reduce using rule 296 (declarator -> declarator LSPAREN RSPAREN .)
    LCPAREN         reduce using rule 296 (declarator -> declarator LSPAREN RSPAREN .)
    SEMICOLON       reduce using rule 296 (declarator -> declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 296 (declarator -> declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 296 (declarator -> declarator LSPAREN RSPAREN .)
    GTCOMP          reduce using rule 296 (declarator -> declarator LSPAREN RSPAREN .)


state 214

    (26) constant_expression -> conditional_expression .

    RSPAREN         reduce using rule 26 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 26 (constant_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 26 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 26 (constant_expression -> conditional_expression .)
    RCPAREN         reduce using rule 26 (constant_expression -> conditional_expression .)


state 215

    (144) cast_expression -> unary_expression .

    DOTSTAR         reduce using rule 144 (cast_expression -> unary_expression .)
    ARROWSTAR       reduce using rule 144 (cast_expression -> unary_expression .)
    MULTOP          reduce using rule 144 (cast_expression -> unary_expression .)
    DIVOP           reduce using rule 144 (cast_expression -> unary_expression .)
    MODOP           reduce using rule 144 (cast_expression -> unary_expression .)
    PLUSOP          reduce using rule 144 (cast_expression -> unary_expression .)
    MINUSOP         reduce using rule 144 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 144 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 144 (cast_expression -> unary_expression .)
    LTCOMP          reduce using rule 144 (cast_expression -> unary_expression .)
    GTCOMP          reduce using rule 144 (cast_expression -> unary_expression .)
    LTECOMP         reduce using rule 144 (cast_expression -> unary_expression .)
    GTECOMP         reduce using rule 144 (cast_expression -> unary_expression .)
    EQCOMP          reduce using rule 144 (cast_expression -> unary_expression .)
    NEQCOMP         reduce using rule 144 (cast_expression -> unary_expression .)
    BANDOP          reduce using rule 144 (cast_expression -> unary_expression .)
    XOROP           reduce using rule 144 (cast_expression -> unary_expression .)
    OROP            reduce using rule 144 (cast_expression -> unary_expression .)
    ANDOP           reduce using rule 144 (cast_expression -> unary_expression .)
    QUESMARK        reduce using rule 144 (cast_expression -> unary_expression .)
    RSPAREN         reduce using rule 144 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 144 (cast_expression -> unary_expression .)
    MULTEQOP        reduce using rule 144 (cast_expression -> unary_expression .)
    DIVEQOP         reduce using rule 144 (cast_expression -> unary_expression .)
    MODEQOP         reduce using rule 144 (cast_expression -> unary_expression .)
    PLUSEQOP        reduce using rule 144 (cast_expression -> unary_expression .)
    MINUSEQOP       reduce using rule 144 (cast_expression -> unary_expression .)
    LSHIFTEQOP      reduce using rule 144 (cast_expression -> unary_expression .)
    RSHIFTEQOP      reduce using rule 144 (cast_expression -> unary_expression .)
    BANDEQOP        reduce using rule 144 (cast_expression -> unary_expression .)
    BOREQOP         reduce using rule 144 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 144 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 144 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 144 (cast_expression -> unary_expression .)
    RCPAREN         reduce using rule 144 (cast_expression -> unary_expression .)
    COLON           reduce using rule 144 (cast_expression -> unary_expression .)


state 216

    (145) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (139) primary_expression -> LPAREN . expression RPAREN
    (146) type_name -> . type_specifier_list abstract_declarator
    (147) type_name -> . type_specifier_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 386
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    IDENTIFIER      shift and go to state 385
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    OPERATOR        shift and go to state 63

    type_name                      shift and go to state 310
    cast_expression                shift and go to state 180
    expression                     shift and go to state 309
    type_specifier_list            shift and go to state 311
    assignment_expression          shift and go to state 252
    type_specifier                 shift and go to state 150
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    simple_type_name               shift and go to state 312
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    name                           shift and go to state 187
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 217

    (128) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (129) postfix_expression -> simple_type_name . LPAREN RPAREN

    LPAREN          shift and go to state 351


state 218

    (276) ctor_initializer -> COLON mem_initializer_list .

    LCPAREN         reduce using rule 276 (ctor_initializer -> COLON mem_initializer_list .)


state 219

    (277) mem_initializer_list -> mem_initializer .
    (278) mem_initializer_list -> mem_initializer . COMMA mem_initializer_list

    LCPAREN         reduce using rule 277 (mem_initializer_list -> mem_initializer .)
    COMMA           shift and go to state 387


state 220

    (279) mem_initializer -> complete_class_name . LPAREN expression_list RPAREN
    (280) mem_initializer -> complete_class_name . LPAREN RPAREN

    LPAREN          shift and go to state 388


state 221

    (281) mem_initializer -> IDENTIFIER . LPAREN expression_list RPAREN
    (282) mem_initializer -> IDENTIFIER . LPAREN RPAREN
    (407) class_name -> IDENTIFIER .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 389
    DOUBLECOLON     reduce using rule 407 (class_name -> IDENTIFIER .)

  ! LPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]


state 222

    (262) initializer -> EQUAL assignment_expression .

    SEMICOLON       reduce using rule 262 (initializer -> EQUAL assignment_expression .)
    COMMA           reduce using rule 262 (initializer -> EQUAL assignment_expression .)


state 223

    (263) initializer -> EQUAL LCPAREN . initializer_list RCPAREN
    (264) initializer -> EQUAL LCPAREN . initializer_list COMMA RCPAREN
    (266) initializer_list -> . assignment_expression
    (267) initializer_list -> . initializer_list COMMA assignment_expression
    (268) initializer_list -> . LCPAREN initializer_list RCPAREN
    (269) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 390
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    initializer_list               shift and go to state 391
    assignment_expression          shift and go to state 392
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 224

    (204) compound_statement -> LCPAREN statement_list . RCPAREN
    (207) statement_list -> statement_list . statement
    (208) statement -> . labeled_statement
    (209) statement -> . expression_statement
    (210) statement -> . compound_statement
    (211) statement -> . selection_statement
    (212) statement -> . iteration_statement
    (213) statement -> . jump_statement
    (214) statement -> . declaration_statement
    (215) statement -> . try_block
    (231) labeled_statement -> . IDENTIFIER COLON statement
    (232) labeled_statement -> . CASE constant_expression COLON statement
    (233) labeled_statement -> . DEFAULT COLON statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN
    (221) selection_statement -> . IF LPAREN expression RPAREN statement
    (222) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (223) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (234) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (235) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (236) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (216) jump_statement -> . BREAK SEMICOLON
    (217) jump_statement -> . CONTINUE SEMICOLON
    (218) jump_statement -> . RETURN expression SEMICOLON
    (219) jump_statement -> . RETURN SEMICOLON
    (220) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (244) declaration_statement -> . declaration
    (224) try_block -> . TRY compound_statement handler_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 393
    IDENTIFIER      shift and go to state 235
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237
    SEMICOLON       shift and go to state 239
    LCPAREN         shift and go to state 85
    IF              shift and go to state 240
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 243
    DO              shift and go to state 244
    FOR             shift and go to state 245
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 247
    RETURN          shift and go to state 248
    GOTO            shift and go to state 249
    TRY             shift and go to state 251
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    statement                      shift and go to state 394
    labeled_statement              shift and go to state 227
    expression_statement           shift and go to state 228
    compound_statement             shift and go to state 229
    selection_statement            shift and go to state 230
    iteration_statement            shift and go to state 231
    jump_statement                 shift and go to state 232
    declaration_statement          shift and go to state 233
    try_block                      shift and go to state 234
    expression                     shift and go to state 238
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 225

    (205) compound_statement -> LCPAREN RCPAREN .

    ASM             reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    EXTERN          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    LPAREN          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    AUTO            reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    STATIC          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    CONST           reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    INLINE          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    BNOP            reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    MULTOP          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    BANDOP          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    CHAR            reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    SHORT           reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    INT             reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    LONG            reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    SIGNED          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    FLOAT           reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    VOID            reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    ENUM            reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    DOUBLECOLON     reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    CLASS           reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    STRUCT          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    UNION           reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    $end            reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    CASE            reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    DEFAULT         reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    SEMICOLON       reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    IF              reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    SWITCH          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    WHILE           reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    DO              reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    FOR             reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    BREAK           reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    CONTINUE        reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    RETURN          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    GOTO            reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    TRY             reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    SIZEOF          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    NOTSYM          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    NEW             reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    DELETE          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    THIS            reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    NUMBER          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    STRING          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    SCHAR           reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    ELSE            reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    PRIVATE         reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    PROTECTED       reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    PUBLIC          reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    COLON           reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)
    CATCH           reduce using rule 205 (compound_statement -> LCPAREN RCPAREN .)


state 226

    (206) statement_list -> statement .

    RCPAREN         reduce using rule 206 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 206 (statement_list -> statement .)
    CASE            reduce using rule 206 (statement_list -> statement .)
    DEFAULT         reduce using rule 206 (statement_list -> statement .)
    SEMICOLON       reduce using rule 206 (statement_list -> statement .)
    LCPAREN         reduce using rule 206 (statement_list -> statement .)
    IF              reduce using rule 206 (statement_list -> statement .)
    SWITCH          reduce using rule 206 (statement_list -> statement .)
    WHILE           reduce using rule 206 (statement_list -> statement .)
    DO              reduce using rule 206 (statement_list -> statement .)
    FOR             reduce using rule 206 (statement_list -> statement .)
    BREAK           reduce using rule 206 (statement_list -> statement .)
    CONTINUE        reduce using rule 206 (statement_list -> statement .)
    RETURN          reduce using rule 206 (statement_list -> statement .)
    GOTO            reduce using rule 206 (statement_list -> statement .)
    TRY             reduce using rule 206 (statement_list -> statement .)
    ASM             reduce using rule 206 (statement_list -> statement .)
    TEMPLATE        reduce using rule 206 (statement_list -> statement .)
    EXTERN          reduce using rule 206 (statement_list -> statement .)
    DPLUSOP         reduce using rule 206 (statement_list -> statement .)
    DMINUSOP        reduce using rule 206 (statement_list -> statement .)
    SIZEOF          reduce using rule 206 (statement_list -> statement .)
    TYPEDEF         reduce using rule 206 (statement_list -> statement .)
    LPAREN          reduce using rule 206 (statement_list -> statement .)
    MULTOP          reduce using rule 206 (statement_list -> statement .)
    BANDOP          reduce using rule 206 (statement_list -> statement .)
    PLUSOP          reduce using rule 206 (statement_list -> statement .)
    MINUSOP         reduce using rule 206 (statement_list -> statement .)
    NOTSYM          reduce using rule 206 (statement_list -> statement .)
    BNOP            reduce using rule 206 (statement_list -> statement .)
    DOUBLECOLON     reduce using rule 206 (statement_list -> statement .)
    NEW             reduce using rule 206 (statement_list -> statement .)
    DELETE          reduce using rule 206 (statement_list -> statement .)
    AUTO            reduce using rule 206 (statement_list -> statement .)
    STATIC          reduce using rule 206 (statement_list -> statement .)
    CONST           reduce using rule 206 (statement_list -> statement .)
    VOLATILE        reduce using rule 206 (statement_list -> statement .)
    INLINE          reduce using rule 206 (statement_list -> statement .)
    VIRTUAL         reduce using rule 206 (statement_list -> statement .)
    THIS            reduce using rule 206 (statement_list -> statement .)
    CHAR            reduce using rule 206 (statement_list -> statement .)
    SHORT           reduce using rule 206 (statement_list -> statement .)
    INT             reduce using rule 206 (statement_list -> statement .)
    LONG            reduce using rule 206 (statement_list -> statement .)
    SIGNED          reduce using rule 206 (statement_list -> statement .)
    UNSIGNED        reduce using rule 206 (statement_list -> statement .)
    FLOAT           reduce using rule 206 (statement_list -> statement .)
    DOUBLE          reduce using rule 206 (statement_list -> statement .)
    VOID            reduce using rule 206 (statement_list -> statement .)
    ENUM            reduce using rule 206 (statement_list -> statement .)
    NUMBER          reduce using rule 206 (statement_list -> statement .)
    STRING          reduce using rule 206 (statement_list -> statement .)
    SCHAR           reduce using rule 206 (statement_list -> statement .)
    CLASS           reduce using rule 206 (statement_list -> statement .)
    STRUCT          reduce using rule 206 (statement_list -> statement .)
    UNION           reduce using rule 206 (statement_list -> statement .)
    OPERATOR        reduce using rule 206 (statement_list -> statement .)


state 227

    (208) statement -> labeled_statement .

    RCPAREN         reduce using rule 208 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 208 (statement -> labeled_statement .)
    CASE            reduce using rule 208 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 208 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 208 (statement -> labeled_statement .)
    LCPAREN         reduce using rule 208 (statement -> labeled_statement .)
    IF              reduce using rule 208 (statement -> labeled_statement .)
    SWITCH          reduce using rule 208 (statement -> labeled_statement .)
    WHILE           reduce using rule 208 (statement -> labeled_statement .)
    DO              reduce using rule 208 (statement -> labeled_statement .)
    FOR             reduce using rule 208 (statement -> labeled_statement .)
    BREAK           reduce using rule 208 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 208 (statement -> labeled_statement .)
    RETURN          reduce using rule 208 (statement -> labeled_statement .)
    GOTO            reduce using rule 208 (statement -> labeled_statement .)
    TRY             reduce using rule 208 (statement -> labeled_statement .)
    ASM             reduce using rule 208 (statement -> labeled_statement .)
    TEMPLATE        reduce using rule 208 (statement -> labeled_statement .)
    EXTERN          reduce using rule 208 (statement -> labeled_statement .)
    DPLUSOP         reduce using rule 208 (statement -> labeled_statement .)
    DMINUSOP        reduce using rule 208 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 208 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 208 (statement -> labeled_statement .)
    LPAREN          reduce using rule 208 (statement -> labeled_statement .)
    MULTOP          reduce using rule 208 (statement -> labeled_statement .)
    BANDOP          reduce using rule 208 (statement -> labeled_statement .)
    PLUSOP          reduce using rule 208 (statement -> labeled_statement .)
    MINUSOP         reduce using rule 208 (statement -> labeled_statement .)
    NOTSYM          reduce using rule 208 (statement -> labeled_statement .)
    BNOP            reduce using rule 208 (statement -> labeled_statement .)
    DOUBLECOLON     reduce using rule 208 (statement -> labeled_statement .)
    NEW             reduce using rule 208 (statement -> labeled_statement .)
    DELETE          reduce using rule 208 (statement -> labeled_statement .)
    AUTO            reduce using rule 208 (statement -> labeled_statement .)
    STATIC          reduce using rule 208 (statement -> labeled_statement .)
    CONST           reduce using rule 208 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 208 (statement -> labeled_statement .)
    INLINE          reduce using rule 208 (statement -> labeled_statement .)
    VIRTUAL         reduce using rule 208 (statement -> labeled_statement .)
    THIS            reduce using rule 208 (statement -> labeled_statement .)
    CHAR            reduce using rule 208 (statement -> labeled_statement .)
    SHORT           reduce using rule 208 (statement -> labeled_statement .)
    INT             reduce using rule 208 (statement -> labeled_statement .)
    LONG            reduce using rule 208 (statement -> labeled_statement .)
    SIGNED          reduce using rule 208 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 208 (statement -> labeled_statement .)
    FLOAT           reduce using rule 208 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 208 (statement -> labeled_statement .)
    VOID            reduce using rule 208 (statement -> labeled_statement .)
    ENUM            reduce using rule 208 (statement -> labeled_statement .)
    NUMBER          reduce using rule 208 (statement -> labeled_statement .)
    STRING          reduce using rule 208 (statement -> labeled_statement .)
    SCHAR           reduce using rule 208 (statement -> labeled_statement .)
    CLASS           reduce using rule 208 (statement -> labeled_statement .)
    STRUCT          reduce using rule 208 (statement -> labeled_statement .)
    UNION           reduce using rule 208 (statement -> labeled_statement .)
    OPERATOR        reduce using rule 208 (statement -> labeled_statement .)
    ELSE            reduce using rule 208 (statement -> labeled_statement .)


state 228

    (209) statement -> expression_statement .

    RCPAREN         reduce using rule 209 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 209 (statement -> expression_statement .)
    CASE            reduce using rule 209 (statement -> expression_statement .)
    DEFAULT         reduce using rule 209 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 209 (statement -> expression_statement .)
    LCPAREN         reduce using rule 209 (statement -> expression_statement .)
    IF              reduce using rule 209 (statement -> expression_statement .)
    SWITCH          reduce using rule 209 (statement -> expression_statement .)
    WHILE           reduce using rule 209 (statement -> expression_statement .)
    DO              reduce using rule 209 (statement -> expression_statement .)
    FOR             reduce using rule 209 (statement -> expression_statement .)
    BREAK           reduce using rule 209 (statement -> expression_statement .)
    CONTINUE        reduce using rule 209 (statement -> expression_statement .)
    RETURN          reduce using rule 209 (statement -> expression_statement .)
    GOTO            reduce using rule 209 (statement -> expression_statement .)
    TRY             reduce using rule 209 (statement -> expression_statement .)
    ASM             reduce using rule 209 (statement -> expression_statement .)
    TEMPLATE        reduce using rule 209 (statement -> expression_statement .)
    EXTERN          reduce using rule 209 (statement -> expression_statement .)
    DPLUSOP         reduce using rule 209 (statement -> expression_statement .)
    DMINUSOP        reduce using rule 209 (statement -> expression_statement .)
    SIZEOF          reduce using rule 209 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 209 (statement -> expression_statement .)
    LPAREN          reduce using rule 209 (statement -> expression_statement .)
    MULTOP          reduce using rule 209 (statement -> expression_statement .)
    BANDOP          reduce using rule 209 (statement -> expression_statement .)
    PLUSOP          reduce using rule 209 (statement -> expression_statement .)
    MINUSOP         reduce using rule 209 (statement -> expression_statement .)
    NOTSYM          reduce using rule 209 (statement -> expression_statement .)
    BNOP            reduce using rule 209 (statement -> expression_statement .)
    DOUBLECOLON     reduce using rule 209 (statement -> expression_statement .)
    NEW             reduce using rule 209 (statement -> expression_statement .)
    DELETE          reduce using rule 209 (statement -> expression_statement .)
    AUTO            reduce using rule 209 (statement -> expression_statement .)
    STATIC          reduce using rule 209 (statement -> expression_statement .)
    CONST           reduce using rule 209 (statement -> expression_statement .)
    VOLATILE        reduce using rule 209 (statement -> expression_statement .)
    INLINE          reduce using rule 209 (statement -> expression_statement .)
    VIRTUAL         reduce using rule 209 (statement -> expression_statement .)
    THIS            reduce using rule 209 (statement -> expression_statement .)
    CHAR            reduce using rule 209 (statement -> expression_statement .)
    SHORT           reduce using rule 209 (statement -> expression_statement .)
    INT             reduce using rule 209 (statement -> expression_statement .)
    LONG            reduce using rule 209 (statement -> expression_statement .)
    SIGNED          reduce using rule 209 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 209 (statement -> expression_statement .)
    FLOAT           reduce using rule 209 (statement -> expression_statement .)
    DOUBLE          reduce using rule 209 (statement -> expression_statement .)
    VOID            reduce using rule 209 (statement -> expression_statement .)
    ENUM            reduce using rule 209 (statement -> expression_statement .)
    NUMBER          reduce using rule 209 (statement -> expression_statement .)
    STRING          reduce using rule 209 (statement -> expression_statement .)
    SCHAR           reduce using rule 209 (statement -> expression_statement .)
    CLASS           reduce using rule 209 (statement -> expression_statement .)
    STRUCT          reduce using rule 209 (statement -> expression_statement .)
    UNION           reduce using rule 209 (statement -> expression_statement .)
    OPERATOR        reduce using rule 209 (statement -> expression_statement .)
    ELSE            reduce using rule 209 (statement -> expression_statement .)


state 229

    (210) statement -> compound_statement .

    RCPAREN         reduce using rule 210 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 210 (statement -> compound_statement .)
    CASE            reduce using rule 210 (statement -> compound_statement .)
    DEFAULT         reduce using rule 210 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 210 (statement -> compound_statement .)
    LCPAREN         reduce using rule 210 (statement -> compound_statement .)
    IF              reduce using rule 210 (statement -> compound_statement .)
    SWITCH          reduce using rule 210 (statement -> compound_statement .)
    WHILE           reduce using rule 210 (statement -> compound_statement .)
    DO              reduce using rule 210 (statement -> compound_statement .)
    FOR             reduce using rule 210 (statement -> compound_statement .)
    BREAK           reduce using rule 210 (statement -> compound_statement .)
    CONTINUE        reduce using rule 210 (statement -> compound_statement .)
    RETURN          reduce using rule 210 (statement -> compound_statement .)
    GOTO            reduce using rule 210 (statement -> compound_statement .)
    TRY             reduce using rule 210 (statement -> compound_statement .)
    ASM             reduce using rule 210 (statement -> compound_statement .)
    TEMPLATE        reduce using rule 210 (statement -> compound_statement .)
    EXTERN          reduce using rule 210 (statement -> compound_statement .)
    DPLUSOP         reduce using rule 210 (statement -> compound_statement .)
    DMINUSOP        reduce using rule 210 (statement -> compound_statement .)
    SIZEOF          reduce using rule 210 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 210 (statement -> compound_statement .)
    LPAREN          reduce using rule 210 (statement -> compound_statement .)
    MULTOP          reduce using rule 210 (statement -> compound_statement .)
    BANDOP          reduce using rule 210 (statement -> compound_statement .)
    PLUSOP          reduce using rule 210 (statement -> compound_statement .)
    MINUSOP         reduce using rule 210 (statement -> compound_statement .)
    NOTSYM          reduce using rule 210 (statement -> compound_statement .)
    BNOP            reduce using rule 210 (statement -> compound_statement .)
    DOUBLECOLON     reduce using rule 210 (statement -> compound_statement .)
    NEW             reduce using rule 210 (statement -> compound_statement .)
    DELETE          reduce using rule 210 (statement -> compound_statement .)
    AUTO            reduce using rule 210 (statement -> compound_statement .)
    STATIC          reduce using rule 210 (statement -> compound_statement .)
    CONST           reduce using rule 210 (statement -> compound_statement .)
    VOLATILE        reduce using rule 210 (statement -> compound_statement .)
    INLINE          reduce using rule 210 (statement -> compound_statement .)
    VIRTUAL         reduce using rule 210 (statement -> compound_statement .)
    THIS            reduce using rule 210 (statement -> compound_statement .)
    CHAR            reduce using rule 210 (statement -> compound_statement .)
    SHORT           reduce using rule 210 (statement -> compound_statement .)
    INT             reduce using rule 210 (statement -> compound_statement .)
    LONG            reduce using rule 210 (statement -> compound_statement .)
    SIGNED          reduce using rule 210 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 210 (statement -> compound_statement .)
    FLOAT           reduce using rule 210 (statement -> compound_statement .)
    DOUBLE          reduce using rule 210 (statement -> compound_statement .)
    VOID            reduce using rule 210 (statement -> compound_statement .)
    ENUM            reduce using rule 210 (statement -> compound_statement .)
    NUMBER          reduce using rule 210 (statement -> compound_statement .)
    STRING          reduce using rule 210 (statement -> compound_statement .)
    SCHAR           reduce using rule 210 (statement -> compound_statement .)
    CLASS           reduce using rule 210 (statement -> compound_statement .)
    STRUCT          reduce using rule 210 (statement -> compound_statement .)
    UNION           reduce using rule 210 (statement -> compound_statement .)
    OPERATOR        reduce using rule 210 (statement -> compound_statement .)
    ELSE            reduce using rule 210 (statement -> compound_statement .)


state 230

    (211) statement -> selection_statement .

    RCPAREN         reduce using rule 211 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 211 (statement -> selection_statement .)
    CASE            reduce using rule 211 (statement -> selection_statement .)
    DEFAULT         reduce using rule 211 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 211 (statement -> selection_statement .)
    LCPAREN         reduce using rule 211 (statement -> selection_statement .)
    IF              reduce using rule 211 (statement -> selection_statement .)
    SWITCH          reduce using rule 211 (statement -> selection_statement .)
    WHILE           reduce using rule 211 (statement -> selection_statement .)
    DO              reduce using rule 211 (statement -> selection_statement .)
    FOR             reduce using rule 211 (statement -> selection_statement .)
    BREAK           reduce using rule 211 (statement -> selection_statement .)
    CONTINUE        reduce using rule 211 (statement -> selection_statement .)
    RETURN          reduce using rule 211 (statement -> selection_statement .)
    GOTO            reduce using rule 211 (statement -> selection_statement .)
    TRY             reduce using rule 211 (statement -> selection_statement .)
    ASM             reduce using rule 211 (statement -> selection_statement .)
    TEMPLATE        reduce using rule 211 (statement -> selection_statement .)
    EXTERN          reduce using rule 211 (statement -> selection_statement .)
    DPLUSOP         reduce using rule 211 (statement -> selection_statement .)
    DMINUSOP        reduce using rule 211 (statement -> selection_statement .)
    SIZEOF          reduce using rule 211 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 211 (statement -> selection_statement .)
    LPAREN          reduce using rule 211 (statement -> selection_statement .)
    MULTOP          reduce using rule 211 (statement -> selection_statement .)
    BANDOP          reduce using rule 211 (statement -> selection_statement .)
    PLUSOP          reduce using rule 211 (statement -> selection_statement .)
    MINUSOP         reduce using rule 211 (statement -> selection_statement .)
    NOTSYM          reduce using rule 211 (statement -> selection_statement .)
    BNOP            reduce using rule 211 (statement -> selection_statement .)
    DOUBLECOLON     reduce using rule 211 (statement -> selection_statement .)
    NEW             reduce using rule 211 (statement -> selection_statement .)
    DELETE          reduce using rule 211 (statement -> selection_statement .)
    AUTO            reduce using rule 211 (statement -> selection_statement .)
    STATIC          reduce using rule 211 (statement -> selection_statement .)
    CONST           reduce using rule 211 (statement -> selection_statement .)
    VOLATILE        reduce using rule 211 (statement -> selection_statement .)
    INLINE          reduce using rule 211 (statement -> selection_statement .)
    VIRTUAL         reduce using rule 211 (statement -> selection_statement .)
    THIS            reduce using rule 211 (statement -> selection_statement .)
    CHAR            reduce using rule 211 (statement -> selection_statement .)
    SHORT           reduce using rule 211 (statement -> selection_statement .)
    INT             reduce using rule 211 (statement -> selection_statement .)
    LONG            reduce using rule 211 (statement -> selection_statement .)
    SIGNED          reduce using rule 211 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 211 (statement -> selection_statement .)
    FLOAT           reduce using rule 211 (statement -> selection_statement .)
    DOUBLE          reduce using rule 211 (statement -> selection_statement .)
    VOID            reduce using rule 211 (statement -> selection_statement .)
    ENUM            reduce using rule 211 (statement -> selection_statement .)
    NUMBER          reduce using rule 211 (statement -> selection_statement .)
    STRING          reduce using rule 211 (statement -> selection_statement .)
    SCHAR           reduce using rule 211 (statement -> selection_statement .)
    CLASS           reduce using rule 211 (statement -> selection_statement .)
    STRUCT          reduce using rule 211 (statement -> selection_statement .)
    UNION           reduce using rule 211 (statement -> selection_statement .)
    OPERATOR        reduce using rule 211 (statement -> selection_statement .)
    ELSE            reduce using rule 211 (statement -> selection_statement .)


state 231

    (212) statement -> iteration_statement .

    RCPAREN         reduce using rule 212 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 212 (statement -> iteration_statement .)
    CASE            reduce using rule 212 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 212 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 212 (statement -> iteration_statement .)
    LCPAREN         reduce using rule 212 (statement -> iteration_statement .)
    IF              reduce using rule 212 (statement -> iteration_statement .)
    SWITCH          reduce using rule 212 (statement -> iteration_statement .)
    WHILE           reduce using rule 212 (statement -> iteration_statement .)
    DO              reduce using rule 212 (statement -> iteration_statement .)
    FOR             reduce using rule 212 (statement -> iteration_statement .)
    BREAK           reduce using rule 212 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 212 (statement -> iteration_statement .)
    RETURN          reduce using rule 212 (statement -> iteration_statement .)
    GOTO            reduce using rule 212 (statement -> iteration_statement .)
    TRY             reduce using rule 212 (statement -> iteration_statement .)
    ASM             reduce using rule 212 (statement -> iteration_statement .)
    TEMPLATE        reduce using rule 212 (statement -> iteration_statement .)
    EXTERN          reduce using rule 212 (statement -> iteration_statement .)
    DPLUSOP         reduce using rule 212 (statement -> iteration_statement .)
    DMINUSOP        reduce using rule 212 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 212 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 212 (statement -> iteration_statement .)
    LPAREN          reduce using rule 212 (statement -> iteration_statement .)
    MULTOP          reduce using rule 212 (statement -> iteration_statement .)
    BANDOP          reduce using rule 212 (statement -> iteration_statement .)
    PLUSOP          reduce using rule 212 (statement -> iteration_statement .)
    MINUSOP         reduce using rule 212 (statement -> iteration_statement .)
    NOTSYM          reduce using rule 212 (statement -> iteration_statement .)
    BNOP            reduce using rule 212 (statement -> iteration_statement .)
    DOUBLECOLON     reduce using rule 212 (statement -> iteration_statement .)
    NEW             reduce using rule 212 (statement -> iteration_statement .)
    DELETE          reduce using rule 212 (statement -> iteration_statement .)
    AUTO            reduce using rule 212 (statement -> iteration_statement .)
    STATIC          reduce using rule 212 (statement -> iteration_statement .)
    CONST           reduce using rule 212 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 212 (statement -> iteration_statement .)
    INLINE          reduce using rule 212 (statement -> iteration_statement .)
    VIRTUAL         reduce using rule 212 (statement -> iteration_statement .)
    THIS            reduce using rule 212 (statement -> iteration_statement .)
    CHAR            reduce using rule 212 (statement -> iteration_statement .)
    SHORT           reduce using rule 212 (statement -> iteration_statement .)
    INT             reduce using rule 212 (statement -> iteration_statement .)
    LONG            reduce using rule 212 (statement -> iteration_statement .)
    SIGNED          reduce using rule 212 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 212 (statement -> iteration_statement .)
    FLOAT           reduce using rule 212 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 212 (statement -> iteration_statement .)
    VOID            reduce using rule 212 (statement -> iteration_statement .)
    ENUM            reduce using rule 212 (statement -> iteration_statement .)
    NUMBER          reduce using rule 212 (statement -> iteration_statement .)
    STRING          reduce using rule 212 (statement -> iteration_statement .)
    SCHAR           reduce using rule 212 (statement -> iteration_statement .)
    CLASS           reduce using rule 212 (statement -> iteration_statement .)
    STRUCT          reduce using rule 212 (statement -> iteration_statement .)
    UNION           reduce using rule 212 (statement -> iteration_statement .)
    OPERATOR        reduce using rule 212 (statement -> iteration_statement .)
    ELSE            reduce using rule 212 (statement -> iteration_statement .)


state 232

    (213) statement -> jump_statement .

    RCPAREN         reduce using rule 213 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 213 (statement -> jump_statement .)
    CASE            reduce using rule 213 (statement -> jump_statement .)
    DEFAULT         reduce using rule 213 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 213 (statement -> jump_statement .)
    LCPAREN         reduce using rule 213 (statement -> jump_statement .)
    IF              reduce using rule 213 (statement -> jump_statement .)
    SWITCH          reduce using rule 213 (statement -> jump_statement .)
    WHILE           reduce using rule 213 (statement -> jump_statement .)
    DO              reduce using rule 213 (statement -> jump_statement .)
    FOR             reduce using rule 213 (statement -> jump_statement .)
    BREAK           reduce using rule 213 (statement -> jump_statement .)
    CONTINUE        reduce using rule 213 (statement -> jump_statement .)
    RETURN          reduce using rule 213 (statement -> jump_statement .)
    GOTO            reduce using rule 213 (statement -> jump_statement .)
    TRY             reduce using rule 213 (statement -> jump_statement .)
    ASM             reduce using rule 213 (statement -> jump_statement .)
    TEMPLATE        reduce using rule 213 (statement -> jump_statement .)
    EXTERN          reduce using rule 213 (statement -> jump_statement .)
    DPLUSOP         reduce using rule 213 (statement -> jump_statement .)
    DMINUSOP        reduce using rule 213 (statement -> jump_statement .)
    SIZEOF          reduce using rule 213 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 213 (statement -> jump_statement .)
    LPAREN          reduce using rule 213 (statement -> jump_statement .)
    MULTOP          reduce using rule 213 (statement -> jump_statement .)
    BANDOP          reduce using rule 213 (statement -> jump_statement .)
    PLUSOP          reduce using rule 213 (statement -> jump_statement .)
    MINUSOP         reduce using rule 213 (statement -> jump_statement .)
    NOTSYM          reduce using rule 213 (statement -> jump_statement .)
    BNOP            reduce using rule 213 (statement -> jump_statement .)
    DOUBLECOLON     reduce using rule 213 (statement -> jump_statement .)
    NEW             reduce using rule 213 (statement -> jump_statement .)
    DELETE          reduce using rule 213 (statement -> jump_statement .)
    AUTO            reduce using rule 213 (statement -> jump_statement .)
    STATIC          reduce using rule 213 (statement -> jump_statement .)
    CONST           reduce using rule 213 (statement -> jump_statement .)
    VOLATILE        reduce using rule 213 (statement -> jump_statement .)
    INLINE          reduce using rule 213 (statement -> jump_statement .)
    VIRTUAL         reduce using rule 213 (statement -> jump_statement .)
    THIS            reduce using rule 213 (statement -> jump_statement .)
    CHAR            reduce using rule 213 (statement -> jump_statement .)
    SHORT           reduce using rule 213 (statement -> jump_statement .)
    INT             reduce using rule 213 (statement -> jump_statement .)
    LONG            reduce using rule 213 (statement -> jump_statement .)
    SIGNED          reduce using rule 213 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 213 (statement -> jump_statement .)
    FLOAT           reduce using rule 213 (statement -> jump_statement .)
    DOUBLE          reduce using rule 213 (statement -> jump_statement .)
    VOID            reduce using rule 213 (statement -> jump_statement .)
    ENUM            reduce using rule 213 (statement -> jump_statement .)
    NUMBER          reduce using rule 213 (statement -> jump_statement .)
    STRING          reduce using rule 213 (statement -> jump_statement .)
    SCHAR           reduce using rule 213 (statement -> jump_statement .)
    CLASS           reduce using rule 213 (statement -> jump_statement .)
    STRUCT          reduce using rule 213 (statement -> jump_statement .)
    UNION           reduce using rule 213 (statement -> jump_statement .)
    OPERATOR        reduce using rule 213 (statement -> jump_statement .)
    ELSE            reduce using rule 213 (statement -> jump_statement .)


state 233

    (214) statement -> declaration_statement .

    RCPAREN         reduce using rule 214 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 214 (statement -> declaration_statement .)
    CASE            reduce using rule 214 (statement -> declaration_statement .)
    DEFAULT         reduce using rule 214 (statement -> declaration_statement .)
    SEMICOLON       reduce using rule 214 (statement -> declaration_statement .)
    LCPAREN         reduce using rule 214 (statement -> declaration_statement .)
    IF              reduce using rule 214 (statement -> declaration_statement .)
    SWITCH          reduce using rule 214 (statement -> declaration_statement .)
    WHILE           reduce using rule 214 (statement -> declaration_statement .)
    DO              reduce using rule 214 (statement -> declaration_statement .)
    FOR             reduce using rule 214 (statement -> declaration_statement .)
    BREAK           reduce using rule 214 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 214 (statement -> declaration_statement .)
    RETURN          reduce using rule 214 (statement -> declaration_statement .)
    GOTO            reduce using rule 214 (statement -> declaration_statement .)
    TRY             reduce using rule 214 (statement -> declaration_statement .)
    ASM             reduce using rule 214 (statement -> declaration_statement .)
    TEMPLATE        reduce using rule 214 (statement -> declaration_statement .)
    EXTERN          reduce using rule 214 (statement -> declaration_statement .)
    DPLUSOP         reduce using rule 214 (statement -> declaration_statement .)
    DMINUSOP        reduce using rule 214 (statement -> declaration_statement .)
    SIZEOF          reduce using rule 214 (statement -> declaration_statement .)
    TYPEDEF         reduce using rule 214 (statement -> declaration_statement .)
    LPAREN          reduce using rule 214 (statement -> declaration_statement .)
    MULTOP          reduce using rule 214 (statement -> declaration_statement .)
    BANDOP          reduce using rule 214 (statement -> declaration_statement .)
    PLUSOP          reduce using rule 214 (statement -> declaration_statement .)
    MINUSOP         reduce using rule 214 (statement -> declaration_statement .)
    NOTSYM          reduce using rule 214 (statement -> declaration_statement .)
    BNOP            reduce using rule 214 (statement -> declaration_statement .)
    DOUBLECOLON     reduce using rule 214 (statement -> declaration_statement .)
    NEW             reduce using rule 214 (statement -> declaration_statement .)
    DELETE          reduce using rule 214 (statement -> declaration_statement .)
    AUTO            reduce using rule 214 (statement -> declaration_statement .)
    STATIC          reduce using rule 214 (statement -> declaration_statement .)
    CONST           reduce using rule 214 (statement -> declaration_statement .)
    VOLATILE        reduce using rule 214 (statement -> declaration_statement .)
    INLINE          reduce using rule 214 (statement -> declaration_statement .)
    VIRTUAL         reduce using rule 214 (statement -> declaration_statement .)
    THIS            reduce using rule 214 (statement -> declaration_statement .)
    CHAR            reduce using rule 214 (statement -> declaration_statement .)
    SHORT           reduce using rule 214 (statement -> declaration_statement .)
    INT             reduce using rule 214 (statement -> declaration_statement .)
    LONG            reduce using rule 214 (statement -> declaration_statement .)
    SIGNED          reduce using rule 214 (statement -> declaration_statement .)
    UNSIGNED        reduce using rule 214 (statement -> declaration_statement .)
    FLOAT           reduce using rule 214 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 214 (statement -> declaration_statement .)
    VOID            reduce using rule 214 (statement -> declaration_statement .)
    ENUM            reduce using rule 214 (statement -> declaration_statement .)
    NUMBER          reduce using rule 214 (statement -> declaration_statement .)
    STRING          reduce using rule 214 (statement -> declaration_statement .)
    SCHAR           reduce using rule 214 (statement -> declaration_statement .)
    CLASS           reduce using rule 214 (statement -> declaration_statement .)
    STRUCT          reduce using rule 214 (statement -> declaration_statement .)
    UNION           reduce using rule 214 (statement -> declaration_statement .)
    OPERATOR        reduce using rule 214 (statement -> declaration_statement .)
    ELSE            reduce using rule 214 (statement -> declaration_statement .)


state 234

    (215) statement -> try_block .

    RCPAREN         reduce using rule 215 (statement -> try_block .)
    IDENTIFIER      reduce using rule 215 (statement -> try_block .)
    CASE            reduce using rule 215 (statement -> try_block .)
    DEFAULT         reduce using rule 215 (statement -> try_block .)
    SEMICOLON       reduce using rule 215 (statement -> try_block .)
    LCPAREN         reduce using rule 215 (statement -> try_block .)
    IF              reduce using rule 215 (statement -> try_block .)
    SWITCH          reduce using rule 215 (statement -> try_block .)
    WHILE           reduce using rule 215 (statement -> try_block .)
    DO              reduce using rule 215 (statement -> try_block .)
    FOR             reduce using rule 215 (statement -> try_block .)
    BREAK           reduce using rule 215 (statement -> try_block .)
    CONTINUE        reduce using rule 215 (statement -> try_block .)
    RETURN          reduce using rule 215 (statement -> try_block .)
    GOTO            reduce using rule 215 (statement -> try_block .)
    TRY             reduce using rule 215 (statement -> try_block .)
    ASM             reduce using rule 215 (statement -> try_block .)
    TEMPLATE        reduce using rule 215 (statement -> try_block .)
    EXTERN          reduce using rule 215 (statement -> try_block .)
    DPLUSOP         reduce using rule 215 (statement -> try_block .)
    DMINUSOP        reduce using rule 215 (statement -> try_block .)
    SIZEOF          reduce using rule 215 (statement -> try_block .)
    TYPEDEF         reduce using rule 215 (statement -> try_block .)
    LPAREN          reduce using rule 215 (statement -> try_block .)
    MULTOP          reduce using rule 215 (statement -> try_block .)
    BANDOP          reduce using rule 215 (statement -> try_block .)
    PLUSOP          reduce using rule 215 (statement -> try_block .)
    MINUSOP         reduce using rule 215 (statement -> try_block .)
    NOTSYM          reduce using rule 215 (statement -> try_block .)
    BNOP            reduce using rule 215 (statement -> try_block .)
    DOUBLECOLON     reduce using rule 215 (statement -> try_block .)
    NEW             reduce using rule 215 (statement -> try_block .)
    DELETE          reduce using rule 215 (statement -> try_block .)
    AUTO            reduce using rule 215 (statement -> try_block .)
    STATIC          reduce using rule 215 (statement -> try_block .)
    CONST           reduce using rule 215 (statement -> try_block .)
    VOLATILE        reduce using rule 215 (statement -> try_block .)
    INLINE          reduce using rule 215 (statement -> try_block .)
    VIRTUAL         reduce using rule 215 (statement -> try_block .)
    THIS            reduce using rule 215 (statement -> try_block .)
    CHAR            reduce using rule 215 (statement -> try_block .)
    SHORT           reduce using rule 215 (statement -> try_block .)
    INT             reduce using rule 215 (statement -> try_block .)
    LONG            reduce using rule 215 (statement -> try_block .)
    SIGNED          reduce using rule 215 (statement -> try_block .)
    UNSIGNED        reduce using rule 215 (statement -> try_block .)
    FLOAT           reduce using rule 215 (statement -> try_block .)
    DOUBLE          reduce using rule 215 (statement -> try_block .)
    VOID            reduce using rule 215 (statement -> try_block .)
    ENUM            reduce using rule 215 (statement -> try_block .)
    NUMBER          reduce using rule 215 (statement -> try_block .)
    STRING          reduce using rule 215 (statement -> try_block .)
    SCHAR           reduce using rule 215 (statement -> try_block .)
    CLASS           reduce using rule 215 (statement -> try_block .)
    STRUCT          reduce using rule 215 (statement -> try_block .)
    UNION           reduce using rule 215 (statement -> try_block .)
    OPERATOR        reduce using rule 215 (statement -> try_block .)
    ELSE            reduce using rule 215 (statement -> try_block .)


state 235

    (231) labeled_statement -> IDENTIFIER . COLON statement
    (303) name -> IDENTIFIER .
    (407) class_name -> IDENTIFIER .
    (392) typedef_name -> IDENTIFIER .

  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TEMPLATE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 392 (typedef_name -> IDENTIFIER .)
    COLON           shift and go to state 395
    LPAREN          reduce using rule 303 (name -> IDENTIFIER .)
    LSPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 303 (name -> IDENTIFIER .)
    LCPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 303 (name -> IDENTIFIER .)
    COMMA           reduce using rule 303 (name -> IDENTIFIER .)
    DOT             reduce using rule 303 (name -> IDENTIFIER .)
    ARROW           reduce using rule 303 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 303 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 303 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 303 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 303 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 303 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 303 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 303 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 303 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 303 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 303 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 303 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 303 (name -> IDENTIFIER .)
    MODOP           reduce using rule 303 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 303 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 303 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 303 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 303 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 303 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 303 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 303 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 303 (name -> IDENTIFIER .)
    XOROP           reduce using rule 303 (name -> IDENTIFIER .)
    OROP            reduce using rule 303 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 303 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 303 (name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    AUTO            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STATIC          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    EXTERN          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CONST           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INLINE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    BNOP            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CHAR            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SHORT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INT             reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LONG            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SIGNED          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    FLOAT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOID            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    ENUM            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CLASS           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STRUCT          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNION           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    TEMPLATE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 392 (typedef_name -> IDENTIFIER .)

  ! COLON           [ reduce using rule 303 (name -> IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TEMPLATE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]


state 236

    (232) labeled_statement -> CASE . constant_expression COLON statement
    (26) constant_expression -> . conditional_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    constant_expression            shift and go to state 396
    conditional_expression         shift and go to state 214
    logical_OR_expression          shift and go to state 175
    logical_AND_expression         shift and go to state 184
    inclusive_OR_expression        shift and go to state 197
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 237

    (233) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 397


state 238

    (242) expression_statement -> expression . SEMICOLON
    (61) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 398
    COMMA           shift and go to state 399


state 239

    (243) expression_statement -> SEMICOLON .

    RCPAREN         reduce using rule 243 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 243 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 243 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 243 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 243 (expression_statement -> SEMICOLON .)
    LCPAREN         reduce using rule 243 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 243 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 243 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 243 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 243 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 243 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 243 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 243 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 243 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 243 (expression_statement -> SEMICOLON .)
    TRY             reduce using rule 243 (expression_statement -> SEMICOLON .)
    ASM             reduce using rule 243 (expression_statement -> SEMICOLON .)
    TEMPLATE        reduce using rule 243 (expression_statement -> SEMICOLON .)
    EXTERN          reduce using rule 243 (expression_statement -> SEMICOLON .)
    DPLUSOP         reduce using rule 243 (expression_statement -> SEMICOLON .)
    DMINUSOP        reduce using rule 243 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 243 (expression_statement -> SEMICOLON .)
    TYPEDEF         reduce using rule 243 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 243 (expression_statement -> SEMICOLON .)
    MULTOP          reduce using rule 243 (expression_statement -> SEMICOLON .)
    BANDOP          reduce using rule 243 (expression_statement -> SEMICOLON .)
    PLUSOP          reduce using rule 243 (expression_statement -> SEMICOLON .)
    MINUSOP         reduce using rule 243 (expression_statement -> SEMICOLON .)
    NOTSYM          reduce using rule 243 (expression_statement -> SEMICOLON .)
    BNOP            reduce using rule 243 (expression_statement -> SEMICOLON .)
    DOUBLECOLON     reduce using rule 243 (expression_statement -> SEMICOLON .)
    NEW             reduce using rule 243 (expression_statement -> SEMICOLON .)
    DELETE          reduce using rule 243 (expression_statement -> SEMICOLON .)
    AUTO            reduce using rule 243 (expression_statement -> SEMICOLON .)
    STATIC          reduce using rule 243 (expression_statement -> SEMICOLON .)
    CONST           reduce using rule 243 (expression_statement -> SEMICOLON .)
    VOLATILE        reduce using rule 243 (expression_statement -> SEMICOLON .)
    INLINE          reduce using rule 243 (expression_statement -> SEMICOLON .)
    VIRTUAL         reduce using rule 243 (expression_statement -> SEMICOLON .)
    THIS            reduce using rule 243 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 243 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 243 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 243 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 243 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 243 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 243 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 243 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 243 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 243 (expression_statement -> SEMICOLON .)
    ENUM            reduce using rule 243 (expression_statement -> SEMICOLON .)
    NUMBER          reduce using rule 243 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 243 (expression_statement -> SEMICOLON .)
    SCHAR           reduce using rule 243 (expression_statement -> SEMICOLON .)
    CLASS           reduce using rule 243 (expression_statement -> SEMICOLON .)
    STRUCT          reduce using rule 243 (expression_statement -> SEMICOLON .)
    UNION           reduce using rule 243 (expression_statement -> SEMICOLON .)
    OPERATOR        reduce using rule 243 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 243 (expression_statement -> SEMICOLON .)


state 240

    (221) selection_statement -> IF . LPAREN expression RPAREN statement
    (222) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 400


state 241

    (297) declarator -> LPAREN . declarator RPAREN
    (139) primary_expression -> LPAREN . expression RPAREN
    (145) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (146) type_name -> . type_specifier_list abstract_declarator
    (147) type_name -> . type_specifier_list
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LPAREN          shift and go to state 241
    BNOP            shift and go to state 401
    MULTOP          shift and go to state 402
    BANDOP          shift and go to state 403
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 404
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    OPERATOR        shift and go to state 63
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    THIS            shift and go to state 199
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204

    declarator                     shift and go to state 74
    expression                     shift and go to state 309
    type_name                      shift and go to state 310
    cast_expression                shift and go to state 180
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    assignment_expression          shift and go to state 252
    type_specifier_list            shift and go to state 311
    name                           shift and go to state 253
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    type_specifier                 shift and go to state 150
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    simple_type_name               shift and go to state 312
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 242

    (223) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 405


state 243

    (234) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 406


state 244

    (235) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (208) statement -> . labeled_statement
    (209) statement -> . expression_statement
    (210) statement -> . compound_statement
    (211) statement -> . selection_statement
    (212) statement -> . iteration_statement
    (213) statement -> . jump_statement
    (214) statement -> . declaration_statement
    (215) statement -> . try_block
    (231) labeled_statement -> . IDENTIFIER COLON statement
    (232) labeled_statement -> . CASE constant_expression COLON statement
    (233) labeled_statement -> . DEFAULT COLON statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN
    (221) selection_statement -> . IF LPAREN expression RPAREN statement
    (222) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (223) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (234) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (235) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (236) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (216) jump_statement -> . BREAK SEMICOLON
    (217) jump_statement -> . CONTINUE SEMICOLON
    (218) jump_statement -> . RETURN expression SEMICOLON
    (219) jump_statement -> . RETURN SEMICOLON
    (220) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (244) declaration_statement -> . declaration
    (224) try_block -> . TRY compound_statement handler_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 235
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237
    SEMICOLON       shift and go to state 239
    LCPAREN         shift and go to state 85
    IF              shift and go to state 240
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 243
    DO              shift and go to state 244
    FOR             shift and go to state 245
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 247
    RETURN          shift and go to state 248
    GOTO            shift and go to state 249
    TRY             shift and go to state 251
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    statement                      shift and go to state 407
    expression                     shift and go to state 238
    labeled_statement              shift and go to state 227
    expression_statement           shift and go to state 228
    compound_statement             shift and go to state 229
    selection_statement            shift and go to state 230
    iteration_statement            shift and go to state 231
    jump_statement                 shift and go to state 232
    declaration_statement          shift and go to state 233
    try_block                      shift and go to state 234
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 245

    (236) iteration_statement -> FOR . LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> FOR . LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> FOR . LPAREN for_init_statement SEMICOLON RPAREN statement

    LPAREN          shift and go to state 408


state 246

    (216) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 409


state 247

    (217) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 410


state 248

    (218) jump_statement -> RETURN . expression SEMICOLON
    (219) jump_statement -> RETURN . SEMICOLON
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 412
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 411
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 249

    (220) jump_statement -> GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 413


state 250

    (244) declaration_statement -> declaration .

    RCPAREN         reduce using rule 244 (declaration_statement -> declaration .)
    IDENTIFIER      reduce using rule 244 (declaration_statement -> declaration .)
    CASE            reduce using rule 244 (declaration_statement -> declaration .)
    DEFAULT         reduce using rule 244 (declaration_statement -> declaration .)
    SEMICOLON       reduce using rule 244 (declaration_statement -> declaration .)
    LCPAREN         reduce using rule 244 (declaration_statement -> declaration .)
    IF              reduce using rule 244 (declaration_statement -> declaration .)
    SWITCH          reduce using rule 244 (declaration_statement -> declaration .)
    WHILE           reduce using rule 244 (declaration_statement -> declaration .)
    DO              reduce using rule 244 (declaration_statement -> declaration .)
    FOR             reduce using rule 244 (declaration_statement -> declaration .)
    BREAK           reduce using rule 244 (declaration_statement -> declaration .)
    CONTINUE        reduce using rule 244 (declaration_statement -> declaration .)
    RETURN          reduce using rule 244 (declaration_statement -> declaration .)
    GOTO            reduce using rule 244 (declaration_statement -> declaration .)
    TRY             reduce using rule 244 (declaration_statement -> declaration .)
    ASM             reduce using rule 244 (declaration_statement -> declaration .)
    TEMPLATE        reduce using rule 244 (declaration_statement -> declaration .)
    EXTERN          reduce using rule 244 (declaration_statement -> declaration .)
    DPLUSOP         reduce using rule 244 (declaration_statement -> declaration .)
    DMINUSOP        reduce using rule 244 (declaration_statement -> declaration .)
    SIZEOF          reduce using rule 244 (declaration_statement -> declaration .)
    TYPEDEF         reduce using rule 244 (declaration_statement -> declaration .)
    LPAREN          reduce using rule 244 (declaration_statement -> declaration .)
    MULTOP          reduce using rule 244 (declaration_statement -> declaration .)
    BANDOP          reduce using rule 244 (declaration_statement -> declaration .)
    PLUSOP          reduce using rule 244 (declaration_statement -> declaration .)
    MINUSOP         reduce using rule 244 (declaration_statement -> declaration .)
    NOTSYM          reduce using rule 244 (declaration_statement -> declaration .)
    BNOP            reduce using rule 244 (declaration_statement -> declaration .)
    DOUBLECOLON     reduce using rule 244 (declaration_statement -> declaration .)
    NEW             reduce using rule 244 (declaration_statement -> declaration .)
    DELETE          reduce using rule 244 (declaration_statement -> declaration .)
    AUTO            reduce using rule 244 (declaration_statement -> declaration .)
    STATIC          reduce using rule 244 (declaration_statement -> declaration .)
    CONST           reduce using rule 244 (declaration_statement -> declaration .)
    VOLATILE        reduce using rule 244 (declaration_statement -> declaration .)
    INLINE          reduce using rule 244 (declaration_statement -> declaration .)
    VIRTUAL         reduce using rule 244 (declaration_statement -> declaration .)
    THIS            reduce using rule 244 (declaration_statement -> declaration .)
    CHAR            reduce using rule 244 (declaration_statement -> declaration .)
    SHORT           reduce using rule 244 (declaration_statement -> declaration .)
    INT             reduce using rule 244 (declaration_statement -> declaration .)
    LONG            reduce using rule 244 (declaration_statement -> declaration .)
    SIGNED          reduce using rule 244 (declaration_statement -> declaration .)
    UNSIGNED        reduce using rule 244 (declaration_statement -> declaration .)
    FLOAT           reduce using rule 244 (declaration_statement -> declaration .)
    DOUBLE          reduce using rule 244 (declaration_statement -> declaration .)
    VOID            reduce using rule 244 (declaration_statement -> declaration .)
    ENUM            reduce using rule 244 (declaration_statement -> declaration .)
    NUMBER          reduce using rule 244 (declaration_statement -> declaration .)
    STRING          reduce using rule 244 (declaration_statement -> declaration .)
    SCHAR           reduce using rule 244 (declaration_statement -> declaration .)
    CLASS           reduce using rule 244 (declaration_statement -> declaration .)
    STRUCT          reduce using rule 244 (declaration_statement -> declaration .)
    UNION           reduce using rule 244 (declaration_statement -> declaration .)
    OPERATOR        reduce using rule 244 (declaration_statement -> declaration .)
    ELSE            reduce using rule 244 (declaration_statement -> declaration .)


state 251

    (224) try_block -> TRY . compound_statement handler_list
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 85

    compound_statement             shift and go to state 414

state 252

    (60) expression -> assignment_expression .

    SEMICOLON       reduce using rule 60 (expression -> assignment_expression .)
    COMMA           reduce using rule 60 (expression -> assignment_expression .)
    RPAREN          reduce using rule 60 (expression -> assignment_expression .)
    GTCOMP          reduce using rule 60 (expression -> assignment_expression .)
    COLON           reduce using rule 60 (expression -> assignment_expression .)
    RSPAREN         reduce using rule 60 (expression -> assignment_expression .)


state 253

    (298) dname -> name .
    (140) primary_expression -> name .

  ! reduce/reduce conflict for LSPAREN resolved using rule 140 (primary_expression -> name .)
  ! reduce/reduce conflict for LPAREN resolved using rule 140 (primary_expression -> name .)
  ! reduce/reduce conflict for EQUAL resolved using rule 140 (primary_expression -> name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 140 (primary_expression -> name .)
  ! reduce/reduce conflict for COMMA resolved using rule 140 (primary_expression -> name .)
  ! reduce/reduce conflict for RPAREN resolved using rule 140 (primary_expression -> name .)
    COLON           reduce using rule 298 (dname -> name .)
    LCPAREN         reduce using rule 298 (dname -> name .)
    LSPAREN         reduce using rule 140 (primary_expression -> name .)
    LPAREN          reduce using rule 140 (primary_expression -> name .)
    DOT             reduce using rule 140 (primary_expression -> name .)
    ARROW           reduce using rule 140 (primary_expression -> name .)
    DPLUSOP         reduce using rule 140 (primary_expression -> name .)
    DMINUSOP        reduce using rule 140 (primary_expression -> name .)
    LTCOMP          reduce using rule 140 (primary_expression -> name .)
    EQUAL           reduce using rule 140 (primary_expression -> name .)
    MULTEQOP        reduce using rule 140 (primary_expression -> name .)
    DIVEQOP         reduce using rule 140 (primary_expression -> name .)
    MODEQOP         reduce using rule 140 (primary_expression -> name .)
    PLUSEQOP        reduce using rule 140 (primary_expression -> name .)
    MINUSEQOP       reduce using rule 140 (primary_expression -> name .)
    LSHIFTEQOP      reduce using rule 140 (primary_expression -> name .)
    RSHIFTEQOP      reduce using rule 140 (primary_expression -> name .)
    BANDEQOP        reduce using rule 140 (primary_expression -> name .)
    BOREQOP         reduce using rule 140 (primary_expression -> name .)
    DOTSTAR         reduce using rule 140 (primary_expression -> name .)
    ARROWSTAR       reduce using rule 140 (primary_expression -> name .)
    MULTOP          reduce using rule 140 (primary_expression -> name .)
    DIVOP           reduce using rule 140 (primary_expression -> name .)
    MODOP           reduce using rule 140 (primary_expression -> name .)
    PLUSOP          reduce using rule 140 (primary_expression -> name .)
    MINUSOP         reduce using rule 140 (primary_expression -> name .)
    LSHIFT          reduce using rule 140 (primary_expression -> name .)
    RSHIFT          reduce using rule 140 (primary_expression -> name .)
    GTCOMP          reduce using rule 140 (primary_expression -> name .)
    LTECOMP         reduce using rule 140 (primary_expression -> name .)
    GTECOMP         reduce using rule 140 (primary_expression -> name .)
    EQCOMP          reduce using rule 140 (primary_expression -> name .)
    NEQCOMP         reduce using rule 140 (primary_expression -> name .)
    BANDOP          reduce using rule 140 (primary_expression -> name .)
    XOROP           reduce using rule 140 (primary_expression -> name .)
    OROP            reduce using rule 140 (primary_expression -> name .)
    ANDOP           reduce using rule 140 (primary_expression -> name .)
    QUESMARK        reduce using rule 140 (primary_expression -> name .)
    SEMICOLON       reduce using rule 140 (primary_expression -> name .)
    COMMA           reduce using rule 140 (primary_expression -> name .)
    RPAREN          reduce using rule 140 (primary_expression -> name .)

  ! LPAREN          [ reduce using rule 298 (dname -> name .) ]
  ! LSPAREN         [ reduce using rule 298 (dname -> name .) ]
  ! EQUAL           [ reduce using rule 298 (dname -> name .) ]
  ! SEMICOLON       [ reduce using rule 298 (dname -> name .) ]
  ! COMMA           [ reduce using rule 298 (dname -> name .) ]
  ! RPAREN          [ reduce using rule 298 (dname -> name .) ]


state 254

    (117) unary_operator -> MULTOP .
    (393) ptr_operator -> MULTOP . cv_qualifier_list
    (394) ptr_operator -> MULTOP .
    (399) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (400) cv_qualifier_list -> . cv_qualifier
    (401) cv_qualifier -> . CONST
    (402) cv_qualifier -> . VOLATILE

  ! reduce/reduce conflict for LPAREN resolved using rule 117 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for BNOP resolved using rule 117 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for MULTOP resolved using rule 117 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for BANDOP resolved using rule 117 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 117 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 117 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 117 (unary_operator -> MULTOP .)
    LPAREN          reduce using rule 117 (unary_operator -> MULTOP .)
    DPLUSOP         reduce using rule 117 (unary_operator -> MULTOP .)
    DMINUSOP        reduce using rule 117 (unary_operator -> MULTOP .)
    SIZEOF          reduce using rule 117 (unary_operator -> MULTOP .)
    MULTOP          reduce using rule 117 (unary_operator -> MULTOP .)
    BANDOP          reduce using rule 117 (unary_operator -> MULTOP .)
    PLUSOP          reduce using rule 117 (unary_operator -> MULTOP .)
    MINUSOP         reduce using rule 117 (unary_operator -> MULTOP .)
    NOTSYM          reduce using rule 117 (unary_operator -> MULTOP .)
    BNOP            reduce using rule 117 (unary_operator -> MULTOP .)
    DOUBLECOLON     reduce using rule 117 (unary_operator -> MULTOP .)
    NEW             reduce using rule 117 (unary_operator -> MULTOP .)
    DELETE          reduce using rule 117 (unary_operator -> MULTOP .)
    THIS            reduce using rule 117 (unary_operator -> MULTOP .)
    CHAR            reduce using rule 117 (unary_operator -> MULTOP .)
    SHORT           reduce using rule 117 (unary_operator -> MULTOP .)
    INT             reduce using rule 117 (unary_operator -> MULTOP .)
    LONG            reduce using rule 117 (unary_operator -> MULTOP .)
    SIGNED          reduce using rule 117 (unary_operator -> MULTOP .)
    UNSIGNED        reduce using rule 117 (unary_operator -> MULTOP .)
    FLOAT           reduce using rule 117 (unary_operator -> MULTOP .)
    DOUBLE          reduce using rule 117 (unary_operator -> MULTOP .)
    VOID            reduce using rule 117 (unary_operator -> MULTOP .)
    NUMBER          reduce using rule 117 (unary_operator -> MULTOP .)
    STRING          reduce using rule 117 (unary_operator -> MULTOP .)
    SCHAR           reduce using rule 117 (unary_operator -> MULTOP .)
    IDENTIFIER      reduce using rule 117 (unary_operator -> MULTOP .)
    OPERATOR        reduce using rule 117 (unary_operator -> MULTOP .)
    CONST           shift and go to state 94
    VOLATILE        shift and go to state 95

  ! LPAREN          [ reduce using rule 394 (ptr_operator -> MULTOP .) ]
  ! BNOP            [ reduce using rule 394 (ptr_operator -> MULTOP .) ]
  ! MULTOP          [ reduce using rule 394 (ptr_operator -> MULTOP .) ]
  ! BANDOP          [ reduce using rule 394 (ptr_operator -> MULTOP .) ]
  ! IDENTIFIER      [ reduce using rule 394 (ptr_operator -> MULTOP .) ]
  ! DOUBLECOLON     [ reduce using rule 394 (ptr_operator -> MULTOP .) ]
  ! OPERATOR        [ reduce using rule 394 (ptr_operator -> MULTOP .) ]

    cv_qualifier_list              shift and go to state 92
    cv_qualifier                   shift and go to state 93

state 255

    (118) unary_operator -> BANDOP .
    (395) ptr_operator -> BANDOP . cv_qualifier_list
    (396) ptr_operator -> BANDOP .
    (399) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (400) cv_qualifier_list -> . cv_qualifier
    (401) cv_qualifier -> . CONST
    (402) cv_qualifier -> . VOLATILE

  ! reduce/reduce conflict for LPAREN resolved using rule 118 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for BNOP resolved using rule 118 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for MULTOP resolved using rule 118 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for BANDOP resolved using rule 118 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 118 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 118 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 118 (unary_operator -> BANDOP .)
    LPAREN          reduce using rule 118 (unary_operator -> BANDOP .)
    DPLUSOP         reduce using rule 118 (unary_operator -> BANDOP .)
    DMINUSOP        reduce using rule 118 (unary_operator -> BANDOP .)
    SIZEOF          reduce using rule 118 (unary_operator -> BANDOP .)
    MULTOP          reduce using rule 118 (unary_operator -> BANDOP .)
    BANDOP          reduce using rule 118 (unary_operator -> BANDOP .)
    PLUSOP          reduce using rule 118 (unary_operator -> BANDOP .)
    MINUSOP         reduce using rule 118 (unary_operator -> BANDOP .)
    NOTSYM          reduce using rule 118 (unary_operator -> BANDOP .)
    BNOP            reduce using rule 118 (unary_operator -> BANDOP .)
    DOUBLECOLON     reduce using rule 118 (unary_operator -> BANDOP .)
    NEW             reduce using rule 118 (unary_operator -> BANDOP .)
    DELETE          reduce using rule 118 (unary_operator -> BANDOP .)
    THIS            reduce using rule 118 (unary_operator -> BANDOP .)
    CHAR            reduce using rule 118 (unary_operator -> BANDOP .)
    SHORT           reduce using rule 118 (unary_operator -> BANDOP .)
    INT             reduce using rule 118 (unary_operator -> BANDOP .)
    LONG            reduce using rule 118 (unary_operator -> BANDOP .)
    SIGNED          reduce using rule 118 (unary_operator -> BANDOP .)
    UNSIGNED        reduce using rule 118 (unary_operator -> BANDOP .)
    FLOAT           reduce using rule 118 (unary_operator -> BANDOP .)
    DOUBLE          reduce using rule 118 (unary_operator -> BANDOP .)
    VOID            reduce using rule 118 (unary_operator -> BANDOP .)
    NUMBER          reduce using rule 118 (unary_operator -> BANDOP .)
    STRING          reduce using rule 118 (unary_operator -> BANDOP .)
    SCHAR           reduce using rule 118 (unary_operator -> BANDOP .)
    IDENTIFIER      reduce using rule 118 (unary_operator -> BANDOP .)
    OPERATOR        reduce using rule 118 (unary_operator -> BANDOP .)
    CONST           shift and go to state 94
    VOLATILE        shift and go to state 95

  ! LPAREN          [ reduce using rule 396 (ptr_operator -> BANDOP .) ]
  ! BNOP            [ reduce using rule 396 (ptr_operator -> BANDOP .) ]
  ! MULTOP          [ reduce using rule 396 (ptr_operator -> BANDOP .) ]
  ! BANDOP          [ reduce using rule 396 (ptr_operator -> BANDOP .) ]
  ! IDENTIFIER      [ reduce using rule 396 (ptr_operator -> BANDOP .) ]
  ! DOUBLECOLON     [ reduce using rule 396 (ptr_operator -> BANDOP .) ]
  ! OPERATOR        [ reduce using rule 396 (ptr_operator -> BANDOP .) ]

    cv_qualifier_list              shift and go to state 96
    cv_qualifier                   shift and go to state 93

state 256

    (122) unary_operator -> BNOP .
    (300) dname -> BNOP . class_name
    (306) name -> BNOP . class_name
    (407) class_name -> . IDENTIFIER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LPAREN          reduce using rule 122 (unary_operator -> BNOP .)
    DPLUSOP         reduce using rule 122 (unary_operator -> BNOP .)
    DMINUSOP        reduce using rule 122 (unary_operator -> BNOP .)
    SIZEOF          reduce using rule 122 (unary_operator -> BNOP .)
    MULTOP          reduce using rule 122 (unary_operator -> BNOP .)
    BANDOP          reduce using rule 122 (unary_operator -> BNOP .)
    PLUSOP          reduce using rule 122 (unary_operator -> BNOP .)
    MINUSOP         reduce using rule 122 (unary_operator -> BNOP .)
    NOTSYM          reduce using rule 122 (unary_operator -> BNOP .)
    BNOP            reduce using rule 122 (unary_operator -> BNOP .)
    DOUBLECOLON     reduce using rule 122 (unary_operator -> BNOP .)
    NEW             reduce using rule 122 (unary_operator -> BNOP .)
    DELETE          reduce using rule 122 (unary_operator -> BNOP .)
    THIS            reduce using rule 122 (unary_operator -> BNOP .)
    CHAR            reduce using rule 122 (unary_operator -> BNOP .)
    SHORT           reduce using rule 122 (unary_operator -> BNOP .)
    INT             reduce using rule 122 (unary_operator -> BNOP .)
    LONG            reduce using rule 122 (unary_operator -> BNOP .)
    SIGNED          reduce using rule 122 (unary_operator -> BNOP .)
    UNSIGNED        reduce using rule 122 (unary_operator -> BNOP .)
    FLOAT           reduce using rule 122 (unary_operator -> BNOP .)
    DOUBLE          reduce using rule 122 (unary_operator -> BNOP .)
    VOID            reduce using rule 122 (unary_operator -> BNOP .)
    NUMBER          reduce using rule 122 (unary_operator -> BNOP .)
    STRING          reduce using rule 122 (unary_operator -> BNOP .)
    SCHAR           reduce using rule 122 (unary_operator -> BNOP .)
    OPERATOR        reduce using rule 122 (unary_operator -> BNOP .)
    IDENTIFIER      shift and go to state 91

  ! IDENTIFIER      [ reduce using rule 122 (unary_operator -> BNOP .) ]

    class_name                     shift and go to state 90

state 257

    (252) template_declaration -> TEMPLATE LTCOMP template_argument_list . GTCOMP declaration
    (254) template_argument_list -> template_argument_list . COMMA template_argument

    GTCOMP          shift and go to state 415
    COMMA           shift and go to state 416


state 258

    (253) template_argument_list -> template_argument .

    GTCOMP          reduce using rule 253 (template_argument_list -> template_argument .)
    COMMA           reduce using rule 253 (template_argument_list -> template_argument .)


state 259

    (255) template_argument -> type_argument .

    GTCOMP          reduce using rule 255 (template_argument -> type_argument .)
    COMMA           reduce using rule 255 (template_argument -> type_argument .)


state 260

    (256) template_argument -> argument_declaration .

    GTCOMP          reduce using rule 256 (template_argument -> argument_declaration .)
    COMMA           reduce using rule 256 (template_argument -> argument_declaration .)


state 261

    (257) type_argument -> CLASS . IDENTIFIER
    (375) class_key -> CLASS .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 417
    COLON           reduce using rule 375 (class_key -> CLASS .)
    LCPAREN         reduce using rule 375 (class_key -> CLASS .)

  ! IDENTIFIER      [ reduce using rule 375 (class_key -> CLASS .) ]


state 262

    (271) linkage_specification -> EXTERN STRING LCPAREN . declaration_list RCPAREN
    (272) linkage_specification -> EXTERN STRING LCPAREN . RCPAREN
    (274) declaration_list -> . declaration
    (275) declaration_list -> . declaration_list declaration
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    RCPAREN         shift and go to state 419
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 14
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    declaration_list               shift and go to state 418
    declaration                    shift and go to state 420
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59

state 263

    (273) linkage_specification -> EXTERN STRING declaration .

    ASM             reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    TEMPLATE        reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    EXTERN          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    TYPEDEF         reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    LPAREN          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    AUTO            reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    STATIC          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    CONST           reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    VOLATILE        reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    INLINE          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    VIRTUAL         reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    BNOP            reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    MULTOP          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    BANDOP          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    CHAR            reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    SHORT           reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    INT             reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    LONG            reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    SIGNED          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    UNSIGNED        reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    FLOAT           reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    DOUBLE          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    VOID            reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    ENUM            reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    IDENTIFIER      reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    DOUBLECOLON     reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    CLASS           reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    STRUCT          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    UNION           reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    OPERATOR        reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    $end            reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    RCPAREN         reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    CASE            reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    DEFAULT         reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    SEMICOLON       reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    LCPAREN         reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    IF              reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    SWITCH          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    WHILE           reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    DO              reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    FOR             reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    BREAK           reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    CONTINUE        reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    RETURN          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    GOTO            reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    TRY             reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    DPLUSOP         reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    DMINUSOP        reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    SIZEOF          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    PLUSOP          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    MINUSOP         reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    NOTSYM          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    NEW             reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    DELETE          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    THIS            reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    NUMBER          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    STRING          reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    SCHAR           reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)
    ELSE            reduce using rule 273 (linkage_specification -> EXTERN STRING declaration .)


state 264

    (391) qualified_type_name -> class_name DOUBLECOLON qualified_type_name .

    LPAREN          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    LSPAREN         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    COLON           reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    EQUAL           reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    LCPAREN         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    SEMICOLON       reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    COMMA           reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    TYPEDEF         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    AUTO            reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    STATIC          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    EXTERN          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    CONST           reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    VOLATILE        reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    INLINE          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    VIRTUAL         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    BNOP            reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    MULTOP          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    BANDOP          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    CHAR            reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    SHORT           reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    INT             reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    LONG            reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    SIGNED          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    UNSIGNED        reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    FLOAT           reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DOUBLE          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    VOID            reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    ENUM            reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    IDENTIFIER      reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DOUBLECOLON     reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    CLASS           reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    STRUCT          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    UNION           reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    TEMPLATE        reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    OPERATOR        reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    RPAREN          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DOT             reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    ARROW           reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DPLUSOP         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DMINUSOP        reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    LTCOMP          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    MULTEQOP        reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DIVEQOP         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    MODEQOP         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    PLUSEQOP        reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    MINUSEQOP       reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    LSHIFTEQOP      reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    RSHIFTEQOP      reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    BANDEQOP        reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    BOREQOP         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DOTSTAR         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    ARROWSTAR       reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    DIVOP           reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    MODOP           reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    PLUSOP          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    MINUSOP         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    LSHIFT          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    RSHIFT          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    GTCOMP          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    LTECOMP         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    GTECOMP         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    EQCOMP          reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    NEQCOMP         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    XOROP           reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    OROP            reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    ANDOP           reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    QUESMARK        reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    RSPAREN         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)
    RCPAREN         reduce using rule 391 (qualified_type_name -> class_name DOUBLECOLON qualified_type_name .)


state 265

    (406) qualified_class_name -> class_name DOUBLECOLON qualified_class_name .

    DOUBLECOLON     reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    SEMICOLON       reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    TYPEDEF         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LPAREN          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    AUTO            reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    STATIC          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    EXTERN          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    CONST           reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    VOLATILE        reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    INLINE          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    VIRTUAL         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    BNOP            reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    MULTOP          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    BANDOP          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    CHAR            reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    SHORT           reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    INT             reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LONG            reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    SIGNED          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    UNSIGNED        reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    FLOAT           reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    DOUBLE          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    VOID            reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    ENUM            reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    IDENTIFIER      reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    CLASS           reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    STRUCT          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    UNION           reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    TEMPLATE        reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    OPERATOR        reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LSPAREN         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    COLON           reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    EQUAL           reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LCPAREN         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    COMMA           reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    RPAREN          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    DOT             reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    ARROW           reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    DPLUSOP         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    DMINUSOP        reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LTCOMP          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    MULTEQOP        reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    DIVEQOP         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    MODEQOP         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    PLUSEQOP        reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    MINUSEQOP       reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LSHIFTEQOP      reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    RSHIFTEQOP      reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    BANDEQOP        reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    BOREQOP         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    DOTSTAR         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    ARROWSTAR       reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    DIVOP           reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    MODOP           reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    PLUSOP          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    MINUSOP         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LSHIFT          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    RSHIFT          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    GTCOMP          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    LTECOMP         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    GTECOMP         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    EQCOMP          reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    NEQCOMP         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    XOROP           reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    OROP            reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    ANDOP           reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    QUESMARK        reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    RSPAREN         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)
    RCPAREN         reduce using rule 406 (qualified_class_name -> class_name DOUBLECOLON qualified_class_name .)


state 266

    (399) cv_qualifier_list -> cv_qualifier cv_qualifier_list .

    LPAREN          reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    BNOP            reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    MULTOP          reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    BANDOP          reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    IDENTIFIER      reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    DOUBLECOLON     reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    OPERATOR        reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    LSPAREN         reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    COLON           reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    EQUAL           reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    LCPAREN         reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    SEMICOLON       reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    COMMA           reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    RPAREN          reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    DOT             reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    ARROW           reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    DPLUSOP         reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    DMINUSOP        reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    LTCOMP          reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    MULTEQOP        reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    DIVEQOP         reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    MODEQOP         reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    PLUSEQOP        reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    MINUSEQOP       reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    LSHIFTEQOP      reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    RSHIFTEQOP      reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    BANDEQOP        reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    BOREQOP         reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    DOTSTAR         reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    ARROWSTAR       reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    DIVOP           reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    MODOP           reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    PLUSOP          reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    MINUSOP         reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    LSHIFT          reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    RSHIFT          reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    GTCOMP          reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    LTECOMP         reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    GTECOMP         reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    EQCOMP          reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    NEQCOMP         reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    XOROP           reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    OROP            reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    ANDOP           reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    QUESMARK        reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    RSPAREN         reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)
    RCPAREN         reduce using rule 399 (cv_qualifier_list -> cv_qualifier cv_qualifier_list .)


state 267

    (397) ptr_operator -> complete_class_name DOUBLECOLON MULTOP . cv_qualifier_list
    (398) ptr_operator -> complete_class_name DOUBLECOLON MULTOP .
    (399) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (400) cv_qualifier_list -> . cv_qualifier
    (401) cv_qualifier -> . CONST
    (402) cv_qualifier -> . VOLATILE

    LPAREN          reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    BNOP            reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    MULTOP          reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    BANDOP          reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    IDENTIFIER      reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    DOUBLECOLON     reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    OPERATOR        reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    LSPAREN         reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    COLON           reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    EQUAL           reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    LCPAREN         reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    SEMICOLON       reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    COMMA           reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    RPAREN          reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    DOT             reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    ARROW           reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    DPLUSOP         reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    DMINUSOP        reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    LTCOMP          reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    MULTEQOP        reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    DIVEQOP         reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    MODEQOP         reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    PLUSEQOP        reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    MINUSEQOP       reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    LSHIFTEQOP      reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    RSHIFTEQOP      reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    BANDEQOP        reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    BOREQOP         reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    DOTSTAR         reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    ARROWSTAR       reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    DIVOP           reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    MODOP           reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    PLUSOP          reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    MINUSOP         reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    LSHIFT          reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    RSHIFT          reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    GTCOMP          reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    LTECOMP         reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    GTECOMP         reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    EQCOMP          reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    NEQCOMP         reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    XOROP           reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    OROP            reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    ANDOP           reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    QUESMARK        reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    RSPAREN         reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    RCPAREN         reduce using rule 398 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP .)
    CONST           shift and go to state 94
    VOLATILE        shift and go to state 95

    cv_qualifier_list              shift and go to state 421
    cv_qualifier                   shift and go to state 93

state 268

    (406) qualified_class_name -> class_name DOUBLECOLON . qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 91

    class_name                     shift and go to state 99
    qualified_class_name           shift and go to state 265

state 269

    (186) class_specifier -> class_head LCPAREN member_list . RCPAREN

    RCPAREN         shift and go to state 422


state 270

    (187) class_specifier -> class_head LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    LPAREN          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    AUTO            reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    STATIC          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    EXTERN          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    CONST           reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    INLINE          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    BNOP            reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    MULTOP          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    BANDOP          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    CHAR            reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    SHORT           reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    INT             reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    LONG            reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    SIGNED          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    FLOAT           reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    VOID            reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    ENUM            reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    DOUBLECOLON     reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    CLASS           reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    STRUCT          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    UNION           reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    LSPAREN         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    COLON           reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    EQUAL           reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    COMMA           reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    RPAREN          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    DOT             reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    ARROW           reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    LTCOMP          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    MULTEQOP        reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    DIVEQOP         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    MODEQOP         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    PLUSEQOP        reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    MINUSEQOP       reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    LSHIFTEQOP      reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    RSHIFTEQOP      reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    BANDEQOP        reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    BOREQOP         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    DOTSTAR         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    ARROWSTAR       reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    DIVOP           reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    MODOP           reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    LSHIFT          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    RSHIFT          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    GTCOMP          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    LTECOMP         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    GTECOMP         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    EQCOMP          reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    NEQCOMP         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    XOROP           reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    OROP            reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    ANDOP           reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    QUESMARK        reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    RSPAREN         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 187 (class_specifier -> class_head LCPAREN RCPAREN .)


state 271

    (188) member_list -> member_declaration . member_list
    (189) member_list -> member_declaration .
    (188) member_list -> . member_declaration member_list
    (189) member_list -> . member_declaration
    (190) member_list -> . access_specifier COLON member_list
    (191) member_list -> . access_specifier COLON
    (192) member_declaration -> . decl_specifiers member_declarator_list SEMICOLON
    (193) member_declaration -> . member_declarator_list SEMICOLON
    (194) member_declaration -> . decl_specifiers SEMICOLON
    (195) member_declaration -> . SEMICOLON
    (196) member_declaration -> . function_definition SEMICOLON
    (197) member_declaration -> . function_definition
    (198) member_declaration -> . qualified_name SEMICOLON
    (368) access_specifier -> . PRIVATE
    (369) access_specifier -> . PROTECTED
    (370) access_specifier -> . PUBLIC
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (285) member_declarator_list -> . member_declarator
    (286) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (287) member_declarator -> . declarator pure_specifier
    (288) member_declarator -> . declarator
    (289) member_declarator -> . IDENTIFIER COLON constant_expression
    (290) member_declarator -> . COLON constant_expression
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (407) class_name -> . IDENTIFIER
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name

    RCPAREN         reduce using rule 189 (member_list -> member_declaration .)
    SEMICOLON       shift and go to state 276
    PRIVATE         shift and go to state 279
    PROTECTED       shift and go to state 280
    PUBLIC          shift and go to state 281
    TYPEDEF         shift and go to state 21
    IDENTIFIER      shift and go to state 285
    COLON           shift and go to state 273
    LPAREN          shift and go to state 14
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 69
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    OPERATOR        shift and go to state 63

    member_declaration             shift and go to state 271
    member_list                    shift and go to state 423
    access_specifier               shift and go to state 272
    decl_specifiers                shift and go to state 274
    member_declarator_list         shift and go to state 275
    function_definition            shift and go to state 277
    qualified_name                 shift and go to state 278
    decl_specifier                 shift and go to state 11
    member_declarator              shift and go to state 282
    declarator                     shift and go to state 283
    qualified_class_name           shift and go to state 284
    name                           shift and go to state 34
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    class_name                     shift and go to state 286
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57

state 272

    (190) member_list -> access_specifier . COLON member_list
    (191) member_list -> access_specifier . COLON

    COLON           shift and go to state 424


state 273

    (290) member_declarator -> COLON . constant_expression
    (26) constant_expression -> . conditional_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    constant_expression            shift and go to state 425
    conditional_expression         shift and go to state 214
    logical_OR_expression          shift and go to state 175
    logical_AND_expression         shift and go to state 184
    inclusive_OR_expression        shift and go to state 197
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 274

    (192) member_declaration -> decl_specifiers . member_declarator_list SEMICOLON
    (194) member_declaration -> decl_specifiers . SEMICOLON
    (169) decl_specifiers -> decl_specifiers . decl_specifier
    (199) function_definition -> decl_specifiers . declarator ctor_initializer fct_body
    (201) function_definition -> decl_specifiers . declarator fct_body
    (285) member_declarator_list -> . member_declarator
    (286) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (287) member_declarator -> . declarator pure_specifier
    (288) member_declarator -> . declarator
    (289) member_declarator -> . IDENTIFIER COLON constant_expression
    (290) member_declarator -> . COLON constant_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    SEMICOLON       shift and go to state 427
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 14
    IDENTIFIER      shift and go to state 429
    COLON           shift and go to state 273
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 69
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    OPERATOR        shift and go to state 63

    member_declarator_list         shift and go to state 426
    decl_specifier                 shift and go to state 67
    declarator                     shift and go to state 428
    member_declarator              shift and go to state 282
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59

state 275

    (193) member_declaration -> member_declarator_list . SEMICOLON
    (286) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 430
    COMMA           shift and go to state 431


state 276

    (195) member_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 195 (member_declaration -> SEMICOLON .)
    PRIVATE         reduce using rule 195 (member_declaration -> SEMICOLON .)
    PROTECTED       reduce using rule 195 (member_declaration -> SEMICOLON .)
    PUBLIC          reduce using rule 195 (member_declaration -> SEMICOLON .)
    TYPEDEF         reduce using rule 195 (member_declaration -> SEMICOLON .)
    IDENTIFIER      reduce using rule 195 (member_declaration -> SEMICOLON .)
    COLON           reduce using rule 195 (member_declaration -> SEMICOLON .)
    LPAREN          reduce using rule 195 (member_declaration -> SEMICOLON .)
    AUTO            reduce using rule 195 (member_declaration -> SEMICOLON .)
    STATIC          reduce using rule 195 (member_declaration -> SEMICOLON .)
    EXTERN          reduce using rule 195 (member_declaration -> SEMICOLON .)
    CONST           reduce using rule 195 (member_declaration -> SEMICOLON .)
    VOLATILE        reduce using rule 195 (member_declaration -> SEMICOLON .)
    INLINE          reduce using rule 195 (member_declaration -> SEMICOLON .)
    VIRTUAL         reduce using rule 195 (member_declaration -> SEMICOLON .)
    BNOP            reduce using rule 195 (member_declaration -> SEMICOLON .)
    MULTOP          reduce using rule 195 (member_declaration -> SEMICOLON .)
    BANDOP          reduce using rule 195 (member_declaration -> SEMICOLON .)
    CHAR            reduce using rule 195 (member_declaration -> SEMICOLON .)
    SHORT           reduce using rule 195 (member_declaration -> SEMICOLON .)
    INT             reduce using rule 195 (member_declaration -> SEMICOLON .)
    LONG            reduce using rule 195 (member_declaration -> SEMICOLON .)
    SIGNED          reduce using rule 195 (member_declaration -> SEMICOLON .)
    UNSIGNED        reduce using rule 195 (member_declaration -> SEMICOLON .)
    FLOAT           reduce using rule 195 (member_declaration -> SEMICOLON .)
    DOUBLE          reduce using rule 195 (member_declaration -> SEMICOLON .)
    VOID            reduce using rule 195 (member_declaration -> SEMICOLON .)
    ENUM            reduce using rule 195 (member_declaration -> SEMICOLON .)
    DOUBLECOLON     reduce using rule 195 (member_declaration -> SEMICOLON .)
    CLASS           reduce using rule 195 (member_declaration -> SEMICOLON .)
    STRUCT          reduce using rule 195 (member_declaration -> SEMICOLON .)
    UNION           reduce using rule 195 (member_declaration -> SEMICOLON .)
    TEMPLATE        reduce using rule 195 (member_declaration -> SEMICOLON .)
    OPERATOR        reduce using rule 195 (member_declaration -> SEMICOLON .)
    RCPAREN         reduce using rule 195 (member_declaration -> SEMICOLON .)


state 277

    (196) member_declaration -> function_definition . SEMICOLON
    (197) member_declaration -> function_definition .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 432
    PRIVATE         reduce using rule 197 (member_declaration -> function_definition .)
    PROTECTED       reduce using rule 197 (member_declaration -> function_definition .)
    PUBLIC          reduce using rule 197 (member_declaration -> function_definition .)
    TYPEDEF         reduce using rule 197 (member_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 197 (member_declaration -> function_definition .)
    COLON           reduce using rule 197 (member_declaration -> function_definition .)
    LPAREN          reduce using rule 197 (member_declaration -> function_definition .)
    AUTO            reduce using rule 197 (member_declaration -> function_definition .)
    STATIC          reduce using rule 197 (member_declaration -> function_definition .)
    EXTERN          reduce using rule 197 (member_declaration -> function_definition .)
    CONST           reduce using rule 197 (member_declaration -> function_definition .)
    VOLATILE        reduce using rule 197 (member_declaration -> function_definition .)
    INLINE          reduce using rule 197 (member_declaration -> function_definition .)
    VIRTUAL         reduce using rule 197 (member_declaration -> function_definition .)
    BNOP            reduce using rule 197 (member_declaration -> function_definition .)
    MULTOP          reduce using rule 197 (member_declaration -> function_definition .)
    BANDOP          reduce using rule 197 (member_declaration -> function_definition .)
    CHAR            reduce using rule 197 (member_declaration -> function_definition .)
    SHORT           reduce using rule 197 (member_declaration -> function_definition .)
    INT             reduce using rule 197 (member_declaration -> function_definition .)
    LONG            reduce using rule 197 (member_declaration -> function_definition .)
    SIGNED          reduce using rule 197 (member_declaration -> function_definition .)
    UNSIGNED        reduce using rule 197 (member_declaration -> function_definition .)
    FLOAT           reduce using rule 197 (member_declaration -> function_definition .)
    DOUBLE          reduce using rule 197 (member_declaration -> function_definition .)
    VOID            reduce using rule 197 (member_declaration -> function_definition .)
    ENUM            reduce using rule 197 (member_declaration -> function_definition .)
    DOUBLECOLON     reduce using rule 197 (member_declaration -> function_definition .)
    CLASS           reduce using rule 197 (member_declaration -> function_definition .)
    STRUCT          reduce using rule 197 (member_declaration -> function_definition .)
    UNION           reduce using rule 197 (member_declaration -> function_definition .)
    TEMPLATE        reduce using rule 197 (member_declaration -> function_definition .)
    OPERATOR        reduce using rule 197 (member_declaration -> function_definition .)
    RCPAREN         reduce using rule 197 (member_declaration -> function_definition .)

  ! SEMICOLON       [ reduce using rule 197 (member_declaration -> function_definition .) ]


state 278

    (198) member_declaration -> qualified_name . SEMICOLON
    (307) name -> qualified_name .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 433
    LPAREN          reduce using rule 307 (name -> qualified_name .)
    LSPAREN         reduce using rule 307 (name -> qualified_name .)
    COLON           reduce using rule 307 (name -> qualified_name .)
    EQUAL           reduce using rule 307 (name -> qualified_name .)
    LCPAREN         reduce using rule 307 (name -> qualified_name .)
    COMMA           reduce using rule 307 (name -> qualified_name .)

  ! SEMICOLON       [ reduce using rule 307 (name -> qualified_name .) ]


state 279

    (368) access_specifier -> PRIVATE .

    COLON           reduce using rule 368 (access_specifier -> PRIVATE .)
    VIRTUAL         reduce using rule 368 (access_specifier -> PRIVATE .)
    DOUBLECOLON     reduce using rule 368 (access_specifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 368 (access_specifier -> PRIVATE .)


state 280

    (369) access_specifier -> PROTECTED .

    COLON           reduce using rule 369 (access_specifier -> PROTECTED .)
    VIRTUAL         reduce using rule 369 (access_specifier -> PROTECTED .)
    DOUBLECOLON     reduce using rule 369 (access_specifier -> PROTECTED .)
    IDENTIFIER      reduce using rule 369 (access_specifier -> PROTECTED .)


state 281

    (370) access_specifier -> PUBLIC .

    COLON           reduce using rule 370 (access_specifier -> PUBLIC .)
    VIRTUAL         reduce using rule 370 (access_specifier -> PUBLIC .)
    DOUBLECOLON     reduce using rule 370 (access_specifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 370 (access_specifier -> PUBLIC .)


state 282

    (285) member_declarator_list -> member_declarator .

    SEMICOLON       reduce using rule 285 (member_declarator_list -> member_declarator .)
    COMMA           reduce using rule 285 (member_declarator_list -> member_declarator .)


state 283

    (200) function_definition -> declarator . ctor_initializer fct_body
    (202) function_definition -> declarator . fct_body
    (287) member_declarator -> declarator . pure_specifier
    (288) member_declarator -> declarator .
    (293) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (295) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (296) declarator -> declarator . LSPAREN RSPAREN
    (276) ctor_initializer -> . COLON mem_initializer_list
    (203) fct_body -> . compound_statement
    (353) pure_specifier -> . EQUAL NUMBER
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN

    SEMICOLON       reduce using rule 288 (member_declarator -> declarator .)
    COMMA           reduce using rule 288 (member_declarator -> declarator .)
    LPAREN          shift and go to state 163
    LSPAREN         shift and go to state 81
    COLON           shift and go to state 82
    EQUAL           shift and go to state 435
    LCPAREN         shift and go to state 85

    ctor_initializer               shift and go to state 77
    fct_body                       shift and go to state 78
    pure_specifier                 shift and go to state 434
    compound_statement             shift and go to state 83

state 284

    (308) qualified_name -> qualified_class_name . DOUBLECOLON name
    (403) complete_class_name -> qualified_class_name .

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    DOUBLECOLON     shift and go to state 108
    SEMICOLON       reduce using rule 403 (complete_class_name -> qualified_class_name .)
    TYPEDEF         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    LPAREN          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    IDENTIFIER      reduce using rule 403 (complete_class_name -> qualified_class_name .)
    COLON           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    AUTO            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    STATIC          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    EXTERN          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    CONST           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    VOLATILE        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    INLINE          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    VIRTUAL         reduce using rule 403 (complete_class_name -> qualified_class_name .)
    BNOP            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    MULTOP          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    BANDOP          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    CHAR            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    SHORT           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    INT             reduce using rule 403 (complete_class_name -> qualified_class_name .)
    LONG            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    SIGNED          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    UNSIGNED        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    FLOAT           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    DOUBLE          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    VOID            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    ENUM            reduce using rule 403 (complete_class_name -> qualified_class_name .)
    CLASS           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    STRUCT          reduce using rule 403 (complete_class_name -> qualified_class_name .)
    UNION           reduce using rule 403 (complete_class_name -> qualified_class_name .)
    TEMPLATE        reduce using rule 403 (complete_class_name -> qualified_class_name .)
    OPERATOR        reduce using rule 403 (complete_class_name -> qualified_class_name .)

  ! DOUBLECOLON     [ reduce using rule 403 (complete_class_name -> qualified_class_name .) ]


state 285

    (289) member_declarator -> IDENTIFIER . COLON constant_expression
    (407) class_name -> IDENTIFIER .
    (303) name -> IDENTIFIER .
    (392) typedef_name -> IDENTIFIER .

  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TEMPLATE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 392 (typedef_name -> IDENTIFIER .)
    COLON           shift and go to state 436
    LPAREN          reduce using rule 303 (name -> IDENTIFIER .)
    LSPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 303 (name -> IDENTIFIER .)
    LCPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 303 (name -> IDENTIFIER .)
    COMMA           reduce using rule 303 (name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 392 (typedef_name -> IDENTIFIER .)
    AUTO            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STATIC          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    EXTERN          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CONST           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INLINE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    BNOP            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    MULTOP          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    BANDOP          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CHAR            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SHORT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INT             reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LONG            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SIGNED          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    FLOAT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOID            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    ENUM            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CLASS           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STRUCT          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNION           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    TEMPLATE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 392 (typedef_name -> IDENTIFIER .)

  ! DOUBLECOLON     [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TEMPLATE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 303 (name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]


state 286

    (405) qualified_class_name -> class_name .
    (406) qualified_class_name -> class_name . DOUBLECOLON qualified_class_name
    (299) dname -> class_name .
    (391) qualified_type_name -> class_name . DOUBLECOLON qualified_type_name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 299 (dname -> class_name .)
  ! reduce/reduce conflict for COLON resolved using rule 299 (dname -> class_name .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 299 (dname -> class_name .)
    TYPEDEF         reduce using rule 405 (qualified_class_name -> class_name .)
    IDENTIFIER      reduce using rule 405 (qualified_class_name -> class_name .)
    AUTO            reduce using rule 405 (qualified_class_name -> class_name .)
    STATIC          reduce using rule 405 (qualified_class_name -> class_name .)
    EXTERN          reduce using rule 405 (qualified_class_name -> class_name .)
    CONST           reduce using rule 405 (qualified_class_name -> class_name .)
    VOLATILE        reduce using rule 405 (qualified_class_name -> class_name .)
    INLINE          reduce using rule 405 (qualified_class_name -> class_name .)
    VIRTUAL         reduce using rule 405 (qualified_class_name -> class_name .)
    BNOP            reduce using rule 405 (qualified_class_name -> class_name .)
    MULTOP          reduce using rule 405 (qualified_class_name -> class_name .)
    BANDOP          reduce using rule 405 (qualified_class_name -> class_name .)
    CHAR            reduce using rule 405 (qualified_class_name -> class_name .)
    SHORT           reduce using rule 405 (qualified_class_name -> class_name .)
    INT             reduce using rule 405 (qualified_class_name -> class_name .)
    LONG            reduce using rule 405 (qualified_class_name -> class_name .)
    SIGNED          reduce using rule 405 (qualified_class_name -> class_name .)
    UNSIGNED        reduce using rule 405 (qualified_class_name -> class_name .)
    FLOAT           reduce using rule 405 (qualified_class_name -> class_name .)
    DOUBLE          reduce using rule 405 (qualified_class_name -> class_name .)
    VOID            reduce using rule 405 (qualified_class_name -> class_name .)
    ENUM            reduce using rule 405 (qualified_class_name -> class_name .)
    CLASS           reduce using rule 405 (qualified_class_name -> class_name .)
    STRUCT          reduce using rule 405 (qualified_class_name -> class_name .)
    UNION           reduce using rule 405 (qualified_class_name -> class_name .)
    TEMPLATE        reduce using rule 405 (qualified_class_name -> class_name .)
    OPERATOR        reduce using rule 405 (qualified_class_name -> class_name .)
    DOUBLECOLON     shift and go to state 437
    LPAREN          reduce using rule 299 (dname -> class_name .)
    LSPAREN         reduce using rule 299 (dname -> class_name .)
    COLON           reduce using rule 299 (dname -> class_name .)
    EQUAL           reduce using rule 299 (dname -> class_name .)
    LCPAREN         reduce using rule 299 (dname -> class_name .)
    SEMICOLON       reduce using rule 299 (dname -> class_name .)
    COMMA           reduce using rule 299 (dname -> class_name .)

  ! DOUBLECOLON     [ reduce using rule 405 (qualified_class_name -> class_name .) ]
  ! SEMICOLON       [ reduce using rule 405 (qualified_class_name -> class_name .) ]
  ! LPAREN          [ reduce using rule 405 (qualified_class_name -> class_name .) ]
  ! COLON           [ reduce using rule 405 (qualified_class_name -> class_name .) ]


state 287

    (18) enum_specifier -> ENUM IDENTIFIER LCPAREN . enum_list RCPAREN
    (20) enum_specifier -> ENUM IDENTIFIER LCPAREN . RCPAREN
    (22) enum_list -> . enumerator
    (23) enum_list -> . enum_list COMMA enumerator
    (24) enumerator -> . IDENTIFIER
    (25) enumerator -> . IDENTIFIER EQUAL constant_expression

    RCPAREN         shift and go to state 439
    IDENTIFIER      shift and go to state 291

    enum_list                      shift and go to state 438
    enumerator                     shift and go to state 290

state 288

    (19) enum_specifier -> ENUM LCPAREN enum_list . RCPAREN
    (23) enum_list -> enum_list . COMMA enumerator

    RCPAREN         shift and go to state 440
    COMMA           shift and go to state 441


state 289

    (21) enum_specifier -> ENUM LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LPAREN          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    AUTO            reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    STATIC          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    EXTERN          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    CONST           reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    INLINE          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BNOP            reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MULTOP          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BANDOP          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    CHAR            reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    SHORT           reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    INT             reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LONG            reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    SIGNED          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    FLOAT           reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    VOID            reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    ENUM            reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DOUBLECOLON     reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    CLASS           reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    STRUCT          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    UNION           reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LSPAREN         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    COLON           reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    EQUAL           reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    COMMA           reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RPAREN          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DOT             reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    ARROW           reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LTCOMP          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MULTEQOP        reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DIVEQOP         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MODEQOP         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    PLUSEQOP        reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MINUSEQOP       reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LSHIFTEQOP      reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RSHIFTEQOP      reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BANDEQOP        reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    BOREQOP         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DOTSTAR         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    ARROWSTAR       reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    DIVOP           reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MODOP           reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LSHIFT          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RSHIFT          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    GTCOMP          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    LTECOMP         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    GTECOMP         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    EQCOMP          reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    NEQCOMP         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    XOROP           reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    OROP            reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    ANDOP           reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    QUESMARK        reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RSPAREN         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 21 (enum_specifier -> ENUM LCPAREN RCPAREN .)


state 290

    (22) enum_list -> enumerator .

    RCPAREN         reduce using rule 22 (enum_list -> enumerator .)
    COMMA           reduce using rule 22 (enum_list -> enumerator .)


state 291

    (24) enumerator -> IDENTIFIER .
    (25) enumerator -> IDENTIFIER . EQUAL constant_expression

    RCPAREN         reduce using rule 24 (enumerator -> IDENTIFIER .)
    COMMA           reduce using rule 24 (enumerator -> IDENTIFIER .)
    EQUAL           shift and go to state 442


state 292

    (354) class_head -> class_key IDENTIFIER base_spec .

    LCPAREN         reduce using rule 354 (class_head -> class_key IDENTIFIER base_spec .)


state 293

    (358) class_head -> class_key class_name base_spec .

    LCPAREN         reduce using rule 358 (class_head -> class_key class_name base_spec .)


state 294

    (360) base_spec -> COLON base_list .
    (362) base_list -> base_list . COMMA base_specifier

    LCPAREN         reduce using rule 360 (base_spec -> COLON base_list .)
    COMMA           shift and go to state 443


state 295

    (361) base_list -> base_specifier .

    COMMA           reduce using rule 361 (base_list -> base_specifier .)
    LCPAREN         reduce using rule 361 (base_list -> base_specifier .)


state 296

    (363) base_specifier -> complete_class_name .

    COMMA           reduce using rule 363 (base_specifier -> complete_class_name .)
    LCPAREN         reduce using rule 363 (base_specifier -> complete_class_name .)


state 297

    (364) base_specifier -> VIRTUAL . access_specifier complete_class_name
    (365) base_specifier -> VIRTUAL . complete_class_name
    (368) access_specifier -> . PRIVATE
    (369) access_specifier -> . PROTECTED
    (370) access_specifier -> . PUBLIC
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    PRIVATE         shift and go to state 279
    PROTECTED       shift and go to state 280
    PUBLIC          shift and go to state 281
    DOUBLECOLON     shift and go to state 42
    IDENTIFIER      shift and go to state 91

    access_specifier               shift and go to state 444
    complete_class_name            shift and go to state 445
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 298

    (366) base_specifier -> access_specifier . VIRTUAL complete_class_name
    (367) base_specifier -> access_specifier . complete_class_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    VIRTUAL         shift and go to state 446
    DOUBLECOLON     shift and go to state 42
    IDENTIFIER      shift and go to state 91

    complete_class_name            shift and go to state 447
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 299

    (308) qualified_name -> qualified_class_name . DOUBLECOLON name

    DOUBLECOLON     shift and go to state 108


state 300

    (308) qualified_name -> qualified_class_name DOUBLECOLON name .

    LPAREN          reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    LSPAREN         reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    COLON           reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    EQUAL           reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    LCPAREN         reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    SEMICOLON       reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    COMMA           reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    RPAREN          reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    DOT             reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    ARROW           reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    DPLUSOP         reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    DMINUSOP        reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    LTCOMP          reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    MULTEQOP        reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    DIVEQOP         reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    MODEQOP         reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    PLUSEQOP        reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    MINUSEQOP       reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    LSHIFTEQOP      reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    RSHIFTEQOP      reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    BANDEQOP        reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    BOREQOP         reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    DOTSTAR         reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    ARROWSTAR       reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    MULTOP          reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    DIVOP           reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    MODOP           reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    PLUSOP          reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    MINUSOP         reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    LSHIFT          reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    RSHIFT          reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    GTCOMP          reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    LTECOMP         reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    GTECOMP         reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    EQCOMP          reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    NEQCOMP         reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    BANDOP          reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    XOROP           reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    OROP            reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    ANDOP           reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    QUESMARK        reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    RSPAREN         reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)
    RCPAREN         reduce using rule 308 (qualified_name -> qualified_class_name DOUBLECOLON name .)


state 301

    (303) name -> IDENTIFIER .
    (407) class_name -> IDENTIFIER .

    LPAREN          reduce using rule 303 (name -> IDENTIFIER .)
    LSPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    COLON           reduce using rule 303 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 303 (name -> IDENTIFIER .)
    LCPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 303 (name -> IDENTIFIER .)
    COMMA           reduce using rule 303 (name -> IDENTIFIER .)
    RPAREN          reduce using rule 303 (name -> IDENTIFIER .)
    DOT             reduce using rule 303 (name -> IDENTIFIER .)
    ARROW           reduce using rule 303 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 303 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 303 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 303 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 303 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 303 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 303 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 303 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 303 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 303 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 303 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 303 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 303 (name -> IDENTIFIER .)
    MODOP           reduce using rule 303 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 303 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 303 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 303 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 303 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 303 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 303 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 303 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 303 (name -> IDENTIFIER .)
    XOROP           reduce using rule 303 (name -> IDENTIFIER .)
    OROP            reduce using rule 303 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 303 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 303 (name -> IDENTIFIER .)
    RSPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    RCPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 407 (class_name -> IDENTIFIER .)


state 302

    (306) name -> BNOP . class_name
    (407) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 91

    class_name                     shift and go to state 352

state 303

    (351) operator_name -> LPAREN RPAREN .

    LPAREN          reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    LSPAREN         reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    COLON           reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    EQUAL           reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    LCPAREN         reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    COMMA           reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    RPAREN          reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    DOT             reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    ARROW           reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    DPLUSOP         reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    DMINUSOP        reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    LTCOMP          reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    MULTEQOP        reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    DIVEQOP         reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    MODEQOP         reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    BANDEQOP        reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    BOREQOP         reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    DOTSTAR         reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    MULTOP          reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    DIVOP           reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    MODOP           reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    PLUSOP          reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    MINUSOP         reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    LSHIFT          reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    RSHIFT          reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    GTCOMP          reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    LTECOMP         reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    GTECOMP         reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    EQCOMP          reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    NEQCOMP         reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    BANDOP          reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    XOROP           reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    OROP            reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    ANDOP           reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    QUESMARK        reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    RSPAREN         reduce using rule 351 (operator_name -> LPAREN RPAREN .)
    RCPAREN         reduce using rule 351 (operator_name -> LPAREN RPAREN .)


state 304

    (352) operator_name -> LSPAREN RSPAREN .

    LPAREN          reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    COLON           reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    EQUAL           reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    LCPAREN         reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    SEMICOLON       reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    DOT             reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    ARROW           reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    DPLUSOP         reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    DMINUSOP        reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    LTCOMP          reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    MULTEQOP        reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    DIVEQOP         reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    MODEQOP         reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    PLUSEQOP        reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    MINUSEQOP       reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    LSHIFTEQOP      reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    RSHIFTEQOP      reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    BANDEQOP        reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    BOREQOP         reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    DOTSTAR         reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    ARROWSTAR       reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    MULTOP          reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    DIVOP           reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    MODOP           reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    PLUSOP          reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    MINUSOP         reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    LSHIFT          reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    RSHIFT          reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    GTCOMP          reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    LTECOMP         reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    GTECOMP         reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    EQCOMP          reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    NEQCOMP         reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    BANDOP          reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    XOROP           reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    OROP            reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    ANDOP           reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    QUESMARK        reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    RSPAREN         reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)
    RCPAREN         reduce using rule 352 (operator_name -> LSPAREN RSPAREN .)


state 305

    (310) conversion_type_name -> type_specifier_list ptr_operator .

    LPAREN          reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    LSPAREN         reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    COLON           reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    EQUAL           reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    LCPAREN         reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    SEMICOLON       reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    COMMA           reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    RPAREN          reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    DOT             reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    ARROW           reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    DPLUSOP         reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    DMINUSOP        reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    LTCOMP          reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    MULTEQOP        reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    DIVEQOP         reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    MODEQOP         reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    PLUSEQOP        reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    MINUSEQOP       reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    LSHIFTEQOP      reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    RSHIFTEQOP      reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    BANDEQOP        reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    BOREQOP         reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    DOTSTAR         reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    ARROWSTAR       reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    MULTOP          reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    DIVOP           reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    MODOP           reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    PLUSOP          reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    MINUSOP         reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    LSHIFT          reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    RSHIFT          reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    GTCOMP          reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    LTECOMP         reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    GTECOMP         reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    EQCOMP          reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    NEQCOMP         reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    BANDOP          reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    XOROP           reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    OROP            reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    ANDOP           reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    QUESMARK        reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    RSPAREN         reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)
    RCPAREN         reduce using rule 310 (conversion_type_name -> type_specifier_list ptr_operator .)


state 306

    (312) type_specifier_list -> type_specifier type_specifier_list .

    MULTOP          reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    BANDOP          reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    DOUBLECOLON     reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    IDENTIFIER      reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    LPAREN          reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    LSPAREN         reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    COLON           reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    EQUAL           reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    LCPAREN         reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    SEMICOLON       reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    COMMA           reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    RPAREN          reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    DOT             reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    ARROW           reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    DPLUSOP         reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    DMINUSOP        reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    LTCOMP          reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    MULTEQOP        reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    DIVEQOP         reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    MODEQOP         reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    PLUSEQOP        reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    MINUSEQOP       reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    LSHIFTEQOP      reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    RSHIFTEQOP      reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    BANDEQOP        reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    BOREQOP         reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    DOTSTAR         reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    ARROWSTAR       reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    DIVOP           reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    MODOP           reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    PLUSOP          reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    MINUSOP         reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    LSHIFT          reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    RSHIFT          reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    GTCOMP          reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    LTECOMP         reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    GTECOMP         reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    EQCOMP          reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    NEQCOMP         reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    XOROP           reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    OROP            reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    ANDOP           reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    QUESMARK        reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    RSPAREN         reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    RCPAREN         reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    BNOP            reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)
    OPERATOR        reduce using rule 312 (type_specifier_list -> type_specifier type_specifier_list .)


state 307

    (199) function_definition -> decl_specifiers declarator ctor_initializer fct_body .

    ASM             reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    TEMPLATE        reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    EXTERN          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    TYPEDEF         reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    LPAREN          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    AUTO            reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    STATIC          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    CONST           reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    VOLATILE        reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    INLINE          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    VIRTUAL         reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    BNOP            reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    MULTOP          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    BANDOP          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    CHAR            reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    SHORT           reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    INT             reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    LONG            reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    SIGNED          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    UNSIGNED        reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    FLOAT           reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    DOUBLE          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    VOID            reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    ENUM            reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    IDENTIFIER      reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    DOUBLECOLON     reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    CLASS           reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    STRUCT          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    UNION           reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    OPERATOR        reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    $end            reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    RCPAREN         reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    CASE            reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    DEFAULT         reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    SEMICOLON       reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    LCPAREN         reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    IF              reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    SWITCH          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    WHILE           reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    DO              reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    FOR             reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    BREAK           reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    CONTINUE        reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    RETURN          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    GOTO            reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    TRY             reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    DPLUSOP         reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    DMINUSOP        reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    SIZEOF          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    PLUSOP          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    MINUSOP         reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    NOTSYM          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    NEW             reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    DELETE          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    THIS            reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    NUMBER          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    STRING          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    SCHAR           reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    ELSE            reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    PRIVATE         reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    PROTECTED       reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    PUBLIC          reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)
    COLON           reduce using rule 199 (function_definition -> decl_specifiers declarator ctor_initializer fct_body .)


state 308

    (270) asm_declaration -> ASM LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 448


state 309

    (139) primary_expression -> LPAREN expression . RPAREN
    (61) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 449
    COMMA           shift and go to state 399


state 310

    (145) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 450


state 311

    (146) type_name -> type_specifier_list . abstract_declarator
    (147) type_name -> type_specifier_list .
    (148) abstract_declarator -> . ptr_operator abstract_declarator
    (149) abstract_declarator -> . ptr_operator
    (150) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (151) abstract_declarator -> . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (152) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (153) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (154) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (155) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (156) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (157) abstract_declarator -> . LSPAREN RSPAREN
    (158) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    RPAREN          reduce using rule 147 (type_name -> type_specifier_list .)
    GTCOMP          reduce using rule 147 (type_name -> type_specifier_list .)
    COMMA           reduce using rule 147 (type_name -> type_specifier_list .)
    LPAREN          shift and go to state 453
    LSPAREN         shift and go to state 333
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    DOUBLECOLON     shift and go to state 42
    IDENTIFIER      shift and go to state 91

    abstract_declarator            shift and go to state 451
    ptr_operator                   shift and go to state 452
    complete_class_name            shift and go to state 76
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 312

    (180) type_specifier -> simple_type_name .
    (128) postfix_expression -> simple_type_name . LPAREN expression_list RPAREN
    (129) postfix_expression -> simple_type_name . LPAREN RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    CONST           reduce using rule 180 (type_specifier -> simple_type_name .)
    VOLATILE        reduce using rule 180 (type_specifier -> simple_type_name .)
    CHAR            reduce using rule 180 (type_specifier -> simple_type_name .)
    SHORT           reduce using rule 180 (type_specifier -> simple_type_name .)
    INT             reduce using rule 180 (type_specifier -> simple_type_name .)
    LONG            reduce using rule 180 (type_specifier -> simple_type_name .)
    SIGNED          reduce using rule 180 (type_specifier -> simple_type_name .)
    UNSIGNED        reduce using rule 180 (type_specifier -> simple_type_name .)
    FLOAT           reduce using rule 180 (type_specifier -> simple_type_name .)
    DOUBLE          reduce using rule 180 (type_specifier -> simple_type_name .)
    VOID            reduce using rule 180 (type_specifier -> simple_type_name .)
    ENUM            reduce using rule 180 (type_specifier -> simple_type_name .)
    DOUBLECOLON     reduce using rule 180 (type_specifier -> simple_type_name .)
    CLASS           reduce using rule 180 (type_specifier -> simple_type_name .)
    STRUCT          reduce using rule 180 (type_specifier -> simple_type_name .)
    UNION           reduce using rule 180 (type_specifier -> simple_type_name .)
    TEMPLATE        reduce using rule 180 (type_specifier -> simple_type_name .)
    IDENTIFIER      reduce using rule 180 (type_specifier -> simple_type_name .)
    LSPAREN         reduce using rule 180 (type_specifier -> simple_type_name .)
    MULTOP          reduce using rule 180 (type_specifier -> simple_type_name .)
    BANDOP          reduce using rule 180 (type_specifier -> simple_type_name .)
    RPAREN          reduce using rule 180 (type_specifier -> simple_type_name .)
    GTCOMP          reduce using rule 180 (type_specifier -> simple_type_name .)
    COMMA           reduce using rule 180 (type_specifier -> simple_type_name .)
    LPAREN          shift and go to state 351

  ! LPAREN          [ reduce using rule 180 (type_specifier -> simple_type_name .) ]


state 313

    (293) declarator -> declarator LPAREN argument_declaration_list RPAREN . cv_qualifier_list
    (294) declarator -> declarator LPAREN argument_declaration_list RPAREN .
    (399) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (400) cv_qualifier_list -> . cv_qualifier
    (401) cv_qualifier -> . CONST
    (402) cv_qualifier -> . VOLATILE

    LPAREN          reduce using rule 294 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    LSPAREN         reduce using rule 294 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    COLON           reduce using rule 294 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    EQUAL           reduce using rule 294 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    LCPAREN         reduce using rule 294 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    SEMICOLON       reduce using rule 294 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    COMMA           reduce using rule 294 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    RPAREN          reduce using rule 294 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    GTCOMP          reduce using rule 294 (declarator -> declarator LPAREN argument_declaration_list RPAREN .)
    CONST           shift and go to state 94
    VOLATILE        shift and go to state 95

    cv_qualifier_list              shift and go to state 454
    cv_qualifier                   shift and go to state 93

state 314

    (265) initializer -> LPAREN expression_list RPAREN .

    SEMICOLON       reduce using rule 265 (initializer -> LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 265 (initializer -> LPAREN expression_list RPAREN .)


state 315

    (284) expression_list -> expression_list COMMA . assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    assignment_expression          shift and go to state 455
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 316

    (162) arg_declaration_list -> arg_declaration_list COMMA . argument_declaration
    (163) argument_declaration -> . decl_specifiers declarator
    (164) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (165) argument_declaration -> . decl_specifiers abstract_declarator
    (166) argument_declaration -> . decl_specifiers
    (167) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (168) argument_declaration -> . decl_specifiers EQUAL expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    TYPEDEF         shift and go to state 21
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 69
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    IDENTIFIER      shift and go to state 153

    argument_declaration           shift and go to state 456
    decl_specifiers                shift and go to state 174
    decl_specifier                 shift and go to state 11
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 155
    typedef_name                   shift and go to state 156

state 317

    (63) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    unary_expression               shift and go to state 173
    assignment_expression          shift and go to state 457
    conditional_expression         shift and go to state 172
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 318

    (64) assignment_operator -> EQUAL .

    DPLUSOP         reduce using rule 64 (assignment_operator -> EQUAL .)
    DMINUSOP        reduce using rule 64 (assignment_operator -> EQUAL .)
    SIZEOF          reduce using rule 64 (assignment_operator -> EQUAL .)
    MULTOP          reduce using rule 64 (assignment_operator -> EQUAL .)
    BANDOP          reduce using rule 64 (assignment_operator -> EQUAL .)
    PLUSOP          reduce using rule 64 (assignment_operator -> EQUAL .)
    MINUSOP         reduce using rule 64 (assignment_operator -> EQUAL .)
    NOTSYM          reduce using rule 64 (assignment_operator -> EQUAL .)
    BNOP            reduce using rule 64 (assignment_operator -> EQUAL .)
    DOUBLECOLON     reduce using rule 64 (assignment_operator -> EQUAL .)
    NEW             reduce using rule 64 (assignment_operator -> EQUAL .)
    DELETE          reduce using rule 64 (assignment_operator -> EQUAL .)
    THIS            reduce using rule 64 (assignment_operator -> EQUAL .)
    LPAREN          reduce using rule 64 (assignment_operator -> EQUAL .)
    CHAR            reduce using rule 64 (assignment_operator -> EQUAL .)
    SHORT           reduce using rule 64 (assignment_operator -> EQUAL .)
    INT             reduce using rule 64 (assignment_operator -> EQUAL .)
    LONG            reduce using rule 64 (assignment_operator -> EQUAL .)
    SIGNED          reduce using rule 64 (assignment_operator -> EQUAL .)
    UNSIGNED        reduce using rule 64 (assignment_operator -> EQUAL .)
    FLOAT           reduce using rule 64 (assignment_operator -> EQUAL .)
    DOUBLE          reduce using rule 64 (assignment_operator -> EQUAL .)
    VOID            reduce using rule 64 (assignment_operator -> EQUAL .)
    NUMBER          reduce using rule 64 (assignment_operator -> EQUAL .)
    STRING          reduce using rule 64 (assignment_operator -> EQUAL .)
    SCHAR           reduce using rule 64 (assignment_operator -> EQUAL .)
    IDENTIFIER      reduce using rule 64 (assignment_operator -> EQUAL .)
    OPERATOR        reduce using rule 64 (assignment_operator -> EQUAL .)


state 319

    (65) assignment_operator -> MULTEQOP .

    DPLUSOP         reduce using rule 65 (assignment_operator -> MULTEQOP .)
    DMINUSOP        reduce using rule 65 (assignment_operator -> MULTEQOP .)
    SIZEOF          reduce using rule 65 (assignment_operator -> MULTEQOP .)
    MULTOP          reduce using rule 65 (assignment_operator -> MULTEQOP .)
    BANDOP          reduce using rule 65 (assignment_operator -> MULTEQOP .)
    PLUSOP          reduce using rule 65 (assignment_operator -> MULTEQOP .)
    MINUSOP         reduce using rule 65 (assignment_operator -> MULTEQOP .)
    NOTSYM          reduce using rule 65 (assignment_operator -> MULTEQOP .)
    BNOP            reduce using rule 65 (assignment_operator -> MULTEQOP .)
    DOUBLECOLON     reduce using rule 65 (assignment_operator -> MULTEQOP .)
    NEW             reduce using rule 65 (assignment_operator -> MULTEQOP .)
    DELETE          reduce using rule 65 (assignment_operator -> MULTEQOP .)
    THIS            reduce using rule 65 (assignment_operator -> MULTEQOP .)
    LPAREN          reduce using rule 65 (assignment_operator -> MULTEQOP .)
    CHAR            reduce using rule 65 (assignment_operator -> MULTEQOP .)
    SHORT           reduce using rule 65 (assignment_operator -> MULTEQOP .)
    INT             reduce using rule 65 (assignment_operator -> MULTEQOP .)
    LONG            reduce using rule 65 (assignment_operator -> MULTEQOP .)
    SIGNED          reduce using rule 65 (assignment_operator -> MULTEQOP .)
    UNSIGNED        reduce using rule 65 (assignment_operator -> MULTEQOP .)
    FLOAT           reduce using rule 65 (assignment_operator -> MULTEQOP .)
    DOUBLE          reduce using rule 65 (assignment_operator -> MULTEQOP .)
    VOID            reduce using rule 65 (assignment_operator -> MULTEQOP .)
    NUMBER          reduce using rule 65 (assignment_operator -> MULTEQOP .)
    STRING          reduce using rule 65 (assignment_operator -> MULTEQOP .)
    SCHAR           reduce using rule 65 (assignment_operator -> MULTEQOP .)
    IDENTIFIER      reduce using rule 65 (assignment_operator -> MULTEQOP .)
    OPERATOR        reduce using rule 65 (assignment_operator -> MULTEQOP .)


state 320

    (66) assignment_operator -> DIVEQOP .

    DPLUSOP         reduce using rule 66 (assignment_operator -> DIVEQOP .)
    DMINUSOP        reduce using rule 66 (assignment_operator -> DIVEQOP .)
    SIZEOF          reduce using rule 66 (assignment_operator -> DIVEQOP .)
    MULTOP          reduce using rule 66 (assignment_operator -> DIVEQOP .)
    BANDOP          reduce using rule 66 (assignment_operator -> DIVEQOP .)
    PLUSOP          reduce using rule 66 (assignment_operator -> DIVEQOP .)
    MINUSOP         reduce using rule 66 (assignment_operator -> DIVEQOP .)
    NOTSYM          reduce using rule 66 (assignment_operator -> DIVEQOP .)
    BNOP            reduce using rule 66 (assignment_operator -> DIVEQOP .)
    DOUBLECOLON     reduce using rule 66 (assignment_operator -> DIVEQOP .)
    NEW             reduce using rule 66 (assignment_operator -> DIVEQOP .)
    DELETE          reduce using rule 66 (assignment_operator -> DIVEQOP .)
    THIS            reduce using rule 66 (assignment_operator -> DIVEQOP .)
    LPAREN          reduce using rule 66 (assignment_operator -> DIVEQOP .)
    CHAR            reduce using rule 66 (assignment_operator -> DIVEQOP .)
    SHORT           reduce using rule 66 (assignment_operator -> DIVEQOP .)
    INT             reduce using rule 66 (assignment_operator -> DIVEQOP .)
    LONG            reduce using rule 66 (assignment_operator -> DIVEQOP .)
    SIGNED          reduce using rule 66 (assignment_operator -> DIVEQOP .)
    UNSIGNED        reduce using rule 66 (assignment_operator -> DIVEQOP .)
    FLOAT           reduce using rule 66 (assignment_operator -> DIVEQOP .)
    DOUBLE          reduce using rule 66 (assignment_operator -> DIVEQOP .)
    VOID            reduce using rule 66 (assignment_operator -> DIVEQOP .)
    NUMBER          reduce using rule 66 (assignment_operator -> DIVEQOP .)
    STRING          reduce using rule 66 (assignment_operator -> DIVEQOP .)
    SCHAR           reduce using rule 66 (assignment_operator -> DIVEQOP .)
    IDENTIFIER      reduce using rule 66 (assignment_operator -> DIVEQOP .)
    OPERATOR        reduce using rule 66 (assignment_operator -> DIVEQOP .)


state 321

    (67) assignment_operator -> MODEQOP .

    DPLUSOP         reduce using rule 67 (assignment_operator -> MODEQOP .)
    DMINUSOP        reduce using rule 67 (assignment_operator -> MODEQOP .)
    SIZEOF          reduce using rule 67 (assignment_operator -> MODEQOP .)
    MULTOP          reduce using rule 67 (assignment_operator -> MODEQOP .)
    BANDOP          reduce using rule 67 (assignment_operator -> MODEQOP .)
    PLUSOP          reduce using rule 67 (assignment_operator -> MODEQOP .)
    MINUSOP         reduce using rule 67 (assignment_operator -> MODEQOP .)
    NOTSYM          reduce using rule 67 (assignment_operator -> MODEQOP .)
    BNOP            reduce using rule 67 (assignment_operator -> MODEQOP .)
    DOUBLECOLON     reduce using rule 67 (assignment_operator -> MODEQOP .)
    NEW             reduce using rule 67 (assignment_operator -> MODEQOP .)
    DELETE          reduce using rule 67 (assignment_operator -> MODEQOP .)
    THIS            reduce using rule 67 (assignment_operator -> MODEQOP .)
    LPAREN          reduce using rule 67 (assignment_operator -> MODEQOP .)
    CHAR            reduce using rule 67 (assignment_operator -> MODEQOP .)
    SHORT           reduce using rule 67 (assignment_operator -> MODEQOP .)
    INT             reduce using rule 67 (assignment_operator -> MODEQOP .)
    LONG            reduce using rule 67 (assignment_operator -> MODEQOP .)
    SIGNED          reduce using rule 67 (assignment_operator -> MODEQOP .)
    UNSIGNED        reduce using rule 67 (assignment_operator -> MODEQOP .)
    FLOAT           reduce using rule 67 (assignment_operator -> MODEQOP .)
    DOUBLE          reduce using rule 67 (assignment_operator -> MODEQOP .)
    VOID            reduce using rule 67 (assignment_operator -> MODEQOP .)
    NUMBER          reduce using rule 67 (assignment_operator -> MODEQOP .)
    STRING          reduce using rule 67 (assignment_operator -> MODEQOP .)
    SCHAR           reduce using rule 67 (assignment_operator -> MODEQOP .)
    IDENTIFIER      reduce using rule 67 (assignment_operator -> MODEQOP .)
    OPERATOR        reduce using rule 67 (assignment_operator -> MODEQOP .)


state 322

    (68) assignment_operator -> PLUSEQOP .

    DPLUSOP         reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    DMINUSOP        reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    SIZEOF          reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    MULTOP          reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    BANDOP          reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    PLUSOP          reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    MINUSOP         reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    NOTSYM          reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    BNOP            reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    DOUBLECOLON     reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    NEW             reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    DELETE          reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    THIS            reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    LPAREN          reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    CHAR            reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    SHORT           reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    INT             reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    LONG            reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    SIGNED          reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    UNSIGNED        reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    FLOAT           reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    DOUBLE          reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    VOID            reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    NUMBER          reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    STRING          reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    SCHAR           reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    IDENTIFIER      reduce using rule 68 (assignment_operator -> PLUSEQOP .)
    OPERATOR        reduce using rule 68 (assignment_operator -> PLUSEQOP .)


state 323

    (69) assignment_operator -> MINUSEQOP .

    DPLUSOP         reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    DMINUSOP        reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    SIZEOF          reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    MULTOP          reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    BANDOP          reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    PLUSOP          reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    MINUSOP         reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    NOTSYM          reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    BNOP            reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    DOUBLECOLON     reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    NEW             reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    DELETE          reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    THIS            reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    LPAREN          reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    CHAR            reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    SHORT           reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    INT             reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    LONG            reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    SIGNED          reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    UNSIGNED        reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    FLOAT           reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    DOUBLE          reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    VOID            reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    NUMBER          reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    STRING          reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    SCHAR           reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    IDENTIFIER      reduce using rule 69 (assignment_operator -> MINUSEQOP .)
    OPERATOR        reduce using rule 69 (assignment_operator -> MINUSEQOP .)


state 324

    (70) assignment_operator -> LSHIFTEQOP .

    DPLUSOP         reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    DMINUSOP        reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    SIZEOF          reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    MULTOP          reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    BANDOP          reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    PLUSOP          reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    MINUSOP         reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    NOTSYM          reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    BNOP            reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    DOUBLECOLON     reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    NEW             reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    DELETE          reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    THIS            reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    LPAREN          reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    CHAR            reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    SHORT           reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    INT             reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    LONG            reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    SIGNED          reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    UNSIGNED        reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    FLOAT           reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    DOUBLE          reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    VOID            reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    NUMBER          reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    STRING          reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    SCHAR           reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    IDENTIFIER      reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)
    OPERATOR        reduce using rule 70 (assignment_operator -> LSHIFTEQOP .)


state 325

    (71) assignment_operator -> RSHIFTEQOP .

    DPLUSOP         reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    DMINUSOP        reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    SIZEOF          reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    MULTOP          reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    BANDOP          reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    PLUSOP          reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    MINUSOP         reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    NOTSYM          reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    BNOP            reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    DOUBLECOLON     reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    NEW             reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    DELETE          reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    THIS            reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    LPAREN          reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    CHAR            reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    SHORT           reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    INT             reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    LONG            reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    SIGNED          reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    UNSIGNED        reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    FLOAT           reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    DOUBLE          reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    VOID            reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    NUMBER          reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    STRING          reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    SCHAR           reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    IDENTIFIER      reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)
    OPERATOR        reduce using rule 71 (assignment_operator -> RSHIFTEQOP .)


state 326

    (72) assignment_operator -> BANDEQOP .

    DPLUSOP         reduce using rule 72 (assignment_operator -> BANDEQOP .)
    DMINUSOP        reduce using rule 72 (assignment_operator -> BANDEQOP .)
    SIZEOF          reduce using rule 72 (assignment_operator -> BANDEQOP .)
    MULTOP          reduce using rule 72 (assignment_operator -> BANDEQOP .)
    BANDOP          reduce using rule 72 (assignment_operator -> BANDEQOP .)
    PLUSOP          reduce using rule 72 (assignment_operator -> BANDEQOP .)
    MINUSOP         reduce using rule 72 (assignment_operator -> BANDEQOP .)
    NOTSYM          reduce using rule 72 (assignment_operator -> BANDEQOP .)
    BNOP            reduce using rule 72 (assignment_operator -> BANDEQOP .)
    DOUBLECOLON     reduce using rule 72 (assignment_operator -> BANDEQOP .)
    NEW             reduce using rule 72 (assignment_operator -> BANDEQOP .)
    DELETE          reduce using rule 72 (assignment_operator -> BANDEQOP .)
    THIS            reduce using rule 72 (assignment_operator -> BANDEQOP .)
    LPAREN          reduce using rule 72 (assignment_operator -> BANDEQOP .)
    CHAR            reduce using rule 72 (assignment_operator -> BANDEQOP .)
    SHORT           reduce using rule 72 (assignment_operator -> BANDEQOP .)
    INT             reduce using rule 72 (assignment_operator -> BANDEQOP .)
    LONG            reduce using rule 72 (assignment_operator -> BANDEQOP .)
    SIGNED          reduce using rule 72 (assignment_operator -> BANDEQOP .)
    UNSIGNED        reduce using rule 72 (assignment_operator -> BANDEQOP .)
    FLOAT           reduce using rule 72 (assignment_operator -> BANDEQOP .)
    DOUBLE          reduce using rule 72 (assignment_operator -> BANDEQOP .)
    VOID            reduce using rule 72 (assignment_operator -> BANDEQOP .)
    NUMBER          reduce using rule 72 (assignment_operator -> BANDEQOP .)
    STRING          reduce using rule 72 (assignment_operator -> BANDEQOP .)
    SCHAR           reduce using rule 72 (assignment_operator -> BANDEQOP .)
    IDENTIFIER      reduce using rule 72 (assignment_operator -> BANDEQOP .)
    OPERATOR        reduce using rule 72 (assignment_operator -> BANDEQOP .)


state 327

    (73) assignment_operator -> BOREQOP .

    DPLUSOP         reduce using rule 73 (assignment_operator -> BOREQOP .)
    DMINUSOP        reduce using rule 73 (assignment_operator -> BOREQOP .)
    SIZEOF          reduce using rule 73 (assignment_operator -> BOREQOP .)
    MULTOP          reduce using rule 73 (assignment_operator -> BOREQOP .)
    BANDOP          reduce using rule 73 (assignment_operator -> BOREQOP .)
    PLUSOP          reduce using rule 73 (assignment_operator -> BOREQOP .)
    MINUSOP         reduce using rule 73 (assignment_operator -> BOREQOP .)
    NOTSYM          reduce using rule 73 (assignment_operator -> BOREQOP .)
    BNOP            reduce using rule 73 (assignment_operator -> BOREQOP .)
    DOUBLECOLON     reduce using rule 73 (assignment_operator -> BOREQOP .)
    NEW             reduce using rule 73 (assignment_operator -> BOREQOP .)
    DELETE          reduce using rule 73 (assignment_operator -> BOREQOP .)
    THIS            reduce using rule 73 (assignment_operator -> BOREQOP .)
    LPAREN          reduce using rule 73 (assignment_operator -> BOREQOP .)
    CHAR            reduce using rule 73 (assignment_operator -> BOREQOP .)
    SHORT           reduce using rule 73 (assignment_operator -> BOREQOP .)
    INT             reduce using rule 73 (assignment_operator -> BOREQOP .)
    LONG            reduce using rule 73 (assignment_operator -> BOREQOP .)
    SIGNED          reduce using rule 73 (assignment_operator -> BOREQOP .)
    UNSIGNED        reduce using rule 73 (assignment_operator -> BOREQOP .)
    FLOAT           reduce using rule 73 (assignment_operator -> BOREQOP .)
    DOUBLE          reduce using rule 73 (assignment_operator -> BOREQOP .)
    VOID            reduce using rule 73 (assignment_operator -> BOREQOP .)
    NUMBER          reduce using rule 73 (assignment_operator -> BOREQOP .)
    STRING          reduce using rule 73 (assignment_operator -> BOREQOP .)
    SCHAR           reduce using rule 73 (assignment_operator -> BOREQOP .)
    IDENTIFIER      reduce using rule 73 (assignment_operator -> BOREQOP .)
    OPERATOR        reduce using rule 73 (assignment_operator -> BOREQOP .)


state 328

    (163) argument_declaration -> decl_specifiers declarator .
    (164) argument_declaration -> decl_specifiers declarator . EQUAL expression
    (293) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (295) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (296) declarator -> declarator . LSPAREN RSPAREN

    COMMA           reduce using rule 163 (argument_declaration -> decl_specifiers declarator .)
    RPAREN          reduce using rule 163 (argument_declaration -> decl_specifiers declarator .)
    GTCOMP          reduce using rule 163 (argument_declaration -> decl_specifiers declarator .)
    EQUAL           shift and go to state 458
    LPAREN          shift and go to state 163
    LSPAREN         shift and go to state 81


state 329

    (168) argument_declaration -> decl_specifiers EQUAL . expression
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 459
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 330

    (165) argument_declaration -> decl_specifiers abstract_declarator .
    (167) argument_declaration -> decl_specifiers abstract_declarator . EQUAL expression
    (150) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (152) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (154) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (156) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    COMMA           reduce using rule 165 (argument_declaration -> decl_specifiers abstract_declarator .)
    RPAREN          reduce using rule 165 (argument_declaration -> decl_specifiers abstract_declarator .)
    GTCOMP          reduce using rule 165 (argument_declaration -> decl_specifiers abstract_declarator .)
    EQUAL           shift and go to state 460
    LPAREN          shift and go to state 461
    LSPAREN         shift and go to state 462


state 331

    (292) declarator -> ptr_operator . declarator
    (148) abstract_declarator -> ptr_operator . abstract_declarator
    (149) abstract_declarator -> ptr_operator .
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (148) abstract_declarator -> . ptr_operator abstract_declarator
    (149) abstract_declarator -> . ptr_operator
    (150) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (151) abstract_declarator -> . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (152) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (153) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (154) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (155) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (156) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (157) abstract_declarator -> . LSPAREN RSPAREN
    (158) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    EQUAL           reduce using rule 149 (abstract_declarator -> ptr_operator .)
    COMMA           reduce using rule 149 (abstract_declarator -> ptr_operator .)
    RPAREN          reduce using rule 149 (abstract_declarator -> ptr_operator .)
    GTCOMP          reduce using rule 149 (abstract_declarator -> ptr_operator .)
    LPAREN          shift and go to state 332
    LSPAREN         shift and go to state 333
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 42
    OPERATOR        shift and go to state 63

  ! LPAREN          [ reduce using rule 149 (abstract_declarator -> ptr_operator .) ]
  ! LSPAREN         [ reduce using rule 149 (abstract_declarator -> ptr_operator .) ]

    ptr_operator                   shift and go to state 331
    declarator                     shift and go to state 88
    abstract_declarator            shift and go to state 463
    dname                          shift and go to state 22
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 75
    complete_class_name            shift and go to state 76
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59

state 332

    (297) declarator -> LPAREN . declarator RPAREN
    (151) abstract_declarator -> LPAREN . argument_declaration_list RPAREN cv_qualifier_list
    (153) abstract_declarator -> LPAREN . argument_declaration_list RPAREN
    (158) abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (159) argument_declaration_list -> . arg_declaration_list
    (160) argument_declaration_list -> .
    (148) abstract_declarator -> . ptr_operator abstract_declarator
    (149) abstract_declarator -> . ptr_operator
    (150) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (151) abstract_declarator -> . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (152) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (153) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (154) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (155) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (156) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (157) abstract_declarator -> . LSPAREN RSPAREN
    (158) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (161) arg_declaration_list -> . argument_declaration
    (162) arg_declaration_list -> . arg_declaration_list COMMA argument_declaration
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (163) argument_declaration -> . decl_specifiers declarator
    (164) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (165) argument_declaration -> . decl_specifiers abstract_declarator
    (166) argument_declaration -> . decl_specifiers
    (167) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (168) argument_declaration -> . decl_specifiers EQUAL expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE

    LPAREN          shift and go to state 332
    RPAREN          reduce using rule 160 (argument_declaration_list -> .)
    LSPAREN         shift and go to state 333
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 42
    OPERATOR        shift and go to state 63
    TYPEDEF         shift and go to state 21
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 69
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70

    declarator                     shift and go to state 74
    argument_declaration_list      shift and go to state 464
    abstract_declarator            shift and go to state 465
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 331
    arg_declaration_list           shift and go to state 169
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    argument_declaration           shift and go to state 171
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59
    decl_specifiers                shift and go to state 174
    decl_specifier                 shift and go to state 11
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55

state 333

    (155) abstract_declarator -> LSPAREN . constant_expression RSPAREN
    (157) abstract_declarator -> LSPAREN . RSPAREN
    (26) constant_expression -> . conditional_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    RSPAREN         shift and go to state 467
    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    constant_expression            shift and go to state 466
    conditional_expression         shift and go to state 214
    logical_OR_expression          shift and go to state 175
    logical_AND_expression         shift and go to state 184
    inclusive_OR_expression        shift and go to state 197
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 334

    (28) conditional_expression -> logical_OR_expression QUESMARK . expression COLON conditional_expression
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    logical_OR_expression          shift and go to state 175
    expression                     shift and go to state 468
    conditional_expression         shift and go to state 172
    assignment_expression          shift and go to state 252
    unary_expression               shift and go to state 173
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 335

    (30) logical_OR_expression -> logical_OR_expression OROP . logical_AND_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    logical_AND_expression         shift and go to state 469
    inclusive_OR_expression        shift and go to state 197
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 336

    (124) postfix_expression -> postfix_expression LSPAREN . expression RSPAREN
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    postfix_expression             shift and go to state 176
    expression                     shift and go to state 470
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 337

    (125) postfix_expression -> postfix_expression LPAREN . expression_list RPAREN
    (127) postfix_expression -> postfix_expression LPAREN . RPAREN
    (283) expression_list -> . assignment_expression
    (284) expression_list -> . expression_list COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 472
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    postfix_expression             shift and go to state 176
    expression_list                shift and go to state 471
    assignment_expression          shift and go to state 170
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 338

    (126) postfix_expression -> postfix_expression template_class_name . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 473


state 339

    (130) postfix_expression -> postfix_expression DOT . name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 301
    BNOP            shift and go to state 302
    OPERATOR        shift and go to state 63

    name                           shift and go to state 474
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 99
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 299

state 340

    (131) postfix_expression -> postfix_expression ARROW . name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 301
    BNOP            shift and go to state 302
    OPERATOR        shift and go to state 63

    name                           shift and go to state 475
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 99
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 299

state 341

    (132) postfix_expression -> postfix_expression DPLUSOP .

    LSPAREN         reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    LPAREN          reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    DOT             reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROW           reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    DPLUSOP         reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    DMINUSOP        reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    LTCOMP          reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    EQUAL           reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTEQOP        reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVEQOP         reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    MODEQOP         reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSEQOP        reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSEQOP       reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFTEQOP      reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFTEQOP      reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDEQOP        reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    BOREQOP         reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    DOTSTAR         reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    ARROWSTAR       reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    MULTOP          reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    DIVOP           reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    MODOP           reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    PLUSOP          reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    MINUSOP         reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    LSHIFT          reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    RSHIFT          reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    GTCOMP          reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    LTECOMP         reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    GTECOMP         reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    EQCOMP          reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    NEQCOMP         reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    BANDOP          reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    XOROP           reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    OROP            reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    ANDOP           reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    QUESMARK        reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    RPAREN          reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    COMMA           reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    RSPAREN         reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    SEMICOLON       reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    RCPAREN         reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)
    COLON           reduce using rule 132 (postfix_expression -> postfix_expression DPLUSOP .)


state 342

    (133) postfix_expression -> postfix_expression DMINUSOP .

    LSPAREN         reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    LPAREN          reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    DOT             reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROW           reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    DPLUSOP         reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    DMINUSOP        reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    LTCOMP          reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    EQUAL           reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTEQOP        reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVEQOP         reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    MODEQOP         reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSEQOP        reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSEQOP       reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFTEQOP      reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFTEQOP      reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDEQOP        reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    BOREQOP         reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    DOTSTAR         reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    ARROWSTAR       reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    MULTOP          reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    DIVOP           reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    MODOP           reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    PLUSOP          reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    MINUSOP         reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    LSHIFT          reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    RSHIFT          reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    GTCOMP          reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    LTECOMP         reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    GTECOMP         reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    EQCOMP          reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    NEQCOMP         reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    BANDOP          reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    XOROP           reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    OROP            reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    ANDOP           reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    QUESMARK        reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    RPAREN          reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    COMMA           reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    RSPAREN         reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    SEMICOLON       reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    RCPAREN         reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)
    COLON           reduce using rule 133 (postfix_expression -> postfix_expression DMINUSOP .)


state 343

    (12) template_class_name -> LTCOMP . template_arg_list GTCOMP
    (14) template_arg_list -> . template_arg
    (15) template_arg_list -> . template_arg_list COMMA template_arg
    (16) template_arg -> . expression
    (17) template_arg -> . type_name
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (146) type_name -> . type_specifier_list abstract_declarator
    (147) type_name -> . type_specifier_list
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    template_arg_list              shift and go to state 476
    template_arg                   shift and go to state 477
    expression                     shift and go to state 478
    type_name                      shift and go to state 479
    assignment_expression          shift and go to state 252
    type_specifier_list            shift and go to state 311
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    type_specifier                 shift and go to state 150
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    simple_type_name               shift and go to state 312
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    name                           shift and go to state 187
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 344

    (75) unary_expression -> DPLUSOP unary_expression .

    EQUAL           reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    MULTEQOP        reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    DIVEQOP         reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    MODEQOP         reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    PLUSEQOP        reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    MINUSEQOP       reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    BANDEQOP        reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    BOREQOP         reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    DOTSTAR         reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    ARROWSTAR       reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    MULTOP          reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    DIVOP           reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    MODOP           reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    PLUSOP          reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    MINUSOP         reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    LSHIFT          reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    RSHIFT          reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    LTCOMP          reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    GTCOMP          reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    LTECOMP         reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    GTECOMP         reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    EQCOMP          reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    NEQCOMP         reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    BANDOP          reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    XOROP           reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    OROP            reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    ANDOP           reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    QUESMARK        reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    RPAREN          reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    COMMA           reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    RSPAREN         reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    SEMICOLON       reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    RCPAREN         reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)
    COLON           reduce using rule 75 (unary_expression -> DPLUSOP unary_expression .)


state 345

    (139) primary_expression -> LPAREN . expression RPAREN
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 309
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 346

    (76) unary_expression -> DMINUSOP unary_expression .

    EQUAL           reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    MULTEQOP        reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    DIVEQOP         reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    MODEQOP         reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    PLUSEQOP        reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    MINUSEQOP       reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFTEQOP      reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFTEQOP      reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    BANDEQOP        reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    BOREQOP         reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    DOTSTAR         reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    ARROWSTAR       reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    MULTOP          reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    DIVOP           reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    MODOP           reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    PLUSOP          reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    MINUSOP         reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    LSHIFT          reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    RSHIFT          reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    LTCOMP          reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    GTCOMP          reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    LTECOMP         reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    GTECOMP         reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    EQCOMP          reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    NEQCOMP         reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    BANDOP          reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    XOROP           reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    OROP            reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    ANDOP           reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    QUESMARK        reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    RPAREN          reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    COMMA           reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    RSPAREN         reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    SEMICOLON       reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    RCPAREN         reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)
    COLON           reduce using rule 76 (unary_expression -> DMINUSOP unary_expression .)


state 347

    (77) unary_expression -> unary_operator cast_expression .

    EQUAL           reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    MULTEQOP        reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    DIVEQOP         reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    MODEQOP         reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    PLUSEQOP        reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    MINUSEQOP       reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQOP      reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQOP      reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    BANDEQOP        reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    BOREQOP         reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    DOTSTAR         reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    ARROWSTAR       reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    MULTOP          reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    DIVOP           reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    MODOP           reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    PLUSOP          reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    MINUSOP         reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    LTCOMP          reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    GTCOMP          reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    LTECOMP         reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    GTECOMP         reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    EQCOMP          reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    NEQCOMP         reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    BANDOP          reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    XOROP           reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    OROP            reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    ANDOP           reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    QUESMARK        reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    RSPAREN         reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    SEMICOLON       reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    RCPAREN         reduce using rule 77 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 77 (unary_expression -> unary_operator cast_expression .)


state 348

    (78) unary_expression -> SIZEOF unary_expression .

    EQUAL           reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    MULTEQOP        reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    DIVEQOP         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    MODEQOP         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQOP        reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQOP       reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQOP      reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQOP      reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    BANDEQOP        reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    BOREQOP         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    DOTSTAR         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    ARROWSTAR       reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    MULTOP          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    DIVOP           reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    MODOP           reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    PLUSOP          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    MINUSOP         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    LTCOMP          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    GTCOMP          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    LTECOMP         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    GTECOMP         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    EQCOMP          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    NEQCOMP         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    BANDOP          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    XOROP           reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    OROP            reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    ANDOP           reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    QUESMARK        reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    RSPAREN         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    RCPAREN         reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 78 (unary_expression -> SIZEOF unary_expression .)


state 349

    (79) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (139) primary_expression -> LPAREN . expression RPAREN
    (146) type_name -> . type_specifier_list abstract_declarator
    (147) type_name -> . type_specifier_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 386
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    IDENTIFIER      shift and go to state 385
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    OPERATOR        shift and go to state 63

    type_name                      shift and go to state 480
    expression                     shift and go to state 309
    type_specifier_list            shift and go to state 311
    assignment_expression          shift and go to state 252
    type_specifier                 shift and go to state 150
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    simple_type_name               shift and go to state 312
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    name                           shift and go to state 187
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 350

    (32) logical_AND_expression -> logical_AND_expression ANDOP . inclusive_OR_expression
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    inclusive_OR_expression        shift and go to state 481
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 351

    (128) postfix_expression -> simple_type_name LPAREN . expression_list RPAREN
    (129) postfix_expression -> simple_type_name LPAREN . RPAREN
    (283) expression_list -> . assignment_expression
    (284) expression_list -> . expression_list COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 483
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    simple_type_name               shift and go to state 217
    expression_list                shift and go to state 482
    assignment_expression          shift and go to state 170
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 352

    (306) name -> BNOP class_name .

    LSPAREN         reduce using rule 306 (name -> BNOP class_name .)
    LPAREN          reduce using rule 306 (name -> BNOP class_name .)
    DOT             reduce using rule 306 (name -> BNOP class_name .)
    ARROW           reduce using rule 306 (name -> BNOP class_name .)
    DPLUSOP         reduce using rule 306 (name -> BNOP class_name .)
    DMINUSOP        reduce using rule 306 (name -> BNOP class_name .)
    LTCOMP          reduce using rule 306 (name -> BNOP class_name .)
    EQUAL           reduce using rule 306 (name -> BNOP class_name .)
    MULTEQOP        reduce using rule 306 (name -> BNOP class_name .)
    DIVEQOP         reduce using rule 306 (name -> BNOP class_name .)
    MODEQOP         reduce using rule 306 (name -> BNOP class_name .)
    PLUSEQOP        reduce using rule 306 (name -> BNOP class_name .)
    MINUSEQOP       reduce using rule 306 (name -> BNOP class_name .)
    LSHIFTEQOP      reduce using rule 306 (name -> BNOP class_name .)
    RSHIFTEQOP      reduce using rule 306 (name -> BNOP class_name .)
    BANDEQOP        reduce using rule 306 (name -> BNOP class_name .)
    BOREQOP         reduce using rule 306 (name -> BNOP class_name .)
    DOTSTAR         reduce using rule 306 (name -> BNOP class_name .)
    ARROWSTAR       reduce using rule 306 (name -> BNOP class_name .)
    MULTOP          reduce using rule 306 (name -> BNOP class_name .)
    DIVOP           reduce using rule 306 (name -> BNOP class_name .)
    MODOP           reduce using rule 306 (name -> BNOP class_name .)
    PLUSOP          reduce using rule 306 (name -> BNOP class_name .)
    MINUSOP         reduce using rule 306 (name -> BNOP class_name .)
    LSHIFT          reduce using rule 306 (name -> BNOP class_name .)
    RSHIFT          reduce using rule 306 (name -> BNOP class_name .)
    GTCOMP          reduce using rule 306 (name -> BNOP class_name .)
    LTECOMP         reduce using rule 306 (name -> BNOP class_name .)
    GTECOMP         reduce using rule 306 (name -> BNOP class_name .)
    EQCOMP          reduce using rule 306 (name -> BNOP class_name .)
    NEQCOMP         reduce using rule 306 (name -> BNOP class_name .)
    BANDOP          reduce using rule 306 (name -> BNOP class_name .)
    XOROP           reduce using rule 306 (name -> BNOP class_name .)
    OROP            reduce using rule 306 (name -> BNOP class_name .)
    ANDOP           reduce using rule 306 (name -> BNOP class_name .)
    QUESMARK        reduce using rule 306 (name -> BNOP class_name .)
    RPAREN          reduce using rule 306 (name -> BNOP class_name .)
    COMMA           reduce using rule 306 (name -> BNOP class_name .)
    RSPAREN         reduce using rule 306 (name -> BNOP class_name .)
    SEMICOLON       reduce using rule 306 (name -> BNOP class_name .)
    COLON           reduce using rule 306 (name -> BNOP class_name .)
    LCPAREN         reduce using rule 306 (name -> BNOP class_name .)
    RCPAREN         reduce using rule 306 (name -> BNOP class_name .)


state 353

    (86) allocation_expression -> DOUBLECOLON NEW . placement new_type_name new_initializer
    (88) allocation_expression -> DOUBLECOLON NEW . new_type_name new_initializer
    (90) allocation_expression -> DOUBLECOLON NEW . placement new_type_name
    (92) allocation_expression -> DOUBLECOLON NEW . new_type_name
    (94) allocation_expression -> DOUBLECOLON NEW . placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> DOUBLECOLON NEW . LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> DOUBLECOLON NEW . placement LPAREN type_name RPAREN
    (100) allocation_expression -> DOUBLECOLON NEW . LPAREN type_name RPAREN
    (114) placement -> . LPAREN expression_list RPAREN
    (102) new_type_name -> . type_specifier_list new_declarator
    (103) new_type_name -> . type_specifier_list
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 486
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    IDENTIFIER      shift and go to state 153

    placement                      shift and go to state 484
    new_type_name                  shift and go to state 485
    type_specifier_list            shift and go to state 363
    type_specifier                 shift and go to state 150
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 155
    typedef_name                   shift and go to state 156

state 354

    (82) deallocation_expression -> DOUBLECOLON DELETE . cast_expression
    (84) deallocation_expression -> DOUBLECOLON DELETE . LSPAREN RSPAREN cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LSPAREN         shift and go to state 488
    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    cast_expression                shift and go to state 487
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 355

    (136) primary_expression -> DOUBLECOLON IDENTIFIER .
    (407) class_name -> IDENTIFIER .

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
  ! reduce/reduce conflict for GTCOMP resolved using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    LSPAREN         reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    LPAREN          reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    DOT             reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    ARROW           reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    DPLUSOP         reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    DMINUSOP        reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    LTCOMP          reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    EQUAL           reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    MULTEQOP        reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    DIVEQOP         reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    MODEQOP         reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    PLUSEQOP        reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    MINUSEQOP       reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    BANDEQOP        reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    BOREQOP         reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    DOTSTAR         reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    ARROWSTAR       reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    MULTOP          reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    DIVOP           reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    MODOP           reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    PLUSOP          reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    MINUSOP         reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    LSHIFT          reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    RSHIFT          reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    GTCOMP          reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    LTECOMP         reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    GTECOMP         reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    EQCOMP          reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    NEQCOMP         reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    BANDOP          reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    XOROP           reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    OROP            reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    ANDOP           reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    QUESMARK        reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    RPAREN          reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    COMMA           reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    RSPAREN         reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    SEMICOLON       reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    RCPAREN         reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    COLON           reduce using rule 136 (primary_expression -> DOUBLECOLON IDENTIFIER .)
    DOUBLECOLON     reduce using rule 407 (class_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 407 (class_name -> IDENTIFIER .)
    BNOP            reduce using rule 407 (class_name -> IDENTIFIER .)
    AUTO            reduce using rule 407 (class_name -> IDENTIFIER .)
    STATIC          reduce using rule 407 (class_name -> IDENTIFIER .)
    EXTERN          reduce using rule 407 (class_name -> IDENTIFIER .)
    CONST           reduce using rule 407 (class_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 407 (class_name -> IDENTIFIER .)
    INLINE          reduce using rule 407 (class_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 407 (class_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 407 (class_name -> IDENTIFIER .)
    CHAR            reduce using rule 407 (class_name -> IDENTIFIER .)
    SHORT           reduce using rule 407 (class_name -> IDENTIFIER .)
    INT             reduce using rule 407 (class_name -> IDENTIFIER .)
    LONG            reduce using rule 407 (class_name -> IDENTIFIER .)
    SIGNED          reduce using rule 407 (class_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 407 (class_name -> IDENTIFIER .)
    FLOAT           reduce using rule 407 (class_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 407 (class_name -> IDENTIFIER .)
    VOID            reduce using rule 407 (class_name -> IDENTIFIER .)
    ENUM            reduce using rule 407 (class_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 407 (class_name -> IDENTIFIER .)
    CLASS           reduce using rule 407 (class_name -> IDENTIFIER .)
    STRUCT          reduce using rule 407 (class_name -> IDENTIFIER .)
    UNION           reduce using rule 407 (class_name -> IDENTIFIER .)
    TEMPLATE        reduce using rule 407 (class_name -> IDENTIFIER .)

  ! LPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! GTCOMP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]


state 356

    (137) primary_expression -> DOUBLECOLON operator_function_name .

    LSPAREN         reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    LPAREN          reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    DOT             reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    ARROW           reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    DPLUSOP         reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    DMINUSOP        reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    LTCOMP          reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    EQUAL           reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    MULTEQOP        reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    DIVEQOP         reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    MODEQOP         reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    PLUSEQOP        reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    MINUSEQOP       reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    LSHIFTEQOP      reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    RSHIFTEQOP      reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    BANDEQOP        reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    BOREQOP         reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    DOTSTAR         reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    ARROWSTAR       reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    MULTOP          reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    DIVOP           reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    MODOP           reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    PLUSOP          reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    MINUSOP         reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    LSHIFT          reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    RSHIFT          reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    GTCOMP          reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    LTECOMP         reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    GTECOMP         reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    EQCOMP          reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    NEQCOMP         reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    BANDOP          reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    XOROP           reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    OROP            reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    ANDOP           reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    QUESMARK        reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    RPAREN          reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    COMMA           reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    RSPAREN         reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    SEMICOLON       reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    RCPAREN         reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)
    COLON           reduce using rule 137 (primary_expression -> DOUBLECOLON operator_function_name .)


state 357

    (138) primary_expression -> DOUBLECOLON qualified_name .

    LSPAREN         reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    LPAREN          reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    DOT             reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    ARROW           reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    DPLUSOP         reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    DMINUSOP        reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    LTCOMP          reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    EQUAL           reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    MULTEQOP        reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    DIVEQOP         reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    MODEQOP         reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    PLUSEQOP        reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    MINUSEQOP       reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    LSHIFTEQOP      reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    RSHIFTEQOP      reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    BANDEQOP        reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    BOREQOP         reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    DOTSTAR         reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    ARROWSTAR       reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    MULTOP          reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    DIVOP           reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    MODOP           reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    PLUSOP          reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    MINUSOP         reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    LSHIFT          reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    RSHIFT          reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    GTCOMP          reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    LTECOMP         reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    GTECOMP         reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    EQCOMP          reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    NEQCOMP         reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    BANDOP          reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    XOROP           reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    OROP            reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    ANDOP           reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    QUESMARK        reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    RPAREN          reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    COMMA           reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    RSPAREN         reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    SEMICOLON       reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    RCPAREN         reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)
    COLON           reduce using rule 138 (primary_expression -> DOUBLECOLON qualified_name .)


state 358

    (404) complete_class_name -> DOUBLECOLON qualified_class_name .
    (308) qualified_name -> qualified_class_name . DOUBLECOLON name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    LPAREN          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    EQUAL           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LSPAREN         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    TYPEDEF         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    BNOP            reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    MULTOP          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    BANDOP          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    AUTO            reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    STATIC          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    EXTERN          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    CONST           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    VOLATILE        reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    INLINE          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    VIRTUAL         reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    IDENTIFIER      reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    CHAR            reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    SHORT           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    INT             reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    LONG            reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    SIGNED          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    UNSIGNED        reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    FLOAT           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DOUBLE          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    VOID            reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    ENUM            reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    OPERATOR        reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    CLASS           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    STRUCT          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    UNION           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    TEMPLATE        reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    COMMA           reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    RPAREN          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    SEMICOLON       reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    GTCOMP          reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .)
    DOUBLECOLON     shift and go to state 108

  ! DOUBLECOLON     [ reduce using rule 404 (complete_class_name -> DOUBLECOLON qualified_class_name .) ]


state 359

    (314) operator_function_name -> OPERATOR . operator_name
    (315) operator_name -> . NEW
    (316) operator_name -> . DELETE
    (317) operator_name -> . PLUSOP
    (318) operator_name -> . MINUSOP
    (319) operator_name -> . MULTOP
    (320) operator_name -> . DIVOP
    (321) operator_name -> . MODOP
    (322) operator_name -> . XOROP
    (323) operator_name -> . BANDOP
    (324) operator_name -> . BNOP
    (325) operator_name -> . NOTSYM
    (326) operator_name -> . EQUAL
    (327) operator_name -> . LTCOMP
    (328) operator_name -> . GTCOMP
    (329) operator_name -> . PLUSEQOP
    (330) operator_name -> . MINUSEQOP
    (331) operator_name -> . MULTEQOP
    (332) operator_name -> . DIVEQOP
    (333) operator_name -> . MODEQOP
    (334) operator_name -> . XOREQOP
    (335) operator_name -> . BANDEQOP
    (336) operator_name -> . LSHIFT
    (337) operator_name -> . RSHIFT
    (338) operator_name -> . RSHIFTEQOP
    (339) operator_name -> . LSHIFTEQOP
    (340) operator_name -> . EQCOMP
    (341) operator_name -> . NEQCOMP
    (342) operator_name -> . LTECOMP
    (343) operator_name -> . GTECOMP
    (344) operator_name -> . ANDOP
    (345) operator_name -> . OROP
    (346) operator_name -> . DPLUSOP
    (347) operator_name -> . DMINUSOP
    (348) operator_name -> . COMMA
    (349) operator_name -> . ARROWSTAR
    (350) operator_name -> . ARROW
    (351) operator_name -> . LPAREN RPAREN
    (352) operator_name -> . LSPAREN RSPAREN

    NEW             shift and go to state 111
    DELETE          shift and go to state 112
    PLUSOP          shift and go to state 113
    MINUSOP         shift and go to state 114
    MULTOP          shift and go to state 115
    DIVOP           shift and go to state 116
    MODOP           shift and go to state 117
    XOROP           shift and go to state 118
    BANDOP          shift and go to state 119
    BNOP            shift and go to state 120
    NOTSYM          shift and go to state 121
    EQUAL           shift and go to state 122
    LTCOMP          shift and go to state 123
    GTCOMP          shift and go to state 124
    PLUSEQOP        shift and go to state 125
    MINUSEQOP       shift and go to state 126
    MULTEQOP        shift and go to state 127
    DIVEQOP         shift and go to state 128
    MODEQOP         shift and go to state 129
    XOREQOP         shift and go to state 130
    BANDEQOP        shift and go to state 131
    LSHIFT          shift and go to state 132
    RSHIFT          shift and go to state 133
    RSHIFTEQOP      shift and go to state 134
    LSHIFTEQOP      shift and go to state 135
    EQCOMP          shift and go to state 136
    NEQCOMP         shift and go to state 137
    LTECOMP         shift and go to state 138
    GTECOMP         shift and go to state 139
    ANDOP           shift and go to state 140
    OROP            shift and go to state 141
    DPLUSOP         shift and go to state 142
    DMINUSOP        shift and go to state 143
    COMMA           shift and go to state 144
    ARROWSTAR       shift and go to state 145
    ARROW           shift and go to state 146
    LPAREN          shift and go to state 147
    LSPAREN         shift and go to state 148

    operator_name                  shift and go to state 109

state 360

    (87) allocation_expression -> NEW placement . new_type_name new_initializer
    (91) allocation_expression -> NEW placement . new_type_name
    (95) allocation_expression -> NEW placement . LPAREN type_name RPAREN new_initializer
    (99) allocation_expression -> NEW placement . LPAREN type_name RPAREN
    (102) new_type_name -> . type_specifier_list new_declarator
    (103) new_type_name -> . type_specifier_list
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 490
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    IDENTIFIER      shift and go to state 153

    new_type_name                  shift and go to state 489
    type_specifier_list            shift and go to state 363
    type_specifier                 shift and go to state 150
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 155
    typedef_name                   shift and go to state 156

state 361

    (89) allocation_expression -> NEW new_type_name . new_initializer
    (93) allocation_expression -> NEW new_type_name .
    (115) new_initializer -> . LPAREN initializer_list RPAREN
    (116) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    MULTEQOP        reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    DIVEQOP         reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    MODEQOP         reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    PLUSEQOP        reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    MINUSEQOP       reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    LSHIFTEQOP      reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    RSHIFTEQOP      reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    BANDEQOP        reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    BOREQOP         reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    DOTSTAR         reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    ARROWSTAR       reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    MULTOP          reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    DIVOP           reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    MODOP           reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    PLUSOP          reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    MINUSOP         reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    LSHIFT          reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    RSHIFT          reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    LTCOMP          reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    GTCOMP          reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    LTECOMP         reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    GTECOMP         reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    EQCOMP          reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    NEQCOMP         reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    BANDOP          reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    XOROP           reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    OROP            reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    ANDOP           reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    QUESMARK        reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    RPAREN          reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    COMMA           reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    RSPAREN         reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    SEMICOLON       reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    RCPAREN         reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    COLON           reduce using rule 93 (allocation_expression -> NEW new_type_name .)
    LPAREN          shift and go to state 492

    new_initializer                shift and go to state 491

state 362

    (97) allocation_expression -> NEW LPAREN . type_name RPAREN new_initializer
    (101) allocation_expression -> NEW LPAREN . type_name RPAREN
    (114) placement -> LPAREN . expression_list RPAREN
    (146) type_name -> . type_specifier_list abstract_declarator
    (147) type_name -> . type_specifier_list
    (283) expression_list -> . assignment_expression
    (284) expression_list -> . expression_list COMMA assignment_expression
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 386
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    IDENTIFIER      shift and go to state 385
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    OPERATOR        shift and go to state 63

    type_name                      shift and go to state 493
    expression_list                shift and go to state 494
    type_specifier_list            shift and go to state 311
    assignment_expression          shift and go to state 170
    type_specifier                 shift and go to state 150
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    simple_type_name               shift and go to state 312
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    name                           shift and go to state 187
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 363

    (102) new_type_name -> type_specifier_list . new_declarator
    (103) new_type_name -> type_specifier_list .
    (104) new_declarator -> . MULTOP cv_qualifier_list new_declarator
    (105) new_declarator -> . MULTOP new_declarator
    (106) new_declarator -> . MULTOP cv_qualifier_list
    (107) new_declarator -> . MULTOP
    (108) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator
    (109) new_declarator -> . complete_class_name DOUBLECOLON MULTOP new_declarator
    (110) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (111) new_declarator -> . complete_class_name DOUBLECOLON MULTOP
    (112) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (113) new_declarator -> . LSPAREN expression RSPAREN
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

  ! shift/reduce conflict for MULTOP resolved as shift
    LPAREN          reduce using rule 103 (new_type_name -> type_specifier_list .)
    EQUAL           reduce using rule 103 (new_type_name -> type_specifier_list .)
    MULTEQOP        reduce using rule 103 (new_type_name -> type_specifier_list .)
    DIVEQOP         reduce using rule 103 (new_type_name -> type_specifier_list .)
    MODEQOP         reduce using rule 103 (new_type_name -> type_specifier_list .)
    PLUSEQOP        reduce using rule 103 (new_type_name -> type_specifier_list .)
    MINUSEQOP       reduce using rule 103 (new_type_name -> type_specifier_list .)
    LSHIFTEQOP      reduce using rule 103 (new_type_name -> type_specifier_list .)
    RSHIFTEQOP      reduce using rule 103 (new_type_name -> type_specifier_list .)
    BANDEQOP        reduce using rule 103 (new_type_name -> type_specifier_list .)
    BOREQOP         reduce using rule 103 (new_type_name -> type_specifier_list .)
    DOTSTAR         reduce using rule 103 (new_type_name -> type_specifier_list .)
    ARROWSTAR       reduce using rule 103 (new_type_name -> type_specifier_list .)
    DIVOP           reduce using rule 103 (new_type_name -> type_specifier_list .)
    MODOP           reduce using rule 103 (new_type_name -> type_specifier_list .)
    PLUSOP          reduce using rule 103 (new_type_name -> type_specifier_list .)
    MINUSOP         reduce using rule 103 (new_type_name -> type_specifier_list .)
    LSHIFT          reduce using rule 103 (new_type_name -> type_specifier_list .)
    RSHIFT          reduce using rule 103 (new_type_name -> type_specifier_list .)
    LTCOMP          reduce using rule 103 (new_type_name -> type_specifier_list .)
    GTCOMP          reduce using rule 103 (new_type_name -> type_specifier_list .)
    LTECOMP         reduce using rule 103 (new_type_name -> type_specifier_list .)
    GTECOMP         reduce using rule 103 (new_type_name -> type_specifier_list .)
    EQCOMP          reduce using rule 103 (new_type_name -> type_specifier_list .)
    NEQCOMP         reduce using rule 103 (new_type_name -> type_specifier_list .)
    BANDOP          reduce using rule 103 (new_type_name -> type_specifier_list .)
    XOROP           reduce using rule 103 (new_type_name -> type_specifier_list .)
    OROP            reduce using rule 103 (new_type_name -> type_specifier_list .)
    ANDOP           reduce using rule 103 (new_type_name -> type_specifier_list .)
    QUESMARK        reduce using rule 103 (new_type_name -> type_specifier_list .)
    RPAREN          reduce using rule 103 (new_type_name -> type_specifier_list .)
    COMMA           reduce using rule 103 (new_type_name -> type_specifier_list .)
    RSPAREN         reduce using rule 103 (new_type_name -> type_specifier_list .)
    SEMICOLON       reduce using rule 103 (new_type_name -> type_specifier_list .)
    RCPAREN         reduce using rule 103 (new_type_name -> type_specifier_list .)
    COLON           reduce using rule 103 (new_type_name -> type_specifier_list .)
    MULTOP          shift and go to state 496
    LSPAREN         shift and go to state 498
    DOUBLECOLON     shift and go to state 42
    IDENTIFIER      shift and go to state 91

  ! MULTOP          [ reduce using rule 103 (new_type_name -> type_specifier_list .) ]

    new_declarator                 shift and go to state 495
    complete_class_name            shift and go to state 497
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 364

    (83) deallocation_expression -> DELETE cast_expression .

    EQUAL           reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    MULTEQOP        reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    DIVEQOP         reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    MODEQOP         reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    PLUSEQOP        reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    MINUSEQOP       reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    LSHIFTEQOP      reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    RSHIFTEQOP      reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    BANDEQOP        reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    BOREQOP         reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    DOTSTAR         reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    ARROWSTAR       reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    MULTOP          reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    DIVOP           reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    MODOP           reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    PLUSOP          reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    MINUSOP         reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    LSHIFT          reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    RSHIFT          reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    LTCOMP          reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    GTCOMP          reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    LTECOMP         reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    GTECOMP         reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    EQCOMP          reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    NEQCOMP         reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    BANDOP          reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    XOROP           reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    OROP            reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    ANDOP           reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    QUESMARK        reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    RPAREN          reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    COMMA           reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    RSPAREN         reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    SEMICOLON       reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    RCPAREN         reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)
    COLON           reduce using rule 83 (deallocation_expression -> DELETE cast_expression .)


state 365

    (85) deallocation_expression -> DELETE LSPAREN . RSPAREN cast_expression

    RSPAREN         shift and go to state 499


state 366

    (34) inclusive_OR_expression -> inclusive_OR_expression OROP . exclusive_OR_expression
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    exclusive_OR_expression        shift and go to state 500
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 367

    (36) exclusive_OR_expression -> exclusive_OR_expression XOROP . AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    AND_expression                 shift and go to state 501
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 368

    (38) AND_expression -> AND_expression BANDOP . equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    equality_expression            shift and go to state 502
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 369

    (40) equality_expression -> equality_expression EQCOMP . relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    relational_expression          shift and go to state 503
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 370

    (41) equality_expression -> equality_expression NEQCOMP . relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    relational_expression          shift and go to state 504
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 371

    (43) relational_expression -> relational_expression LTCOMP . shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    shift_expression               shift and go to state 505
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 372

    (44) relational_expression -> relational_expression GTCOMP . shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    shift_expression               shift and go to state 506
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 373

    (45) relational_expression -> relational_expression LTECOMP . shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    shift_expression               shift and go to state 507
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 374

    (46) relational_expression -> relational_expression GTECOMP . shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    shift_expression               shift and go to state 508
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 375

    (48) shift_expression -> shift_expression LSHIFT . additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    additive_expression            shift and go to state 509
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 376

    (49) shift_expression -> shift_expression RSHIFT . additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    additive_expression            shift and go to state 510
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 377

    (51) additive_expression -> additive_expression PLUSOP . multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    multiplicative_expression      shift and go to state 511
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 378

    (52) additive_expression -> additive_expression MINUSOP . multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    multiplicative_expression      shift and go to state 512
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 379

    (54) multiplicative_expression -> multiplicative_expression MULTOP . pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    pm_expression                  shift and go to state 513
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 380

    (55) multiplicative_expression -> multiplicative_expression DIVOP . pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    pm_expression                  shift and go to state 514
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 381

    (56) multiplicative_expression -> multiplicative_expression MODOP . pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    pm_expression                  shift and go to state 515
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 382

    (58) pm_expression -> pm_expression DOTSTAR . cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    cast_expression                shift and go to state 516
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 383

    (59) pm_expression -> pm_expression ARROWSTAR . cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    cast_expression                shift and go to state 517
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 384

    (295) declarator -> declarator LSPAREN constant_expression RSPAREN .

    LPAREN          reduce using rule 295 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 295 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    COLON           reduce using rule 295 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    EQUAL           reduce using rule 295 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    LCPAREN         reduce using rule 295 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    SEMICOLON       reduce using rule 295 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 295 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 295 (declarator -> declarator LSPAREN constant_expression RSPAREN .)
    GTCOMP          reduce using rule 295 (declarator -> declarator LSPAREN constant_expression RSPAREN .)


state 385

    (392) typedef_name -> IDENTIFIER .
    (407) class_name -> IDENTIFIER .
    (303) name -> IDENTIFIER .

  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TEMPLATE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 303 (name -> IDENTIFIER .)
    CONST           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CHAR            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SHORT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INT             reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LONG            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SIGNED          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    FLOAT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOID            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    ENUM            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CLASS           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STRUCT          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNION           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    TEMPLATE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    LPAREN          reduce using rule 303 (name -> IDENTIFIER .)
    DOT             reduce using rule 303 (name -> IDENTIFIER .)
    ARROW           reduce using rule 303 (name -> IDENTIFIER .)
    DPLUSOP         reduce using rule 303 (name -> IDENTIFIER .)
    DMINUSOP        reduce using rule 303 (name -> IDENTIFIER .)
    LTCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 303 (name -> IDENTIFIER .)
    MULTEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    DIVEQOP         reduce using rule 303 (name -> IDENTIFIER .)
    MODEQOP         reduce using rule 303 (name -> IDENTIFIER .)
    PLUSEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    MINUSEQOP       reduce using rule 303 (name -> IDENTIFIER .)
    LSHIFTEQOP      reduce using rule 303 (name -> IDENTIFIER .)
    RSHIFTEQOP      reduce using rule 303 (name -> IDENTIFIER .)
    BANDEQOP        reduce using rule 303 (name -> IDENTIFIER .)
    BOREQOP         reduce using rule 303 (name -> IDENTIFIER .)
    DOTSTAR         reduce using rule 303 (name -> IDENTIFIER .)
    ARROWSTAR       reduce using rule 303 (name -> IDENTIFIER .)
    MULTOP          reduce using rule 303 (name -> IDENTIFIER .)
    DIVOP           reduce using rule 303 (name -> IDENTIFIER .)
    MODOP           reduce using rule 303 (name -> IDENTIFIER .)
    PLUSOP          reduce using rule 303 (name -> IDENTIFIER .)
    MINUSOP         reduce using rule 303 (name -> IDENTIFIER .)
    LSHIFT          reduce using rule 303 (name -> IDENTIFIER .)
    RSHIFT          reduce using rule 303 (name -> IDENTIFIER .)
    GTCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    LTECOMP         reduce using rule 303 (name -> IDENTIFIER .)
    GTECOMP         reduce using rule 303 (name -> IDENTIFIER .)
    EQCOMP          reduce using rule 303 (name -> IDENTIFIER .)
    NEQCOMP         reduce using rule 303 (name -> IDENTIFIER .)
    BANDOP          reduce using rule 303 (name -> IDENTIFIER .)
    XOROP           reduce using rule 303 (name -> IDENTIFIER .)
    OROP            reduce using rule 303 (name -> IDENTIFIER .)
    ANDOP           reduce using rule 303 (name -> IDENTIFIER .)
    QUESMARK        reduce using rule 303 (name -> IDENTIFIER .)
    RPAREN          reduce using rule 303 (name -> IDENTIFIER .)
    COMMA           reduce using rule 303 (name -> IDENTIFIER .)

  ! LPAREN          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TEMPLATE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]


state 386

    (86) allocation_expression -> DOUBLECOLON . NEW placement new_type_name new_initializer
    (88) allocation_expression -> DOUBLECOLON . NEW new_type_name new_initializer
    (90) allocation_expression -> DOUBLECOLON . NEW placement new_type_name
    (92) allocation_expression -> DOUBLECOLON . NEW new_type_name
    (94) allocation_expression -> DOUBLECOLON . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> DOUBLECOLON . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> DOUBLECOLON . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> DOUBLECOLON . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> DOUBLECOLON . DELETE cast_expression
    (84) deallocation_expression -> DOUBLECOLON . DELETE LSPAREN RSPAREN cast_expression
    (404) complete_class_name -> DOUBLECOLON . qualified_class_name
    (136) primary_expression -> DOUBLECOLON . IDENTIFIER
    (137) primary_expression -> DOUBLECOLON . operator_function_name
    (138) primary_expression -> DOUBLECOLON . qualified_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (314) operator_function_name -> . OPERATOR operator_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (407) class_name -> . IDENTIFIER

    NEW             shift and go to state 353
    DELETE          shift and go to state 354
    IDENTIFIER      shift and go to state 355
    OPERATOR        shift and go to state 359

    qualified_class_name           shift and go to state 358
    operator_function_name         shift and go to state 356
    qualified_name                 shift and go to state 357
    class_name                     shift and go to state 99

state 387

    (278) mem_initializer_list -> mem_initializer COMMA . mem_initializer_list
    (277) mem_initializer_list -> . mem_initializer
    (278) mem_initializer_list -> . mem_initializer COMMA mem_initializer_list
    (279) mem_initializer -> . complete_class_name LPAREN expression_list RPAREN
    (280) mem_initializer -> . complete_class_name LPAREN RPAREN
    (281) mem_initializer -> . IDENTIFIER LPAREN expression_list RPAREN
    (282) mem_initializer -> . IDENTIFIER LPAREN RPAREN
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 221
    DOUBLECOLON     shift and go to state 42

    mem_initializer                shift and go to state 219
    mem_initializer_list           shift and go to state 518
    complete_class_name            shift and go to state 220
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 388

    (279) mem_initializer -> complete_class_name LPAREN . expression_list RPAREN
    (280) mem_initializer -> complete_class_name LPAREN . RPAREN
    (283) expression_list -> . assignment_expression
    (284) expression_list -> . expression_list COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 520
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    complete_class_name            shift and go to state 151
    expression_list                shift and go to state 519
    assignment_expression          shift and go to state 170
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 389

    (281) mem_initializer -> IDENTIFIER LPAREN . expression_list RPAREN
    (282) mem_initializer -> IDENTIFIER LPAREN . RPAREN
    (283) expression_list -> . assignment_expression
    (284) expression_list -> . expression_list COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 522
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression_list                shift and go to state 521
    assignment_expression          shift and go to state 170
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 390

    (268) initializer_list -> LCPAREN . initializer_list RCPAREN
    (269) initializer_list -> LCPAREN . initializer_list COMMA RCPAREN
    (266) initializer_list -> . assignment_expression
    (267) initializer_list -> . initializer_list COMMA assignment_expression
    (268) initializer_list -> . LCPAREN initializer_list RCPAREN
    (269) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LCPAREN         shift and go to state 390
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    initializer_list               shift and go to state 523
    assignment_expression          shift and go to state 392
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 391

    (263) initializer -> EQUAL LCPAREN initializer_list . RCPAREN
    (264) initializer -> EQUAL LCPAREN initializer_list . COMMA RCPAREN
    (267) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 524
    COMMA           shift and go to state 525


state 392

    (266) initializer_list -> assignment_expression .

    RCPAREN         reduce using rule 266 (initializer_list -> assignment_expression .)
    COMMA           reduce using rule 266 (initializer_list -> assignment_expression .)
    RPAREN          reduce using rule 266 (initializer_list -> assignment_expression .)


state 393

    (204) compound_statement -> LCPAREN statement_list RCPAREN .

    ASM             reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TEMPLATE        reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    EXTERN          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TYPEDEF         reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LPAREN          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    AUTO            reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STATIC          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CONST           reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VOLATILE        reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    INLINE          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VIRTUAL         reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BNOP            reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MULTOP          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BANDOP          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CHAR            reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SHORT           reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    INT             reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LONG            reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIGNED          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    UNSIGNED        reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FLOAT           reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DOUBLE          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    VOID            reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ENUM            reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IDENTIFIER      reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DOUBLECOLON     reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CLASS           reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRUCT          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    UNION           reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    OPERATOR        reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    $end            reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RCPAREN         reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CASE            reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DEFAULT         reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SEMICOLON       reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    LCPAREN         reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    IF              reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SWITCH          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    WHILE           reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DO              reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    FOR             reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    BREAK           reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CONTINUE        reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    RETURN          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    GOTO            reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    TRY             reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DPLUSOP         reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DMINUSOP        reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SIZEOF          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PLUSOP          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    MINUSOP         reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NOTSYM          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NEW             reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    DELETE          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    THIS            reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    NUMBER          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    STRING          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    SCHAR           reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    ELSE            reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PRIVATE         reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PROTECTED       reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    PUBLIC          reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    COLON           reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)
    CATCH           reduce using rule 204 (compound_statement -> LCPAREN statement_list RCPAREN .)


state 394

    (207) statement_list -> statement_list statement .

    RCPAREN         reduce using rule 207 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 207 (statement_list -> statement_list statement .)
    CASE            reduce using rule 207 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 207 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 207 (statement_list -> statement_list statement .)
    LCPAREN         reduce using rule 207 (statement_list -> statement_list statement .)
    IF              reduce using rule 207 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 207 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 207 (statement_list -> statement_list statement .)
    DO              reduce using rule 207 (statement_list -> statement_list statement .)
    FOR             reduce using rule 207 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 207 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 207 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 207 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 207 (statement_list -> statement_list statement .)
    TRY             reduce using rule 207 (statement_list -> statement_list statement .)
    ASM             reduce using rule 207 (statement_list -> statement_list statement .)
    TEMPLATE        reduce using rule 207 (statement_list -> statement_list statement .)
    EXTERN          reduce using rule 207 (statement_list -> statement_list statement .)
    DPLUSOP         reduce using rule 207 (statement_list -> statement_list statement .)
    DMINUSOP        reduce using rule 207 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 207 (statement_list -> statement_list statement .)
    TYPEDEF         reduce using rule 207 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 207 (statement_list -> statement_list statement .)
    MULTOP          reduce using rule 207 (statement_list -> statement_list statement .)
    BANDOP          reduce using rule 207 (statement_list -> statement_list statement .)
    PLUSOP          reduce using rule 207 (statement_list -> statement_list statement .)
    MINUSOP         reduce using rule 207 (statement_list -> statement_list statement .)
    NOTSYM          reduce using rule 207 (statement_list -> statement_list statement .)
    BNOP            reduce using rule 207 (statement_list -> statement_list statement .)
    DOUBLECOLON     reduce using rule 207 (statement_list -> statement_list statement .)
    NEW             reduce using rule 207 (statement_list -> statement_list statement .)
    DELETE          reduce using rule 207 (statement_list -> statement_list statement .)
    AUTO            reduce using rule 207 (statement_list -> statement_list statement .)
    STATIC          reduce using rule 207 (statement_list -> statement_list statement .)
    CONST           reduce using rule 207 (statement_list -> statement_list statement .)
    VOLATILE        reduce using rule 207 (statement_list -> statement_list statement .)
    INLINE          reduce using rule 207 (statement_list -> statement_list statement .)
    VIRTUAL         reduce using rule 207 (statement_list -> statement_list statement .)
    THIS            reduce using rule 207 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 207 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 207 (statement_list -> statement_list statement .)
    INT             reduce using rule 207 (statement_list -> statement_list statement .)
    LONG            reduce using rule 207 (statement_list -> statement_list statement .)
    SIGNED          reduce using rule 207 (statement_list -> statement_list statement .)
    UNSIGNED        reduce using rule 207 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 207 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 207 (statement_list -> statement_list statement .)
    VOID            reduce using rule 207 (statement_list -> statement_list statement .)
    ENUM            reduce using rule 207 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 207 (statement_list -> statement_list statement .)
    STRING          reduce using rule 207 (statement_list -> statement_list statement .)
    SCHAR           reduce using rule 207 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 207 (statement_list -> statement_list statement .)
    STRUCT          reduce using rule 207 (statement_list -> statement_list statement .)
    UNION           reduce using rule 207 (statement_list -> statement_list statement .)
    OPERATOR        reduce using rule 207 (statement_list -> statement_list statement .)


state 395

    (231) labeled_statement -> IDENTIFIER COLON . statement
    (208) statement -> . labeled_statement
    (209) statement -> . expression_statement
    (210) statement -> . compound_statement
    (211) statement -> . selection_statement
    (212) statement -> . iteration_statement
    (213) statement -> . jump_statement
    (214) statement -> . declaration_statement
    (215) statement -> . try_block
    (231) labeled_statement -> . IDENTIFIER COLON statement
    (232) labeled_statement -> . CASE constant_expression COLON statement
    (233) labeled_statement -> . DEFAULT COLON statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN
    (221) selection_statement -> . IF LPAREN expression RPAREN statement
    (222) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (223) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (234) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (235) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (236) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (216) jump_statement -> . BREAK SEMICOLON
    (217) jump_statement -> . CONTINUE SEMICOLON
    (218) jump_statement -> . RETURN expression SEMICOLON
    (219) jump_statement -> . RETURN SEMICOLON
    (220) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (244) declaration_statement -> . declaration
    (224) try_block -> . TRY compound_statement handler_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 235
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237
    SEMICOLON       shift and go to state 239
    LCPAREN         shift and go to state 85
    IF              shift and go to state 240
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 243
    DO              shift and go to state 244
    FOR             shift and go to state 245
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 247
    RETURN          shift and go to state 248
    GOTO            shift and go to state 249
    TRY             shift and go to state 251
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    statement                      shift and go to state 526
    labeled_statement              shift and go to state 227
    expression_statement           shift and go to state 228
    compound_statement             shift and go to state 229
    selection_statement            shift and go to state 230
    iteration_statement            shift and go to state 231
    jump_statement                 shift and go to state 232
    declaration_statement          shift and go to state 233
    try_block                      shift and go to state 234
    expression                     shift and go to state 238
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 396

    (232) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 527


state 397

    (233) labeled_statement -> DEFAULT COLON . statement
    (208) statement -> . labeled_statement
    (209) statement -> . expression_statement
    (210) statement -> . compound_statement
    (211) statement -> . selection_statement
    (212) statement -> . iteration_statement
    (213) statement -> . jump_statement
    (214) statement -> . declaration_statement
    (215) statement -> . try_block
    (231) labeled_statement -> . IDENTIFIER COLON statement
    (232) labeled_statement -> . CASE constant_expression COLON statement
    (233) labeled_statement -> . DEFAULT COLON statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN
    (221) selection_statement -> . IF LPAREN expression RPAREN statement
    (222) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (223) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (234) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (235) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (236) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (216) jump_statement -> . BREAK SEMICOLON
    (217) jump_statement -> . CONTINUE SEMICOLON
    (218) jump_statement -> . RETURN expression SEMICOLON
    (219) jump_statement -> . RETURN SEMICOLON
    (220) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (244) declaration_statement -> . declaration
    (224) try_block -> . TRY compound_statement handler_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 235
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237
    SEMICOLON       shift and go to state 239
    LCPAREN         shift and go to state 85
    IF              shift and go to state 240
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 243
    DO              shift and go to state 244
    FOR             shift and go to state 245
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 247
    RETURN          shift and go to state 248
    GOTO            shift and go to state 249
    TRY             shift and go to state 251
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    statement                      shift and go to state 528
    labeled_statement              shift and go to state 227
    expression_statement           shift and go to state 228
    compound_statement             shift and go to state 229
    selection_statement            shift and go to state 230
    iteration_statement            shift and go to state 231
    jump_statement                 shift and go to state 232
    declaration_statement          shift and go to state 233
    try_block                      shift and go to state 234
    expression                     shift and go to state 238
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 398

    (242) expression_statement -> expression SEMICOLON .

    RCPAREN         reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    LCPAREN         reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    TRY             reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    ASM             reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    TEMPLATE        reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    EXTERN          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    DPLUSOP         reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    DMINUSOP        reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    TYPEDEF         reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    MULTOP          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    BANDOP          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    PLUSOP          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    MINUSOP         reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    NOTSYM          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    BNOP            reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    DOUBLECOLON     reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    NEW             reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    DELETE          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    AUTO            reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    STATIC          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    CONST           reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    VOLATILE        reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    INLINE          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    VIRTUAL         reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    THIS            reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    ENUM            reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    SCHAR           reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    CLASS           reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    STRUCT          reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    UNION           reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    OPERATOR        reduce using rule 242 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 242 (expression_statement -> expression SEMICOLON .)


state 399

    (61) expression -> expression COMMA . assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    assignment_expression          shift and go to state 529
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 400

    (221) selection_statement -> IF LPAREN . expression RPAREN statement
    (222) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 530
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 401

    (300) dname -> BNOP . class_name
    (306) name -> BNOP . class_name
    (122) unary_operator -> BNOP .
    (407) class_name -> . IDENTIFIER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LPAREN          reduce using rule 122 (unary_operator -> BNOP .)
    DPLUSOP         reduce using rule 122 (unary_operator -> BNOP .)
    DMINUSOP        reduce using rule 122 (unary_operator -> BNOP .)
    SIZEOF          reduce using rule 122 (unary_operator -> BNOP .)
    MULTOP          reduce using rule 122 (unary_operator -> BNOP .)
    BANDOP          reduce using rule 122 (unary_operator -> BNOP .)
    PLUSOP          reduce using rule 122 (unary_operator -> BNOP .)
    MINUSOP         reduce using rule 122 (unary_operator -> BNOP .)
    NOTSYM          reduce using rule 122 (unary_operator -> BNOP .)
    BNOP            reduce using rule 122 (unary_operator -> BNOP .)
    DOUBLECOLON     reduce using rule 122 (unary_operator -> BNOP .)
    NEW             reduce using rule 122 (unary_operator -> BNOP .)
    DELETE          reduce using rule 122 (unary_operator -> BNOP .)
    THIS            reduce using rule 122 (unary_operator -> BNOP .)
    CHAR            reduce using rule 122 (unary_operator -> BNOP .)
    SHORT           reduce using rule 122 (unary_operator -> BNOP .)
    INT             reduce using rule 122 (unary_operator -> BNOP .)
    LONG            reduce using rule 122 (unary_operator -> BNOP .)
    SIGNED          reduce using rule 122 (unary_operator -> BNOP .)
    UNSIGNED        reduce using rule 122 (unary_operator -> BNOP .)
    FLOAT           reduce using rule 122 (unary_operator -> BNOP .)
    DOUBLE          reduce using rule 122 (unary_operator -> BNOP .)
    VOID            reduce using rule 122 (unary_operator -> BNOP .)
    NUMBER          reduce using rule 122 (unary_operator -> BNOP .)
    STRING          reduce using rule 122 (unary_operator -> BNOP .)
    SCHAR           reduce using rule 122 (unary_operator -> BNOP .)
    OPERATOR        reduce using rule 122 (unary_operator -> BNOP .)
    IDENTIFIER      shift and go to state 91

  ! IDENTIFIER      [ reduce using rule 122 (unary_operator -> BNOP .) ]

    class_name                     shift and go to state 90

state 402

    (393) ptr_operator -> MULTOP . cv_qualifier_list
    (394) ptr_operator -> MULTOP .
    (117) unary_operator -> MULTOP .
    (399) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (400) cv_qualifier_list -> . cv_qualifier
    (401) cv_qualifier -> . CONST
    (402) cv_qualifier -> . VOLATILE

  ! reduce/reduce conflict for LPAREN resolved using rule 117 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for MULTOP resolved using rule 117 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for BANDOP resolved using rule 117 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for BNOP resolved using rule 117 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 117 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 117 (unary_operator -> MULTOP .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 117 (unary_operator -> MULTOP .)
    LPAREN          reduce using rule 117 (unary_operator -> MULTOP .)
    DPLUSOP         reduce using rule 117 (unary_operator -> MULTOP .)
    DMINUSOP        reduce using rule 117 (unary_operator -> MULTOP .)
    SIZEOF          reduce using rule 117 (unary_operator -> MULTOP .)
    MULTOP          reduce using rule 117 (unary_operator -> MULTOP .)
    BANDOP          reduce using rule 117 (unary_operator -> MULTOP .)
    PLUSOP          reduce using rule 117 (unary_operator -> MULTOP .)
    MINUSOP         reduce using rule 117 (unary_operator -> MULTOP .)
    NOTSYM          reduce using rule 117 (unary_operator -> MULTOP .)
    BNOP            reduce using rule 117 (unary_operator -> MULTOP .)
    DOUBLECOLON     reduce using rule 117 (unary_operator -> MULTOP .)
    NEW             reduce using rule 117 (unary_operator -> MULTOP .)
    DELETE          reduce using rule 117 (unary_operator -> MULTOP .)
    THIS            reduce using rule 117 (unary_operator -> MULTOP .)
    CHAR            reduce using rule 117 (unary_operator -> MULTOP .)
    SHORT           reduce using rule 117 (unary_operator -> MULTOP .)
    INT             reduce using rule 117 (unary_operator -> MULTOP .)
    LONG            reduce using rule 117 (unary_operator -> MULTOP .)
    SIGNED          reduce using rule 117 (unary_operator -> MULTOP .)
    UNSIGNED        reduce using rule 117 (unary_operator -> MULTOP .)
    FLOAT           reduce using rule 117 (unary_operator -> MULTOP .)
    DOUBLE          reduce using rule 117 (unary_operator -> MULTOP .)
    VOID            reduce using rule 117 (unary_operator -> MULTOP .)
    NUMBER          reduce using rule 117 (unary_operator -> MULTOP .)
    STRING          reduce using rule 117 (unary_operator -> MULTOP .)
    SCHAR           reduce using rule 117 (unary_operator -> MULTOP .)
    IDENTIFIER      reduce using rule 117 (unary_operator -> MULTOP .)
    OPERATOR        reduce using rule 117 (unary_operator -> MULTOP .)
    CONST           shift and go to state 94
    VOLATILE        shift and go to state 95

  ! LPAREN          [ reduce using rule 394 (ptr_operator -> MULTOP .) ]
  ! BNOP            [ reduce using rule 394 (ptr_operator -> MULTOP .) ]
  ! MULTOP          [ reduce using rule 394 (ptr_operator -> MULTOP .) ]
  ! BANDOP          [ reduce using rule 394 (ptr_operator -> MULTOP .) ]
  ! IDENTIFIER      [ reduce using rule 394 (ptr_operator -> MULTOP .) ]
  ! DOUBLECOLON     [ reduce using rule 394 (ptr_operator -> MULTOP .) ]
  ! OPERATOR        [ reduce using rule 394 (ptr_operator -> MULTOP .) ]

    cv_qualifier_list              shift and go to state 92
    cv_qualifier                   shift and go to state 93

state 403

    (395) ptr_operator -> BANDOP . cv_qualifier_list
    (396) ptr_operator -> BANDOP .
    (118) unary_operator -> BANDOP .
    (399) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (400) cv_qualifier_list -> . cv_qualifier
    (401) cv_qualifier -> . CONST
    (402) cv_qualifier -> . VOLATILE

  ! reduce/reduce conflict for LPAREN resolved using rule 118 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for MULTOP resolved using rule 118 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for BANDOP resolved using rule 118 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for BNOP resolved using rule 118 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 118 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 118 (unary_operator -> BANDOP .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 118 (unary_operator -> BANDOP .)
    LPAREN          reduce using rule 118 (unary_operator -> BANDOP .)
    DPLUSOP         reduce using rule 118 (unary_operator -> BANDOP .)
    DMINUSOP        reduce using rule 118 (unary_operator -> BANDOP .)
    SIZEOF          reduce using rule 118 (unary_operator -> BANDOP .)
    MULTOP          reduce using rule 118 (unary_operator -> BANDOP .)
    BANDOP          reduce using rule 118 (unary_operator -> BANDOP .)
    PLUSOP          reduce using rule 118 (unary_operator -> BANDOP .)
    MINUSOP         reduce using rule 118 (unary_operator -> BANDOP .)
    NOTSYM          reduce using rule 118 (unary_operator -> BANDOP .)
    BNOP            reduce using rule 118 (unary_operator -> BANDOP .)
    DOUBLECOLON     reduce using rule 118 (unary_operator -> BANDOP .)
    NEW             reduce using rule 118 (unary_operator -> BANDOP .)
    DELETE          reduce using rule 118 (unary_operator -> BANDOP .)
    THIS            reduce using rule 118 (unary_operator -> BANDOP .)
    CHAR            reduce using rule 118 (unary_operator -> BANDOP .)
    SHORT           reduce using rule 118 (unary_operator -> BANDOP .)
    INT             reduce using rule 118 (unary_operator -> BANDOP .)
    LONG            reduce using rule 118 (unary_operator -> BANDOP .)
    SIGNED          reduce using rule 118 (unary_operator -> BANDOP .)
    UNSIGNED        reduce using rule 118 (unary_operator -> BANDOP .)
    FLOAT           reduce using rule 118 (unary_operator -> BANDOP .)
    DOUBLE          reduce using rule 118 (unary_operator -> BANDOP .)
    VOID            reduce using rule 118 (unary_operator -> BANDOP .)
    NUMBER          reduce using rule 118 (unary_operator -> BANDOP .)
    STRING          reduce using rule 118 (unary_operator -> BANDOP .)
    SCHAR           reduce using rule 118 (unary_operator -> BANDOP .)
    IDENTIFIER      reduce using rule 118 (unary_operator -> BANDOP .)
    OPERATOR        reduce using rule 118 (unary_operator -> BANDOP .)
    CONST           shift and go to state 94
    VOLATILE        shift and go to state 95

  ! LPAREN          [ reduce using rule 396 (ptr_operator -> BANDOP .) ]
  ! BNOP            [ reduce using rule 396 (ptr_operator -> BANDOP .) ]
  ! MULTOP          [ reduce using rule 396 (ptr_operator -> BANDOP .) ]
  ! BANDOP          [ reduce using rule 396 (ptr_operator -> BANDOP .) ]
  ! IDENTIFIER      [ reduce using rule 396 (ptr_operator -> BANDOP .) ]
  ! DOUBLECOLON     [ reduce using rule 396 (ptr_operator -> BANDOP .) ]
  ! OPERATOR        [ reduce using rule 396 (ptr_operator -> BANDOP .) ]

    cv_qualifier_list              shift and go to state 96
    cv_qualifier                   shift and go to state 93

state 404

    (404) complete_class_name -> DOUBLECOLON . qualified_class_name
    (86) allocation_expression -> DOUBLECOLON . NEW placement new_type_name new_initializer
    (88) allocation_expression -> DOUBLECOLON . NEW new_type_name new_initializer
    (90) allocation_expression -> DOUBLECOLON . NEW placement new_type_name
    (92) allocation_expression -> DOUBLECOLON . NEW new_type_name
    (94) allocation_expression -> DOUBLECOLON . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> DOUBLECOLON . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> DOUBLECOLON . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> DOUBLECOLON . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> DOUBLECOLON . DELETE cast_expression
    (84) deallocation_expression -> DOUBLECOLON . DELETE LSPAREN RSPAREN cast_expression
    (136) primary_expression -> DOUBLECOLON . IDENTIFIER
    (137) primary_expression -> DOUBLECOLON . operator_function_name
    (138) primary_expression -> DOUBLECOLON . qualified_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (314) operator_function_name -> . OPERATOR operator_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (407) class_name -> . IDENTIFIER

    NEW             shift and go to state 353
    DELETE          shift and go to state 354
    IDENTIFIER      shift and go to state 355
    OPERATOR        shift and go to state 359

    qualified_class_name           shift and go to state 358
    operator_function_name         shift and go to state 356
    qualified_name                 shift and go to state 357
    class_name                     shift and go to state 99

state 405

    (223) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 531
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 406

    (234) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 532
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 407

    (235) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 533


state 408

    (236) iteration_statement -> FOR LPAREN . for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> FOR LPAREN . for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> FOR LPAREN . for_init_statement SEMICOLON RPAREN statement
    (240) for_init_statement -> . expression_statement
    (241) for_init_statement -> . declaration_statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (244) declaration_statement -> . declaration
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 239
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    IDENTIFIER      shift and go to state 54
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    for_init_statement             shift and go to state 534
    expression                     shift and go to state 238
    expression_statement           shift and go to state 535
    declaration_statement          shift and go to state 536
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 409

    (216) jump_statement -> BREAK SEMICOLON .

    RCPAREN         reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    LCPAREN         reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    TRY             reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    ASM             reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    TEMPLATE        reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    EXTERN          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    DPLUSOP         reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    DMINUSOP        reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    TYPEDEF         reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    MULTOP          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    BANDOP          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    PLUSOP          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    MINUSOP         reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    NOTSYM          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    BNOP            reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    DOUBLECOLON     reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    NEW             reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    DELETE          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    AUTO            reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    STATIC          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    VOLATILE        reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    INLINE          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    VIRTUAL         reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    THIS            reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    ENUM            reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    SCHAR           reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    UNION           reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    OPERATOR        reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 216 (jump_statement -> BREAK SEMICOLON .)


state 410

    (217) jump_statement -> CONTINUE SEMICOLON .

    RCPAREN         reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    LCPAREN         reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    ASM             reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    TEMPLATE        reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    EXTERN          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    DPLUSOP         reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    DMINUSOP        reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    TYPEDEF         reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    MULTOP          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    BANDOP          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    PLUSOP          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    MINUSOP         reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    NOTSYM          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    BNOP            reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLECOLON     reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    DELETE          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    AUTO            reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    STATIC          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    VOLATILE        reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    INLINE          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    VIRTUAL         reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    ENUM            reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    SCHAR           reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    UNION           reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    OPERATOR        reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 217 (jump_statement -> CONTINUE SEMICOLON .)


state 411

    (218) jump_statement -> RETURN expression . SEMICOLON
    (61) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 537
    COMMA           shift and go to state 399


state 412

    (219) jump_statement -> RETURN SEMICOLON .

    RCPAREN         reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    LCPAREN         reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    TRY             reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    ASM             reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    TEMPLATE        reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    EXTERN          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    DPLUSOP         reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    DMINUSOP        reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    TYPEDEF         reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    MULTOP          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    BANDOP          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    PLUSOP          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    MINUSOP         reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    NOTSYM          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    BNOP            reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    DOUBLECOLON     reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    NEW             reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    DELETE          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    AUTO            reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    STATIC          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    VOLATILE        reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    INLINE          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    VIRTUAL         reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    THIS            reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    ENUM            reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    SCHAR           reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    STRUCT          reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    UNION           reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    OPERATOR        reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 219 (jump_statement -> RETURN SEMICOLON .)


state 413

    (220) jump_statement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 538


state 414

    (224) try_block -> TRY compound_statement . handler_list
    (225) handler_list -> . handler handler_list
    (226) handler_list -> . handler
    (227) handler -> . CATCH LPAREN exception_declaration RPAREN compound_statement

    CATCH           shift and go to state 541

    handler_list                   shift and go to state 539
    handler                        shift and go to state 540

state 415

    (252) template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP . declaration
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 14
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    declaration                    shift and go to state 542
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59

state 416

    (254) template_argument_list -> template_argument_list COMMA . template_argument
    (255) template_argument -> . type_argument
    (256) template_argument -> . argument_declaration
    (257) type_argument -> . CLASS IDENTIFIER
    (163) argument_declaration -> . decl_specifiers declarator
    (164) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (165) argument_declaration -> . decl_specifiers abstract_declarator
    (166) argument_declaration -> . decl_specifiers
    (167) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (168) argument_declaration -> . decl_specifiers EQUAL expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    CLASS           shift and go to state 261
    TYPEDEF         shift and go to state 21
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 69
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    IDENTIFIER      shift and go to state 153

    template_argument              shift and go to state 543
    type_argument                  shift and go to state 259
    argument_declaration           shift and go to state 260
    decl_specifiers                shift and go to state 174
    decl_specifier                 shift and go to state 11
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 155
    typedef_name                   shift and go to state 156

state 417

    (257) type_argument -> CLASS IDENTIFIER .

    GTCOMP          reduce using rule 257 (type_argument -> CLASS IDENTIFIER .)
    COMMA           reduce using rule 257 (type_argument -> CLASS IDENTIFIER .)


state 418

    (271) linkage_specification -> EXTERN STRING LCPAREN declaration_list . RCPAREN
    (275) declaration_list -> declaration_list . declaration
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    RCPAREN         shift and go to state 544
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 14
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    declaration                    shift and go to state 545
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59

state 419

    (272) linkage_specification -> EXTERN STRING LCPAREN RCPAREN .

    ASM             reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    EXTERN          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    LPAREN          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    AUTO            reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    STATIC          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    CONST           reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    INLINE          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    BNOP            reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    MULTOP          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    BANDOP          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    CHAR            reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    SHORT           reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    INT             reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    LONG            reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    SIGNED          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    FLOAT           reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    VOID            reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    ENUM            reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    DOUBLECOLON     reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    CLASS           reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    STRUCT          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    UNION           reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    $end            reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    CASE            reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    DEFAULT         reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    SEMICOLON       reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    IF              reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    SWITCH          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    WHILE           reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    DO              reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    FOR             reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    BREAK           reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    CONTINUE        reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    RETURN          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    GOTO            reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    TRY             reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    SIZEOF          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    NOTSYM          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    NEW             reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    DELETE          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    THIS            reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    NUMBER          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    STRING          reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    SCHAR           reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)
    ELSE            reduce using rule 272 (linkage_specification -> EXTERN STRING LCPAREN RCPAREN .)


state 420

    (274) declaration_list -> declaration .

    RCPAREN         reduce using rule 274 (declaration_list -> declaration .)
    ASM             reduce using rule 274 (declaration_list -> declaration .)
    TEMPLATE        reduce using rule 274 (declaration_list -> declaration .)
    EXTERN          reduce using rule 274 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 274 (declaration_list -> declaration .)
    LPAREN          reduce using rule 274 (declaration_list -> declaration .)
    AUTO            reduce using rule 274 (declaration_list -> declaration .)
    STATIC          reduce using rule 274 (declaration_list -> declaration .)
    CONST           reduce using rule 274 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 274 (declaration_list -> declaration .)
    INLINE          reduce using rule 274 (declaration_list -> declaration .)
    VIRTUAL         reduce using rule 274 (declaration_list -> declaration .)
    BNOP            reduce using rule 274 (declaration_list -> declaration .)
    MULTOP          reduce using rule 274 (declaration_list -> declaration .)
    BANDOP          reduce using rule 274 (declaration_list -> declaration .)
    CHAR            reduce using rule 274 (declaration_list -> declaration .)
    SHORT           reduce using rule 274 (declaration_list -> declaration .)
    INT             reduce using rule 274 (declaration_list -> declaration .)
    LONG            reduce using rule 274 (declaration_list -> declaration .)
    SIGNED          reduce using rule 274 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 274 (declaration_list -> declaration .)
    FLOAT           reduce using rule 274 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 274 (declaration_list -> declaration .)
    VOID            reduce using rule 274 (declaration_list -> declaration .)
    ENUM            reduce using rule 274 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 274 (declaration_list -> declaration .)
    DOUBLECOLON     reduce using rule 274 (declaration_list -> declaration .)
    CLASS           reduce using rule 274 (declaration_list -> declaration .)
    STRUCT          reduce using rule 274 (declaration_list -> declaration .)
    UNION           reduce using rule 274 (declaration_list -> declaration .)
    OPERATOR        reduce using rule 274 (declaration_list -> declaration .)


state 421

    (397) ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .

    LPAREN          reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    BNOP            reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MULTOP          reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    BANDOP          reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    IDENTIFIER      reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DOUBLECOLON     reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    OPERATOR        reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LSPAREN         reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    COLON           reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    EQUAL           reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LCPAREN         reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    SEMICOLON       reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    COMMA           reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RPAREN          reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DOT             reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    ARROW           reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DPLUSOP         reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DMINUSOP        reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LTCOMP          reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MULTEQOP        reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DIVEQOP         reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MODEQOP         reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    PLUSEQOP        reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MINUSEQOP       reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LSHIFTEQOP      reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RSHIFTEQOP      reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    BANDEQOP        reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    BOREQOP         reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DOTSTAR         reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    ARROWSTAR       reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DIVOP           reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MODOP           reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    PLUSOP          reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MINUSOP         reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LSHIFT          reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RSHIFT          reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    GTCOMP          reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LTECOMP         reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    GTECOMP         reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    EQCOMP          reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    NEQCOMP         reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    XOROP           reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    OROP            reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    ANDOP           reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    QUESMARK        reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RSPAREN         reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RCPAREN         reduce using rule 397 (ptr_operator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)


state 422

    (186) class_specifier -> class_head LCPAREN member_list RCPAREN .

    SEMICOLON       reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    TYPEDEF         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LPAREN          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    AUTO            reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    STATIC          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    EXTERN          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    CONST           reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    VOLATILE        reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    INLINE          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    VIRTUAL         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BNOP            reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MULTOP          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BANDOP          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    CHAR            reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    SHORT           reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    INT             reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LONG            reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    SIGNED          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    UNSIGNED        reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    FLOAT           reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DOUBLE          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    VOID            reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    ENUM            reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    IDENTIFIER      reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DOUBLECOLON     reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    CLASS           reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    STRUCT          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    UNION           reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    TEMPLATE        reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    OPERATOR        reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LSPAREN         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    COLON           reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    EQUAL           reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LCPAREN         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    COMMA           reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RPAREN          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DOT             reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    ARROW           reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DPLUSOP         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DMINUSOP        reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LTCOMP          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MULTEQOP        reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DIVEQOP         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MODEQOP         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    PLUSEQOP        reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MINUSEQOP       reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LSHIFTEQOP      reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RSHIFTEQOP      reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BANDEQOP        reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    BOREQOP         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DOTSTAR         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    ARROWSTAR       reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    DIVOP           reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MODOP           reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    PLUSOP          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    MINUSOP         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LSHIFT          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RSHIFT          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    GTCOMP          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    LTECOMP         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    GTECOMP         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    EQCOMP          reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    NEQCOMP         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    XOROP           reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    OROP            reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    ANDOP           reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    QUESMARK        reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RSPAREN         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)
    RCPAREN         reduce using rule 186 (class_specifier -> class_head LCPAREN member_list RCPAREN .)


state 423

    (188) member_list -> member_declaration member_list .

    RCPAREN         reduce using rule 188 (member_list -> member_declaration member_list .)


state 424

    (190) member_list -> access_specifier COLON . member_list
    (191) member_list -> access_specifier COLON .
    (188) member_list -> . member_declaration member_list
    (189) member_list -> . member_declaration
    (190) member_list -> . access_specifier COLON member_list
    (191) member_list -> . access_specifier COLON
    (192) member_declaration -> . decl_specifiers member_declarator_list SEMICOLON
    (193) member_declaration -> . member_declarator_list SEMICOLON
    (194) member_declaration -> . decl_specifiers SEMICOLON
    (195) member_declaration -> . SEMICOLON
    (196) member_declaration -> . function_definition SEMICOLON
    (197) member_declaration -> . function_definition
    (198) member_declaration -> . qualified_name SEMICOLON
    (368) access_specifier -> . PRIVATE
    (369) access_specifier -> . PROTECTED
    (370) access_specifier -> . PUBLIC
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (285) member_declarator_list -> . member_declarator
    (286) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (287) member_declarator -> . declarator pure_specifier
    (288) member_declarator -> . declarator
    (289) member_declarator -> . IDENTIFIER COLON constant_expression
    (290) member_declarator -> . COLON constant_expression
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (407) class_name -> . IDENTIFIER
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name

    RCPAREN         reduce using rule 191 (member_list -> access_specifier COLON .)
    SEMICOLON       shift and go to state 276
    PRIVATE         shift and go to state 279
    PROTECTED       shift and go to state 280
    PUBLIC          shift and go to state 281
    TYPEDEF         shift and go to state 21
    IDENTIFIER      shift and go to state 285
    COLON           shift and go to state 273
    LPAREN          shift and go to state 14
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 69
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    OPERATOR        shift and go to state 63

    access_specifier               shift and go to state 272
    member_list                    shift and go to state 546
    member_declaration             shift and go to state 271
    decl_specifiers                shift and go to state 274
    member_declarator_list         shift and go to state 275
    function_definition            shift and go to state 277
    qualified_name                 shift and go to state 278
    decl_specifier                 shift and go to state 11
    member_declarator              shift and go to state 282
    declarator                     shift and go to state 283
    qualified_class_name           shift and go to state 284
    name                           shift and go to state 34
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    class_name                     shift and go to state 286
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57

state 425

    (290) member_declarator -> COLON constant_expression .

    SEMICOLON       reduce using rule 290 (member_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 290 (member_declarator -> COLON constant_expression .)


state 426

    (192) member_declaration -> decl_specifiers member_declarator_list . SEMICOLON
    (286) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 547
    COMMA           shift and go to state 431


state 427

    (194) member_declaration -> decl_specifiers SEMICOLON .

    SEMICOLON       reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    PRIVATE         reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    PROTECTED       reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    PUBLIC          reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    TYPEDEF         reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    IDENTIFIER      reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    COLON           reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    LPAREN          reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    AUTO            reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    STATIC          reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    EXTERN          reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    CONST           reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    VOLATILE        reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    INLINE          reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    VIRTUAL         reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    BNOP            reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    MULTOP          reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    BANDOP          reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    CHAR            reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    SHORT           reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    INT             reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    LONG            reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    SIGNED          reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    UNSIGNED        reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    FLOAT           reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    DOUBLE          reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    VOID            reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    ENUM            reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    DOUBLECOLON     reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    CLASS           reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    STRUCT          reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    UNION           reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    TEMPLATE        reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    OPERATOR        reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)
    RCPAREN         reduce using rule 194 (member_declaration -> decl_specifiers SEMICOLON .)


state 428

    (199) function_definition -> decl_specifiers declarator . ctor_initializer fct_body
    (201) function_definition -> decl_specifiers declarator . fct_body
    (293) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (295) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (296) declarator -> declarator . LSPAREN RSPAREN
    (287) member_declarator -> declarator . pure_specifier
    (288) member_declarator -> declarator .
    (276) ctor_initializer -> . COLON mem_initializer_list
    (203) fct_body -> . compound_statement
    (353) pure_specifier -> . EQUAL NUMBER
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN

    LPAREN          shift and go to state 163
    LSPAREN         shift and go to state 81
    SEMICOLON       reduce using rule 288 (member_declarator -> declarator .)
    COMMA           reduce using rule 288 (member_declarator -> declarator .)
    COLON           shift and go to state 82
    EQUAL           shift and go to state 435
    LCPAREN         shift and go to state 85

    ctor_initializer               shift and go to state 158
    fct_body                       shift and go to state 159
    pure_specifier                 shift and go to state 434
    compound_statement             shift and go to state 83

state 429

    (289) member_declarator -> IDENTIFIER . COLON constant_expression
    (303) name -> IDENTIFIER .
    (407) class_name -> IDENTIFIER .
    (392) typedef_name -> IDENTIFIER .

  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! shift/reduce conflict for COLON resolved as shift
  ! reduce/reduce conflict for EQUAL resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for LCPAREN resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 303 (name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TEMPLATE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 392 (typedef_name -> IDENTIFIER .)
    COLON           shift and go to state 436
    LPAREN          reduce using rule 303 (name -> IDENTIFIER .)
    LSPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    EQUAL           reduce using rule 303 (name -> IDENTIFIER .)
    LCPAREN         reduce using rule 303 (name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 303 (name -> IDENTIFIER .)
    COMMA           reduce using rule 303 (name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 392 (typedef_name -> IDENTIFIER .)
    AUTO            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STATIC          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    EXTERN          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CONST           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INLINE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    BNOP            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    MULTOP          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    BANDOP          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CHAR            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SHORT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INT             reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LONG            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SIGNED          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    FLOAT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOID            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    ENUM            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CLASS           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STRUCT          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNION           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    TEMPLATE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 392 (typedef_name -> IDENTIFIER .)

  ! COLON           [ reduce using rule 303 (name -> IDENTIFIER .) ]
  ! DOUBLECOLON     [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TEMPLATE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! LCPAREN         [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 392 (typedef_name -> IDENTIFIER .) ]


state 430

    (193) member_declaration -> member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    COLON           reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    STATIC          reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    CONST           reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    INLINE          reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    BNOP            reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    INT             reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    LONG            reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    VOID            reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    ENUM            reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLECOLON     reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    UNION           reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 193 (member_declaration -> member_declarator_list SEMICOLON .)


state 431

    (286) member_declarator_list -> member_declarator_list COMMA . member_declarator
    (287) member_declarator -> . declarator pure_specifier
    (288) member_declarator -> . declarator
    (289) member_declarator -> . IDENTIFIER COLON constant_expression
    (290) member_declarator -> . COLON constant_expression
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    IDENTIFIER      shift and go to state 429
    COLON           shift and go to state 273
    LPAREN          shift and go to state 14
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    DOUBLECOLON     shift and go to state 42
    OPERATOR        shift and go to state 63

    member_declarator              shift and go to state 548
    declarator                     shift and go to state 549
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 75
    complete_class_name            shift and go to state 76
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59

state 432

    (196) member_declaration -> function_definition SEMICOLON .

    SEMICOLON       reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    PRIVATE         reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    PROTECTED       reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    PUBLIC          reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    TYPEDEF         reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    IDENTIFIER      reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    COLON           reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    LPAREN          reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    AUTO            reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    STATIC          reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    EXTERN          reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    CONST           reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    VOLATILE        reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    INLINE          reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    VIRTUAL         reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    BNOP            reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    MULTOP          reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    BANDOP          reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    CHAR            reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    SHORT           reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    INT             reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    LONG            reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    SIGNED          reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    UNSIGNED        reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    FLOAT           reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    DOUBLE          reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    VOID            reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    ENUM            reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    DOUBLECOLON     reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    CLASS           reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    STRUCT          reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    UNION           reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    TEMPLATE        reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    OPERATOR        reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)
    RCPAREN         reduce using rule 196 (member_declaration -> function_definition SEMICOLON .)


state 433

    (198) member_declaration -> qualified_name SEMICOLON .

    SEMICOLON       reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    PRIVATE         reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    PROTECTED       reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    PUBLIC          reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    TYPEDEF         reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    IDENTIFIER      reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    COLON           reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    LPAREN          reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    AUTO            reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    STATIC          reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    EXTERN          reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    CONST           reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    VOLATILE        reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    INLINE          reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    VIRTUAL         reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    BNOP            reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    MULTOP          reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    BANDOP          reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    CHAR            reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    SHORT           reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    INT             reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    LONG            reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    SIGNED          reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    UNSIGNED        reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    FLOAT           reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    DOUBLE          reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    VOID            reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    ENUM            reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    DOUBLECOLON     reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    CLASS           reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    STRUCT          reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    UNION           reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    TEMPLATE        reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    OPERATOR        reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)
    RCPAREN         reduce using rule 198 (member_declaration -> qualified_name SEMICOLON .)


state 434

    (287) member_declarator -> declarator pure_specifier .

    SEMICOLON       reduce using rule 287 (member_declarator -> declarator pure_specifier .)
    COMMA           reduce using rule 287 (member_declarator -> declarator pure_specifier .)


state 435

    (353) pure_specifier -> EQUAL . NUMBER

    NUMBER          shift and go to state 550


state 436

    (289) member_declarator -> IDENTIFIER COLON . constant_expression
    (26) constant_expression -> . conditional_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    constant_expression            shift and go to state 551
    conditional_expression         shift and go to state 214
    logical_OR_expression          shift and go to state 175
    logical_AND_expression         shift and go to state 184
    inclusive_OR_expression        shift and go to state 197
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 437

    (406) qualified_class_name -> class_name DOUBLECOLON . qualified_class_name
    (391) qualified_type_name -> class_name DOUBLECOLON . qualified_type_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 553

    class_name                     shift and go to state 552
    qualified_class_name           shift and go to state 265
    qualified_type_name            shift and go to state 264
    typedef_name                   shift and go to state 156

state 438

    (18) enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list . RCPAREN
    (23) enum_list -> enum_list . COMMA enumerator

    RCPAREN         shift and go to state 554
    COMMA           shift and go to state 441


state 439

    (20) enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .

    SEMICOLON       reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    TYPEDEF         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LPAREN          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    AUTO            reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    STATIC          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    EXTERN          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    CONST           reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    VOLATILE        reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    INLINE          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    VIRTUAL         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BNOP            reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MULTOP          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BANDOP          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    CHAR            reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    SHORT           reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    INT             reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LONG            reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    SIGNED          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    UNSIGNED        reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    FLOAT           reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DOUBLE          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    VOID            reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    ENUM            reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    IDENTIFIER      reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DOUBLECOLON     reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    CLASS           reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    STRUCT          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    UNION           reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    TEMPLATE        reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    OPERATOR        reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LSPAREN         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    COLON           reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    EQUAL           reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LCPAREN         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    COMMA           reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RPAREN          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DOT             reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    ARROW           reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DPLUSOP         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DMINUSOP        reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LTCOMP          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MULTEQOP        reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DIVEQOP         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MODEQOP         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    PLUSEQOP        reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MINUSEQOP       reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LSHIFTEQOP      reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RSHIFTEQOP      reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BANDEQOP        reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    BOREQOP         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DOTSTAR         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    ARROWSTAR       reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    DIVOP           reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MODOP           reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    PLUSOP          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    MINUSOP         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LSHIFT          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RSHIFT          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    GTCOMP          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    LTECOMP         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    GTECOMP         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    EQCOMP          reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    NEQCOMP         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    XOROP           reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    OROP            reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    ANDOP           reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    QUESMARK        reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RSPAREN         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)
    RCPAREN         reduce using rule 20 (enum_specifier -> ENUM IDENTIFIER LCPAREN RCPAREN .)


state 440

    (19) enum_specifier -> ENUM LCPAREN enum_list RCPAREN .

    SEMICOLON       reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    TYPEDEF         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LPAREN          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    AUTO            reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    STATIC          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    EXTERN          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    CONST           reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    VOLATILE        reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    INLINE          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    VIRTUAL         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BNOP            reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MULTOP          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BANDOP          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    CHAR            reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    SHORT           reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    INT             reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LONG            reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    SIGNED          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    UNSIGNED        reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    FLOAT           reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DOUBLE          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    VOID            reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    ENUM            reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    IDENTIFIER      reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DOUBLECOLON     reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    CLASS           reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    STRUCT          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    UNION           reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    TEMPLATE        reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    OPERATOR        reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LSPAREN         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    COLON           reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    EQUAL           reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LCPAREN         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    COMMA           reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RPAREN          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DOT             reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    ARROW           reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DPLUSOP         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DMINUSOP        reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LTCOMP          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MULTEQOP        reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DIVEQOP         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MODEQOP         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    PLUSEQOP        reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MINUSEQOP       reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LSHIFTEQOP      reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RSHIFTEQOP      reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BANDEQOP        reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    BOREQOP         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DOTSTAR         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    ARROWSTAR       reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    DIVOP           reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MODOP           reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    PLUSOP          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    MINUSOP         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LSHIFT          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RSHIFT          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    GTCOMP          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    LTECOMP         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    GTECOMP         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    EQCOMP          reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    NEQCOMP         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    XOROP           reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    OROP            reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    ANDOP           reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    QUESMARK        reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RSPAREN         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)
    RCPAREN         reduce using rule 19 (enum_specifier -> ENUM LCPAREN enum_list RCPAREN .)


state 441

    (23) enum_list -> enum_list COMMA . enumerator
    (24) enumerator -> . IDENTIFIER
    (25) enumerator -> . IDENTIFIER EQUAL constant_expression

    IDENTIFIER      shift and go to state 291

    enumerator                     shift and go to state 555

state 442

    (25) enumerator -> IDENTIFIER EQUAL . constant_expression
    (26) constant_expression -> . conditional_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    constant_expression            shift and go to state 556
    conditional_expression         shift and go to state 214
    logical_OR_expression          shift and go to state 175
    logical_AND_expression         shift and go to state 184
    inclusive_OR_expression        shift and go to state 197
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 443

    (362) base_list -> base_list COMMA . base_specifier
    (363) base_specifier -> . complete_class_name
    (364) base_specifier -> . VIRTUAL access_specifier complete_class_name
    (365) base_specifier -> . VIRTUAL complete_class_name
    (366) base_specifier -> . access_specifier VIRTUAL complete_class_name
    (367) base_specifier -> . access_specifier complete_class_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (368) access_specifier -> . PRIVATE
    (369) access_specifier -> . PROTECTED
    (370) access_specifier -> . PUBLIC
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    VIRTUAL         shift and go to state 297
    DOUBLECOLON     shift and go to state 42
    PRIVATE         shift and go to state 279
    PROTECTED       shift and go to state 280
    PUBLIC          shift and go to state 281
    IDENTIFIER      shift and go to state 91

    base_specifier                 shift and go to state 557
    complete_class_name            shift and go to state 296
    access_specifier               shift and go to state 298
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 444

    (364) base_specifier -> VIRTUAL access_specifier . complete_class_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    DOUBLECOLON     shift and go to state 42
    IDENTIFIER      shift and go to state 91

    complete_class_name            shift and go to state 558
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 445

    (365) base_specifier -> VIRTUAL complete_class_name .

    COMMA           reduce using rule 365 (base_specifier -> VIRTUAL complete_class_name .)
    LCPAREN         reduce using rule 365 (base_specifier -> VIRTUAL complete_class_name .)


state 446

    (366) base_specifier -> access_specifier VIRTUAL . complete_class_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

    DOUBLECOLON     shift and go to state 42
    IDENTIFIER      shift and go to state 91

    complete_class_name            shift and go to state 559
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 447

    (367) base_specifier -> access_specifier complete_class_name .

    COMMA           reduce using rule 367 (base_specifier -> access_specifier complete_class_name .)
    LCPAREN         reduce using rule 367 (base_specifier -> access_specifier complete_class_name .)


state 448

    (270) asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .

    ASM             reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    EXTERN          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    LPAREN          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    AUTO            reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    STATIC          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    CONST           reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    INLINE          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    VIRTUAL         reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    BNOP            reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    MULTOP          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    BANDOP          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    CHAR            reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    SHORT           reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    INT             reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    LONG            reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    SIGNED          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    FLOAT           reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    VOID            reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    ENUM            reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    DOUBLECOLON     reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    CLASS           reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    STRUCT          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    UNION           reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    OPERATOR        reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    $end            reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    RCPAREN         reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    CASE            reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    SWITCH          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    DO              reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    BREAK           reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    RETURN          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    GOTO            reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    TRY             reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    NEW             reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    DELETE          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    THIS            reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    NUMBER          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    STRING          reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    SCHAR           reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)
    ELSE            reduce using rule 270 (asm_declaration -> ASM LPAREN STRING RPAREN SEMICOLON .)


state 449

    (139) primary_expression -> LPAREN expression RPAREN .

    LSPAREN         reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    DPLUSOP         reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    DMINUSOP        reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    LTCOMP          reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    MULTEQOP        reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQOP         reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    MODEQOP         reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQOP        reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQOP       reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQOP      reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQOP      reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    BANDEQOP        reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    BOREQOP         reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    DOTSTAR         reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    ARROWSTAR       reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    MULTOP          reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    DIVOP           reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    MODOP           reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    PLUSOP          reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    MINUSOP         reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    GTCOMP          reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    LTECOMP         reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    GTECOMP         reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    EQCOMP          reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    NEQCOMP         reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    BANDOP          reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    XOROP           reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    OROP            reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    ANDOP           reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    QUESMARK        reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    RSPAREN         reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    RCPAREN         reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 139 (primary_expression -> LPAREN expression RPAREN .)


state 450

    (145) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    cast_expression                shift and go to state 560
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 451

    (146) type_name -> type_specifier_list abstract_declarator .
    (150) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (152) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (154) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (156) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RPAREN          reduce using rule 146 (type_name -> type_specifier_list abstract_declarator .)
    GTCOMP          reduce using rule 146 (type_name -> type_specifier_list abstract_declarator .)
    COMMA           reduce using rule 146 (type_name -> type_specifier_list abstract_declarator .)
    LPAREN          shift and go to state 461
    LSPAREN         shift and go to state 462


state 452

    (148) abstract_declarator -> ptr_operator . abstract_declarator
    (149) abstract_declarator -> ptr_operator .
    (148) abstract_declarator -> . ptr_operator abstract_declarator
    (149) abstract_declarator -> . ptr_operator
    (150) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (151) abstract_declarator -> . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (152) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (153) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (154) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (155) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (156) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (157) abstract_declarator -> . LSPAREN RSPAREN
    (158) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    RPAREN          reduce using rule 149 (abstract_declarator -> ptr_operator .)
    GTCOMP          reduce using rule 149 (abstract_declarator -> ptr_operator .)
    COMMA           reduce using rule 149 (abstract_declarator -> ptr_operator .)
    LPAREN          shift and go to state 453
    LSPAREN         shift and go to state 333
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    DOUBLECOLON     shift and go to state 42
    IDENTIFIER      shift and go to state 91

  ! LPAREN          [ reduce using rule 149 (abstract_declarator -> ptr_operator .) ]
  ! LSPAREN         [ reduce using rule 149 (abstract_declarator -> ptr_operator .) ]

    ptr_operator                   shift and go to state 452
    abstract_declarator            shift and go to state 463
    complete_class_name            shift and go to state 76
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 453

    (151) abstract_declarator -> LPAREN . argument_declaration_list RPAREN cv_qualifier_list
    (153) abstract_declarator -> LPAREN . argument_declaration_list RPAREN
    (158) abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (159) argument_declaration_list -> . arg_declaration_list
    (160) argument_declaration_list -> .
    (148) abstract_declarator -> . ptr_operator abstract_declarator
    (149) abstract_declarator -> . ptr_operator
    (150) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (151) abstract_declarator -> . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (152) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (153) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (154) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (155) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (156) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (157) abstract_declarator -> . LSPAREN RSPAREN
    (158) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (161) arg_declaration_list -> . argument_declaration
    (162) arg_declaration_list -> . arg_declaration_list COMMA argument_declaration
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (163) argument_declaration -> . decl_specifiers declarator
    (164) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (165) argument_declaration -> . decl_specifiers abstract_declarator
    (166) argument_declaration -> . decl_specifiers
    (167) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (168) argument_declaration -> . decl_specifiers EQUAL expression
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (407) class_name -> . IDENTIFIER
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (392) typedef_name -> . IDENTIFIER

    RPAREN          reduce using rule 160 (argument_declaration_list -> .)
    LPAREN          shift and go to state 453
    LSPAREN         shift and go to state 333
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    DOUBLECOLON     shift and go to state 42
    TYPEDEF         shift and go to state 21
    IDENTIFIER      shift and go to state 553
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 69
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70

    argument_declaration_list      shift and go to state 464
    abstract_declarator            shift and go to state 465
    arg_declaration_list           shift and go to state 169
    ptr_operator                   shift and go to state 452
    argument_declaration           shift and go to state 171
    complete_class_name            shift and go to state 41
    decl_specifiers                shift and go to state 174
    qualified_class_name           shift and go to state 155
    decl_specifier                 shift and go to state 11
    class_name                     shift and go to state 552
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    typedef_name                   shift and go to state 156

state 454

    (293) declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .

    LPAREN          reduce using rule 293 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    LSPAREN         reduce using rule 293 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    COLON           reduce using rule 293 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    EQUAL           reduce using rule 293 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    LCPAREN         reduce using rule 293 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    SEMICOLON       reduce using rule 293 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    COMMA           reduce using rule 293 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    RPAREN          reduce using rule 293 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    GTCOMP          reduce using rule 293 (declarator -> declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)


state 455

    (284) expression_list -> expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 284 (expression_list -> expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 284 (expression_list -> expression_list COMMA assignment_expression .)


state 456

    (162) arg_declaration_list -> arg_declaration_list COMMA argument_declaration .

    COMMA           reduce using rule 162 (arg_declaration_list -> arg_declaration_list COMMA argument_declaration .)
    RPAREN          reduce using rule 162 (arg_declaration_list -> arg_declaration_list COMMA argument_declaration .)


state 457

    (63) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RPAREN          reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RCPAREN         reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    GTCOMP          reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RSPAREN         reduce using rule 63 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 458

    (164) argument_declaration -> decl_specifiers declarator EQUAL . expression
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 561
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 459

    (168) argument_declaration -> decl_specifiers EQUAL expression .
    (61) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 168 (argument_declaration -> decl_specifiers EQUAL expression .)
    GTCOMP          reduce using rule 168 (argument_declaration -> decl_specifiers EQUAL expression .)
    COMMA           shift and go to state 399

  ! COMMA           [ reduce using rule 168 (argument_declaration -> decl_specifiers EQUAL expression .) ]


state 460

    (167) argument_declaration -> decl_specifiers abstract_declarator EQUAL . expression
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 562
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 461

    (150) abstract_declarator -> abstract_declarator LPAREN . argument_declaration_list RPAREN cv_qualifier_list
    (152) abstract_declarator -> abstract_declarator LPAREN . argument_declaration_list RPAREN
    (159) argument_declaration_list -> . arg_declaration_list
    (160) argument_declaration_list -> .
    (161) arg_declaration_list -> . argument_declaration
    (162) arg_declaration_list -> . arg_declaration_list COMMA argument_declaration
    (163) argument_declaration -> . decl_specifiers declarator
    (164) argument_declaration -> . decl_specifiers declarator EQUAL expression
    (165) argument_declaration -> . decl_specifiers abstract_declarator
    (166) argument_declaration -> . decl_specifiers
    (167) argument_declaration -> . decl_specifiers abstract_declarator EQUAL expression
    (168) argument_declaration -> . decl_specifiers EQUAL expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    RPAREN          reduce using rule 160 (argument_declaration_list -> .)
    TYPEDEF         shift and go to state 21
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 69
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    IDENTIFIER      shift and go to state 153

    argument_declaration_list      shift and go to state 563
    arg_declaration_list           shift and go to state 169
    argument_declaration           shift and go to state 171
    decl_specifiers                shift and go to state 174
    decl_specifier                 shift and go to state 11
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 155
    typedef_name                   shift and go to state 156

state 462

    (154) abstract_declarator -> abstract_declarator LSPAREN . constant_expression RSPAREN
    (156) abstract_declarator -> abstract_declarator LSPAREN . RSPAREN
    (26) constant_expression -> . conditional_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    RSPAREN         shift and go to state 565
    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    constant_expression            shift and go to state 564
    conditional_expression         shift and go to state 214
    logical_OR_expression          shift and go to state 175
    logical_AND_expression         shift and go to state 184
    inclusive_OR_expression        shift and go to state 197
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 463

    (148) abstract_declarator -> ptr_operator abstract_declarator .
    (150) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (152) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (154) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (156) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    EQUAL           reduce using rule 148 (abstract_declarator -> ptr_operator abstract_declarator .)
    COMMA           reduce using rule 148 (abstract_declarator -> ptr_operator abstract_declarator .)
    RPAREN          reduce using rule 148 (abstract_declarator -> ptr_operator abstract_declarator .)
    GTCOMP          reduce using rule 148 (abstract_declarator -> ptr_operator abstract_declarator .)
    LPAREN          shift and go to state 461
    LSPAREN         shift and go to state 462

  ! LPAREN          [ reduce using rule 148 (abstract_declarator -> ptr_operator abstract_declarator .) ]
  ! LSPAREN         [ reduce using rule 148 (abstract_declarator -> ptr_operator abstract_declarator .) ]


state 464

    (151) abstract_declarator -> LPAREN argument_declaration_list . RPAREN cv_qualifier_list
    (153) abstract_declarator -> LPAREN argument_declaration_list . RPAREN

    RPAREN          shift and go to state 566


state 465

    (158) abstract_declarator -> LPAREN abstract_declarator . RPAREN
    (150) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (152) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (154) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (156) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RPAREN          shift and go to state 567
    LPAREN          shift and go to state 461
    LSPAREN         shift and go to state 462


state 466

    (155) abstract_declarator -> LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 568


state 467

    (157) abstract_declarator -> LSPAREN RSPAREN .

    EQUAL           reduce using rule 157 (abstract_declarator -> LSPAREN RSPAREN .)
    LPAREN          reduce using rule 157 (abstract_declarator -> LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 157 (abstract_declarator -> LSPAREN RSPAREN .)
    COMMA           reduce using rule 157 (abstract_declarator -> LSPAREN RSPAREN .)
    RPAREN          reduce using rule 157 (abstract_declarator -> LSPAREN RSPAREN .)
    GTCOMP          reduce using rule 157 (abstract_declarator -> LSPAREN RSPAREN .)


state 468

    (28) conditional_expression -> logical_OR_expression QUESMARK expression . COLON conditional_expression
    (61) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 569
    COMMA           shift and go to state 399


state 469

    (30) logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .
    (32) logical_AND_expression -> logical_AND_expression . ANDOP inclusive_OR_expression

    QUESMARK        reduce using rule 30 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    OROP            reduce using rule 30 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RPAREN          reduce using rule 30 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COMMA           reduce using rule 30 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RSPAREN         reduce using rule 30 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    SEMICOLON       reduce using rule 30 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    RCPAREN         reduce using rule 30 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    COLON           reduce using rule 30 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    GTCOMP          reduce using rule 30 (logical_OR_expression -> logical_OR_expression OROP logical_AND_expression .)
    ANDOP           shift and go to state 350


state 470

    (124) postfix_expression -> postfix_expression LSPAREN expression . RSPAREN
    (61) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 570
    COMMA           shift and go to state 399


state 471

    (125) postfix_expression -> postfix_expression LPAREN expression_list . RPAREN
    (284) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 571
    COMMA           shift and go to state 315


state 472

    (127) postfix_expression -> postfix_expression LPAREN RPAREN .

    LSPAREN         reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DPLUSOP         reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DMINUSOP        reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTCOMP          reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUAL           reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTEQOP        reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQOP         reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQOP         reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDEQOP        reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BOREQOP         reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOTSTAR         reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULTOP          reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVOP           reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODOP           reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSOP          reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSOP         reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTCOMP          reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTECOMP         reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTECOMP         reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQCOMP          reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NEQCOMP         reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BANDOP          reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOROP           reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OROP            reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDOP           reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    QUESMARK        reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSPAREN         reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RCPAREN         reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 127 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 473

    (126) postfix_expression -> postfix_expression template_class_name LPAREN . expression_list RPAREN
    (283) expression_list -> . assignment_expression
    (284) expression_list -> . expression_list COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    postfix_expression             shift and go to state 176
    expression_list                shift and go to state 572
    assignment_expression          shift and go to state 170
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 474

    (130) postfix_expression -> postfix_expression DOT name .

    LSPAREN         reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    LPAREN          reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    DOT             reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    ARROW           reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    DPLUSOP         reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    DMINUSOP        reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    LTCOMP          reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    EQUAL           reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    MULTEQOP        reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    DIVEQOP         reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    MODEQOP         reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    PLUSEQOP        reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    MINUSEQOP       reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    LSHIFTEQOP      reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    RSHIFTEQOP      reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    BANDEQOP        reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    BOREQOP         reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    DOTSTAR         reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    ARROWSTAR       reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    MULTOP          reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    DIVOP           reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    MODOP           reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    PLUSOP          reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    MINUSOP         reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    LSHIFT          reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    RSHIFT          reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    GTCOMP          reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    LTECOMP         reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    GTECOMP         reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    EQCOMP          reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    NEQCOMP         reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    BANDOP          reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    XOROP           reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    OROP            reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    ANDOP           reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    QUESMARK        reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    RPAREN          reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    COMMA           reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    RSPAREN         reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    SEMICOLON       reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    RCPAREN         reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)
    COLON           reduce using rule 130 (postfix_expression -> postfix_expression DOT name .)


state 475

    (131) postfix_expression -> postfix_expression ARROW name .

    LSPAREN         reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    LPAREN          reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    DOT             reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    ARROW           reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    DPLUSOP         reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    DMINUSOP        reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    LTCOMP          reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    EQUAL           reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    MULTEQOP        reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    DIVEQOP         reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    MODEQOP         reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    PLUSEQOP        reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    MINUSEQOP       reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFTEQOP      reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFTEQOP      reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    BANDEQOP        reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    BOREQOP         reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    DOTSTAR         reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    ARROWSTAR       reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    MULTOP          reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    DIVOP           reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    MODOP           reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    PLUSOP          reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    MINUSOP         reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    LSHIFT          reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    RSHIFT          reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    GTCOMP          reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    LTECOMP         reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    GTECOMP         reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    EQCOMP          reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    NEQCOMP         reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    BANDOP          reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    XOROP           reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    OROP            reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    ANDOP           reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    QUESMARK        reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    RPAREN          reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    COMMA           reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    RSPAREN         reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    SEMICOLON       reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    RCPAREN         reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)
    COLON           reduce using rule 131 (postfix_expression -> postfix_expression ARROW name .)


state 476

    (12) template_class_name -> LTCOMP template_arg_list . GTCOMP
    (15) template_arg_list -> template_arg_list . COMMA template_arg

    GTCOMP          shift and go to state 573
    COMMA           shift and go to state 574


state 477

    (14) template_arg_list -> template_arg .

    GTCOMP          reduce using rule 14 (template_arg_list -> template_arg .)
    COMMA           reduce using rule 14 (template_arg_list -> template_arg .)


state 478

    (16) template_arg -> expression .
    (61) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    GTCOMP          reduce using rule 16 (template_arg -> expression .)
    COMMA           shift and go to state 399

  ! COMMA           [ reduce using rule 16 (template_arg -> expression .) ]


state 479

    (17) template_arg -> type_name .

    GTCOMP          reduce using rule 17 (template_arg -> type_name .)
    COMMA           reduce using rule 17 (template_arg -> type_name .)


state 480

    (79) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 575


state 481

    (32) logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .
    (34) inclusive_OR_expression -> inclusive_OR_expression . OROP exclusive_OR_expression

  ! shift/reduce conflict for OROP resolved as shift
    ANDOP           reduce using rule 32 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    QUESMARK        reduce using rule 32 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RPAREN          reduce using rule 32 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COMMA           reduce using rule 32 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RSPAREN         reduce using rule 32 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    SEMICOLON       reduce using rule 32 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    RCPAREN         reduce using rule 32 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    COLON           reduce using rule 32 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    GTCOMP          reduce using rule 32 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .)
    OROP            shift and go to state 366

  ! OROP            [ reduce using rule 32 (logical_AND_expression -> logical_AND_expression ANDOP inclusive_OR_expression .) ]


state 482

    (128) postfix_expression -> simple_type_name LPAREN expression_list . RPAREN
    (284) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 576
    COMMA           shift and go to state 315


state 483

    (129) postfix_expression -> simple_type_name LPAREN RPAREN .

    LSPAREN         reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LPAREN          reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DOT             reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ARROW           reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DPLUSOP         reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DMINUSOP        reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LTCOMP          reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    EQUAL           reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MULTEQOP        reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DIVEQOP         reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MODEQOP         reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BANDEQOP        reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BOREQOP         reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DOTSTAR         reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MULTOP          reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    DIVOP           reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MODOP           reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    PLUSOP          reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    MINUSOP         reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LSHIFT          reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSHIFT          reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    GTCOMP          reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    LTECOMP         reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    GTECOMP         reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    EQCOMP          reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    NEQCOMP         reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    BANDOP          reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    XOROP           reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    OROP            reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    ANDOP           reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    QUESMARK        reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RPAREN          reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    COMMA           reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RSPAREN         reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    SEMICOLON       reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    RCPAREN         reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)
    COLON           reduce using rule 129 (postfix_expression -> simple_type_name LPAREN RPAREN .)


state 484

    (86) allocation_expression -> DOUBLECOLON NEW placement . new_type_name new_initializer
    (90) allocation_expression -> DOUBLECOLON NEW placement . new_type_name
    (94) allocation_expression -> DOUBLECOLON NEW placement . LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> DOUBLECOLON NEW placement . LPAREN type_name RPAREN
    (102) new_type_name -> . type_specifier_list new_declarator
    (103) new_type_name -> . type_specifier_list
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 578
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    IDENTIFIER      shift and go to state 153

    new_type_name                  shift and go to state 577
    type_specifier_list            shift and go to state 363
    type_specifier                 shift and go to state 150
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 155
    typedef_name                   shift and go to state 156

state 485

    (88) allocation_expression -> DOUBLECOLON NEW new_type_name . new_initializer
    (92) allocation_expression -> DOUBLECOLON NEW new_type_name .
    (115) new_initializer -> . LPAREN initializer_list RPAREN
    (116) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    MULTEQOP        reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    DIVEQOP         reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    MODEQOP         reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    PLUSEQOP        reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    MINUSEQOP       reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    LSHIFTEQOP      reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    RSHIFTEQOP      reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    BANDEQOP        reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    BOREQOP         reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    DOTSTAR         reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    ARROWSTAR       reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    MULTOP          reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    DIVOP           reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    MODOP           reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    PLUSOP          reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    MINUSOP         reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    LSHIFT          reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    RSHIFT          reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    LTCOMP          reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    GTCOMP          reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    LTECOMP         reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    GTECOMP         reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    EQCOMP          reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    NEQCOMP         reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    BANDOP          reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    XOROP           reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    OROP            reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    ANDOP           reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    QUESMARK        reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    RPAREN          reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    COMMA           reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    RSPAREN         reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    SEMICOLON       reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    RCPAREN         reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    COLON           reduce using rule 92 (allocation_expression -> DOUBLECOLON NEW new_type_name .)
    LPAREN          shift and go to state 492

    new_initializer                shift and go to state 579

state 486

    (96) allocation_expression -> DOUBLECOLON NEW LPAREN . type_name RPAREN new_initializer
    (100) allocation_expression -> DOUBLECOLON NEW LPAREN . type_name RPAREN
    (114) placement -> LPAREN . expression_list RPAREN
    (146) type_name -> . type_specifier_list abstract_declarator
    (147) type_name -> . type_specifier_list
    (283) expression_list -> . assignment_expression
    (284) expression_list -> . expression_list COMMA assignment_expression
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 386
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    IDENTIFIER      shift and go to state 385
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    OPERATOR        shift and go to state 63

    type_name                      shift and go to state 580
    expression_list                shift and go to state 494
    type_specifier_list            shift and go to state 311
    assignment_expression          shift and go to state 170
    type_specifier                 shift and go to state 150
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    simple_type_name               shift and go to state 312
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    name                           shift and go to state 187
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 487

    (82) deallocation_expression -> DOUBLECOLON DELETE cast_expression .

    EQUAL           reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    MULTEQOP        reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    DIVEQOP         reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    MODEQOP         reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    PLUSEQOP        reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    MINUSEQOP       reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    LSHIFTEQOP      reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    RSHIFTEQOP      reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    BANDEQOP        reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    BOREQOP         reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    DOTSTAR         reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    ARROWSTAR       reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    MULTOP          reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    DIVOP           reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    MODOP           reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    PLUSOP          reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    MINUSOP         reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    LSHIFT          reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    RSHIFT          reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    LTCOMP          reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    GTCOMP          reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    LTECOMP         reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    GTECOMP         reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    EQCOMP          reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    NEQCOMP         reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    BANDOP          reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    XOROP           reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    OROP            reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    ANDOP           reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    QUESMARK        reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    RPAREN          reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    COMMA           reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    RSPAREN         reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    SEMICOLON       reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    RCPAREN         reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)
    COLON           reduce using rule 82 (deallocation_expression -> DOUBLECOLON DELETE cast_expression .)


state 488

    (84) deallocation_expression -> DOUBLECOLON DELETE LSPAREN . RSPAREN cast_expression

    RSPAREN         shift and go to state 581


state 489

    (87) allocation_expression -> NEW placement new_type_name . new_initializer
    (91) allocation_expression -> NEW placement new_type_name .
    (115) new_initializer -> . LPAREN initializer_list RPAREN
    (116) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    MULTEQOP        reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    DIVEQOP         reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    MODEQOP         reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    PLUSEQOP        reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    MINUSEQOP       reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    LSHIFTEQOP      reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    RSHIFTEQOP      reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    BANDEQOP        reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    BOREQOP         reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    DOTSTAR         reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    ARROWSTAR       reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    MULTOP          reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    DIVOP           reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    MODOP           reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    PLUSOP          reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    MINUSOP         reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    LSHIFT          reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    RSHIFT          reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    LTCOMP          reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    GTCOMP          reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    LTECOMP         reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    GTECOMP         reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    EQCOMP          reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    NEQCOMP         reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    BANDOP          reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    XOROP           reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    OROP            reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    ANDOP           reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    QUESMARK        reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    RPAREN          reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    COMMA           reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    RSPAREN         reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    SEMICOLON       reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    RCPAREN         reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    COLON           reduce using rule 91 (allocation_expression -> NEW placement new_type_name .)
    LPAREN          shift and go to state 492

    new_initializer                shift and go to state 582

state 490

    (95) allocation_expression -> NEW placement LPAREN . type_name RPAREN new_initializer
    (99) allocation_expression -> NEW placement LPAREN . type_name RPAREN
    (146) type_name -> . type_specifier_list abstract_declarator
    (147) type_name -> . type_specifier_list
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    IDENTIFIER      shift and go to state 153

    type_name                      shift and go to state 583
    type_specifier_list            shift and go to state 311
    type_specifier                 shift and go to state 150
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 155
    typedef_name                   shift and go to state 156

state 491

    (89) allocation_expression -> NEW new_type_name new_initializer .

    EQUAL           reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTEQOP        reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVEQOP         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    MODEQOP         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDEQOP        reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    BOREQOP         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    DOTSTAR         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    MULTOP          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    DIVOP           reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    MODOP           reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    PLUSOP          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    MINUSOP         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    LSHIFT          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    RSHIFT          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    LTCOMP          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    GTCOMP          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    LTECOMP         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    GTECOMP         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    EQCOMP          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    NEQCOMP         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    BANDOP          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    XOROP           reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    OROP            reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    ANDOP           reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    QUESMARK        reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    RPAREN          reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    COMMA           reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    RSPAREN         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    SEMICOLON       reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    RCPAREN         reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)
    COLON           reduce using rule 89 (allocation_expression -> NEW new_type_name new_initializer .)


state 492

    (115) new_initializer -> LPAREN . initializer_list RPAREN
    (116) new_initializer -> LPAREN . RPAREN
    (266) initializer_list -> . assignment_expression
    (267) initializer_list -> . initializer_list COMMA assignment_expression
    (268) initializer_list -> . LCPAREN initializer_list RCPAREN
    (269) initializer_list -> . LCPAREN initializer_list COMMA RCPAREN
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 585
    LCPAREN         shift and go to state 390
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    initializer_list               shift and go to state 584
    assignment_expression          shift and go to state 392
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 493

    (97) allocation_expression -> NEW LPAREN type_name . RPAREN new_initializer
    (101) allocation_expression -> NEW LPAREN type_name . RPAREN

    RPAREN          shift and go to state 586


state 494

    (114) placement -> LPAREN expression_list . RPAREN
    (284) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 587
    COMMA           shift and go to state 315


state 495

    (102) new_type_name -> type_specifier_list new_declarator .
    (112) new_declarator -> new_declarator . LSPAREN expression RSPAREN

    LPAREN          reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    EQUAL           reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    MULTEQOP        reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    DIVEQOP         reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    MODEQOP         reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    PLUSEQOP        reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    MINUSEQOP       reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    LSHIFTEQOP      reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    RSHIFTEQOP      reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    BANDEQOP        reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    BOREQOP         reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    DOTSTAR         reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    ARROWSTAR       reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    MULTOP          reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    DIVOP           reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    MODOP           reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    PLUSOP          reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    MINUSOP         reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    LSHIFT          reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    RSHIFT          reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    LTCOMP          reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    GTCOMP          reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    LTECOMP         reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    GTECOMP         reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    EQCOMP          reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    NEQCOMP         reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    BANDOP          reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    XOROP           reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    OROP            reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    ANDOP           reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    QUESMARK        reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    RPAREN          reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    COMMA           reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    RSPAREN         reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    SEMICOLON       reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    RCPAREN         reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    COLON           reduce using rule 102 (new_type_name -> type_specifier_list new_declarator .)
    LSPAREN         shift and go to state 588


state 496

    (104) new_declarator -> MULTOP . cv_qualifier_list new_declarator
    (105) new_declarator -> MULTOP . new_declarator
    (106) new_declarator -> MULTOP . cv_qualifier_list
    (107) new_declarator -> MULTOP .
    (399) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (400) cv_qualifier_list -> . cv_qualifier
    (104) new_declarator -> . MULTOP cv_qualifier_list new_declarator
    (105) new_declarator -> . MULTOP new_declarator
    (106) new_declarator -> . MULTOP cv_qualifier_list
    (107) new_declarator -> . MULTOP
    (108) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator
    (109) new_declarator -> . complete_class_name DOUBLECOLON MULTOP new_declarator
    (110) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (111) new_declarator -> . complete_class_name DOUBLECOLON MULTOP
    (112) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (113) new_declarator -> . LSPAREN expression RSPAREN
    (401) cv_qualifier -> . CONST
    (402) cv_qualifier -> . VOLATILE
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

  ! shift/reduce conflict for MULTOP resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 107 (new_declarator -> MULTOP .)
    EQUAL           reduce using rule 107 (new_declarator -> MULTOP .)
    MULTEQOP        reduce using rule 107 (new_declarator -> MULTOP .)
    DIVEQOP         reduce using rule 107 (new_declarator -> MULTOP .)
    MODEQOP         reduce using rule 107 (new_declarator -> MULTOP .)
    PLUSEQOP        reduce using rule 107 (new_declarator -> MULTOP .)
    MINUSEQOP       reduce using rule 107 (new_declarator -> MULTOP .)
    LSHIFTEQOP      reduce using rule 107 (new_declarator -> MULTOP .)
    RSHIFTEQOP      reduce using rule 107 (new_declarator -> MULTOP .)
    BANDEQOP        reduce using rule 107 (new_declarator -> MULTOP .)
    BOREQOP         reduce using rule 107 (new_declarator -> MULTOP .)
    DOTSTAR         reduce using rule 107 (new_declarator -> MULTOP .)
    ARROWSTAR       reduce using rule 107 (new_declarator -> MULTOP .)
    DIVOP           reduce using rule 107 (new_declarator -> MULTOP .)
    MODOP           reduce using rule 107 (new_declarator -> MULTOP .)
    PLUSOP          reduce using rule 107 (new_declarator -> MULTOP .)
    MINUSOP         reduce using rule 107 (new_declarator -> MULTOP .)
    LSHIFT          reduce using rule 107 (new_declarator -> MULTOP .)
    RSHIFT          reduce using rule 107 (new_declarator -> MULTOP .)
    LTCOMP          reduce using rule 107 (new_declarator -> MULTOP .)
    GTCOMP          reduce using rule 107 (new_declarator -> MULTOP .)
    LTECOMP         reduce using rule 107 (new_declarator -> MULTOP .)
    GTECOMP         reduce using rule 107 (new_declarator -> MULTOP .)
    EQCOMP          reduce using rule 107 (new_declarator -> MULTOP .)
    NEQCOMP         reduce using rule 107 (new_declarator -> MULTOP .)
    BANDOP          reduce using rule 107 (new_declarator -> MULTOP .)
    XOROP           reduce using rule 107 (new_declarator -> MULTOP .)
    OROP            reduce using rule 107 (new_declarator -> MULTOP .)
    ANDOP           reduce using rule 107 (new_declarator -> MULTOP .)
    QUESMARK        reduce using rule 107 (new_declarator -> MULTOP .)
    RPAREN          reduce using rule 107 (new_declarator -> MULTOP .)
    COMMA           reduce using rule 107 (new_declarator -> MULTOP .)
    RSPAREN         reduce using rule 107 (new_declarator -> MULTOP .)
    SEMICOLON       reduce using rule 107 (new_declarator -> MULTOP .)
    RCPAREN         reduce using rule 107 (new_declarator -> MULTOP .)
    COLON           reduce using rule 107 (new_declarator -> MULTOP .)
    MULTOP          shift and go to state 496
    LSPAREN         shift and go to state 498
    CONST           shift and go to state 94
    VOLATILE        shift and go to state 95
    DOUBLECOLON     shift and go to state 42
    IDENTIFIER      shift and go to state 91

  ! LSPAREN         [ reduce using rule 107 (new_declarator -> MULTOP .) ]
  ! MULTOP          [ reduce using rule 107 (new_declarator -> MULTOP .) ]

    cv_qualifier_list              shift and go to state 589
    new_declarator                 shift and go to state 590
    cv_qualifier                   shift and go to state 93
    complete_class_name            shift and go to state 497
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 497

    (108) new_declarator -> complete_class_name . DOUBLECOLON MULTOP cv_qualifier_list new_declarator
    (109) new_declarator -> complete_class_name . DOUBLECOLON MULTOP new_declarator
    (110) new_declarator -> complete_class_name . DOUBLECOLON MULTOP cv_qualifier_list
    (111) new_declarator -> complete_class_name . DOUBLECOLON MULTOP

    DOUBLECOLON     shift and go to state 591


state 498

    (113) new_declarator -> LSPAREN . expression RSPAREN
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 592
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 499

    (85) deallocation_expression -> DELETE LSPAREN RSPAREN . cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    cast_expression                shift and go to state 593
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 500

    (34) inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .
    (36) exclusive_OR_expression -> exclusive_OR_expression . XOROP AND_expression

    OROP            reduce using rule 34 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    ANDOP           reduce using rule 34 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    QUESMARK        reduce using rule 34 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RPAREN          reduce using rule 34 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COMMA           reduce using rule 34 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RSPAREN         reduce using rule 34 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    SEMICOLON       reduce using rule 34 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    RCPAREN         reduce using rule 34 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    COLON           reduce using rule 34 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    GTCOMP          reduce using rule 34 (inclusive_OR_expression -> inclusive_OR_expression OROP exclusive_OR_expression .)
    XOROP           shift and go to state 367


state 501

    (36) exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .
    (38) AND_expression -> AND_expression . BANDOP equality_expression

    XOROP           reduce using rule 36 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    OROP            reduce using rule 36 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    ANDOP           reduce using rule 36 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    QUESMARK        reduce using rule 36 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RPAREN          reduce using rule 36 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COMMA           reduce using rule 36 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RSPAREN         reduce using rule 36 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    SEMICOLON       reduce using rule 36 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    RCPAREN         reduce using rule 36 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    COLON           reduce using rule 36 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    GTCOMP          reduce using rule 36 (exclusive_OR_expression -> exclusive_OR_expression XOROP AND_expression .)
    BANDOP          shift and go to state 368


state 502

    (38) AND_expression -> AND_expression BANDOP equality_expression .
    (40) equality_expression -> equality_expression . EQCOMP relational_expression
    (41) equality_expression -> equality_expression . NEQCOMP relational_expression

    BANDOP          reduce using rule 38 (AND_expression -> AND_expression BANDOP equality_expression .)
    XOROP           reduce using rule 38 (AND_expression -> AND_expression BANDOP equality_expression .)
    OROP            reduce using rule 38 (AND_expression -> AND_expression BANDOP equality_expression .)
    ANDOP           reduce using rule 38 (AND_expression -> AND_expression BANDOP equality_expression .)
    QUESMARK        reduce using rule 38 (AND_expression -> AND_expression BANDOP equality_expression .)
    RPAREN          reduce using rule 38 (AND_expression -> AND_expression BANDOP equality_expression .)
    COMMA           reduce using rule 38 (AND_expression -> AND_expression BANDOP equality_expression .)
    RSPAREN         reduce using rule 38 (AND_expression -> AND_expression BANDOP equality_expression .)
    SEMICOLON       reduce using rule 38 (AND_expression -> AND_expression BANDOP equality_expression .)
    RCPAREN         reduce using rule 38 (AND_expression -> AND_expression BANDOP equality_expression .)
    COLON           reduce using rule 38 (AND_expression -> AND_expression BANDOP equality_expression .)
    GTCOMP          reduce using rule 38 (AND_expression -> AND_expression BANDOP equality_expression .)
    EQCOMP          shift and go to state 369
    NEQCOMP         shift and go to state 370


state 503

    (40) equality_expression -> equality_expression EQCOMP relational_expression .
    (43) relational_expression -> relational_expression . LTCOMP shift_expression
    (44) relational_expression -> relational_expression . GTCOMP shift_expression
    (45) relational_expression -> relational_expression . LTECOMP shift_expression
    (46) relational_expression -> relational_expression . GTECOMP shift_expression

  ! shift/reduce conflict for GTCOMP resolved as shift
    EQCOMP          reduce using rule 40 (equality_expression -> equality_expression EQCOMP relational_expression .)
    NEQCOMP         reduce using rule 40 (equality_expression -> equality_expression EQCOMP relational_expression .)
    BANDOP          reduce using rule 40 (equality_expression -> equality_expression EQCOMP relational_expression .)
    XOROP           reduce using rule 40 (equality_expression -> equality_expression EQCOMP relational_expression .)
    OROP            reduce using rule 40 (equality_expression -> equality_expression EQCOMP relational_expression .)
    ANDOP           reduce using rule 40 (equality_expression -> equality_expression EQCOMP relational_expression .)
    QUESMARK        reduce using rule 40 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RPAREN          reduce using rule 40 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COMMA           reduce using rule 40 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RSPAREN         reduce using rule 40 (equality_expression -> equality_expression EQCOMP relational_expression .)
    SEMICOLON       reduce using rule 40 (equality_expression -> equality_expression EQCOMP relational_expression .)
    RCPAREN         reduce using rule 40 (equality_expression -> equality_expression EQCOMP relational_expression .)
    COLON           reduce using rule 40 (equality_expression -> equality_expression EQCOMP relational_expression .)
    LTCOMP          shift and go to state 371
    GTCOMP          shift and go to state 372
    LTECOMP         shift and go to state 373
    GTECOMP         shift and go to state 374

  ! GTCOMP          [ reduce using rule 40 (equality_expression -> equality_expression EQCOMP relational_expression .) ]


state 504

    (41) equality_expression -> equality_expression NEQCOMP relational_expression .
    (43) relational_expression -> relational_expression . LTCOMP shift_expression
    (44) relational_expression -> relational_expression . GTCOMP shift_expression
    (45) relational_expression -> relational_expression . LTECOMP shift_expression
    (46) relational_expression -> relational_expression . GTECOMP shift_expression

  ! shift/reduce conflict for GTCOMP resolved as shift
    EQCOMP          reduce using rule 41 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    NEQCOMP         reduce using rule 41 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    BANDOP          reduce using rule 41 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    XOROP           reduce using rule 41 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    OROP            reduce using rule 41 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    ANDOP           reduce using rule 41 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    QUESMARK        reduce using rule 41 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RPAREN          reduce using rule 41 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COMMA           reduce using rule 41 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RSPAREN         reduce using rule 41 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    SEMICOLON       reduce using rule 41 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    RCPAREN         reduce using rule 41 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    COLON           reduce using rule 41 (equality_expression -> equality_expression NEQCOMP relational_expression .)
    LTCOMP          shift and go to state 371
    GTCOMP          shift and go to state 372
    LTECOMP         shift and go to state 373
    GTECOMP         shift and go to state 374

  ! GTCOMP          [ reduce using rule 41 (equality_expression -> equality_expression NEQCOMP relational_expression .) ]


state 505

    (43) relational_expression -> relational_expression LTCOMP shift_expression .
    (48) shift_expression -> shift_expression . LSHIFT additive_expression
    (49) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTCOMP          reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LTECOMP         reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    GTECOMP         reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    EQCOMP          reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    NEQCOMP         reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    BANDOP          reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    XOROP           reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    OROP            reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    ANDOP           reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    QUESMARK        reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RPAREN          reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COMMA           reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RSPAREN         reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    SEMICOLON       reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    RCPAREN         reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    COLON           reduce using rule 43 (relational_expression -> relational_expression LTCOMP shift_expression .)
    LSHIFT          shift and go to state 375
    RSHIFT          shift and go to state 376


state 506

    (44) relational_expression -> relational_expression GTCOMP shift_expression .
    (48) shift_expression -> shift_expression . LSHIFT additive_expression
    (49) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTCOMP          reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LTECOMP         reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    GTECOMP         reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    EQCOMP          reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    NEQCOMP         reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    BANDOP          reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    XOROP           reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    OROP            reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    ANDOP           reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    QUESMARK        reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RPAREN          reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COMMA           reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RSPAREN         reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    SEMICOLON       reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    RCPAREN         reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    COLON           reduce using rule 44 (relational_expression -> relational_expression GTCOMP shift_expression .)
    LSHIFT          shift and go to state 375
    RSHIFT          shift and go to state 376


state 507

    (45) relational_expression -> relational_expression LTECOMP shift_expression .
    (48) shift_expression -> shift_expression . LSHIFT additive_expression
    (49) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTCOMP          reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LTECOMP         reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    GTECOMP         reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    EQCOMP          reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    NEQCOMP         reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    BANDOP          reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    XOROP           reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    OROP            reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    ANDOP           reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    QUESMARK        reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RPAREN          reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COMMA           reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RSPAREN         reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    SEMICOLON       reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    RCPAREN         reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    COLON           reduce using rule 45 (relational_expression -> relational_expression LTECOMP shift_expression .)
    LSHIFT          shift and go to state 375
    RSHIFT          shift and go to state 376


state 508

    (46) relational_expression -> relational_expression GTECOMP shift_expression .
    (48) shift_expression -> shift_expression . LSHIFT additive_expression
    (49) shift_expression -> shift_expression . RSHIFT additive_expression

    LTCOMP          reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTCOMP          reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LTECOMP         reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    GTECOMP         reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    EQCOMP          reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    NEQCOMP         reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    BANDOP          reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    XOROP           reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    OROP            reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    ANDOP           reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    QUESMARK        reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RPAREN          reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COMMA           reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RSPAREN         reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    SEMICOLON       reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    RCPAREN         reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    COLON           reduce using rule 46 (relational_expression -> relational_expression GTECOMP shift_expression .)
    LSHIFT          shift and go to state 375
    RSHIFT          shift and go to state 376


state 509

    (48) shift_expression -> shift_expression LSHIFT additive_expression .
    (51) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (52) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTCOMP          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTCOMP          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTECOMP         reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTECOMP         reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQCOMP          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQCOMP         reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BANDOP          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOROP           reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OROP            reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ANDOP           reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    QUESMARK        reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSPAREN         reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMICOLON       reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RCPAREN         reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 48 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUSOP          shift and go to state 377
    MINUSOP         shift and go to state 378


state 510

    (49) shift_expression -> shift_expression RSHIFT additive_expression .
    (51) additive_expression -> additive_expression . PLUSOP multiplicative_expression
    (52) additive_expression -> additive_expression . MINUSOP multiplicative_expression

    LSHIFT          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTCOMP          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTCOMP          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTECOMP         reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTECOMP         reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQCOMP          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQCOMP         reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BANDOP          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOROP           reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OROP            reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ANDOP           reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    QUESMARK        reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSPAREN         reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMICOLON       reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RCPAREN         reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 49 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUSOP          shift and go to state 377
    MINUSOP         shift and go to state 378


state 511

    (51) additive_expression -> additive_expression PLUSOP multiplicative_expression .
    (54) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (55) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (56) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    BANDOP          reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    XOROP           reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    OROP            reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    ANDOP           reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RPAREN          reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COMMA           reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    COLON           reduce using rule 51 (additive_expression -> additive_expression PLUSOP multiplicative_expression .)
    MULTOP          shift and go to state 379
    DIVOP           shift and go to state 380
    MODOP           shift and go to state 381


state 512

    (52) additive_expression -> additive_expression MINUSOP multiplicative_expression .
    (54) multiplicative_expression -> multiplicative_expression . MULTOP pm_expression
    (55) multiplicative_expression -> multiplicative_expression . DIVOP pm_expression
    (56) multiplicative_expression -> multiplicative_expression . MODOP pm_expression

    PLUSOP          reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MINUSOP         reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LSHIFT          reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSHIFT          reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTCOMP          reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTCOMP          reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    LTECOMP         reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    GTECOMP         reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    EQCOMP          reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    NEQCOMP         reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    BANDOP          reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    XOROP           reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    OROP            reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    ANDOP           reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    QUESMARK        reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RPAREN          reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COMMA           reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RSPAREN         reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    SEMICOLON       reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    RCPAREN         reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    COLON           reduce using rule 52 (additive_expression -> additive_expression MINUSOP multiplicative_expression .)
    MULTOP          shift and go to state 379
    DIVOP           shift and go to state 380
    MODOP           shift and go to state 381


state 513

    (54) multiplicative_expression -> multiplicative_expression MULTOP pm_expression .
    (58) pm_expression -> pm_expression . DOTSTAR cast_expression
    (59) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    DIVOP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    MODOP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    PLUSOP          reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    MINUSOP         reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LSHIFT          reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RSHIFT          reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LTCOMP          reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    GTCOMP          reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    LTECOMP         reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    GTECOMP         reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    EQCOMP          reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    NEQCOMP         reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    BANDOP          reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    XOROP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    OROP            reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    ANDOP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    QUESMARK        reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RPAREN          reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    COMMA           reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RSPAREN         reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    SEMICOLON       reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    RCPAREN         reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    COLON           reduce using rule 54 (multiplicative_expression -> multiplicative_expression MULTOP pm_expression .)
    DOTSTAR         shift and go to state 382
    ARROWSTAR       shift and go to state 383


state 514

    (55) multiplicative_expression -> multiplicative_expression DIVOP pm_expression .
    (58) pm_expression -> pm_expression . DOTSTAR cast_expression
    (59) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    DIVOP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    MODOP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    PLUSOP          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    MINUSOP         reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LSHIFT          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RSHIFT          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LTCOMP          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    GTCOMP          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    LTECOMP         reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    GTECOMP         reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    EQCOMP          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    NEQCOMP         reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    BANDOP          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    XOROP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    OROP            reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    ANDOP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    QUESMARK        reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RPAREN          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    COMMA           reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RSPAREN         reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    SEMICOLON       reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    RCPAREN         reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    COLON           reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVOP pm_expression .)
    DOTSTAR         shift and go to state 382
    ARROWSTAR       shift and go to state 383


state 515

    (56) multiplicative_expression -> multiplicative_expression MODOP pm_expression .
    (58) pm_expression -> pm_expression . DOTSTAR cast_expression
    (59) pm_expression -> pm_expression . ARROWSTAR cast_expression

    MULTOP          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    DIVOP           reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    MODOP           reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    PLUSOP          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    MINUSOP         reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LSHIFT          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RSHIFT          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LTCOMP          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    GTCOMP          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    LTECOMP         reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    GTECOMP         reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    EQCOMP          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    NEQCOMP         reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    BANDOP          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    XOROP           reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    OROP            reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    ANDOP           reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    QUESMARK        reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RPAREN          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    COMMA           reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RSPAREN         reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    SEMICOLON       reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    RCPAREN         reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    COLON           reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODOP pm_expression .)
    DOTSTAR         shift and go to state 382
    ARROWSTAR       shift and go to state 383


state 516

    (58) pm_expression -> pm_expression DOTSTAR cast_expression .

    DOTSTAR         reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    ARROWSTAR       reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MULTOP          reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    DIVOP           reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MODOP           reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    PLUSOP          reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    MINUSOP         reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LSHIFT          reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RSHIFT          reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LTCOMP          reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    GTCOMP          reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    LTECOMP         reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    GTECOMP         reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    EQCOMP          reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    NEQCOMP         reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    BANDOP          reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    XOROP           reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    OROP            reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    ANDOP           reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    QUESMARK        reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RPAREN          reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    COMMA           reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RSPAREN         reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    SEMICOLON       reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    RCPAREN         reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)
    COLON           reduce using rule 58 (pm_expression -> pm_expression DOTSTAR cast_expression .)


state 517

    (59) pm_expression -> pm_expression ARROWSTAR cast_expression .

    DOTSTAR         reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    ARROWSTAR       reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MULTOP          reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    DIVOP           reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MODOP           reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    PLUSOP          reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    MINUSOP         reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LSHIFT          reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RSHIFT          reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LTCOMP          reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    GTCOMP          reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    LTECOMP         reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    GTECOMP         reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    EQCOMP          reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    NEQCOMP         reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    BANDOP          reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    XOROP           reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    OROP            reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    ANDOP           reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    QUESMARK        reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RPAREN          reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    COMMA           reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RSPAREN         reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    SEMICOLON       reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    RCPAREN         reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)
    COLON           reduce using rule 59 (pm_expression -> pm_expression ARROWSTAR cast_expression .)


state 518

    (278) mem_initializer_list -> mem_initializer COMMA mem_initializer_list .

    LCPAREN         reduce using rule 278 (mem_initializer_list -> mem_initializer COMMA mem_initializer_list .)


state 519

    (279) mem_initializer -> complete_class_name LPAREN expression_list . RPAREN
    (284) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 594
    COMMA           shift and go to state 315


state 520

    (280) mem_initializer -> complete_class_name LPAREN RPAREN .

    COMMA           reduce using rule 280 (mem_initializer -> complete_class_name LPAREN RPAREN .)
    LCPAREN         reduce using rule 280 (mem_initializer -> complete_class_name LPAREN RPAREN .)


state 521

    (281) mem_initializer -> IDENTIFIER LPAREN expression_list . RPAREN
    (284) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 595
    COMMA           shift and go to state 315


state 522

    (282) mem_initializer -> IDENTIFIER LPAREN RPAREN .

    COMMA           reduce using rule 282 (mem_initializer -> IDENTIFIER LPAREN RPAREN .)
    LCPAREN         reduce using rule 282 (mem_initializer -> IDENTIFIER LPAREN RPAREN .)


state 523

    (268) initializer_list -> LCPAREN initializer_list . RCPAREN
    (269) initializer_list -> LCPAREN initializer_list . COMMA RCPAREN
    (267) initializer_list -> initializer_list . COMMA assignment_expression

    RCPAREN         shift and go to state 596
    COMMA           shift and go to state 597


state 524

    (263) initializer -> EQUAL LCPAREN initializer_list RCPAREN .

    SEMICOLON       reduce using rule 263 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 263 (initializer -> EQUAL LCPAREN initializer_list RCPAREN .)


state 525

    (264) initializer -> EQUAL LCPAREN initializer_list COMMA . RCPAREN
    (267) initializer_list -> initializer_list COMMA . assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 598
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    assignment_expression          shift and go to state 599
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 526

    (231) labeled_statement -> IDENTIFIER COLON statement .

    RCPAREN         reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMICOLON       reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    LCPAREN         reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    TRY             reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    ASM             reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    TEMPLATE        reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    EXTERN          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    DPLUSOP         reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    DMINUSOP        reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPEDEF         reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    LPAREN          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    MULTOP          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    BANDOP          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUSOP          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUSOP         reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    NOTSYM          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    BNOP            reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLECOLON     reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    NEW             reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    DELETE          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    AUTO            reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    STATIC          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    VOLATILE        reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    INLINE          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    VIRTUAL         reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    THIS            reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    SHORT           reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    LONG            reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    SIGNED          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    UNSIGNED        reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    ENUM            reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    NUMBER          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    SCHAR           reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    CLASS           reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    STRUCT          reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    UNION           reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    OPERATOR        reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 231 (labeled_statement -> IDENTIFIER COLON statement .)


state 527

    (232) labeled_statement -> CASE constant_expression COLON . statement
    (208) statement -> . labeled_statement
    (209) statement -> . expression_statement
    (210) statement -> . compound_statement
    (211) statement -> . selection_statement
    (212) statement -> . iteration_statement
    (213) statement -> . jump_statement
    (214) statement -> . declaration_statement
    (215) statement -> . try_block
    (231) labeled_statement -> . IDENTIFIER COLON statement
    (232) labeled_statement -> . CASE constant_expression COLON statement
    (233) labeled_statement -> . DEFAULT COLON statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN
    (221) selection_statement -> . IF LPAREN expression RPAREN statement
    (222) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (223) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (234) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (235) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (236) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (216) jump_statement -> . BREAK SEMICOLON
    (217) jump_statement -> . CONTINUE SEMICOLON
    (218) jump_statement -> . RETURN expression SEMICOLON
    (219) jump_statement -> . RETURN SEMICOLON
    (220) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (244) declaration_statement -> . declaration
    (224) try_block -> . TRY compound_statement handler_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 235
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237
    SEMICOLON       shift and go to state 239
    LCPAREN         shift and go to state 85
    IF              shift and go to state 240
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 243
    DO              shift and go to state 244
    FOR             shift and go to state 245
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 247
    RETURN          shift and go to state 248
    GOTO            shift and go to state 249
    TRY             shift and go to state 251
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    statement                      shift and go to state 600
    labeled_statement              shift and go to state 227
    expression_statement           shift and go to state 228
    compound_statement             shift and go to state 229
    selection_statement            shift and go to state 230
    iteration_statement            shift and go to state 231
    jump_statement                 shift and go to state 232
    declaration_statement          shift and go to state 233
    try_block                      shift and go to state 234
    expression                     shift and go to state 238
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 528

    (233) labeled_statement -> DEFAULT COLON statement .

    RCPAREN         reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    LCPAREN         reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    TRY             reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    ASM             reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    TEMPLATE        reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    EXTERN          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    DPLUSOP         reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    DMINUSOP        reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    MULTOP          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    BANDOP          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    PLUSOP          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    MINUSOP         reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    NOTSYM          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    BNOP            reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLECOLON     reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    NEW             reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    DELETE          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    STATIC          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    VOLATILE        reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    INLINE          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    VIRTUAL         reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    THIS            reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    ENUM            reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    NUMBER          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    STRING          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    SCHAR           reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    CLASS           reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    UNION           reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    OPERATOR        reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 233 (labeled_statement -> DEFAULT COLON statement .)


state 529

    (61) expression -> expression COMMA assignment_expression .

    SEMICOLON       reduce using rule 61 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 61 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 61 (expression -> expression COMMA assignment_expression .)
    GTCOMP          reduce using rule 61 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 61 (expression -> expression COMMA assignment_expression .)
    RSPAREN         reduce using rule 61 (expression -> expression COMMA assignment_expression .)


state 530

    (221) selection_statement -> IF LPAREN expression . RPAREN statement
    (222) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (61) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 601
    COMMA           shift and go to state 399


state 531

    (223) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (61) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 602
    COMMA           shift and go to state 399


state 532

    (234) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (61) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 603
    COMMA           shift and go to state 399


state 533

    (235) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 604


state 534

    (236) iteration_statement -> FOR LPAREN for_init_statement . expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON expression RPAREN statement
    (238) iteration_statement -> FOR LPAREN for_init_statement . expression SEMICOLON RPAREN statement
    (239) iteration_statement -> FOR LPAREN for_init_statement . SEMICOLON RPAREN statement
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 606
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 605
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 535

    (240) for_init_statement -> expression_statement .

    SEMICOLON       reduce using rule 240 (for_init_statement -> expression_statement .)
    DPLUSOP         reduce using rule 240 (for_init_statement -> expression_statement .)
    DMINUSOP        reduce using rule 240 (for_init_statement -> expression_statement .)
    SIZEOF          reduce using rule 240 (for_init_statement -> expression_statement .)
    MULTOP          reduce using rule 240 (for_init_statement -> expression_statement .)
    BANDOP          reduce using rule 240 (for_init_statement -> expression_statement .)
    PLUSOP          reduce using rule 240 (for_init_statement -> expression_statement .)
    MINUSOP         reduce using rule 240 (for_init_statement -> expression_statement .)
    NOTSYM          reduce using rule 240 (for_init_statement -> expression_statement .)
    BNOP            reduce using rule 240 (for_init_statement -> expression_statement .)
    DOUBLECOLON     reduce using rule 240 (for_init_statement -> expression_statement .)
    NEW             reduce using rule 240 (for_init_statement -> expression_statement .)
    DELETE          reduce using rule 240 (for_init_statement -> expression_statement .)
    THIS            reduce using rule 240 (for_init_statement -> expression_statement .)
    LPAREN          reduce using rule 240 (for_init_statement -> expression_statement .)
    CHAR            reduce using rule 240 (for_init_statement -> expression_statement .)
    SHORT           reduce using rule 240 (for_init_statement -> expression_statement .)
    INT             reduce using rule 240 (for_init_statement -> expression_statement .)
    LONG            reduce using rule 240 (for_init_statement -> expression_statement .)
    SIGNED          reduce using rule 240 (for_init_statement -> expression_statement .)
    UNSIGNED        reduce using rule 240 (for_init_statement -> expression_statement .)
    FLOAT           reduce using rule 240 (for_init_statement -> expression_statement .)
    DOUBLE          reduce using rule 240 (for_init_statement -> expression_statement .)
    VOID            reduce using rule 240 (for_init_statement -> expression_statement .)
    NUMBER          reduce using rule 240 (for_init_statement -> expression_statement .)
    STRING          reduce using rule 240 (for_init_statement -> expression_statement .)
    SCHAR           reduce using rule 240 (for_init_statement -> expression_statement .)
    IDENTIFIER      reduce using rule 240 (for_init_statement -> expression_statement .)
    OPERATOR        reduce using rule 240 (for_init_statement -> expression_statement .)


state 536

    (241) for_init_statement -> declaration_statement .

    SEMICOLON       reduce using rule 241 (for_init_statement -> declaration_statement .)
    DPLUSOP         reduce using rule 241 (for_init_statement -> declaration_statement .)
    DMINUSOP        reduce using rule 241 (for_init_statement -> declaration_statement .)
    SIZEOF          reduce using rule 241 (for_init_statement -> declaration_statement .)
    MULTOP          reduce using rule 241 (for_init_statement -> declaration_statement .)
    BANDOP          reduce using rule 241 (for_init_statement -> declaration_statement .)
    PLUSOP          reduce using rule 241 (for_init_statement -> declaration_statement .)
    MINUSOP         reduce using rule 241 (for_init_statement -> declaration_statement .)
    NOTSYM          reduce using rule 241 (for_init_statement -> declaration_statement .)
    BNOP            reduce using rule 241 (for_init_statement -> declaration_statement .)
    DOUBLECOLON     reduce using rule 241 (for_init_statement -> declaration_statement .)
    NEW             reduce using rule 241 (for_init_statement -> declaration_statement .)
    DELETE          reduce using rule 241 (for_init_statement -> declaration_statement .)
    THIS            reduce using rule 241 (for_init_statement -> declaration_statement .)
    LPAREN          reduce using rule 241 (for_init_statement -> declaration_statement .)
    CHAR            reduce using rule 241 (for_init_statement -> declaration_statement .)
    SHORT           reduce using rule 241 (for_init_statement -> declaration_statement .)
    INT             reduce using rule 241 (for_init_statement -> declaration_statement .)
    LONG            reduce using rule 241 (for_init_statement -> declaration_statement .)
    SIGNED          reduce using rule 241 (for_init_statement -> declaration_statement .)
    UNSIGNED        reduce using rule 241 (for_init_statement -> declaration_statement .)
    FLOAT           reduce using rule 241 (for_init_statement -> declaration_statement .)
    DOUBLE          reduce using rule 241 (for_init_statement -> declaration_statement .)
    VOID            reduce using rule 241 (for_init_statement -> declaration_statement .)
    NUMBER          reduce using rule 241 (for_init_statement -> declaration_statement .)
    STRING          reduce using rule 241 (for_init_statement -> declaration_statement .)
    SCHAR           reduce using rule 241 (for_init_statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 241 (for_init_statement -> declaration_statement .)
    OPERATOR        reduce using rule 241 (for_init_statement -> declaration_statement .)


state 537

    (218) jump_statement -> RETURN expression SEMICOLON .

    RCPAREN         reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    LCPAREN         reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    TRY             reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    ASM             reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    TEMPLATE        reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    EXTERN          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    DPLUSOP         reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    DMINUSOP        reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    TYPEDEF         reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    MULTOP          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    BANDOP          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    PLUSOP          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    MINUSOP         reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    NOTSYM          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    BNOP            reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLECOLON     reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    NEW             reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    DELETE          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    AUTO            reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    STATIC          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    VOLATILE        reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    INLINE          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    VIRTUAL         reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    THIS            reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    ENUM            reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    SCHAR           reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    STRUCT          reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    UNION           reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    OPERATOR        reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 218 (jump_statement -> RETURN expression SEMICOLON .)


state 538

    (220) jump_statement -> GOTO IDENTIFIER SEMICOLON .

    RCPAREN         reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LCPAREN         reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TRY             reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ASM             reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TEMPLATE        reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DPLUSOP         reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DMINUSOP        reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEDEF         reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MULTOP          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BANDOP          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUSOP          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUSOP         reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NOTSYM          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BNOP            reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLECOLON     reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOLATILE        reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INLINE          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VIRTUAL         reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INT             reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SCHAR           reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    OPERATOR        reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 220 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)


state 539

    (224) try_block -> TRY compound_statement handler_list .

    RCPAREN         reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    IDENTIFIER      reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    CASE            reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    DEFAULT         reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    SEMICOLON       reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    LCPAREN         reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    IF              reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    SWITCH          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    WHILE           reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    DO              reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    FOR             reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    BREAK           reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    CONTINUE        reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    RETURN          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    GOTO            reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    TRY             reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    ASM             reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    TEMPLATE        reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    EXTERN          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    DPLUSOP         reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    DMINUSOP        reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    SIZEOF          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    TYPEDEF         reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    LPAREN          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    MULTOP          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    BANDOP          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    PLUSOP          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    MINUSOP         reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    NOTSYM          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    BNOP            reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    DOUBLECOLON     reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    NEW             reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    DELETE          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    AUTO            reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    STATIC          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    CONST           reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    VOLATILE        reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    INLINE          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    VIRTUAL         reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    THIS            reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    CHAR            reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    SHORT           reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    INT             reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    LONG            reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    SIGNED          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    UNSIGNED        reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    FLOAT           reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    DOUBLE          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    VOID            reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    ENUM            reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    NUMBER          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    STRING          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    SCHAR           reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    CLASS           reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    STRUCT          reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    UNION           reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    OPERATOR        reduce using rule 224 (try_block -> TRY compound_statement handler_list .)
    ELSE            reduce using rule 224 (try_block -> TRY compound_statement handler_list .)


state 540

    (225) handler_list -> handler . handler_list
    (226) handler_list -> handler .
    (225) handler_list -> . handler handler_list
    (226) handler_list -> . handler
    (227) handler -> . CATCH LPAREN exception_declaration RPAREN compound_statement

    RCPAREN         reduce using rule 226 (handler_list -> handler .)
    IDENTIFIER      reduce using rule 226 (handler_list -> handler .)
    CASE            reduce using rule 226 (handler_list -> handler .)
    DEFAULT         reduce using rule 226 (handler_list -> handler .)
    SEMICOLON       reduce using rule 226 (handler_list -> handler .)
    LCPAREN         reduce using rule 226 (handler_list -> handler .)
    IF              reduce using rule 226 (handler_list -> handler .)
    SWITCH          reduce using rule 226 (handler_list -> handler .)
    WHILE           reduce using rule 226 (handler_list -> handler .)
    DO              reduce using rule 226 (handler_list -> handler .)
    FOR             reduce using rule 226 (handler_list -> handler .)
    BREAK           reduce using rule 226 (handler_list -> handler .)
    CONTINUE        reduce using rule 226 (handler_list -> handler .)
    RETURN          reduce using rule 226 (handler_list -> handler .)
    GOTO            reduce using rule 226 (handler_list -> handler .)
    TRY             reduce using rule 226 (handler_list -> handler .)
    ASM             reduce using rule 226 (handler_list -> handler .)
    TEMPLATE        reduce using rule 226 (handler_list -> handler .)
    EXTERN          reduce using rule 226 (handler_list -> handler .)
    DPLUSOP         reduce using rule 226 (handler_list -> handler .)
    DMINUSOP        reduce using rule 226 (handler_list -> handler .)
    SIZEOF          reduce using rule 226 (handler_list -> handler .)
    TYPEDEF         reduce using rule 226 (handler_list -> handler .)
    LPAREN          reduce using rule 226 (handler_list -> handler .)
    MULTOP          reduce using rule 226 (handler_list -> handler .)
    BANDOP          reduce using rule 226 (handler_list -> handler .)
    PLUSOP          reduce using rule 226 (handler_list -> handler .)
    MINUSOP         reduce using rule 226 (handler_list -> handler .)
    NOTSYM          reduce using rule 226 (handler_list -> handler .)
    BNOP            reduce using rule 226 (handler_list -> handler .)
    DOUBLECOLON     reduce using rule 226 (handler_list -> handler .)
    NEW             reduce using rule 226 (handler_list -> handler .)
    DELETE          reduce using rule 226 (handler_list -> handler .)
    AUTO            reduce using rule 226 (handler_list -> handler .)
    STATIC          reduce using rule 226 (handler_list -> handler .)
    CONST           reduce using rule 226 (handler_list -> handler .)
    VOLATILE        reduce using rule 226 (handler_list -> handler .)
    INLINE          reduce using rule 226 (handler_list -> handler .)
    VIRTUAL         reduce using rule 226 (handler_list -> handler .)
    THIS            reduce using rule 226 (handler_list -> handler .)
    CHAR            reduce using rule 226 (handler_list -> handler .)
    SHORT           reduce using rule 226 (handler_list -> handler .)
    INT             reduce using rule 226 (handler_list -> handler .)
    LONG            reduce using rule 226 (handler_list -> handler .)
    SIGNED          reduce using rule 226 (handler_list -> handler .)
    UNSIGNED        reduce using rule 226 (handler_list -> handler .)
    FLOAT           reduce using rule 226 (handler_list -> handler .)
    DOUBLE          reduce using rule 226 (handler_list -> handler .)
    VOID            reduce using rule 226 (handler_list -> handler .)
    ENUM            reduce using rule 226 (handler_list -> handler .)
    NUMBER          reduce using rule 226 (handler_list -> handler .)
    STRING          reduce using rule 226 (handler_list -> handler .)
    SCHAR           reduce using rule 226 (handler_list -> handler .)
    CLASS           reduce using rule 226 (handler_list -> handler .)
    STRUCT          reduce using rule 226 (handler_list -> handler .)
    UNION           reduce using rule 226 (handler_list -> handler .)
    OPERATOR        reduce using rule 226 (handler_list -> handler .)
    ELSE            reduce using rule 226 (handler_list -> handler .)
    CATCH           shift and go to state 541

    handler                        shift and go to state 540
    handler_list                   shift and go to state 607

state 541

    (227) handler -> CATCH . LPAREN exception_declaration RPAREN compound_statement

    LPAREN          shift and go to state 608


state 542

    (252) template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .

    ASM             reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    TEMPLATE        reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    EXTERN          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    TYPEDEF         reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    LPAREN          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    AUTO            reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    STATIC          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    CONST           reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    VOLATILE        reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    INLINE          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    VIRTUAL         reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    BNOP            reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    MULTOP          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    BANDOP          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    CHAR            reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    SHORT           reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    INT             reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    LONG            reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    SIGNED          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    UNSIGNED        reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    FLOAT           reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    DOUBLE          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    VOID            reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    ENUM            reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    IDENTIFIER      reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    DOUBLECOLON     reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    CLASS           reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    STRUCT          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    UNION           reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    OPERATOR        reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    $end            reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    RCPAREN         reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    CASE            reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    DEFAULT         reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    SEMICOLON       reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    LCPAREN         reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    IF              reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    SWITCH          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    WHILE           reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    DO              reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    FOR             reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    BREAK           reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    CONTINUE        reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    RETURN          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    GOTO            reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    TRY             reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    DPLUSOP         reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    DMINUSOP        reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    SIZEOF          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    PLUSOP          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    MINUSOP         reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    NOTSYM          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    NEW             reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    DELETE          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    THIS            reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    NUMBER          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    STRING          reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    SCHAR           reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)
    ELSE            reduce using rule 252 (template_declaration -> TEMPLATE LTCOMP template_argument_list GTCOMP declaration .)


state 543

    (254) template_argument_list -> template_argument_list COMMA template_argument .

    GTCOMP          reduce using rule 254 (template_argument_list -> template_argument_list COMMA template_argument .)
    COMMA           reduce using rule 254 (template_argument_list -> template_argument_list COMMA template_argument .)


state 544

    (271) linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .

    ASM             reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    TEMPLATE        reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    EXTERN          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    TYPEDEF         reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    LPAREN          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    AUTO            reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    STATIC          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    CONST           reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    VOLATILE        reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    INLINE          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    VIRTUAL         reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    BNOP            reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    MULTOP          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    BANDOP          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    CHAR            reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    SHORT           reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    INT             reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    LONG            reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    SIGNED          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    UNSIGNED        reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    FLOAT           reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    DOUBLE          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    VOID            reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    ENUM            reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    IDENTIFIER      reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    DOUBLECOLON     reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    CLASS           reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    STRUCT          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    UNION           reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    OPERATOR        reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    $end            reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    RCPAREN         reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    CASE            reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    DEFAULT         reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    SEMICOLON       reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    LCPAREN         reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    IF              reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    SWITCH          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    WHILE           reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    DO              reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    FOR             reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    BREAK           reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    CONTINUE        reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    RETURN          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    GOTO            reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    TRY             reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    DPLUSOP         reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    DMINUSOP        reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    SIZEOF          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    PLUSOP          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    MINUSOP         reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    NOTSYM          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    NEW             reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    DELETE          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    THIS            reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    NUMBER          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    STRING          reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    SCHAR           reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)
    ELSE            reduce using rule 271 (linkage_specification -> EXTERN STRING LCPAREN declaration_list RCPAREN .)


state 545

    (275) declaration_list -> declaration_list declaration .

    RCPAREN         reduce using rule 275 (declaration_list -> declaration_list declaration .)
    ASM             reduce using rule 275 (declaration_list -> declaration_list declaration .)
    TEMPLATE        reduce using rule 275 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 275 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 275 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 275 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 275 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 275 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 275 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 275 (declaration_list -> declaration_list declaration .)
    INLINE          reduce using rule 275 (declaration_list -> declaration_list declaration .)
    VIRTUAL         reduce using rule 275 (declaration_list -> declaration_list declaration .)
    BNOP            reduce using rule 275 (declaration_list -> declaration_list declaration .)
    MULTOP          reduce using rule 275 (declaration_list -> declaration_list declaration .)
    BANDOP          reduce using rule 275 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 275 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 275 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 275 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 275 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 275 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 275 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 275 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 275 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 275 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 275 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 275 (declaration_list -> declaration_list declaration .)
    DOUBLECOLON     reduce using rule 275 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 275 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 275 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 275 (declaration_list -> declaration_list declaration .)
    OPERATOR        reduce using rule 275 (declaration_list -> declaration_list declaration .)


state 546

    (190) member_list -> access_specifier COLON member_list .

    RCPAREN         reduce using rule 190 (member_list -> access_specifier COLON member_list .)


state 547

    (192) member_declaration -> decl_specifiers member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    PROTECTED       reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    COLON           reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    AUTO            reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    STATIC          reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    CONST           reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    INLINE          reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    VIRTUAL         reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    BNOP            reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    MULTOP          reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    BANDOP          reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    SHORT           reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    INT             reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    LONG            reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    VOID            reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    ENUM            reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    DOUBLECOLON     reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    UNION           reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    TEMPLATE        reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    OPERATOR        reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)
    RCPAREN         reduce using rule 192 (member_declaration -> decl_specifiers member_declarator_list SEMICOLON .)


state 548

    (286) member_declarator_list -> member_declarator_list COMMA member_declarator .

    SEMICOLON       reduce using rule 286 (member_declarator_list -> member_declarator_list COMMA member_declarator .)
    COMMA           reduce using rule 286 (member_declarator_list -> member_declarator_list COMMA member_declarator .)


state 549

    (287) member_declarator -> declarator . pure_specifier
    (288) member_declarator -> declarator .
    (293) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (295) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (296) declarator -> declarator . LSPAREN RSPAREN
    (353) pure_specifier -> . EQUAL NUMBER

    SEMICOLON       reduce using rule 288 (member_declarator -> declarator .)
    COMMA           reduce using rule 288 (member_declarator -> declarator .)
    LPAREN          shift and go to state 163
    LSPAREN         shift and go to state 81
    EQUAL           shift and go to state 435

    pure_specifier                 shift and go to state 434

state 550

    (353) pure_specifier -> EQUAL NUMBER .

    SEMICOLON       reduce using rule 353 (pure_specifier -> EQUAL NUMBER .)
    COMMA           reduce using rule 353 (pure_specifier -> EQUAL NUMBER .)


state 551

    (289) member_declarator -> IDENTIFIER COLON constant_expression .

    SEMICOLON       reduce using rule 289 (member_declarator -> IDENTIFIER COLON constant_expression .)
    COMMA           reduce using rule 289 (member_declarator -> IDENTIFIER COLON constant_expression .)


state 552

    (405) qualified_class_name -> class_name .
    (406) qualified_class_name -> class_name . DOUBLECOLON qualified_class_name
    (391) qualified_type_name -> class_name . DOUBLECOLON qualified_type_name

  ! shift/reduce conflict for DOUBLECOLON resolved as shift
    SEMICOLON       reduce using rule 405 (qualified_class_name -> class_name .)
    TYPEDEF         reduce using rule 405 (qualified_class_name -> class_name .)
    LPAREN          reduce using rule 405 (qualified_class_name -> class_name .)
    IDENTIFIER      reduce using rule 405 (qualified_class_name -> class_name .)
    COLON           reduce using rule 405 (qualified_class_name -> class_name .)
    AUTO            reduce using rule 405 (qualified_class_name -> class_name .)
    STATIC          reduce using rule 405 (qualified_class_name -> class_name .)
    EXTERN          reduce using rule 405 (qualified_class_name -> class_name .)
    CONST           reduce using rule 405 (qualified_class_name -> class_name .)
    VOLATILE        reduce using rule 405 (qualified_class_name -> class_name .)
    INLINE          reduce using rule 405 (qualified_class_name -> class_name .)
    VIRTUAL         reduce using rule 405 (qualified_class_name -> class_name .)
    BNOP            reduce using rule 405 (qualified_class_name -> class_name .)
    MULTOP          reduce using rule 405 (qualified_class_name -> class_name .)
    BANDOP          reduce using rule 405 (qualified_class_name -> class_name .)
    CHAR            reduce using rule 405 (qualified_class_name -> class_name .)
    SHORT           reduce using rule 405 (qualified_class_name -> class_name .)
    INT             reduce using rule 405 (qualified_class_name -> class_name .)
    LONG            reduce using rule 405 (qualified_class_name -> class_name .)
    SIGNED          reduce using rule 405 (qualified_class_name -> class_name .)
    UNSIGNED        reduce using rule 405 (qualified_class_name -> class_name .)
    FLOAT           reduce using rule 405 (qualified_class_name -> class_name .)
    DOUBLE          reduce using rule 405 (qualified_class_name -> class_name .)
    VOID            reduce using rule 405 (qualified_class_name -> class_name .)
    ENUM            reduce using rule 405 (qualified_class_name -> class_name .)
    CLASS           reduce using rule 405 (qualified_class_name -> class_name .)
    STRUCT          reduce using rule 405 (qualified_class_name -> class_name .)
    UNION           reduce using rule 405 (qualified_class_name -> class_name .)
    TEMPLATE        reduce using rule 405 (qualified_class_name -> class_name .)
    OPERATOR        reduce using rule 405 (qualified_class_name -> class_name .)
    EQUAL           reduce using rule 405 (qualified_class_name -> class_name .)
    LSPAREN         reduce using rule 405 (qualified_class_name -> class_name .)
    COMMA           reduce using rule 405 (qualified_class_name -> class_name .)
    RPAREN          reduce using rule 405 (qualified_class_name -> class_name .)
    DOUBLECOLON     shift and go to state 437

  ! DOUBLECOLON     [ reduce using rule 405 (qualified_class_name -> class_name .) ]


state 553

    (407) class_name -> IDENTIFIER .
    (392) typedef_name -> IDENTIFIER .

  ! reduce/reduce conflict for LPAREN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LSPAREN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COLON resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EQUAL resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for AUTO resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STATIC resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for EXTERN resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CONST resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOLATILE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INLINE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VIRTUAL resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BNOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for MULTOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for BANDOP resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for SIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNSIGNED resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for VOID resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for ENUM resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLECOLON resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for CLASS resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for STRUCT resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for UNION resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for TEMPLATE resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 392 (typedef_name -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 392 (typedef_name -> IDENTIFIER .)
    LPAREN          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LSPAREN         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    COLON           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    EQUAL           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LCPAREN         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 392 (typedef_name -> IDENTIFIER .)
    COMMA           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    TYPEDEF         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 392 (typedef_name -> IDENTIFIER .)
    AUTO            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STATIC          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    EXTERN          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CONST           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOLATILE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INLINE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VIRTUAL         reduce using rule 392 (typedef_name -> IDENTIFIER .)
    BNOP            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    MULTOP          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    BANDOP          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CHAR            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SHORT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    INT             reduce using rule 392 (typedef_name -> IDENTIFIER .)
    LONG            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    SIGNED          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNSIGNED        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    FLOAT           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLE          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    VOID            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    ENUM            reduce using rule 392 (typedef_name -> IDENTIFIER .)
    DOUBLECOLON     reduce using rule 392 (typedef_name -> IDENTIFIER .)
    CLASS           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    STRUCT          reduce using rule 392 (typedef_name -> IDENTIFIER .)
    UNION           reduce using rule 392 (typedef_name -> IDENTIFIER .)
    TEMPLATE        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    OPERATOR        reduce using rule 392 (typedef_name -> IDENTIFIER .)
    RPAREN          reduce using rule 392 (typedef_name -> IDENTIFIER .)

  ! DOUBLECOLON     [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TYPEDEF         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! AUTO            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STATIC          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EXTERN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOLATILE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INLINE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VIRTUAL         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BNOP            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! MULTOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! BANDOP          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CHAR            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SHORT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! INT             [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LONG            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! SIGNED          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNSIGNED        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! DOUBLE          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! VOID            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! ENUM            [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! CLASS           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! STRUCT          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! UNION           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! TEMPLATE        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! OPERATOR        [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! EQUAL           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! LSPAREN         [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 407 (class_name -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 407 (class_name -> IDENTIFIER .) ]


state 554

    (18) enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .

    SEMICOLON       reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    TYPEDEF         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LPAREN          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    AUTO            reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    STATIC          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    EXTERN          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    CONST           reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    VOLATILE        reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    INLINE          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    VIRTUAL         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BNOP            reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MULTOP          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BANDOP          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    CHAR            reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    SHORT           reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    INT             reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LONG            reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    SIGNED          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    UNSIGNED        reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    FLOAT           reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DOUBLE          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    VOID            reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    ENUM            reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    IDENTIFIER      reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DOUBLECOLON     reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    CLASS           reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    STRUCT          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    UNION           reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    TEMPLATE        reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    OPERATOR        reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LSPAREN         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    COLON           reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    EQUAL           reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LCPAREN         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    COMMA           reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RPAREN          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DOT             reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    ARROW           reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DPLUSOP         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DMINUSOP        reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LTCOMP          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MULTEQOP        reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DIVEQOP         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MODEQOP         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    PLUSEQOP        reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MINUSEQOP       reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LSHIFTEQOP      reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RSHIFTEQOP      reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BANDEQOP        reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    BOREQOP         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DOTSTAR         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    ARROWSTAR       reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    DIVOP           reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MODOP           reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    PLUSOP          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    MINUSOP         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LSHIFT          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RSHIFT          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    GTCOMP          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    LTECOMP         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    GTECOMP         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    EQCOMP          reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    NEQCOMP         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    XOROP           reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    OROP            reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    ANDOP           reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    QUESMARK        reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RSPAREN         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)
    RCPAREN         reduce using rule 18 (enum_specifier -> ENUM IDENTIFIER LCPAREN enum_list RCPAREN .)


state 555

    (23) enum_list -> enum_list COMMA enumerator .

    RCPAREN         reduce using rule 23 (enum_list -> enum_list COMMA enumerator .)
    COMMA           reduce using rule 23 (enum_list -> enum_list COMMA enumerator .)


state 556

    (25) enumerator -> IDENTIFIER EQUAL constant_expression .

    RCPAREN         reduce using rule 25 (enumerator -> IDENTIFIER EQUAL constant_expression .)
    COMMA           reduce using rule 25 (enumerator -> IDENTIFIER EQUAL constant_expression .)


state 557

    (362) base_list -> base_list COMMA base_specifier .

    COMMA           reduce using rule 362 (base_list -> base_list COMMA base_specifier .)
    LCPAREN         reduce using rule 362 (base_list -> base_list COMMA base_specifier .)


state 558

    (364) base_specifier -> VIRTUAL access_specifier complete_class_name .

    COMMA           reduce using rule 364 (base_specifier -> VIRTUAL access_specifier complete_class_name .)
    LCPAREN         reduce using rule 364 (base_specifier -> VIRTUAL access_specifier complete_class_name .)


state 559

    (366) base_specifier -> access_specifier VIRTUAL complete_class_name .

    COMMA           reduce using rule 366 (base_specifier -> access_specifier VIRTUAL complete_class_name .)
    LCPAREN         reduce using rule 366 (base_specifier -> access_specifier VIRTUAL complete_class_name .)


state 560

    (145) cast_expression -> LPAREN type_name RPAREN cast_expression .

    DOTSTAR         reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ARROWSTAR       reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTOP          reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVOP           reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODOP           reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSOP          reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSOP         reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTCOMP          reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTCOMP          reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LTECOMP         reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GTECOMP         reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQCOMP          reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NEQCOMP         reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDOP          reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOROP           reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OROP            reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDOP           reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    QUESMARK        reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSPAREN         reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMICOLON       reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUAL           reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MULTEQOP        reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQOP         reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQOP         reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQOP        reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQOP       reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQOP      reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQOP      reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BANDEQOP        reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BOREQOP         reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RCPAREN         reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 145 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 561

    (164) argument_declaration -> decl_specifiers declarator EQUAL expression .
    (61) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 164 (argument_declaration -> decl_specifiers declarator EQUAL expression .)
    GTCOMP          reduce using rule 164 (argument_declaration -> decl_specifiers declarator EQUAL expression .)
    COMMA           shift and go to state 399

  ! COMMA           [ reduce using rule 164 (argument_declaration -> decl_specifiers declarator EQUAL expression .) ]


state 562

    (167) argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .
    (61) expression -> expression . COMMA assignment_expression

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 167 (argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .)
    GTCOMP          reduce using rule 167 (argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .)
    COMMA           shift and go to state 399

  ! COMMA           [ reduce using rule 167 (argument_declaration -> decl_specifiers abstract_declarator EQUAL expression .) ]


state 563

    (150) abstract_declarator -> abstract_declarator LPAREN argument_declaration_list . RPAREN cv_qualifier_list
    (152) abstract_declarator -> abstract_declarator LPAREN argument_declaration_list . RPAREN

    RPAREN          shift and go to state 609


state 564

    (154) abstract_declarator -> abstract_declarator LSPAREN constant_expression . RSPAREN

    RSPAREN         shift and go to state 610


state 565

    (156) abstract_declarator -> abstract_declarator LSPAREN RSPAREN .

    EQUAL           reduce using rule 156 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    LPAREN          reduce using rule 156 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    LSPAREN         reduce using rule 156 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    COMMA           reduce using rule 156 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    RPAREN          reduce using rule 156 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)
    GTCOMP          reduce using rule 156 (abstract_declarator -> abstract_declarator LSPAREN RSPAREN .)


state 566

    (151) abstract_declarator -> LPAREN argument_declaration_list RPAREN . cv_qualifier_list
    (153) abstract_declarator -> LPAREN argument_declaration_list RPAREN .
    (399) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (400) cv_qualifier_list -> . cv_qualifier
    (401) cv_qualifier -> . CONST
    (402) cv_qualifier -> . VOLATILE

    EQUAL           reduce using rule 153 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    LPAREN          reduce using rule 153 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    LSPAREN         reduce using rule 153 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    COMMA           reduce using rule 153 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    RPAREN          reduce using rule 153 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    GTCOMP          reduce using rule 153 (abstract_declarator -> LPAREN argument_declaration_list RPAREN .)
    CONST           shift and go to state 94
    VOLATILE        shift and go to state 95

    cv_qualifier_list              shift and go to state 611
    cv_qualifier                   shift and go to state 93

state 567

    (158) abstract_declarator -> LPAREN abstract_declarator RPAREN .

    EQUAL           reduce using rule 158 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 158 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LSPAREN         reduce using rule 158 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 158 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 158 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    GTCOMP          reduce using rule 158 (abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 568

    (155) abstract_declarator -> LSPAREN constant_expression RSPAREN .

    EQUAL           reduce using rule 155 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    LPAREN          reduce using rule 155 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 155 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 155 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 155 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)
    GTCOMP          reduce using rule 155 (abstract_declarator -> LSPAREN constant_expression RSPAREN .)


state 569

    (28) conditional_expression -> logical_OR_expression QUESMARK expression COLON . conditional_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    logical_OR_expression          shift and go to state 175
    conditional_expression         shift and go to state 612
    logical_AND_expression         shift and go to state 184
    inclusive_OR_expression        shift and go to state 197
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211
    cast_expression                shift and go to state 180
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 570

    (124) postfix_expression -> postfix_expression LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOT             reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROW           reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DPLUSOP         reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DMINUSOP        reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    OROP            reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)
    COLON           reduce using rule 124 (postfix_expression -> postfix_expression LSPAREN expression RSPAREN .)


state 571

    (125) postfix_expression -> postfix_expression LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOT             reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    OROP            reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)
    COLON           reduce using rule 125 (postfix_expression -> postfix_expression LPAREN expression_list RPAREN .)


state 572

    (126) postfix_expression -> postfix_expression template_class_name LPAREN expression_list . RPAREN
    (284) expression_list -> expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 613
    COMMA           shift and go to state 315


state 573

    (12) template_class_name -> LTCOMP template_arg_list GTCOMP .

    LPAREN          reduce using rule 12 (template_class_name -> LTCOMP template_arg_list GTCOMP .)


state 574

    (15) template_arg_list -> template_arg_list COMMA . template_arg
    (16) template_arg -> . expression
    (17) template_arg -> . type_name
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (146) type_name -> . type_specifier_list abstract_declarator
    (147) type_name -> . type_specifier_list
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    template_arg                   shift and go to state 614
    expression                     shift and go to state 478
    type_name                      shift and go to state 479
    assignment_expression          shift and go to state 252
    type_specifier_list            shift and go to state 311
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    type_specifier                 shift and go to state 150
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    simple_type_name               shift and go to state 312
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    name                           shift and go to state 187
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 575

    (79) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    EQUAL           reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODOP           reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOROP           reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OROP            reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 79 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 576

    (128) postfix_expression -> simple_type_name LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DOT             reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    OROP            reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)
    COLON           reduce using rule 128 (postfix_expression -> simple_type_name LPAREN expression_list RPAREN .)


state 577

    (86) allocation_expression -> DOUBLECOLON NEW placement new_type_name . new_initializer
    (90) allocation_expression -> DOUBLECOLON NEW placement new_type_name .
    (115) new_initializer -> . LPAREN initializer_list RPAREN
    (116) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    MULTEQOP        reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    DIVEQOP         reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    MODEQOP         reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    PLUSEQOP        reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    MINUSEQOP       reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    LSHIFTEQOP      reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    RSHIFTEQOP      reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    BANDEQOP        reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    BOREQOP         reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    DOTSTAR         reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    ARROWSTAR       reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    MULTOP          reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    DIVOP           reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    MODOP           reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    PLUSOP          reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    MINUSOP         reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    LSHIFT          reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    RSHIFT          reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    LTCOMP          reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    GTCOMP          reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    LTECOMP         reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    GTECOMP         reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    EQCOMP          reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    NEQCOMP         reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    BANDOP          reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    XOROP           reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    OROP            reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    ANDOP           reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    QUESMARK        reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    RPAREN          reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    COMMA           reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    RSPAREN         reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    SEMICOLON       reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    RCPAREN         reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    COLON           reduce using rule 90 (allocation_expression -> DOUBLECOLON NEW placement new_type_name .)
    LPAREN          shift and go to state 492

    new_initializer                shift and go to state 615

state 578

    (94) allocation_expression -> DOUBLECOLON NEW placement LPAREN . type_name RPAREN new_initializer
    (98) allocation_expression -> DOUBLECOLON NEW placement LPAREN . type_name RPAREN
    (146) type_name -> . type_specifier_list abstract_declarator
    (147) type_name -> . type_specifier_list
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    IDENTIFIER      shift and go to state 153

    type_name                      shift and go to state 616
    type_specifier_list            shift and go to state 311
    type_specifier                 shift and go to state 150
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 155
    typedef_name                   shift and go to state 156

state 579

    (88) allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .

    EQUAL           reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    MULTEQOP        reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    DIVEQOP         reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    MODEQOP         reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    BANDEQOP        reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    BOREQOP         reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    DOTSTAR         reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    MULTOP          reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    DIVOP           reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    MODOP           reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    PLUSOP          reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    MINUSOP         reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    LSHIFT          reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    RSHIFT          reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    LTCOMP          reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    GTCOMP          reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    LTECOMP         reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    GTECOMP         reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    EQCOMP          reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    NEQCOMP         reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    BANDOP          reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    XOROP           reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    OROP            reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    ANDOP           reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    QUESMARK        reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    RPAREN          reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    COMMA           reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    RSPAREN         reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    SEMICOLON       reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    RCPAREN         reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)
    COLON           reduce using rule 88 (allocation_expression -> DOUBLECOLON NEW new_type_name new_initializer .)


state 580

    (96) allocation_expression -> DOUBLECOLON NEW LPAREN type_name . RPAREN new_initializer
    (100) allocation_expression -> DOUBLECOLON NEW LPAREN type_name . RPAREN

    RPAREN          shift and go to state 617


state 581

    (84) deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN . cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    LPAREN          shift and go to state 216
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    cast_expression                shift and go to state 618
    unary_expression               shift and go to state 215
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156

state 582

    (87) allocation_expression -> NEW placement new_type_name new_initializer .

    EQUAL           reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MULTEQOP        reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    DIVEQOP         reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MODEQOP         reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    BANDEQOP        reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    BOREQOP         reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    DOTSTAR         reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MULTOP          reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    DIVOP           reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MODOP           reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    PLUSOP          reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    MINUSOP         reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LSHIFT          reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RSHIFT          reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LTCOMP          reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    GTCOMP          reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    LTECOMP         reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    GTECOMP         reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    EQCOMP          reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    NEQCOMP         reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    BANDOP          reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    XOROP           reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    OROP            reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    ANDOP           reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    QUESMARK        reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RPAREN          reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    COMMA           reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RSPAREN         reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    SEMICOLON       reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    RCPAREN         reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)
    COLON           reduce using rule 87 (allocation_expression -> NEW placement new_type_name new_initializer .)


state 583

    (95) allocation_expression -> NEW placement LPAREN type_name . RPAREN new_initializer
    (99) allocation_expression -> NEW placement LPAREN type_name . RPAREN

    RPAREN          shift and go to state 619


state 584

    (115) new_initializer -> LPAREN initializer_list . RPAREN
    (267) initializer_list -> initializer_list . COMMA assignment_expression

    RPAREN          shift and go to state 620
    COMMA           shift and go to state 621


state 585

    (116) new_initializer -> LPAREN RPAREN .

    EQUAL           reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    MULTEQOP        reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    DIVEQOP         reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    MODEQOP         reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    PLUSEQOP        reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    MINUSEQOP       reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    LSHIFTEQOP      reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    RSHIFTEQOP      reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    BANDEQOP        reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    BOREQOP         reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    DOTSTAR         reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    ARROWSTAR       reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    MULTOP          reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    DIVOP           reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    MODOP           reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    PLUSOP          reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    MINUSOP         reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    LSHIFT          reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    RSHIFT          reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    LTCOMP          reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    GTCOMP          reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    LTECOMP         reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    GTECOMP         reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    EQCOMP          reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    NEQCOMP         reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    BANDOP          reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    XOROP           reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    OROP            reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    ANDOP           reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    QUESMARK        reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    RPAREN          reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    COMMA           reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    RSPAREN         reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    RCPAREN         reduce using rule 116 (new_initializer -> LPAREN RPAREN .)
    COLON           reduce using rule 116 (new_initializer -> LPAREN RPAREN .)


state 586

    (97) allocation_expression -> NEW LPAREN type_name RPAREN . new_initializer
    (101) allocation_expression -> NEW LPAREN type_name RPAREN .
    (115) new_initializer -> . LPAREN initializer_list RPAREN
    (116) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MODOP           reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    XOROP           reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    OROP            reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COMMA           reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    COLON           reduce using rule 101 (allocation_expression -> NEW LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 492

    new_initializer                shift and go to state 622

state 587

    (114) placement -> LPAREN expression_list RPAREN .

    LPAREN          reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    CONST           reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    VOLATILE        reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    CHAR            reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    SHORT           reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    INT             reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    LONG            reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    SIGNED          reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    UNSIGNED        reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    FLOAT           reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    DOUBLE          reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    VOID            reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    ENUM            reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    DOUBLECOLON     reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    CLASS           reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    STRUCT          reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    UNION           reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    TEMPLATE        reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)
    IDENTIFIER      reduce using rule 114 (placement -> LPAREN expression_list RPAREN .)


state 588

    (112) new_declarator -> new_declarator LSPAREN . expression RSPAREN
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 623
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 589

    (104) new_declarator -> MULTOP cv_qualifier_list . new_declarator
    (106) new_declarator -> MULTOP cv_qualifier_list .
    (104) new_declarator -> . MULTOP cv_qualifier_list new_declarator
    (105) new_declarator -> . MULTOP new_declarator
    (106) new_declarator -> . MULTOP cv_qualifier_list
    (107) new_declarator -> . MULTOP
    (108) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator
    (109) new_declarator -> . complete_class_name DOUBLECOLON MULTOP new_declarator
    (110) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (111) new_declarator -> . complete_class_name DOUBLECOLON MULTOP
    (112) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (113) new_declarator -> . LSPAREN expression RSPAREN
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

  ! shift/reduce conflict for MULTOP resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    EQUAL           reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    MULTEQOP        reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    DIVEQOP         reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    MODEQOP         reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    PLUSEQOP        reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    MINUSEQOP       reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    LSHIFTEQOP      reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    RSHIFTEQOP      reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    BANDEQOP        reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    BOREQOP         reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    DOTSTAR         reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    ARROWSTAR       reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    DIVOP           reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    MODOP           reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    PLUSOP          reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    MINUSOP         reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    LSHIFT          reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    RSHIFT          reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    LTCOMP          reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    GTCOMP          reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    LTECOMP         reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    GTECOMP         reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    EQCOMP          reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    NEQCOMP         reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    BANDOP          reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    XOROP           reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    OROP            reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    ANDOP           reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    QUESMARK        reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    RPAREN          reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    COMMA           reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    RSPAREN         reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    SEMICOLON       reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    RCPAREN         reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    COLON           reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .)
    MULTOP          shift and go to state 496
    LSPAREN         shift and go to state 498
    DOUBLECOLON     shift and go to state 42
    IDENTIFIER      shift and go to state 91

  ! LSPAREN         [ reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .) ]
  ! MULTOP          [ reduce using rule 106 (new_declarator -> MULTOP cv_qualifier_list .) ]

    new_declarator                 shift and go to state 624
    complete_class_name            shift and go to state 497
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 590

    (105) new_declarator -> MULTOP new_declarator .
    (112) new_declarator -> new_declarator . LSPAREN expression RSPAREN

  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    EQUAL           reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    MULTEQOP        reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    DIVEQOP         reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    MODEQOP         reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    PLUSEQOP        reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    MINUSEQOP       reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    LSHIFTEQOP      reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    RSHIFTEQOP      reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    BANDEQOP        reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    BOREQOP         reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    DOTSTAR         reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    ARROWSTAR       reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    MULTOP          reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    DIVOP           reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    MODOP           reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    PLUSOP          reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    MINUSOP         reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    LSHIFT          reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    RSHIFT          reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    LTCOMP          reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    GTCOMP          reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    LTECOMP         reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    GTECOMP         reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    EQCOMP          reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    NEQCOMP         reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    BANDOP          reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    XOROP           reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    OROP            reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    ANDOP           reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    QUESMARK        reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    RPAREN          reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    COMMA           reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    RSPAREN         reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    SEMICOLON       reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    RCPAREN         reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    COLON           reduce using rule 105 (new_declarator -> MULTOP new_declarator .)
    LSPAREN         shift and go to state 588

  ! LSPAREN         [ reduce using rule 105 (new_declarator -> MULTOP new_declarator .) ]


state 591

    (108) new_declarator -> complete_class_name DOUBLECOLON . MULTOP cv_qualifier_list new_declarator
    (109) new_declarator -> complete_class_name DOUBLECOLON . MULTOP new_declarator
    (110) new_declarator -> complete_class_name DOUBLECOLON . MULTOP cv_qualifier_list
    (111) new_declarator -> complete_class_name DOUBLECOLON . MULTOP

    MULTOP          shift and go to state 625


state 592

    (113) new_declarator -> LSPAREN expression . RSPAREN
    (61) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 626
    COMMA           shift and go to state 399


state 593

    (85) deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .

    EQUAL           reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    MULTEQOP        reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    DIVEQOP         reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    MODEQOP         reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    PLUSEQOP        reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    MINUSEQOP       reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    LSHIFTEQOP      reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    RSHIFTEQOP      reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    BANDEQOP        reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    BOREQOP         reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    DOTSTAR         reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    ARROWSTAR       reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    MULTOP          reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    DIVOP           reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    MODOP           reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    PLUSOP          reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    MINUSOP         reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    LSHIFT          reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    RSHIFT          reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    LTCOMP          reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    GTCOMP          reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    LTECOMP         reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    GTECOMP         reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    EQCOMP          reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    NEQCOMP         reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    BANDOP          reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    XOROP           reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    OROP            reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    ANDOP           reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    QUESMARK        reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    RPAREN          reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    COMMA           reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    RSPAREN         reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    SEMICOLON       reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    RCPAREN         reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)
    COLON           reduce using rule 85 (deallocation_expression -> DELETE LSPAREN RSPAREN cast_expression .)


state 594

    (279) mem_initializer -> complete_class_name LPAREN expression_list RPAREN .

    COMMA           reduce using rule 279 (mem_initializer -> complete_class_name LPAREN expression_list RPAREN .)
    LCPAREN         reduce using rule 279 (mem_initializer -> complete_class_name LPAREN expression_list RPAREN .)


state 595

    (281) mem_initializer -> IDENTIFIER LPAREN expression_list RPAREN .

    COMMA           reduce using rule 281 (mem_initializer -> IDENTIFIER LPAREN expression_list RPAREN .)
    LCPAREN         reduce using rule 281 (mem_initializer -> IDENTIFIER LPAREN expression_list RPAREN .)


state 596

    (268) initializer_list -> LCPAREN initializer_list RCPAREN .

    RCPAREN         reduce using rule 268 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    COMMA           reduce using rule 268 (initializer_list -> LCPAREN initializer_list RCPAREN .)
    RPAREN          reduce using rule 268 (initializer_list -> LCPAREN initializer_list RCPAREN .)


state 597

    (269) initializer_list -> LCPAREN initializer_list COMMA . RCPAREN
    (267) initializer_list -> initializer_list COMMA . assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RCPAREN         shift and go to state 627
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    assignment_expression          shift and go to state 599
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 598

    (264) initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .

    SEMICOLON       reduce using rule 264 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 264 (initializer -> EQUAL LCPAREN initializer_list COMMA RCPAREN .)


state 599

    (267) initializer_list -> initializer_list COMMA assignment_expression .

    RCPAREN         reduce using rule 267 (initializer_list -> initializer_list COMMA assignment_expression .)
    COMMA           reduce using rule 267 (initializer_list -> initializer_list COMMA assignment_expression .)
    RPAREN          reduce using rule 267 (initializer_list -> initializer_list COMMA assignment_expression .)


state 600

    (232) labeled_statement -> CASE constant_expression COLON statement .

    RCPAREN         reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    LCPAREN         reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    TRY             reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    ASM             reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    TEMPLATE        reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    EXTERN          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    DPLUSOP         reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    DMINUSOP        reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    MULTOP          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    BANDOP          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUSOP          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUSOP         reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    NOTSYM          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    BNOP            reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLECOLON     reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    NEW             reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    DELETE          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    VOLATILE        reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    INLINE          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    VIRTUAL         reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    THIS            reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    ENUM            reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    NUMBER          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    SCHAR           reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    CLASS           reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    UNION           reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    OPERATOR        reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 232 (labeled_statement -> CASE constant_expression COLON statement .)


state 601

    (221) selection_statement -> IF LPAREN expression RPAREN . statement
    (222) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (208) statement -> . labeled_statement
    (209) statement -> . expression_statement
    (210) statement -> . compound_statement
    (211) statement -> . selection_statement
    (212) statement -> . iteration_statement
    (213) statement -> . jump_statement
    (214) statement -> . declaration_statement
    (215) statement -> . try_block
    (231) labeled_statement -> . IDENTIFIER COLON statement
    (232) labeled_statement -> . CASE constant_expression COLON statement
    (233) labeled_statement -> . DEFAULT COLON statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN
    (221) selection_statement -> . IF LPAREN expression RPAREN statement
    (222) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (223) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (234) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (235) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (236) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (216) jump_statement -> . BREAK SEMICOLON
    (217) jump_statement -> . CONTINUE SEMICOLON
    (218) jump_statement -> . RETURN expression SEMICOLON
    (219) jump_statement -> . RETURN SEMICOLON
    (220) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (244) declaration_statement -> . declaration
    (224) try_block -> . TRY compound_statement handler_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 235
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237
    SEMICOLON       shift and go to state 239
    LCPAREN         shift and go to state 85
    IF              shift and go to state 240
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 243
    DO              shift and go to state 244
    FOR             shift and go to state 245
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 247
    RETURN          shift and go to state 248
    GOTO            shift and go to state 249
    TRY             shift and go to state 251
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 238
    statement                      shift and go to state 628
    labeled_statement              shift and go to state 227
    expression_statement           shift and go to state 228
    compound_statement             shift and go to state 229
    selection_statement            shift and go to state 230
    iteration_statement            shift and go to state 231
    jump_statement                 shift and go to state 232
    declaration_statement          shift and go to state 233
    try_block                      shift and go to state 234
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 602

    (223) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (208) statement -> . labeled_statement
    (209) statement -> . expression_statement
    (210) statement -> . compound_statement
    (211) statement -> . selection_statement
    (212) statement -> . iteration_statement
    (213) statement -> . jump_statement
    (214) statement -> . declaration_statement
    (215) statement -> . try_block
    (231) labeled_statement -> . IDENTIFIER COLON statement
    (232) labeled_statement -> . CASE constant_expression COLON statement
    (233) labeled_statement -> . DEFAULT COLON statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN
    (221) selection_statement -> . IF LPAREN expression RPAREN statement
    (222) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (223) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (234) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (235) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (236) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (216) jump_statement -> . BREAK SEMICOLON
    (217) jump_statement -> . CONTINUE SEMICOLON
    (218) jump_statement -> . RETURN expression SEMICOLON
    (219) jump_statement -> . RETURN SEMICOLON
    (220) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (244) declaration_statement -> . declaration
    (224) try_block -> . TRY compound_statement handler_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 235
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237
    SEMICOLON       shift and go to state 239
    LCPAREN         shift and go to state 85
    IF              shift and go to state 240
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 243
    DO              shift and go to state 244
    FOR             shift and go to state 245
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 247
    RETURN          shift and go to state 248
    GOTO            shift and go to state 249
    TRY             shift and go to state 251
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 238
    statement                      shift and go to state 629
    labeled_statement              shift and go to state 227
    expression_statement           shift and go to state 228
    compound_statement             shift and go to state 229
    selection_statement            shift and go to state 230
    iteration_statement            shift and go to state 231
    jump_statement                 shift and go to state 232
    declaration_statement          shift and go to state 233
    try_block                      shift and go to state 234
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 603

    (234) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (208) statement -> . labeled_statement
    (209) statement -> . expression_statement
    (210) statement -> . compound_statement
    (211) statement -> . selection_statement
    (212) statement -> . iteration_statement
    (213) statement -> . jump_statement
    (214) statement -> . declaration_statement
    (215) statement -> . try_block
    (231) labeled_statement -> . IDENTIFIER COLON statement
    (232) labeled_statement -> . CASE constant_expression COLON statement
    (233) labeled_statement -> . DEFAULT COLON statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN
    (221) selection_statement -> . IF LPAREN expression RPAREN statement
    (222) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (223) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (234) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (235) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (236) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (216) jump_statement -> . BREAK SEMICOLON
    (217) jump_statement -> . CONTINUE SEMICOLON
    (218) jump_statement -> . RETURN expression SEMICOLON
    (219) jump_statement -> . RETURN SEMICOLON
    (220) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (244) declaration_statement -> . declaration
    (224) try_block -> . TRY compound_statement handler_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 235
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237
    SEMICOLON       shift and go to state 239
    LCPAREN         shift and go to state 85
    IF              shift and go to state 240
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 243
    DO              shift and go to state 244
    FOR             shift and go to state 245
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 247
    RETURN          shift and go to state 248
    GOTO            shift and go to state 249
    TRY             shift and go to state 251
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 238
    statement                      shift and go to state 630
    labeled_statement              shift and go to state 227
    expression_statement           shift and go to state 228
    compound_statement             shift and go to state 229
    selection_statement            shift and go to state 230
    iteration_statement            shift and go to state 231
    jump_statement                 shift and go to state 232
    declaration_statement          shift and go to state 233
    try_block                      shift and go to state 234
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 604

    (235) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 631
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 605

    (236) iteration_statement -> FOR LPAREN for_init_statement expression . SEMICOLON expression RPAREN statement
    (238) iteration_statement -> FOR LPAREN for_init_statement expression . SEMICOLON RPAREN statement
    (61) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 632
    COMMA           shift and go to state 399


state 606

    (237) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . expression RPAREN statement
    (239) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON . RPAREN statement
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 634
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 633
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 607

    (225) handler_list -> handler handler_list .

    RCPAREN         reduce using rule 225 (handler_list -> handler handler_list .)
    IDENTIFIER      reduce using rule 225 (handler_list -> handler handler_list .)
    CASE            reduce using rule 225 (handler_list -> handler handler_list .)
    DEFAULT         reduce using rule 225 (handler_list -> handler handler_list .)
    SEMICOLON       reduce using rule 225 (handler_list -> handler handler_list .)
    LCPAREN         reduce using rule 225 (handler_list -> handler handler_list .)
    IF              reduce using rule 225 (handler_list -> handler handler_list .)
    SWITCH          reduce using rule 225 (handler_list -> handler handler_list .)
    WHILE           reduce using rule 225 (handler_list -> handler handler_list .)
    DO              reduce using rule 225 (handler_list -> handler handler_list .)
    FOR             reduce using rule 225 (handler_list -> handler handler_list .)
    BREAK           reduce using rule 225 (handler_list -> handler handler_list .)
    CONTINUE        reduce using rule 225 (handler_list -> handler handler_list .)
    RETURN          reduce using rule 225 (handler_list -> handler handler_list .)
    GOTO            reduce using rule 225 (handler_list -> handler handler_list .)
    TRY             reduce using rule 225 (handler_list -> handler handler_list .)
    ASM             reduce using rule 225 (handler_list -> handler handler_list .)
    TEMPLATE        reduce using rule 225 (handler_list -> handler handler_list .)
    EXTERN          reduce using rule 225 (handler_list -> handler handler_list .)
    DPLUSOP         reduce using rule 225 (handler_list -> handler handler_list .)
    DMINUSOP        reduce using rule 225 (handler_list -> handler handler_list .)
    SIZEOF          reduce using rule 225 (handler_list -> handler handler_list .)
    TYPEDEF         reduce using rule 225 (handler_list -> handler handler_list .)
    LPAREN          reduce using rule 225 (handler_list -> handler handler_list .)
    MULTOP          reduce using rule 225 (handler_list -> handler handler_list .)
    BANDOP          reduce using rule 225 (handler_list -> handler handler_list .)
    PLUSOP          reduce using rule 225 (handler_list -> handler handler_list .)
    MINUSOP         reduce using rule 225 (handler_list -> handler handler_list .)
    NOTSYM          reduce using rule 225 (handler_list -> handler handler_list .)
    BNOP            reduce using rule 225 (handler_list -> handler handler_list .)
    DOUBLECOLON     reduce using rule 225 (handler_list -> handler handler_list .)
    NEW             reduce using rule 225 (handler_list -> handler handler_list .)
    DELETE          reduce using rule 225 (handler_list -> handler handler_list .)
    AUTO            reduce using rule 225 (handler_list -> handler handler_list .)
    STATIC          reduce using rule 225 (handler_list -> handler handler_list .)
    CONST           reduce using rule 225 (handler_list -> handler handler_list .)
    VOLATILE        reduce using rule 225 (handler_list -> handler handler_list .)
    INLINE          reduce using rule 225 (handler_list -> handler handler_list .)
    VIRTUAL         reduce using rule 225 (handler_list -> handler handler_list .)
    THIS            reduce using rule 225 (handler_list -> handler handler_list .)
    CHAR            reduce using rule 225 (handler_list -> handler handler_list .)
    SHORT           reduce using rule 225 (handler_list -> handler handler_list .)
    INT             reduce using rule 225 (handler_list -> handler handler_list .)
    LONG            reduce using rule 225 (handler_list -> handler handler_list .)
    SIGNED          reduce using rule 225 (handler_list -> handler handler_list .)
    UNSIGNED        reduce using rule 225 (handler_list -> handler handler_list .)
    FLOAT           reduce using rule 225 (handler_list -> handler handler_list .)
    DOUBLE          reduce using rule 225 (handler_list -> handler handler_list .)
    VOID            reduce using rule 225 (handler_list -> handler handler_list .)
    ENUM            reduce using rule 225 (handler_list -> handler handler_list .)
    NUMBER          reduce using rule 225 (handler_list -> handler handler_list .)
    STRING          reduce using rule 225 (handler_list -> handler handler_list .)
    SCHAR           reduce using rule 225 (handler_list -> handler handler_list .)
    CLASS           reduce using rule 225 (handler_list -> handler handler_list .)
    STRUCT          reduce using rule 225 (handler_list -> handler handler_list .)
    UNION           reduce using rule 225 (handler_list -> handler handler_list .)
    OPERATOR        reduce using rule 225 (handler_list -> handler handler_list .)
    ELSE            reduce using rule 225 (handler_list -> handler handler_list .)


state 608

    (227) handler -> CATCH LPAREN . exception_declaration RPAREN compound_statement
    (228) exception_declaration -> . type_specifier_list declarator
    (229) exception_declaration -> . type_specifier_list abstract_declarator
    (230) exception_declaration -> . type_specifier_list
    (312) type_specifier_list -> . type_specifier type_specifier_list
    (313) type_specifier_list -> . type_specifier
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER

    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    DOUBLECOLON     shift and go to state 42
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    TEMPLATE        shift and go to state 70
    IDENTIFIER      shift and go to state 153

    exception_declaration          shift and go to state 635
    type_specifier_list            shift and go to state 636
    type_specifier                 shift and go to state 150
    simple_type_name               shift and go to state 26
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 155
    typedef_name                   shift and go to state 156

state 609

    (150) abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN . cv_qualifier_list
    (152) abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .
    (399) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (400) cv_qualifier_list -> . cv_qualifier
    (401) cv_qualifier -> . CONST
    (402) cv_qualifier -> . VOLATILE

    EQUAL           reduce using rule 152 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    LPAREN          reduce using rule 152 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    LSPAREN         reduce using rule 152 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    COMMA           reduce using rule 152 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    RPAREN          reduce using rule 152 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    GTCOMP          reduce using rule 152 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN .)
    CONST           shift and go to state 94
    VOLATILE        shift and go to state 95

    cv_qualifier_list              shift and go to state 637
    cv_qualifier                   shift and go to state 93

state 610

    (154) abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .

    EQUAL           reduce using rule 154 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    LPAREN          reduce using rule 154 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    LSPAREN         reduce using rule 154 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    COMMA           reduce using rule 154 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    RPAREN          reduce using rule 154 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)
    GTCOMP          reduce using rule 154 (abstract_declarator -> abstract_declarator LSPAREN constant_expression RSPAREN .)


state 611

    (151) abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list .

    EQUAL           reduce using rule 151 (abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    LPAREN          reduce using rule 151 (abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    LSPAREN         reduce using rule 151 (abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    COMMA           reduce using rule 151 (abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    RPAREN          reduce using rule 151 (abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    GTCOMP          reduce using rule 151 (abstract_declarator -> LPAREN argument_declaration_list RPAREN cv_qualifier_list .)


state 612

    (28) conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .

    RPAREN          reduce using rule 28 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COMMA           reduce using rule 28 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RSPAREN         reduce using rule 28 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    SEMICOLON       reduce using rule 28 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    RCPAREN         reduce using rule 28 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    COLON           reduce using rule 28 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)
    GTCOMP          reduce using rule 28 (conditional_expression -> logical_OR_expression QUESMARK expression COLON conditional_expression .)


state 613

    (126) postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .

    LSPAREN         reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LPAREN          reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DOT             reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ARROW           reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DPLUSOP         reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DMINUSOP        reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTCOMP          reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    EQUAL           reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MULTEQOP        reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DIVEQOP         reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MODEQOP         reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    PLUSEQOP        reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MINUSEQOP       reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LSHIFTEQOP      reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSHIFTEQOP      reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BANDEQOP        reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BOREQOP         reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DOTSTAR         reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ARROWSTAR       reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MULTOP          reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    DIVOP           reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MODOP           reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    PLUSOP          reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    MINUSOP         reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LSHIFT          reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSHIFT          reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    GTCOMP          reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    LTECOMP         reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    GTECOMP         reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    EQCOMP          reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    NEQCOMP         reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    BANDOP          reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    XOROP           reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    OROP            reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    ANDOP           reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    QUESMARK        reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RSPAREN         reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    RCPAREN         reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)
    COLON           reduce using rule 126 (postfix_expression -> postfix_expression template_class_name LPAREN expression_list RPAREN .)


state 614

    (15) template_arg_list -> template_arg_list COMMA template_arg .

    GTCOMP          reduce using rule 15 (template_arg_list -> template_arg_list COMMA template_arg .)
    COMMA           reduce using rule 15 (template_arg_list -> template_arg_list COMMA template_arg .)


state 615

    (86) allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .

    EQUAL           reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    MULTEQOP        reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    DIVEQOP         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    MODEQOP         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    PLUSEQOP        reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    MINUSEQOP       reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    LSHIFTEQOP      reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    RSHIFTEQOP      reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    BANDEQOP        reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    BOREQOP         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    DOTSTAR         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    ARROWSTAR       reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    MULTOP          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    DIVOP           reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    MODOP           reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    PLUSOP          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    MINUSOP         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    LSHIFT          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    RSHIFT          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    LTCOMP          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    GTCOMP          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    LTECOMP         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    GTECOMP         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    EQCOMP          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    NEQCOMP         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    BANDOP          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    XOROP           reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    OROP            reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    ANDOP           reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    QUESMARK        reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    RPAREN          reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    COMMA           reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    RSPAREN         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    SEMICOLON       reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    RCPAREN         reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)
    COLON           reduce using rule 86 (allocation_expression -> DOUBLECOLON NEW placement new_type_name new_initializer .)


state 616

    (94) allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name . RPAREN new_initializer
    (98) allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name . RPAREN

    RPAREN          shift and go to state 638


state 617

    (96) allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN . new_initializer
    (100) allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .
    (115) new_initializer -> . LPAREN initializer_list RPAREN
    (116) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    MODOP           reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    XOROP           reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    OROP            reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    COMMA           reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    COLON           reduce using rule 100 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 492

    new_initializer                shift and go to state 639

state 618

    (84) deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .

    EQUAL           reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    MULTEQOP        reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    DIVEQOP         reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    MODEQOP         reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    PLUSEQOP        reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    MINUSEQOP       reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    LSHIFTEQOP      reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    RSHIFTEQOP      reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    BANDEQOP        reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    BOREQOP         reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    DOTSTAR         reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    ARROWSTAR       reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    MULTOP          reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    DIVOP           reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    MODOP           reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    PLUSOP          reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    MINUSOP         reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    LSHIFT          reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    RSHIFT          reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    LTCOMP          reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    GTCOMP          reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    LTECOMP         reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    GTECOMP         reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    EQCOMP          reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    NEQCOMP         reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    BANDOP          reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    XOROP           reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    OROP            reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    ANDOP           reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    QUESMARK        reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    RPAREN          reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    COMMA           reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    RSPAREN         reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    SEMICOLON       reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    RCPAREN         reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)
    COLON           reduce using rule 84 (deallocation_expression -> DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression .)


state 619

    (95) allocation_expression -> NEW placement LPAREN type_name RPAREN . new_initializer
    (99) allocation_expression -> NEW placement LPAREN type_name RPAREN .
    (115) new_initializer -> . LPAREN initializer_list RPAREN
    (116) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MODOP           reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    XOROP           reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    OROP            reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    COMMA           reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    COLON           reduce using rule 99 (allocation_expression -> NEW placement LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 492

    new_initializer                shift and go to state 640

state 620

    (115) new_initializer -> LPAREN initializer_list RPAREN .

    EQUAL           reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTEQOP        reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVEQOP         reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODEQOP         reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSEQOP        reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSEQOP       reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFTEQOP      reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFTEQOP      reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDEQOP        reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    BOREQOP         reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    DOTSTAR         reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    ARROWSTAR       reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    MULTOP          reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    DIVOP           reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    MODOP           reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    PLUSOP          reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    MINUSOP         reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    LSHIFT          reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSHIFT          reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTCOMP          reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTCOMP          reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    LTECOMP         reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    GTECOMP         reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    EQCOMP          reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    NEQCOMP         reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    BANDOP          reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    XOROP           reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    OROP            reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    ANDOP           reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    QUESMARK        reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    RPAREN          reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    COMMA           reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    RSPAREN         reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    SEMICOLON       reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    RCPAREN         reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)
    COLON           reduce using rule 115 (new_initializer -> LPAREN initializer_list RPAREN .)


state 621

    (267) initializer_list -> initializer_list COMMA . assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    assignment_expression          shift and go to state 599
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 622

    (97) allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .

    EQUAL           reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DOTSTAR         reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 97 (allocation_expression -> NEW LPAREN type_name RPAREN new_initializer .)


state 623

    (112) new_declarator -> new_declarator LSPAREN expression . RSPAREN
    (61) expression -> expression . COMMA assignment_expression

    RSPAREN         shift and go to state 641
    COMMA           shift and go to state 399


state 624

    (104) new_declarator -> MULTOP cv_qualifier_list new_declarator .
    (112) new_declarator -> new_declarator . LSPAREN expression RSPAREN

  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    EQUAL           reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    MULTEQOP        reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    DIVEQOP         reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    MODEQOP         reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    PLUSEQOP        reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    MINUSEQOP       reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    LSHIFTEQOP      reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    RSHIFTEQOP      reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    BANDEQOP        reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    BOREQOP         reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    DOTSTAR         reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    ARROWSTAR       reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    MULTOP          reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    DIVOP           reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    MODOP           reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    PLUSOP          reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    MINUSOP         reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    LSHIFT          reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    RSHIFT          reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    LTCOMP          reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    GTCOMP          reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    LTECOMP         reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    GTECOMP         reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    EQCOMP          reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    NEQCOMP         reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    BANDOP          reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    XOROP           reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    OROP            reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    ANDOP           reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    QUESMARK        reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    RPAREN          reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    COMMA           reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    RSPAREN         reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    SEMICOLON       reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    RCPAREN         reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    COLON           reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .)
    LSPAREN         shift and go to state 588

  ! LSPAREN         [ reduce using rule 104 (new_declarator -> MULTOP cv_qualifier_list new_declarator .) ]


state 625

    (108) new_declarator -> complete_class_name DOUBLECOLON MULTOP . cv_qualifier_list new_declarator
    (109) new_declarator -> complete_class_name DOUBLECOLON MULTOP . new_declarator
    (110) new_declarator -> complete_class_name DOUBLECOLON MULTOP . cv_qualifier_list
    (111) new_declarator -> complete_class_name DOUBLECOLON MULTOP .
    (399) cv_qualifier_list -> . cv_qualifier cv_qualifier_list
    (400) cv_qualifier_list -> . cv_qualifier
    (104) new_declarator -> . MULTOP cv_qualifier_list new_declarator
    (105) new_declarator -> . MULTOP new_declarator
    (106) new_declarator -> . MULTOP cv_qualifier_list
    (107) new_declarator -> . MULTOP
    (108) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator
    (109) new_declarator -> . complete_class_name DOUBLECOLON MULTOP new_declarator
    (110) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (111) new_declarator -> . complete_class_name DOUBLECOLON MULTOP
    (112) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (113) new_declarator -> . LSPAREN expression RSPAREN
    (401) cv_qualifier -> . CONST
    (402) cv_qualifier -> . VOLATILE
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

  ! shift/reduce conflict for MULTOP resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    EQUAL           reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    MULTEQOP        reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    DIVEQOP         reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    MODEQOP         reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    PLUSEQOP        reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    MINUSEQOP       reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    LSHIFTEQOP      reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    RSHIFTEQOP      reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    BANDEQOP        reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    BOREQOP         reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    DOTSTAR         reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    ARROWSTAR       reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    DIVOP           reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    MODOP           reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    PLUSOP          reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    MINUSOP         reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    LSHIFT          reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    RSHIFT          reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    LTCOMP          reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    GTCOMP          reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    LTECOMP         reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    GTECOMP         reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    EQCOMP          reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    NEQCOMP         reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    BANDOP          reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    XOROP           reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    OROP            reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    ANDOP           reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    QUESMARK        reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    RPAREN          reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    COMMA           reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    RSPAREN         reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    SEMICOLON       reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    RCPAREN         reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    COLON           reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .)
    MULTOP          shift and go to state 496
    LSPAREN         shift and go to state 498
    CONST           shift and go to state 94
    VOLATILE        shift and go to state 95
    DOUBLECOLON     shift and go to state 42
    IDENTIFIER      shift and go to state 91

  ! LSPAREN         [ reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .) ]
  ! MULTOP          [ reduce using rule 111 (new_declarator -> complete_class_name DOUBLECOLON MULTOP .) ]

    complete_class_name            shift and go to state 497
    cv_qualifier_list              shift and go to state 642
    new_declarator                 shift and go to state 643
    cv_qualifier                   shift and go to state 93
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 626

    (113) new_declarator -> LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    OROP            reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)
    COLON           reduce using rule 113 (new_declarator -> LSPAREN expression RSPAREN .)


state 627

    (269) initializer_list -> LCPAREN initializer_list COMMA RCPAREN .

    RCPAREN         reduce using rule 269 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    COMMA           reduce using rule 269 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)
    RPAREN          reduce using rule 269 (initializer_list -> LCPAREN initializer_list COMMA RCPAREN .)


state 628

    (221) selection_statement -> IF LPAREN expression RPAREN statement .
    (222) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RCPAREN         reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TRY             reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASM             reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLECOLON     reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NEW             reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VIRTUAL         reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THIS            reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNION           reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 644

  ! ELSE            [ reduce using rule 221 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 629

    (223) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RCPAREN         reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TRY             reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ASM             reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLECOLON     reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NEW             reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VIRTUAL         reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THIS            reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNION           reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 223 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 630

    (234) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RCPAREN         reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LCPAREN         reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TRY             reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASM             reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TEMPLATE        reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DPLUSOP         reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DMINUSOP        reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MULTOP          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BANDOP          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSOP          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSOP         reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOTSYM          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BNOP            reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLECOLON     reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NEW             reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VIRTUAL         reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THIS            reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SCHAR           reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNION           reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    OPERATOR        reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 234 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 631

    (235) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (61) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 645
    COMMA           shift and go to state 399


state 632

    (236) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON . expression RPAREN statement
    (238) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON . RPAREN statement
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (392) typedef_name -> . IDENTIFIER
    (407) class_name -> . IDENTIFIER
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 647
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    MULTOP          shift and go to state 188
    BANDOP          shift and go to state 189
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 193
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    THIS            shift and go to state 199
    LPAREN          shift and go to state 166
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    IDENTIFIER      shift and go to state 200
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 646
    assignment_expression          shift and go to state 252
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 217
    name                           shift and go to state 187
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    complete_class_name            shift and go to state 151
    qualified_type_name            shift and go to state 152
    exclusive_OR_expression        shift and go to state 201
    conversion_function_name       shift and go to state 57
    class_name                     shift and go to state 154
    qualified_class_name           shift and go to state 59
    typedef_name                   shift and go to state 156
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 633

    (237) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression . RPAREN statement
    (61) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 648
    COMMA           shift and go to state 399


state 634

    (239) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN . statement
    (208) statement -> . labeled_statement
    (209) statement -> . expression_statement
    (210) statement -> . compound_statement
    (211) statement -> . selection_statement
    (212) statement -> . iteration_statement
    (213) statement -> . jump_statement
    (214) statement -> . declaration_statement
    (215) statement -> . try_block
    (231) labeled_statement -> . IDENTIFIER COLON statement
    (232) labeled_statement -> . CASE constant_expression COLON statement
    (233) labeled_statement -> . DEFAULT COLON statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN
    (221) selection_statement -> . IF LPAREN expression RPAREN statement
    (222) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (223) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (234) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (235) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (236) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (216) jump_statement -> . BREAK SEMICOLON
    (217) jump_statement -> . CONTINUE SEMICOLON
    (218) jump_statement -> . RETURN expression SEMICOLON
    (219) jump_statement -> . RETURN SEMICOLON
    (220) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (244) declaration_statement -> . declaration
    (224) try_block -> . TRY compound_statement handler_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 235
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237
    SEMICOLON       shift and go to state 239
    LCPAREN         shift and go to state 85
    IF              shift and go to state 240
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 243
    DO              shift and go to state 244
    FOR             shift and go to state 245
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 247
    RETURN          shift and go to state 248
    GOTO            shift and go to state 249
    TRY             shift and go to state 251
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    statement                      shift and go to state 649
    labeled_statement              shift and go to state 227
    expression_statement           shift and go to state 228
    compound_statement             shift and go to state 229
    selection_statement            shift and go to state 230
    iteration_statement            shift and go to state 231
    jump_statement                 shift and go to state 232
    declaration_statement          shift and go to state 233
    try_block                      shift and go to state 234
    expression                     shift and go to state 238
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 635

    (227) handler -> CATCH LPAREN exception_declaration . RPAREN compound_statement

    RPAREN          shift and go to state 650


state 636

    (228) exception_declaration -> type_specifier_list . declarator
    (229) exception_declaration -> type_specifier_list . abstract_declarator
    (230) exception_declaration -> type_specifier_list .
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (148) abstract_declarator -> . ptr_operator abstract_declarator
    (149) abstract_declarator -> . ptr_operator
    (150) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (151) abstract_declarator -> . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (152) abstract_declarator -> . abstract_declarator LPAREN argument_declaration_list RPAREN
    (153) abstract_declarator -> . LPAREN argument_declaration_list RPAREN
    (154) abstract_declarator -> . abstract_declarator LSPAREN constant_expression RSPAREN
    (155) abstract_declarator -> . LSPAREN constant_expression RSPAREN
    (156) abstract_declarator -> . abstract_declarator LSPAREN RSPAREN
    (157) abstract_declarator -> . LSPAREN RSPAREN
    (158) abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name

    RPAREN          reduce using rule 230 (exception_declaration -> type_specifier_list .)
    LPAREN          shift and go to state 332
    LSPAREN         shift and go to state 333
    BNOP            shift and go to state 36
    MULTOP          shift and go to state 39
    BANDOP          shift and go to state 40
    IDENTIFIER      shift and go to state 54
    DOUBLECOLON     shift and go to state 42
    OPERATOR        shift and go to state 63

    declarator                     shift and go to state 651
    abstract_declarator            shift and go to state 652
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 331
    name                           shift and go to state 34
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 75
    complete_class_name            shift and go to state 76
    operator_function_name         shift and go to state 56
    conversion_function_name       shift and go to state 57
    qualified_name                 shift and go to state 58
    qualified_class_name           shift and go to state 59

state 637

    (150) abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .

    EQUAL           reduce using rule 150 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    LPAREN          reduce using rule 150 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    LSPAREN         reduce using rule 150 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    COMMA           reduce using rule 150 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    RPAREN          reduce using rule 150 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)
    GTCOMP          reduce using rule 150 (abstract_declarator -> abstract_declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list .)


state 638

    (94) allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN . new_initializer
    (98) allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .
    (115) new_initializer -> . LPAREN initializer_list RPAREN
    (116) new_initializer -> . LPAREN RPAREN

    EQUAL           reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    MULTEQOP        reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    DIVEQOP         reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    MODEQOP         reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    PLUSEQOP        reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    MINUSEQOP       reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    LSHIFTEQOP      reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    RSHIFTEQOP      reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    BANDEQOP        reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    BOREQOP         reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    DOTSTAR         reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    ARROWSTAR       reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    MULTOP          reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    DIVOP           reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    MODOP           reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    PLUSOP          reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    MINUSOP         reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    LTCOMP          reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    GTCOMP          reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    LTECOMP         reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    GTECOMP         reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    EQCOMP          reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    NEQCOMP         reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    BANDOP          reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    XOROP           reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    OROP            reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    ANDOP           reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    QUESMARK        reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    COMMA           reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    RSPAREN         reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    RCPAREN         reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    COLON           reduce using rule 98 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN .)
    LPAREN          shift and go to state 492

    new_initializer                shift and go to state 653

state 639

    (96) allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .

    EQUAL           reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    DOTSTAR         reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 96 (allocation_expression -> DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer .)


state 640

    (95) allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .

    EQUAL           reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    DOTSTAR         reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 95 (allocation_expression -> NEW placement LPAREN type_name RPAREN new_initializer .)


state 641

    (112) new_declarator -> new_declarator LSPAREN expression RSPAREN .

    LSPAREN         reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LPAREN          reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQUAL           reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MULTEQOP        reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVEQOP         reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODEQOP         reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSEQOP        reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSEQOP       reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFTEQOP      reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFTEQOP      reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDEQOP        reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BOREQOP         reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DOTSTAR         reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ARROWSTAR       reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MULTOP          reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    DIVOP           reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MODOP           reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    PLUSOP          reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    MINUSOP         reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LSHIFT          reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSHIFT          reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTCOMP          reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTCOMP          reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    LTECOMP         reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    GTECOMP         reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    EQCOMP          reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    NEQCOMP         reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    BANDOP          reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    XOROP           reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    OROP            reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    ANDOP           reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    QUESMARK        reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COMMA           reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RSPAREN         reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    SEMICOLON       reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    RCPAREN         reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)
    COLON           reduce using rule 112 (new_declarator -> new_declarator LSPAREN expression RSPAREN .)


state 642

    (108) new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list . new_declarator
    (110) new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .
    (104) new_declarator -> . MULTOP cv_qualifier_list new_declarator
    (105) new_declarator -> . MULTOP new_declarator
    (106) new_declarator -> . MULTOP cv_qualifier_list
    (107) new_declarator -> . MULTOP
    (108) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator
    (109) new_declarator -> . complete_class_name DOUBLECOLON MULTOP new_declarator
    (110) new_declarator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (111) new_declarator -> . complete_class_name DOUBLECOLON MULTOP
    (112) new_declarator -> . new_declarator LSPAREN expression RSPAREN
    (113) new_declarator -> . LSPAREN expression RSPAREN
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (407) class_name -> . IDENTIFIER

  ! shift/reduce conflict for MULTOP resolved as shift
  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    EQUAL           reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MULTEQOP        reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DIVEQOP         reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MODEQOP         reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    PLUSEQOP        reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MINUSEQOP       reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LSHIFTEQOP      reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RSHIFTEQOP      reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    BANDEQOP        reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    BOREQOP         reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DOTSTAR         reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    ARROWSTAR       reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    DIVOP           reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MODOP           reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    PLUSOP          reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MINUSOP         reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LSHIFT          reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RSHIFT          reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LTCOMP          reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    GTCOMP          reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    LTECOMP         reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    GTECOMP         reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    EQCOMP          reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    NEQCOMP         reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    BANDOP          reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    XOROP           reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    OROP            reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    ANDOP           reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    QUESMARK        reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RPAREN          reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    COMMA           reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RSPAREN         reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    SEMICOLON       reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    RCPAREN         reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    COLON           reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .)
    MULTOP          shift and go to state 496
    LSPAREN         shift and go to state 498
    DOUBLECOLON     shift and go to state 42
    IDENTIFIER      shift and go to state 91

  ! LSPAREN         [ reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .) ]
  ! MULTOP          [ reduce using rule 110 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list .) ]

    complete_class_name            shift and go to state 497
    new_declarator                 shift and go to state 654
    qualified_class_name           shift and go to state 155
    class_name                     shift and go to state 99

state 643

    (109) new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .
    (112) new_declarator -> new_declarator . LSPAREN expression RSPAREN

  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    EQUAL           reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    MULTEQOP        reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    DIVEQOP         reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    MODEQOP         reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    PLUSEQOP        reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    MINUSEQOP       reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    LSHIFTEQOP      reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    RSHIFTEQOP      reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    BANDEQOP        reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    BOREQOP         reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    DOTSTAR         reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    ARROWSTAR       reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    MULTOP          reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    DIVOP           reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    MODOP           reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    PLUSOP          reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    MINUSOP         reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    LSHIFT          reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    RSHIFT          reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    LTCOMP          reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    GTCOMP          reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    LTECOMP         reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    GTECOMP         reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    EQCOMP          reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    NEQCOMP         reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    BANDOP          reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    XOROP           reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    OROP            reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    ANDOP           reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    QUESMARK        reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    RPAREN          reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    COMMA           reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    RSPAREN         reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    SEMICOLON       reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    RCPAREN         reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    COLON           reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .)
    LSPAREN         shift and go to state 588

  ! LSPAREN         [ reduce using rule 109 (new_declarator -> complete_class_name DOUBLECOLON MULTOP new_declarator .) ]


state 644

    (222) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (208) statement -> . labeled_statement
    (209) statement -> . expression_statement
    (210) statement -> . compound_statement
    (211) statement -> . selection_statement
    (212) statement -> . iteration_statement
    (213) statement -> . jump_statement
    (214) statement -> . declaration_statement
    (215) statement -> . try_block
    (231) labeled_statement -> . IDENTIFIER COLON statement
    (232) labeled_statement -> . CASE constant_expression COLON statement
    (233) labeled_statement -> . DEFAULT COLON statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN
    (221) selection_statement -> . IF LPAREN expression RPAREN statement
    (222) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (223) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (234) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (235) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (236) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (216) jump_statement -> . BREAK SEMICOLON
    (217) jump_statement -> . CONTINUE SEMICOLON
    (218) jump_statement -> . RETURN expression SEMICOLON
    (219) jump_statement -> . RETURN SEMICOLON
    (220) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (244) declaration_statement -> . declaration
    (224) try_block -> . TRY compound_statement handler_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 235
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237
    SEMICOLON       shift and go to state 239
    LCPAREN         shift and go to state 85
    IF              shift and go to state 240
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 243
    DO              shift and go to state 244
    FOR             shift and go to state 245
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 247
    RETURN          shift and go to state 248
    GOTO            shift and go to state 249
    TRY             shift and go to state 251
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 238
    statement                      shift and go to state 655
    labeled_statement              shift and go to state 227
    expression_statement           shift and go to state 228
    compound_statement             shift and go to state 229
    selection_statement            shift and go to state 230
    iteration_statement            shift and go to state 231
    jump_statement                 shift and go to state 232
    declaration_statement          shift and go to state 233
    try_block                      shift and go to state 234
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 645

    (235) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 656


state 646

    (236) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression . RPAREN statement
    (61) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 657
    COMMA           shift and go to state 399


state 647

    (238) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN . statement
    (208) statement -> . labeled_statement
    (209) statement -> . expression_statement
    (210) statement -> . compound_statement
    (211) statement -> . selection_statement
    (212) statement -> . iteration_statement
    (213) statement -> . jump_statement
    (214) statement -> . declaration_statement
    (215) statement -> . try_block
    (231) labeled_statement -> . IDENTIFIER COLON statement
    (232) labeled_statement -> . CASE constant_expression COLON statement
    (233) labeled_statement -> . DEFAULT COLON statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN
    (221) selection_statement -> . IF LPAREN expression RPAREN statement
    (222) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (223) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (234) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (235) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (236) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (216) jump_statement -> . BREAK SEMICOLON
    (217) jump_statement -> . CONTINUE SEMICOLON
    (218) jump_statement -> . RETURN expression SEMICOLON
    (219) jump_statement -> . RETURN SEMICOLON
    (220) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (244) declaration_statement -> . declaration
    (224) try_block -> . TRY compound_statement handler_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 235
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237
    SEMICOLON       shift and go to state 239
    LCPAREN         shift and go to state 85
    IF              shift and go to state 240
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 243
    DO              shift and go to state 244
    FOR             shift and go to state 245
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 247
    RETURN          shift and go to state 248
    GOTO            shift and go to state 249
    TRY             shift and go to state 251
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 238
    statement                      shift and go to state 658
    labeled_statement              shift and go to state 227
    expression_statement           shift and go to state 228
    compound_statement             shift and go to state 229
    selection_statement            shift and go to state 230
    iteration_statement            shift and go to state 231
    jump_statement                 shift and go to state 232
    declaration_statement          shift and go to state 233
    try_block                      shift and go to state 234
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 648

    (237) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN . statement
    (208) statement -> . labeled_statement
    (209) statement -> . expression_statement
    (210) statement -> . compound_statement
    (211) statement -> . selection_statement
    (212) statement -> . iteration_statement
    (213) statement -> . jump_statement
    (214) statement -> . declaration_statement
    (215) statement -> . try_block
    (231) labeled_statement -> . IDENTIFIER COLON statement
    (232) labeled_statement -> . CASE constant_expression COLON statement
    (233) labeled_statement -> . DEFAULT COLON statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN
    (221) selection_statement -> . IF LPAREN expression RPAREN statement
    (222) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (223) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (234) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (235) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (236) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (216) jump_statement -> . BREAK SEMICOLON
    (217) jump_statement -> . CONTINUE SEMICOLON
    (218) jump_statement -> . RETURN expression SEMICOLON
    (219) jump_statement -> . RETURN SEMICOLON
    (220) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (244) declaration_statement -> . declaration
    (224) try_block -> . TRY compound_statement handler_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 235
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237
    SEMICOLON       shift and go to state 239
    LCPAREN         shift and go to state 85
    IF              shift and go to state 240
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 243
    DO              shift and go to state 244
    FOR             shift and go to state 245
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 247
    RETURN          shift and go to state 248
    GOTO            shift and go to state 249
    TRY             shift and go to state 251
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 238
    statement                      shift and go to state 659
    labeled_statement              shift and go to state 227
    expression_statement           shift and go to state 228
    compound_statement             shift and go to state 229
    selection_statement            shift and go to state 230
    iteration_statement            shift and go to state 231
    jump_statement                 shift and go to state 232
    declaration_statement          shift and go to state 233
    try_block                      shift and go to state 234
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 649

    (239) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .

    RCPAREN         reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IDENTIFIER      reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CASE            reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LCPAREN         reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    IF              reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DO              reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FOR             reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    GOTO            reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TRY             reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ASM             reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TEMPLATE        reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    EXTERN          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DPLUSOP         reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DMINUSOP        reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    TYPEDEF         reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MULTOP          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BANDOP          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    PLUSOP          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    MINUSOP         reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NOTSYM          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    BNOP            reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DOUBLECOLON     reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NEW             reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STATIC          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CONST           reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VOLATILE        reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    INLINE          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VIRTUAL         reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    THIS            reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SHORT           reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    INT             reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    LONG            reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SIGNED          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    UNSIGNED        reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    VOID            reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ENUM            reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    NUMBER          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRING          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    SCHAR           reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    UNION           reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    OPERATOR        reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 239 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON RPAREN statement .)


state 650

    (227) handler -> CATCH LPAREN exception_declaration RPAREN . compound_statement
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN

    LCPAREN         shift and go to state 85

    compound_statement             shift and go to state 660

state 651

    (228) exception_declaration -> type_specifier_list declarator .
    (293) declarator -> declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> declarator . LPAREN argument_declaration_list RPAREN
    (295) declarator -> declarator . LSPAREN constant_expression RSPAREN
    (296) declarator -> declarator . LSPAREN RSPAREN

    RPAREN          reduce using rule 228 (exception_declaration -> type_specifier_list declarator .)
    LPAREN          shift and go to state 163
    LSPAREN         shift and go to state 81


state 652

    (229) exception_declaration -> type_specifier_list abstract_declarator .
    (150) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (152) abstract_declarator -> abstract_declarator . LPAREN argument_declaration_list RPAREN
    (154) abstract_declarator -> abstract_declarator . LSPAREN constant_expression RSPAREN
    (156) abstract_declarator -> abstract_declarator . LSPAREN RSPAREN

    RPAREN          reduce using rule 229 (exception_declaration -> type_specifier_list abstract_declarator .)
    LPAREN          shift and go to state 461
    LSPAREN         shift and go to state 462


state 653

    (94) allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .

    EQUAL           reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    MULTEQOP        reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    DIVEQOP         reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    MODEQOP         reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    PLUSEQOP        reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    MINUSEQOP       reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    LSHIFTEQOP      reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    RSHIFTEQOP      reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    BANDEQOP        reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    BOREQOP         reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    DOTSTAR         reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    ARROWSTAR       reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    MULTOP          reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    DIVOP           reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    MODOP           reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    PLUSOP          reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    MINUSOP         reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    LSHIFT          reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    RSHIFT          reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    LTCOMP          reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    GTCOMP          reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    LTECOMP         reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    GTECOMP         reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    EQCOMP          reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    NEQCOMP         reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    BANDOP          reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    XOROP           reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    OROP            reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    ANDOP           reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    QUESMARK        reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    RPAREN          reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    COMMA           reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    RSPAREN         reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    SEMICOLON       reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    RCPAREN         reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)
    COLON           reduce using rule 94 (allocation_expression -> DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer .)


state 654

    (108) new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .
    (112) new_declarator -> new_declarator . LSPAREN expression RSPAREN

  ! shift/reduce conflict for LSPAREN resolved as shift
    LPAREN          reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    EQUAL           reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    MULTEQOP        reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    DIVEQOP         reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    MODEQOP         reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    PLUSEQOP        reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    MINUSEQOP       reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    LSHIFTEQOP      reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    RSHIFTEQOP      reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    BANDEQOP        reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    BOREQOP         reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    DOTSTAR         reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    ARROWSTAR       reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    MULTOP          reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    DIVOP           reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    MODOP           reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    PLUSOP          reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    MINUSOP         reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    LSHIFT          reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    RSHIFT          reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    LTCOMP          reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    GTCOMP          reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    LTECOMP         reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    GTECOMP         reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    EQCOMP          reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    NEQCOMP         reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    BANDOP          reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    XOROP           reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    OROP            reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    ANDOP           reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    QUESMARK        reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    RPAREN          reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    COMMA           reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    RSPAREN         reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    SEMICOLON       reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    RCPAREN         reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    COLON           reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .)
    LSPAREN         shift and go to state 588

  ! LSPAREN         [ reduce using rule 108 (new_declarator -> complete_class_name DOUBLECOLON MULTOP cv_qualifier_list new_declarator .) ]


state 655

    (222) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RCPAREN         reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LCPAREN         reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRY             reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASM             reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TEMPLATE        reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXTERN          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DPLUSOP         reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DMINUSOP        reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MULTOP          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BANDOP          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSOP          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSOP         reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOTSYM          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BNOP            reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLECOLON     reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NEW             reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DELETE          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOLATILE        reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INLINE          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VIRTUAL         reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THIS            reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SCHAR           reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNION           reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    OPERATOR        reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 222 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 656

    (235) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    RCPAREN         reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LCPAREN         reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    GOTO            reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TRY             reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ASM             reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TEMPLATE        reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    EXTERN          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DPLUSOP         reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DMINUSOP        reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPEDEF         reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MULTOP          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BANDOP          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUSOP          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUSOP         reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NOTSYM          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BNOP            reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLECOLON     reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NEW             reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DELETE          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    AUTO            reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STATIC          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONST           reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOLATILE        reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INLINE          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VIRTUAL         reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    THIS            reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SHORT           reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LONG            reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIGNED          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    UNSIGNED        reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    VOID            reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ENUM            reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SCHAR           reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CLASS           reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRUCT          reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    UNION           reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    OPERATOR        reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 235 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 657

    (236) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN . statement
    (208) statement -> . labeled_statement
    (209) statement -> . expression_statement
    (210) statement -> . compound_statement
    (211) statement -> . selection_statement
    (212) statement -> . iteration_statement
    (213) statement -> . jump_statement
    (214) statement -> . declaration_statement
    (215) statement -> . try_block
    (231) labeled_statement -> . IDENTIFIER COLON statement
    (232) labeled_statement -> . CASE constant_expression COLON statement
    (233) labeled_statement -> . DEFAULT COLON statement
    (242) expression_statement -> . expression SEMICOLON
    (243) expression_statement -> . SEMICOLON
    (204) compound_statement -> . LCPAREN statement_list RCPAREN
    (205) compound_statement -> . LCPAREN RCPAREN
    (221) selection_statement -> . IF LPAREN expression RPAREN statement
    (222) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (223) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (234) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (235) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (236) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement
    (237) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement
    (238) iteration_statement -> . FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement
    (239) iteration_statement -> . FOR LPAREN for_init_statement SEMICOLON RPAREN statement
    (216) jump_statement -> . BREAK SEMICOLON
    (217) jump_statement -> . CONTINUE SEMICOLON
    (218) jump_statement -> . RETURN expression SEMICOLON
    (219) jump_statement -> . RETURN SEMICOLON
    (220) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (244) declaration_statement -> . declaration
    (224) try_block -> . TRY compound_statement handler_list
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (245) declaration -> . decl_specifiers declarator_list SEMICOLON
    (246) declaration -> . decl_specifiers SEMICOLON
    (247) declaration -> . declarator_list SEMICOLON
    (248) declaration -> . asm_declaration
    (249) declaration -> . function_definition
    (250) declaration -> . template_declaration
    (251) declaration -> . linkage_specification
    (62) assignment_expression -> . conditional_expression
    (63) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (169) decl_specifiers -> . decl_specifiers decl_specifier
    (170) decl_specifiers -> . decl_specifier
    (258) declarator_list -> . init_declarator
    (259) declarator_list -> . declarator_list COMMA init_declarator
    (270) asm_declaration -> . ASM LPAREN STRING RPAREN SEMICOLON
    (199) function_definition -> . decl_specifiers declarator ctor_initializer fct_body
    (200) function_definition -> . declarator ctor_initializer fct_body
    (201) function_definition -> . decl_specifiers declarator fct_body
    (202) function_definition -> . declarator fct_body
    (252) template_declaration -> . TEMPLATE LTCOMP template_argument_list GTCOMP declaration
    (271) linkage_specification -> . EXTERN STRING LCPAREN declaration_list RCPAREN
    (272) linkage_specification -> . EXTERN STRING LCPAREN RCPAREN
    (273) linkage_specification -> . EXTERN STRING declaration
    (27) conditional_expression -> . logical_OR_expression
    (28) conditional_expression -> . logical_OR_expression QUESMARK expression COLON conditional_expression
    (74) unary_expression -> . postfix_expression
    (75) unary_expression -> . DPLUSOP unary_expression
    (76) unary_expression -> . DMINUSOP unary_expression
    (77) unary_expression -> . unary_operator cast_expression
    (78) unary_expression -> . SIZEOF unary_expression
    (79) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (80) unary_expression -> . allocation_expression
    (81) unary_expression -> . deallocation_expression
    (171) decl_specifier -> . storage_class_specifier
    (172) decl_specifier -> . type_specifier
    (173) decl_specifier -> . fct_specifier
    (174) decl_specifier -> . TYPEDEF
    (260) init_declarator -> . declarator initializer
    (261) init_declarator -> . declarator
    (291) declarator -> . dname
    (292) declarator -> . ptr_operator declarator
    (293) declarator -> . declarator LPAREN argument_declaration_list RPAREN cv_qualifier_list
    (294) declarator -> . declarator LPAREN argument_declaration_list RPAREN
    (295) declarator -> . declarator LSPAREN constant_expression RSPAREN
    (296) declarator -> . declarator LSPAREN RSPAREN
    (297) declarator -> . LPAREN declarator RPAREN
    (29) logical_OR_expression -> . logical_AND_expression
    (30) logical_OR_expression -> . logical_OR_expression OROP logical_AND_expression
    (123) postfix_expression -> . primary_expression
    (124) postfix_expression -> . postfix_expression LSPAREN expression RSPAREN
    (125) postfix_expression -> . postfix_expression LPAREN expression_list RPAREN
    (126) postfix_expression -> . postfix_expression template_class_name LPAREN expression_list RPAREN
    (127) postfix_expression -> . postfix_expression LPAREN RPAREN
    (128) postfix_expression -> . simple_type_name LPAREN expression_list RPAREN
    (129) postfix_expression -> . simple_type_name LPAREN RPAREN
    (130) postfix_expression -> . postfix_expression DOT name
    (131) postfix_expression -> . postfix_expression ARROW name
    (132) postfix_expression -> . postfix_expression DPLUSOP
    (133) postfix_expression -> . postfix_expression DMINUSOP
    (117) unary_operator -> . MULTOP
    (118) unary_operator -> . BANDOP
    (119) unary_operator -> . PLUSOP
    (120) unary_operator -> . MINUSOP
    (121) unary_operator -> . NOTSYM
    (122) unary_operator -> . BNOP
    (86) allocation_expression -> . DOUBLECOLON NEW placement new_type_name new_initializer
    (87) allocation_expression -> . NEW placement new_type_name new_initializer
    (88) allocation_expression -> . DOUBLECOLON NEW new_type_name new_initializer
    (89) allocation_expression -> . NEW new_type_name new_initializer
    (90) allocation_expression -> . DOUBLECOLON NEW placement new_type_name
    (91) allocation_expression -> . NEW placement new_type_name
    (92) allocation_expression -> . DOUBLECOLON NEW new_type_name
    (93) allocation_expression -> . NEW new_type_name
    (94) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN new_initializer
    (95) allocation_expression -> . NEW placement LPAREN type_name RPAREN new_initializer
    (96) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN new_initializer
    (97) allocation_expression -> . NEW LPAREN type_name RPAREN new_initializer
    (98) allocation_expression -> . DOUBLECOLON NEW placement LPAREN type_name RPAREN
    (99) allocation_expression -> . NEW placement LPAREN type_name RPAREN
    (100) allocation_expression -> . DOUBLECOLON NEW LPAREN type_name RPAREN
    (101) allocation_expression -> . NEW LPAREN type_name RPAREN
    (82) deallocation_expression -> . DOUBLECOLON DELETE cast_expression
    (83) deallocation_expression -> . DELETE cast_expression
    (84) deallocation_expression -> . DOUBLECOLON DELETE LSPAREN RSPAREN cast_expression
    (85) deallocation_expression -> . DELETE LSPAREN RSPAREN cast_expression
    (175) storage_class_specifier -> . AUTO
    (176) storage_class_specifier -> . STATIC
    (177) storage_class_specifier -> . EXTERN
    (180) type_specifier -> . simple_type_name
    (181) type_specifier -> . class_specifier
    (182) type_specifier -> . enum_specifier
    (183) type_specifier -> . elaborated_type_specifier
    (184) type_specifier -> . CONST
    (185) type_specifier -> . VOLATILE
    (178) fct_specifier -> . INLINE
    (179) fct_specifier -> . VIRTUAL
    (298) dname -> . name
    (299) dname -> . class_name
    (300) dname -> . BNOP class_name
    (301) dname -> . typedef_name
    (302) dname -> . qualified_type_name
    (393) ptr_operator -> . MULTOP cv_qualifier_list
    (394) ptr_operator -> . MULTOP
    (395) ptr_operator -> . BANDOP cv_qualifier_list
    (396) ptr_operator -> . BANDOP
    (397) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP cv_qualifier_list
    (398) ptr_operator -> . complete_class_name DOUBLECOLON MULTOP
    (31) logical_AND_expression -> . inclusive_OR_expression
    (32) logical_AND_expression -> . logical_AND_expression ANDOP inclusive_OR_expression
    (134) primary_expression -> . literal
    (135) primary_expression -> . THIS
    (136) primary_expression -> . DOUBLECOLON IDENTIFIER
    (137) primary_expression -> . DOUBLECOLON operator_function_name
    (138) primary_expression -> . DOUBLECOLON qualified_name
    (139) primary_expression -> . LPAREN expression RPAREN
    (140) primary_expression -> . name
    (379) simple_type_name -> . complete_class_name
    (380) simple_type_name -> . qualified_type_name
    (381) simple_type_name -> . CHAR
    (382) simple_type_name -> . SHORT
    (383) simple_type_name -> . INT
    (384) simple_type_name -> . LONG
    (385) simple_type_name -> . SIGNED
    (386) simple_type_name -> . UNSIGNED
    (387) simple_type_name -> . FLOAT
    (388) simple_type_name -> . DOUBLE
    (389) simple_type_name -> . VOID
    (186) class_specifier -> . class_head LCPAREN member_list RCPAREN
    (187) class_specifier -> . class_head LCPAREN RCPAREN
    (18) enum_specifier -> . ENUM IDENTIFIER LCPAREN enum_list RCPAREN
    (19) enum_specifier -> . ENUM LCPAREN enum_list RCPAREN
    (20) enum_specifier -> . ENUM IDENTIFIER LCPAREN RCPAREN
    (21) enum_specifier -> . ENUM LCPAREN RCPAREN
    (371) elaborated_type_specifier -> . class_key IDENTIFIER
    (372) elaborated_type_specifier -> . class_key class_name
    (373) elaborated_type_specifier -> . ENUM enum_name
    (303) name -> . IDENTIFIER
    (304) name -> . operator_function_name
    (305) name -> . conversion_function_name
    (306) name -> . BNOP class_name
    (307) name -> . qualified_name
    (407) class_name -> . IDENTIFIER
    (392) typedef_name -> . IDENTIFIER
    (390) qualified_type_name -> . typedef_name
    (391) qualified_type_name -> . class_name DOUBLECOLON qualified_type_name
    (403) complete_class_name -> . qualified_class_name
    (404) complete_class_name -> . DOUBLECOLON qualified_class_name
    (33) inclusive_OR_expression -> . exclusive_OR_expression
    (34) inclusive_OR_expression -> . inclusive_OR_expression OROP exclusive_OR_expression
    (141) literal -> . NUMBER
    (142) literal -> . STRING
    (143) literal -> . SCHAR
    (354) class_head -> . class_key IDENTIFIER base_spec
    (355) class_head -> . class_key base_spec
    (356) class_head -> . class_key IDENTIFIER
    (357) class_head -> . class_key
    (358) class_head -> . class_key class_name base_spec
    (359) class_head -> . class_key class_name
    (375) class_key -> . CLASS
    (376) class_key -> . STRUCT
    (377) class_key -> . UNION
    (378) class_key -> . TEMPLATE
    (314) operator_function_name -> . OPERATOR operator_name
    (309) conversion_function_name -> . OPERATOR conversion_type_name
    (308) qualified_name -> . qualified_class_name DOUBLECOLON name
    (405) qualified_class_name -> . class_name
    (406) qualified_class_name -> . class_name DOUBLECOLON qualified_class_name
    (35) exclusive_OR_expression -> . AND_expression
    (36) exclusive_OR_expression -> . exclusive_OR_expression XOROP AND_expression
    (37) AND_expression -> . equality_expression
    (38) AND_expression -> . AND_expression BANDOP equality_expression
    (39) equality_expression -> . relational_expression
    (40) equality_expression -> . equality_expression EQCOMP relational_expression
    (41) equality_expression -> . equality_expression NEQCOMP relational_expression
    (42) relational_expression -> . shift_expression
    (43) relational_expression -> . relational_expression LTCOMP shift_expression
    (44) relational_expression -> . relational_expression GTCOMP shift_expression
    (45) relational_expression -> . relational_expression LTECOMP shift_expression
    (46) relational_expression -> . relational_expression GTECOMP shift_expression
    (47) shift_expression -> . additive_expression
    (48) shift_expression -> . shift_expression LSHIFT additive_expression
    (49) shift_expression -> . shift_expression RSHIFT additive_expression
    (50) additive_expression -> . multiplicative_expression
    (51) additive_expression -> . additive_expression PLUSOP multiplicative_expression
    (52) additive_expression -> . additive_expression MINUSOP multiplicative_expression
    (53) multiplicative_expression -> . pm_expression
    (54) multiplicative_expression -> . multiplicative_expression MULTOP pm_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVOP pm_expression
    (56) multiplicative_expression -> . multiplicative_expression MODOP pm_expression
    (57) pm_expression -> . cast_expression
    (58) pm_expression -> . pm_expression DOTSTAR cast_expression
    (59) pm_expression -> . pm_expression ARROWSTAR cast_expression
    (144) cast_expression -> . unary_expression
    (145) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 235
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237
    SEMICOLON       shift and go to state 239
    LCPAREN         shift and go to state 85
    IF              shift and go to state 240
    SWITCH          shift and go to state 242
    WHILE           shift and go to state 243
    DO              shift and go to state 244
    FOR             shift and go to state 245
    BREAK           shift and go to state 246
    CONTINUE        shift and go to state 247
    RETURN          shift and go to state 248
    GOTO            shift and go to state 249
    TRY             shift and go to state 251
    ASM             shift and go to state 13
    TEMPLATE        shift and go to state 16
    EXTERN          shift and go to state 17
    DPLUSOP         shift and go to state 177
    DMINUSOP        shift and go to state 178
    SIZEOF          shift and go to state 181
    TYPEDEF         shift and go to state 21
    LPAREN          shift and go to state 241
    MULTOP          shift and go to state 254
    BANDOP          shift and go to state 255
    PLUSOP          shift and go to state 190
    MINUSOP         shift and go to state 191
    NOTSYM          shift and go to state 192
    BNOP            shift and go to state 256
    DOUBLECOLON     shift and go to state 194
    NEW             shift and go to state 195
    DELETE          shift and go to state 196
    AUTO            shift and go to state 24
    STATIC          shift and go to state 25
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INLINE          shift and go to state 32
    VIRTUAL         shift and go to state 33
    THIS            shift and go to state 199
    CHAR            shift and go to state 43
    SHORT           shift and go to state 44
    INT             shift and go to state 45
    LONG            shift and go to state 46
    SIGNED          shift and go to state 47
    UNSIGNED        shift and go to state 48
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    VOID            shift and go to state 51
    ENUM            shift and go to state 53
    NUMBER          shift and go to state 202
    STRING          shift and go to state 203
    SCHAR           shift and go to state 204
    CLASS           shift and go to state 60
    STRUCT          shift and go to state 61
    UNION           shift and go to state 62
    OPERATOR        shift and go to state 63

    expression                     shift and go to state 238
    statement                      shift and go to state 661
    labeled_statement              shift and go to state 227
    expression_statement           shift and go to state 228
    compound_statement             shift and go to state 229
    selection_statement            shift and go to state 230
    iteration_statement            shift and go to state 231
    jump_statement                 shift and go to state 232
    declaration_statement          shift and go to state 233
    try_block                      shift and go to state 234
    declaration                    shift and go to state 250
    assignment_expression          shift and go to state 252
    decl_specifiers                shift and go to state 5
    declarator_list                shift and go to state 6
    asm_declaration                shift and go to state 7
    function_definition            shift and go to state 8
    template_declaration           shift and go to state 9
    linkage_specification          shift and go to state 10
    conditional_expression         shift and go to state 172
    unary_expression               shift and go to state 173
    decl_specifier                 shift and go to state 11
    init_declarator                shift and go to state 12
    declarator                     shift and go to state 15
    logical_OR_expression          shift and go to state 175
    postfix_expression             shift and go to state 176
    unary_operator                 shift and go to state 179
    cast_expression                shift and go to state 180
    allocation_expression          shift and go to state 182
    deallocation_expression        shift and go to state 183
    storage_class_specifier        shift and go to state 18
    type_specifier                 shift and go to state 19
    fct_specifier                  shift and go to state 20
    dname                          shift and go to state 22
    ptr_operator                   shift and go to state 23
    logical_AND_expression         shift and go to state 184
    primary_expression             shift and go to state 185
    simple_type_name               shift and go to state 186
    name                           shift and go to state 253
    class_specifier                shift and go to state 27
    enum_specifier                 shift and go to state 28
    elaborated_type_specifier      shift and go to state 29
    class_name                     shift and go to state 35
    typedef_name                   shift and go to state 37
    qualified_type_name            shift and go to state 38
    complete_class_name            shift and go to state 41
    inclusive_OR_expression        shift and go to state 197
    literal                        shift and go to state 198
    operator_function_name         shift and go to state 56
    qualified_name                 shift and go to state 58
    class_head                     shift and go to state 52
    class_key                      shift and go to state 55
    conversion_function_name       shift and go to state 57
    qualified_class_name           shift and go to state 59
    exclusive_OR_expression        shift and go to state 201
    AND_expression                 shift and go to state 205
    equality_expression            shift and go to state 206
    relational_expression          shift and go to state 207
    shift_expression               shift and go to state 208
    additive_expression            shift and go to state 209
    multiplicative_expression      shift and go to state 210
    pm_expression                  shift and go to state 211

state 658

    (238) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .

    RCPAREN         reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    IDENTIFIER      reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CASE            reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DEFAULT         reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SEMICOLON       reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LCPAREN         reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    IF              reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SWITCH          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    WHILE           reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DO              reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    FOR             reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BREAK           reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CONTINUE        reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    RETURN          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    GOTO            reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TRY             reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ASM             reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TEMPLATE        reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    EXTERN          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DPLUSOP         reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DMINUSOP        reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SIZEOF          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    TYPEDEF         reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LPAREN          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    MULTOP          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BANDOP          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    PLUSOP          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    MINUSOP         reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NOTSYM          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    BNOP            reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DOUBLECOLON     reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NEW             reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DELETE          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    AUTO            reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STATIC          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CONST           reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    VOLATILE        reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    INLINE          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    VIRTUAL         reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    THIS            reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CHAR            reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SHORT           reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    INT             reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    LONG            reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SIGNED          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    UNSIGNED        reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    FLOAT           reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    DOUBLE          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    VOID            reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ENUM            reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    NUMBER          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRING          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    SCHAR           reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    CLASS           reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    STRUCT          reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    UNION           reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    OPERATOR        reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)
    ELSE            reduce using rule 238 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON RPAREN statement .)


state 659

    (237) iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .

    RCPAREN         reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    IDENTIFIER      reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CASE            reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DEFAULT         reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LCPAREN         reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SWITCH          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DO              reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    GOTO            reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TRY             reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ASM             reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TEMPLATE        reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    EXTERN          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DPLUSOP         reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DMINUSOP        reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SIZEOF          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    TYPEDEF         reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MULTOP          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BANDOP          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    PLUSOP          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    MINUSOP         reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NOTSYM          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    BNOP            reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DOUBLECOLON     reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NEW             reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DELETE          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    AUTO            reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STATIC          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CONST           reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VOLATILE        reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    INLINE          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VIRTUAL         reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    THIS            reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CHAR            reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SHORT           reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    LONG            reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SIGNED          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    UNSIGNED        reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ENUM            reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRING          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    SCHAR           reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    CLASS           reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    STRUCT          reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    UNION           reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    OPERATOR        reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 237 (iteration_statement -> FOR LPAREN for_init_statement SEMICOLON expression RPAREN statement .)


state 660

    (227) handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .

    CATCH           reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    RCPAREN         reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    IDENTIFIER      reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CASE            reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DEFAULT         reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SEMICOLON       reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    LCPAREN         reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    IF              reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SWITCH          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    WHILE           reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DO              reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    FOR             reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    BREAK           reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CONTINUE        reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    RETURN          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    GOTO            reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    TRY             reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    ASM             reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    TEMPLATE        reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    EXTERN          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DPLUSOP         reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DMINUSOP        reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SIZEOF          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    TYPEDEF         reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    LPAREN          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    MULTOP          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    BANDOP          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    PLUSOP          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    MINUSOP         reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    NOTSYM          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    BNOP            reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DOUBLECOLON     reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    NEW             reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DELETE          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    AUTO            reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    STATIC          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CONST           reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    VOLATILE        reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    INLINE          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    VIRTUAL         reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    THIS            reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CHAR            reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SHORT           reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    INT             reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    LONG            reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SIGNED          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    UNSIGNED        reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    FLOAT           reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    DOUBLE          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    VOID            reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    ENUM            reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    NUMBER          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    STRING          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    SCHAR           reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    CLASS           reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    STRUCT          reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    UNION           reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    OPERATOR        reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)
    ELSE            reduce using rule 227 (handler -> CATCH LPAREN exception_declaration RPAREN compound_statement .)


state 661

    (236) iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .

    RCPAREN         reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    IDENTIFIER      reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CASE            reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DEFAULT         reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LCPAREN         reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SWITCH          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DO              reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    GOTO            reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TRY             reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ASM             reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TEMPLATE        reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    EXTERN          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DPLUSOP         reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DMINUSOP        reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SIZEOF          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    TYPEDEF         reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    MULTOP          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BANDOP          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    PLUSOP          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    MINUSOP         reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NOTSYM          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    BNOP            reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DOUBLECOLON     reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NEW             reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DELETE          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    AUTO            reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STATIC          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CONST           reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    VOLATILE        reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    INLINE          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    VIRTUAL         reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    THIS            reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CHAR            reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SHORT           reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    LONG            reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SIGNED          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    UNSIGNED        reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ENUM            reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRING          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    SCHAR           reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    CLASS           reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    STRUCT          reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    UNION           reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    OPERATOR        reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 236 (iteration_statement -> FOR LPAREN for_init_statement expression SEMICOLON expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOUBLECOLON in state 35 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 41 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 59 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 88 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 88 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 99 resolved as shift
WARNING: shift/reduce conflict for LCPAREN in state 101 resolved as shift
WARNING: shift/reduce conflict for COLON in state 104 resolved as shift
WARNING: shift/reduce conflict for COLON in state 105 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 149 resolved as shift
WARNING: shift/reduce conflict for BANDOP in state 149 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 150 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 150 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 154 resolved as shift
WARNING: shift/reduce conflict for LTCOMP in state 176 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 186 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 193 resolved as shift
WARNING: shift/reduce conflict for OROP in state 197 resolved as shift
WARNING: shift/reduce conflict for GTCOMP in state 207 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 221 resolved as shift
WARNING: shift/reduce conflict for COLON in state 235 resolved as shift
WARNING: shift/reduce conflict for COLON in state 235 resolved as shift
WARNING: shift/reduce conflict for COLON in state 235 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 256 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 261 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 277 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 278 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 284 resolved as shift
WARNING: shift/reduce conflict for COLON in state 285 resolved as shift
WARNING: shift/reduce conflict for COLON in state 285 resolved as shift
WARNING: shift/reduce conflict for COLON in state 285 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 286 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 312 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 331 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 331 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 358 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 363 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 401 resolved as shift
WARNING: shift/reduce conflict for COLON in state 429 resolved as shift
WARNING: shift/reduce conflict for COLON in state 429 resolved as shift
WARNING: shift/reduce conflict for COLON in state 429 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 452 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 452 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 459 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 463 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 463 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 478 resolved as shift
WARNING: shift/reduce conflict for OROP in state 481 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 496 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 496 resolved as shift
WARNING: shift/reduce conflict for GTCOMP in state 503 resolved as shift
WARNING: shift/reduce conflict for GTCOMP in state 504 resolved as shift
WARNING: shift/reduce conflict for DOUBLECOLON in state 552 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 561 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 562 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 589 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 589 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 590 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 624 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 625 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 625 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 628 resolved as shift
WARNING: shift/reduce conflict for MULTOP in state 642 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 642 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 643 resolved as shift
WARNING: shift/reduce conflict for LSPAREN in state 654 resolved as shift
WARNING: reduce/reduce conflict in state 35 resolved using rule (dname -> class_name)
WARNING: rejected rule (qualified_class_name -> class_name) in state 35
WARNING: reduce/reduce conflict in state 37 resolved using rule (dname -> typedef_name)
WARNING: rejected rule (qualified_type_name -> typedef_name) in state 37
WARNING: reduce/reduce conflict in state 38 resolved using rule (dname -> qualified_type_name)
WARNING: rejected rule (simple_type_name -> qualified_type_name) in state 38
WARNING: reduce/reduce conflict in state 54 resolved using rule (name -> IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 54
WARNING: reduce/reduce conflict in state 54 resolved using rule (name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 54
WARNING: reduce/reduce conflict in state 54 resolved using rule (typedef_name -> IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 54
WARNING: reduce/reduce conflict in state 90 resolved using rule (dname -> BNOP class_name)
WARNING: rejected rule (name -> BNOP class_name) in state 90
WARNING: reduce/reduce conflict in state 104 resolved using rule (class_head -> class_key IDENTIFIER)
WARNING: rejected rule (elaborated_type_specifier -> class_key IDENTIFIER) in state 104
WARNING: reduce/reduce conflict in state 104 resolved using rule (elaborated_type_specifier -> class_key IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 104
WARNING: reduce/reduce conflict in state 104 resolved using rule (class_head -> class_key IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 104
WARNING: reduce/reduce conflict in state 105 resolved using rule (class_head -> class_key class_name)
WARNING: rejected rule (elaborated_type_specifier -> class_key class_name) in state 105
WARNING: reduce/reduce conflict in state 153 resolved using rule (typedef_name -> IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 153
WARNING: reduce/reduce conflict in state 200 resolved using rule (name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 200
WARNING: reduce/reduce conflict in state 200 resolved using rule (typedef_name -> IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 200
WARNING: reduce/reduce conflict in state 200 resolved using rule (name -> IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 200
WARNING: reduce/reduce conflict in state 235 resolved using rule (name -> IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 235
WARNING: reduce/reduce conflict in state 235 resolved using rule (name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 235
WARNING: reduce/reduce conflict in state 235 resolved using rule (typedef_name -> IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 235
WARNING: reduce/reduce conflict in state 253 resolved using rule (primary_expression -> name)
WARNING: rejected rule (dname -> name) in state 253
WARNING: reduce/reduce conflict in state 254 resolved using rule (unary_operator -> MULTOP)
WARNING: rejected rule (ptr_operator -> MULTOP) in state 254
WARNING: reduce/reduce conflict in state 255 resolved using rule (unary_operator -> BANDOP)
WARNING: rejected rule (ptr_operator -> BANDOP) in state 255
WARNING: reduce/reduce conflict in state 285 resolved using rule (name -> IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 285
WARNING: reduce/reduce conflict in state 285 resolved using rule (name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 285
WARNING: reduce/reduce conflict in state 285 resolved using rule (typedef_name -> IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 285
WARNING: reduce/reduce conflict in state 286 resolved using rule (dname -> class_name)
WARNING: rejected rule (qualified_class_name -> class_name) in state 286
WARNING: reduce/reduce conflict in state 355 resolved using rule (primary_expression -> DOUBLECOLON IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 355
WARNING: reduce/reduce conflict in state 385 resolved using rule (typedef_name -> IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 385
WARNING: reduce/reduce conflict in state 385 resolved using rule (name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 385
WARNING: reduce/reduce conflict in state 402 resolved using rule (unary_operator -> MULTOP)
WARNING: rejected rule (ptr_operator -> MULTOP) in state 402
WARNING: reduce/reduce conflict in state 403 resolved using rule (unary_operator -> BANDOP)
WARNING: rejected rule (ptr_operator -> BANDOP) in state 403
WARNING: reduce/reduce conflict in state 429 resolved using rule (name -> IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 429
WARNING: reduce/reduce conflict in state 429 resolved using rule (name -> IDENTIFIER)
WARNING: rejected rule (typedef_name -> IDENTIFIER) in state 429
WARNING: reduce/reduce conflict in state 429 resolved using rule (typedef_name -> IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 429
WARNING: reduce/reduce conflict in state 553 resolved using rule (typedef_name -> IDENTIFIER)
WARNING: rejected rule (class_name -> IDENTIFIER) in state 553
