
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD_ASSIGN AND_ASSIGN AND_OP AUTO BANDOP BNOP BOROP BREAK CASE CATCH CHAR CLASS COLON COMMA CONST CONTINUE DEC_OP DEFAULT DELETE DIVOP DIV_ASSIGN DO DOT DOUBLE DQUOTE ELLIPSIS ELSE ENUM EQUAL EQ_OP EXTERN FLOAT FOR GE_OP GOTO GTCOMP HASHTAG IDENTIFIER IF INC_OP INT LCPAREN LEFT_ASSIGN LEFT_OP LE_OP LONG LRPAREN LSPAREN LTCOMP MINUSOP MODOP MOD_ASSIGN MULTOP MUL_ASSIGN NEW NE_OP NOTSYM NUMBER OR_ASSIGN OR_OP PLUSOP PRIVATE PROTECTED PTR_OP PUBLIC QUESMARK RCPAREN REGISTER RETURN RIGHT_ASSIGN RIGHT_OP RRPAREN RSPAREN SCHAR SEMICOLON SHORT SIGNED SIZEOF SQUOTE STATIC STRING_LITERAL STRUCT SUB_ASSIGN SWITCH TEMPLATE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILE XOROP XOR_ASSIGNprogram : translation_unit\n\n    primary_expression : IDENTIFIER\n                         | NUMBER\n                         | STRING_LITERAL\n                         | SCHAR\n                         | LRPAREN expression RRPAREN\n\n    postfix_expression : primary_expression\n                         | postfix_expression LSPAREN expression RSPAREN\n                         | postfix_expression LRPAREN RRPAREN\n                         | postfix_expression LRPAREN argument_expression_list RRPAREN\n                         | postfix_expression DOT IDENTIFIER\n                         | postfix_expression PTR_OP IDENTIFIER\n                         | postfix_expression INC_OP\n                         | postfix_expression DEC_OP\n\n    argument_expression_list : assignment_expression\n                               | argument_expression_list COMMA assignment_expression\n\n    unary_expression : postfix_expression\n                       | INC_OP unary_expression\n                       | DEC_OP unary_expression\n                       | unary_operator cast_expression\n                       | SIZEOF unary_expression\n                       | SIZEOF LRPAREN type_name RRPAREN\n\n    unary_operator : BANDOP\n                     | MULTOP\n                     | PLUSOP\n                     | MINUSOP\n                     | BNOP\n                     | NOTSYM\n\n    cast_expression : unary_expression\n                      | LRPAREN type_name RRPAREN cast_expression\n\n    multiplicative_expression : cast_expression\n                                | multiplicative_expression MULTOP cast_expression\n                                | multiplicative_expression DIVOP cast_expression\n                                | multiplicative_expression MODOP cast_expression\n\n    additive_expression : multiplicative_expression\n                          | additive_expression PLUSOP multiplicative_expression\n                          | additive_expression MINUSOP multiplicative_expression\n\n    shift_expression : additive_expression\n                       | shift_expression LEFT_OP additive_expression\n                       | shift_expression RIGHT_OP additive_expression\n\n    relational_expression : shift_expression\n                            | relational_expression LTCOMP shift_expression\n                            | relational_expression GTCOMP shift_expression\n                            | relational_expression LE_OP shift_expression\n                            | relational_expression GE_OP shift_expression\n\n    equality_expression : relational_expression\n                          | equality_expression EQ_OP relational_expression\n                          | equality_expression NE_OP relational_expression\n\n    and_expression : equality_expression\n                     | and_expression BANDOP equality_expression\n\n    exclusive_or_expression : and_expression\n                              | exclusive_or_expression XOROP and_expression\n\n    inclusive_or_expression : exclusive_or_expression\n                              | inclusive_or_expression BOROP exclusive_or_expression\n\n    logical_and_expression : inclusive_or_expression\n                             | logical_and_expression AND_OP inclusive_or_expression\n\n    logical_or_expression : logical_and_expression\n                            | logical_or_expression OR_OP logical_and_expression\n\n    conditional_expression : logical_or_expression\n                             | logical_or_expression QUESMARK expression COLON conditional_expression\n\n    assignment_expression : conditional_expression\n                            | unary_expression assignment_operator assignment_expression\n\n    assignment_operator : EQUAL\n                          | MUL_ASSIGN\n                          | DIV_ASSIGN\n                          | MOD_ASSIGN\n                          | ADD_ASSIGN\n                          | SUB_ASSIGN\n                          | LEFT_ASSIGN\n                          | RIGHT_ASSIGN\n                          | AND_ASSIGN\n                          | XOR_ASSIGN\n                          | OR_ASSIGN\n\n    expression : assignment_expression\n                 | expression COMMA assignment_expression\n\n    constant_expression : conditional_expression\n\n    declaration : declaration_specifiers SEMICOLON\n                  | declaration_specifiers init_declarator_list SEMICOLON\n\n    declaration_specifiers : storage_class_specifier\n                             | storage_class_specifier declaration_specifiers\n                             | type_specifier\n                             | type_specifier declaration_specifiers\n                             | type_qualifier\n                             | type_qualifier declaration_specifiers\n\n    init_declarator_list : init_declarator\n                           | init_declarator_list COMMA init_declarator\n\n    init_declarator : declarator\n                      | declarator EQUAL initializer\n\n    storage_class_specifier : TYPEDEF\n                              | EXTERN\n                              | STATIC\n                              | AUTO\n                              | REGISTER\n\n    type_specifier : VOID\n                     | CHAR\n                     | SHORT\n                     | INT\n                     | LONG\n                     | FLOAT\n                     | DOUBLE\n                     | SIGNED\n                     | UNSIGNED\n                     | struct_or_union_specifier\n                     | enum_specifier\n    struct_or_union_specifier : struct_or_union IDENTIFIER LCPAREN struct_declaration_list RCPAREN\n                                | struct_or_union LCPAREN struct_declaration_list RCPAREN\n                                | struct_or_union IDENTIFIER\n\n    struct_or_union : STRUCT\n                      | UNION\n\n    struct_declaration_list : struct_declaration\n                              | struct_declaration_list struct_declaration\n\n    struct_declaration : specifier_qualifier_list struct_declarator_list SEMICOLON\n    specifier_qualifier_list : type_specifier specifier_qualifier_list\n                               | type_specifier\n                               | type_qualifier specifier_qualifier_list\n                               | type_qualifier\n\n    struct_declarator_list : struct_declarator\n                             | struct_declarator_list COMMA struct_declarator\n\n    struct_declarator : declarator\n                        | COLON constant_expression\n                        | declarator COLON constant_expression\n\n    enum_specifier : ENUM LCPAREN enumerator_list RCPAREN\n                     | ENUM IDENTIFIER LCPAREN enumerator_list RCPAREN\n                     | ENUM IDENTIFIER\n\n    enumerator_list : enumerator\n                      | enumerator_list COMMA enumerator\n\n    enumerator : IDENTIFIER\n                 | IDENTIFIER EQUAL constant_expression\n\n    type_qualifier : CONST\n                     | VOLATILE\n\n    declarator : pointer direct_declarator\n                 | direct_declarator\n\n    direct_declarator : IDENTIFIER\n                        | LRPAREN declarator RRPAREN\n                        | direct_declarator LSPAREN constant_expression RSPAREN\n                        | direct_declarator LSPAREN RSPAREN\n                        | direct_declarator LRPAREN parameter_type_list RRPAREN\n                        | direct_declarator LRPAREN identifier_list RRPAREN\n                        | direct_declarator LRPAREN RRPAREN\n\n    pointer : MULTOP\n              | MULTOP type_qualifier_list\n              | MULTOP pointer\n              | MULTOP type_qualifier_list pointer\n\n    type_qualifier_list : type_qualifier\n                          | type_qualifier_list type_qualifier\n\n    parameter_type_list : parameter_list\n                          | parameter_list COMMA ELLIPSIS\n\n    parameter_list : parameter_declaration\n                     | parameter_list COMMA parameter_declaration\n\n    parameter_declaration : declaration_specifiers declarator\n                            | declaration_specifiers abstract_declarator\n                            | declaration_specifiers\n\n    identifier_list : IDENTIFIER\n                      | identifier_list COMMA IDENTIFIER\n\n    type_name : specifier_qualifier_list\n                | specifier_qualifier_list abstract_declarator\n\n    abstract_declarator : pointer\n                          | direct_abstract_declarator\n                          | pointer direct_abstract_declarator\n\n    direct_abstract_declarator : LRPAREN abstract_declarator RRPAREN\n                                 | LSPAREN RSPAREN\n                                 | LSPAREN constant_expression RSPAREN\n                                 | direct_abstract_declarator LSPAREN RSPAREN\n                                 | direct_abstract_declarator LSPAREN constant_expression RSPAREN\n                                 | LRPAREN RRPAREN\n                                 | LRPAREN parameter_type_list RRPAREN\n                                 | direct_abstract_declarator LRPAREN RRPAREN\n                                 | direct_abstract_declarator LRPAREN parameter_type_list RRPAREN\n\n    initializer : assignment_expression\n                  | LCPAREN initializer_list RCPAREN\n                  | LCPAREN initializer_list COMMA RCPAREN\n\n    initializer_list : initializer\n                       | initializer_list COMMA initializer\n\n    statement : labeled_statement\n                | compound_statement\n                | expression_statement\n                | selection_statement\n                | iteration_statement\n                | jump_statement\n\n    labeled_statement : IDENTIFIER COLON statement\n                        | CASE constant_expression COLON statement\n                        | DEFAULT COLON statement\n\n    compound_statement : LCPAREN RCPAREN\n                         | LCPAREN statement_list RCPAREN\n                         | LCPAREN declaration_list RCPAREN\n                         | LCPAREN declaration_list statement_list RCPAREN\n\n    declaration_list : declaration\n                       | declaration_list declaration\n\n    statement_list : statement\n                     | statement_list statement\n\n    expression_statement : SEMICOLON\n                           | expression SEMICOLON\n\n    selection_statement : IF LRPAREN expression RRPAREN statement\n                          | IF LRPAREN expression RRPAREN statement ELSE statement\n                          | SWITCH LRPAREN expression RRPAREN statement\n\n    iteration_statement : WHILE LRPAREN expression RRPAREN statement\n                          | DO statement WHILE LRPAREN expression RRPAREN SEMICOLON\n                          | FOR LRPAREN expression_statement expression_statement RRPAREN statement\n                          | FOR LRPAREN expression_statement expression_statement expression RRPAREN statement\n\n    jump_statement : GOTO IDENTIFIER SEMICOLON\n                     | CONTINUE SEMICOLON\n                     | BREAK SEMICOLON\n                     | RETURN SEMICOLON\n                     | RETURN expression SEMICOLON\n\n    translation_unit : external_declaration\n                       | translation_unit external_declaration\n\n    external_declaration : function_definition\n                           | declaration\n    function_definition : declaration_specifiers declarator declaration_list compound_statement\n                          | declaration_specifiers declarator compound_statement\n                          | declarator declaration_list compound_statement\n                          | declarator compound_statement\n\n    '
    
_lr_action_items = {'TYPEDEF':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,61,62,63,65,67,68,69,71,125,131,139,150,155,157,220,221,222,224,229,232,240,246,256,295,301,308,],[13,13,-205,-207,-208,13,13,13,13,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,13,-77,13,-212,-187,13,-131,13,-107,-124,13,-210,-78,-211,-188,-183,13,-136,-139,-134,-209,-184,-185,-135,-137,-138,13,13,-106,-122,-186,13,13,-105,-123,]),'EXTERN':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,61,62,63,65,67,68,69,71,125,131,139,150,155,157,220,221,222,224,229,232,240,246,256,295,301,308,],[14,14,-205,-207,-208,14,14,14,14,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,14,-77,14,-212,-187,14,-131,14,-107,-124,14,-210,-78,-211,-188,-183,14,-136,-139,-134,-209,-184,-185,-135,-137,-138,14,14,-106,-122,-186,14,14,-105,-123,]),'STATIC':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,61,62,63,65,67,68,69,71,125,131,139,150,155,157,220,221,222,224,229,232,240,246,256,295,301,308,],[15,15,-205,-207,-208,15,15,15,15,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,15,-77,15,-212,-187,15,-131,15,-107,-124,15,-210,-78,-211,-188,-183,15,-136,-139,-134,-209,-184,-185,-135,-137,-138,15,15,-106,-122,-186,15,15,-105,-123,]),'AUTO':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,61,62,63,65,67,68,69,71,125,131,139,150,155,157,220,221,222,224,229,232,240,246,256,295,301,308,],[16,16,-205,-207,-208,16,16,16,16,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,16,-77,16,-212,-187,16,-131,16,-107,-124,16,-210,-78,-211,-188,-183,16,-136,-139,-134,-209,-184,-185,-135,-137,-138,16,16,-106,-122,-186,16,16,-105,-123,]),'REGISTER':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,61,62,63,65,67,68,69,71,125,131,139,150,155,157,220,221,222,224,229,232,240,246,256,295,301,308,],[17,17,-205,-207,-208,17,17,17,17,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,17,-77,17,-212,-187,17,-131,17,-107,-124,17,-210,-78,-211,-188,-183,17,-136,-139,-134,-209,-184,-185,-135,-137,-138,17,17,-106,-122,-186,17,17,-105,-123,]),'VOID':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,59,61,62,63,65,67,68,69,71,85,125,128,131,139,140,141,142,144,145,150,155,157,202,220,221,222,224,229,231,232,233,240,246,256,295,301,302,308,],[18,18,-205,-207,-208,18,18,18,18,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,18,-77,18,-212,-187,18,-131,18,-107,18,-124,18,-210,-78,-211,-188,-183,18,18,-136,18,-139,-134,18,18,-110,18,18,-209,-184,-185,18,-135,-137,-138,18,18,18,-106,-111,-122,-186,18,18,-105,-112,-123,]),'CHAR':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,59,61,62,63,65,67,68,69,71,85,125,128,131,139,140,141,142,144,145,150,155,157,202,220,221,222,224,229,231,232,233,240,246,256,295,301,302,308,],[19,19,-205,-207,-208,19,19,19,19,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,19,-77,19,-212,-187,19,-131,19,-107,19,-124,19,-210,-78,-211,-188,-183,19,19,-136,19,-139,-134,19,19,-110,19,19,-209,-184,-185,19,-135,-137,-138,19,19,19,-106,-111,-122,-186,19,19,-105,-112,-123,]),'SHORT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,59,61,62,63,65,67,68,69,71,85,125,128,131,139,140,141,142,144,145,150,155,157,202,220,221,222,224,229,231,232,233,240,246,256,295,301,302,308,],[20,20,-205,-207,-208,20,20,20,20,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,20,-77,20,-212,-187,20,-131,20,-107,20,-124,20,-210,-78,-211,-188,-183,20,20,-136,20,-139,-134,20,20,-110,20,20,-209,-184,-185,20,-135,-137,-138,20,20,20,-106,-111,-122,-186,20,20,-105,-112,-123,]),'INT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,59,61,62,63,65,67,68,69,71,85,125,128,131,139,140,141,142,144,145,150,155,157,202,220,221,222,224,229,231,232,233,240,246,256,295,301,302,308,],[21,21,-205,-207,-208,21,21,21,21,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,21,-77,21,-212,-187,21,-131,21,-107,21,-124,21,-210,-78,-211,-188,-183,21,21,-136,21,-139,-134,21,21,-110,21,21,-209,-184,-185,21,-135,-137,-138,21,21,21,-106,-111,-122,-186,21,21,-105,-112,-123,]),'LONG':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,59,61,62,63,65,67,68,69,71,85,125,128,131,139,140,141,142,144,145,150,155,157,202,220,221,222,224,229,231,232,233,240,246,256,295,301,302,308,],[22,22,-205,-207,-208,22,22,22,22,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,22,-77,22,-212,-187,22,-131,22,-107,22,-124,22,-210,-78,-211,-188,-183,22,22,-136,22,-139,-134,22,22,-110,22,22,-209,-184,-185,22,-135,-137,-138,22,22,22,-106,-111,-122,-186,22,22,-105,-112,-123,]),'FLOAT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,59,61,62,63,65,67,68,69,71,85,125,128,131,139,140,141,142,144,145,150,155,157,202,220,221,222,224,229,231,232,233,240,246,256,295,301,302,308,],[23,23,-205,-207,-208,23,23,23,23,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,23,-77,23,-212,-187,23,-131,23,-107,23,-124,23,-210,-78,-211,-188,-183,23,23,-136,23,-139,-134,23,23,-110,23,23,-209,-184,-185,23,-135,-137,-138,23,23,23,-106,-111,-122,-186,23,23,-105,-112,-123,]),'DOUBLE':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,59,61,62,63,65,67,68,69,71,85,125,128,131,139,140,141,142,144,145,150,155,157,202,220,221,222,224,229,231,232,233,240,246,256,295,301,302,308,],[24,24,-205,-207,-208,24,24,24,24,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,24,-77,24,-212,-187,24,-131,24,-107,24,-124,24,-210,-78,-211,-188,-183,24,24,-136,24,-139,-134,24,24,-110,24,24,-209,-184,-185,24,-135,-137,-138,24,24,24,-106,-111,-122,-186,24,24,-105,-112,-123,]),'SIGNED':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,59,61,62,63,65,67,68,69,71,85,125,128,131,139,140,141,142,144,145,150,155,157,202,220,221,222,224,229,231,232,233,240,246,256,295,301,302,308,],[25,25,-205,-207,-208,25,25,25,25,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,25,-77,25,-212,-187,25,-131,25,-107,25,-124,25,-210,-78,-211,-188,-183,25,25,-136,25,-139,-134,25,25,-110,25,25,-209,-184,-185,25,-135,-137,-138,25,25,25,-106,-111,-122,-186,25,25,-105,-112,-123,]),'UNSIGNED':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,59,61,62,63,65,67,68,69,71,85,125,128,131,139,140,141,142,144,145,150,155,157,202,220,221,222,224,229,231,232,233,240,246,256,295,301,302,308,],[26,26,-205,-207,-208,26,26,26,26,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,26,-77,26,-212,-187,26,-131,26,-107,26,-124,26,-210,-78,-211,-188,-183,26,26,-136,26,-139,-134,26,26,-110,26,26,-209,-184,-185,26,-135,-137,-138,26,26,26,-106,-111,-122,-186,26,26,-105,-112,-123,]),'CONST':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,38,39,40,43,44,45,46,51,53,54,56,58,59,61,62,63,65,67,68,69,71,85,125,128,131,138,139,140,141,142,144,145,150,155,157,202,220,221,222,224,229,231,232,233,240,246,256,295,301,302,308,],[29,29,-205,-207,-208,29,29,29,29,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,29,-133,-206,29,-77,29,-212,-187,29,-131,29,29,-144,-107,29,-124,29,-210,-78,-211,-188,-183,29,29,-136,29,-139,-145,-134,29,29,-110,29,29,-209,-184,-185,29,-135,-137,-138,29,29,29,-106,-111,-122,-186,29,29,-105,-112,-123,]),'VOLATILE':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,38,39,40,43,44,45,46,51,53,54,56,58,59,61,62,63,65,67,68,69,71,85,125,128,131,138,139,140,141,142,144,145,150,155,157,202,220,221,222,224,229,231,232,233,240,246,256,295,301,302,308,],[30,30,-205,-207,-208,30,30,30,30,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,30,-133,-206,30,-77,30,-212,-187,30,-131,30,30,-144,-107,30,-124,30,-210,-78,-211,-188,-183,30,30,-136,30,-139,-145,-134,30,30,-110,30,30,-209,-184,-185,30,-135,-137,-138,30,30,30,-106,-111,-122,-186,30,30,-105,-112,-123,]),'MULTOP':([0,2,3,4,5,6,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,38,40,44,45,46,47,48,49,50,52,54,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,88,93,96,98,99,100,101,102,103,105,106,107,108,109,110,111,113,114,115,122,127,128,129,136,138,143,144,145,150,153,155,156,157,158,159,161,162,163,164,167,168,169,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,229,230,232,237,238,239,240,242,246,247,248,249,252,253,256,260,261,262,267,270,271,285,286,287,288,289,294,301,303,304,308,310,311,312,313,314,315,316,317,318,319,320,321,322,334,335,336,338,344,346,347,348,349,350,],[31,31,-205,-207,-208,31,-79,-81,-83,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,31,31,-206,-77,-212,-187,107,31,-80,-82,-84,107,31,-144,-107,-124,-210,107,-78,31,-211,-188,-183,107,107,-189,-174,-175,-176,-177,-178,-179,-191,-2,107,107,107,107,-29,-17,107,107,107,-31,107,-7,-23,-24,-25,-26,-27,-28,-3,-4,-5,217,-29,107,-2,31,-145,31,-114,-116,-209,107,-184,-190,-185,107,107,107,-192,107,107,31,107,107,107,-201,-202,-203,107,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,107,107,107,107,-13,-14,-18,107,-19,-20,-21,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,31,107,-106,107,-113,-115,-122,107,-186,-180,107,-182,-6,107,31,107,-200,-204,-9,-11,-12,217,217,-32,-33,-34,107,-105,31,107,-123,107,-181,107,-30,107,107,107,107,107,-8,-10,107,-22,-193,-195,-196,107,107,-198,107,-194,-197,-199,]),'IDENTIFIER':([0,2,3,4,5,6,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,40,44,45,46,47,48,49,50,52,53,54,55,56,58,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,85,88,90,93,99,100,101,103,106,107,108,109,110,111,128,136,137,138,143,144,145,149,150,153,155,156,157,158,159,161,162,163,164,168,169,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,223,227,229,230,232,237,238,239,240,241,242,246,247,248,249,253,260,261,262,294,301,303,304,308,310,311,312,314,315,316,317,318,321,334,335,336,338,344,346,347,348,349,350,],[32,32,-205,-207,-208,32,-79,-81,-83,32,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-140,32,58,61,-108,-109,-206,-77,-212,-187,80,32,-80,-82,-84,129,134,-141,-142,-144,-107,148,-124,-210,129,-78,32,-211,-188,-183,80,80,-189,-174,-175,-176,-177,-178,-179,-191,129,129,80,172,129,129,129,129,129,-23,-24,-25,-26,-27,-28,129,32,-143,-145,32,-114,-116,148,-209,129,-184,-190,-185,80,80,80,-192,129,129,129,129,129,-201,-202,-203,129,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,129,129,129,129,270,271,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,290,32,32,129,-106,129,-113,-115,-122,148,129,-186,-180,80,-182,129,129,-200,-204,129,-105,32,129,-123,129,-181,80,80,80,129,129,129,129,-193,-195,-196,80,80,-198,80,-194,-197,-199,]),'LRPAREN':([0,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,40,44,45,46,47,48,49,50,51,52,54,55,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,85,86,87,88,89,93,98,99,100,101,103,105,106,107,108,109,110,111,113,114,115,125,128,129,131,136,137,138,139,143,144,145,150,153,155,156,157,158,159,161,162,163,164,167,168,169,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,227,228,229,230,232,237,238,239,240,242,246,247,248,249,252,253,255,256,259,260,261,262,267,270,271,293,294,296,299,301,303,304,308,310,311,312,314,315,316,317,318,319,320,321,323,325,327,328,329,334,335,336,338,342,343,344,346,347,348,349,350,],[33,33,-205,-207,-208,33,-79,-81,-83,33,53,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-140,-133,33,-206,-77,-212,-187,85,33,-80,-82,-84,53,128,-141,-142,-144,-107,-124,-210,85,-78,33,-211,-188,-183,85,85,-189,-174,-175,-176,-177,-178,-179,-191,-2,128,164,85,168,169,85,171,85,192,198,198,128,202,-7,-23,-24,-25,-26,-27,-28,-3,-4,-5,-136,85,-2,-139,229,-143,-145,-134,33,-114,-116,-209,85,-184,-190,-185,85,85,85,-192,85,85,256,85,85,85,-201,-202,-203,85,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,85,128,85,85,-13,-14,85,85,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,-135,-137,-138,229,295,229,128,-106,128,-113,-115,-122,128,-186,-180,85,-182,-6,128,256,256,316,85,-200,-204,-9,-11,-12,295,128,-165,-161,-105,33,128,-123,85,-181,85,85,85,85,85,128,-8,-10,85,-163,-167,-160,-166,-162,-193,-195,-196,85,-164,-168,85,-198,85,-194,-197,-199,]),'ENUM':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,59,61,62,63,65,67,68,69,71,85,125,128,131,139,140,141,142,144,145,150,155,157,202,220,221,222,224,229,231,232,233,240,246,256,295,301,302,308,],[35,35,-205,-207,-208,35,35,35,35,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,35,-77,35,-212,-187,35,-131,35,-107,35,-124,35,-210,-78,-211,-188,-183,35,35,-136,35,-139,-134,35,35,-110,35,35,-209,-184,-185,35,-135,-137,-138,35,35,35,-106,-111,-122,-186,35,35,-105,-112,-123,]),'STRUCT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,59,61,62,63,65,67,68,69,71,85,125,128,131,139,140,141,142,144,145,150,155,157,202,220,221,222,224,229,231,232,233,240,246,256,295,301,302,308,],[36,36,-205,-207,-208,36,36,36,36,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,36,-77,36,-212,-187,36,-131,36,-107,36,-124,36,-210,-78,-211,-188,-183,36,36,-136,36,-139,-134,36,36,-110,36,36,-209,-184,-185,36,-135,-137,-138,36,36,36,-106,-111,-122,-186,36,36,-105,-112,-123,]),'UNION':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,38,39,40,43,44,45,46,51,53,58,59,61,62,63,65,67,68,69,71,85,125,128,131,139,140,141,142,144,145,150,155,157,202,220,221,222,224,229,231,232,233,240,246,256,295,301,302,308,],[37,37,-205,-207,-208,37,37,37,37,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-206,37,-77,37,-212,-187,37,-131,37,-107,37,-124,37,-210,-78,-211,-188,-183,37,37,-136,37,-139,-134,37,37,-110,37,37,-209,-184,-185,37,-135,-137,-138,37,37,37,-106,-111,-122,-186,37,37,-105,-112,-123,]),'$end':([1,2,3,4,5,38,40,44,63,65,67,69,150,155,157,246,],[0,-1,-205,-207,-208,-206,-77,-212,-210,-78,-211,-183,-209,-184,-185,-186,]),'SEMICOLON':([6,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,39,40,41,42,45,46,47,48,49,50,51,58,61,65,68,69,70,71,72,73,74,75,76,77,78,79,80,83,88,91,92,93,94,95,96,97,98,102,104,105,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,129,131,139,151,152,154,155,156,157,158,159,161,162,171,172,173,174,175,176,195,196,197,199,200,201,220,221,222,232,234,235,236,240,246,247,248,249,250,252,260,261,262,263,265,267,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,301,305,308,309,311,312,313,314,315,319,320,322,330,331,332,334,335,336,338,340,344,345,346,347,348,349,350,],[40,-79,-81,-83,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-87,-77,65,-85,-187,79,40,-80,-82,-84,-131,-107,-124,-78,-188,-183,79,79,-189,-174,-175,-176,-177,-178,-179,-191,-2,162,79,173,174,175,-74,-61,-29,-59,-17,-31,-57,-7,-55,-3,-4,-5,-53,-51,-49,-46,-41,-38,-35,-87,-136,-76,-29,-2,-139,-134,-88,-169,-86,-184,-190,-185,79,79,79,-192,79,261,-201,-202,-203,262,-13,-14,-18,-19,-20,-21,-135,-137,-138,-106,302,-117,-119,-122,-186,-180,79,-182,-75,-6,79,-200,-204,-62,-58,-9,-11,-12,-56,-54,-52,-50,-47,-48,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-105,-120,-123,-170,-181,79,-30,79,79,-8,-10,-22,-118,-121,-171,-193,-195,-196,79,-60,79,349,-198,79,-194,-197,-199,]),'LCPAREN':([7,12,32,34,35,36,37,39,40,43,45,46,51,58,61,62,64,65,68,69,70,71,72,73,74,75,76,77,78,79,88,125,131,139,153,155,156,157,158,159,161,162,173,174,175,220,221,222,246,247,248,249,261,262,310,311,312,314,315,334,335,336,338,344,346,347,348,349,350,],[46,-132,-133,59,60,-108,-109,46,-77,46,-187,46,-131,140,149,46,153,-78,-188,-183,46,46,-189,-174,-175,-176,-177,-178,-179,-191,46,-136,-139,-134,153,-184,-190,-185,46,46,46,-192,-201,-202,-203,-135,-137,-138,-186,-180,46,-182,-200,-204,153,-181,46,46,46,-193,-195,-196,46,46,-198,46,-194,-197,-199,]),'LSPAREN':([8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,48,49,50,51,54,55,56,58,61,80,98,105,113,114,115,125,129,131,136,137,138,139,144,145,167,195,196,220,221,222,227,228,229,232,238,239,240,252,255,256,267,270,271,293,296,299,301,308,319,320,323,325,327,328,329,342,343,],[-79,-81,-83,52,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-140,-133,-80,-82,-84,52,-141,-142,-144,-107,-124,-2,191,-7,-3,-4,-5,-136,-2,-139,230,-143,-145,-134,-114,-116,230,-13,-14,-135,-137,-138,230,294,230,-106,-113,-115,-122,-6,230,230,-9,-11,-12,294,-165,-161,-105,-123,-8,-10,-163,-167,-160,-166,-162,-164,-168,]),'COMMA':([8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,39,41,42,48,49,50,51,54,55,56,58,61,80,83,94,95,96,97,98,102,104,105,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,129,131,132,133,134,135,136,137,138,139,146,147,148,151,152,154,165,176,195,196,197,199,200,201,220,221,222,225,226,227,228,232,234,235,236,240,243,244,245,250,251,252,257,258,263,264,265,266,267,268,269,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,292,293,296,299,301,305,306,307,308,309,313,319,320,322,323,325,327,328,329,330,331,332,333,337,339,340,341,342,343,],[-79,-81,-83,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-140,-133,-87,66,-85,-80,-82,-84,-131,-141,-142,-144,-107,-124,-2,163,-74,-61,-29,-59,-17,-31,-57,-7,-55,-3,-4,-5,-53,-51,-49,-46,-41,-38,-35,-87,-136,-76,-29,-2,-139,223,224,-153,-148,-152,-143,-145,-134,241,-125,-127,-88,-169,-86,163,163,-13,-14,-18,-19,-20,-21,-135,-137,-138,-150,-151,-157,-158,-106,303,-117,-119,-122,241,310,-172,-75,163,-6,163,163,-62,163,-58,163,-9,321,-15,-11,-12,-56,-54,-52,-50,-47,-48,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-154,-149,-159,-165,-161,-105,-120,-126,-128,-123,-170,-30,-8,-10,-22,-163,-167,-160,-166,-162,-118,-121,-171,-173,163,163,-60,-16,-164,-168,]),'RRPAREN':([8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,48,49,50,51,53,54,55,56,57,58,61,79,94,95,96,97,98,102,104,105,112,113,114,115,116,117,118,119,120,121,122,125,127,129,130,131,132,133,134,135,136,137,138,139,144,145,162,165,166,167,192,195,196,197,199,200,201,220,221,222,225,226,227,228,229,232,238,239,240,250,251,252,254,255,256,257,258,263,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,295,296,297,298,299,301,308,313,317,319,320,322,323,325,326,327,328,329,337,339,340,341,342,343,],[-79,-81,-83,-132,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-140,-133,-80,-82,-84,-131,131,-141,-142,-144,139,-107,-124,-191,-74,-61,-29,-59,-17,-31,-57,-7,-55,-3,-4,-5,-53,-51,-49,-46,-41,-38,-35,-136,-29,-2,221,-139,222,-146,-153,-148,-152,-143,-145,-134,-114,-116,-192,252,253,-155,267,-13,-14,-18,-19,-20,-21,-135,-137,-138,-150,-151,-157,-158,296,-106,-113,-115,-122,-75,312,-6,-156,-157,296,314,315,-62,-58,-9,320,-15,-11,-12,322,-56,-54,-52,-50,-47,-48,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-154,-147,-149,-159,325,-165,327,328,-161,-105,-123,-30,338,-8,-10,-22,-163,-167,343,-160,-166,-162,345,347,-60,-16,-164,-168,]),'EQUAL':([12,32,39,51,80,96,98,105,113,114,115,123,125,127,129,131,139,148,195,196,197,199,200,201,220,221,222,252,267,270,271,313,319,320,322,],[-132,-133,64,-131,-2,178,-17,-7,-3,-4,-5,64,-136,-29,-2,-139,-134,242,-13,-14,-18,-19,-20,-21,-135,-137,-138,-6,-9,-11,-12,-30,-8,-10,-22,]),'COLON':([12,18,19,20,21,22,23,24,25,26,27,28,29,30,32,51,58,61,80,82,94,95,96,97,98,102,104,105,112,113,114,115,116,117,118,119,120,121,122,125,126,127,129,131,139,143,144,145,160,195,196,197,199,200,201,220,221,222,232,236,238,239,240,250,252,263,264,265,267,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,301,303,308,313,319,320,322,340,],[-132,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-129,-130,-133,-131,-107,-124,159,161,-74,-61,-29,-59,-17,-31,-57,-7,-55,-3,-4,-5,-53,-51,-49,-46,-41,-38,-35,-136,-76,-29,-2,-139,-134,237,-114,-116,248,-13,-14,-18,-19,-20,-21,-135,-137,-138,-106,304,-113,-115,-122,-75,-6,-62,318,-58,-9,-11,-12,-56,-54,-52,-50,-47,-48,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-105,237,-123,-30,-8,-10,-22,-60,]),'RCPAREN':([40,45,46,65,68,69,70,71,72,73,74,75,76,77,78,79,95,96,97,98,102,104,105,112,113,114,115,116,117,118,119,120,121,122,126,127,129,141,142,146,147,148,152,155,156,157,158,162,173,174,175,195,196,197,199,200,201,231,233,243,244,245,246,247,249,252,261,262,263,265,267,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,302,306,307,309,310,311,313,319,320,322,332,333,334,335,336,340,346,348,349,350,],[-77,-187,69,-78,-188,-183,155,157,-189,-174,-175,-176,-177,-178,-179,-191,-61,-29,-59,-17,-31,-57,-7,-55,-3,-4,-5,-53,-51,-49,-46,-41,-38,-35,-76,-29,-2,232,-110,240,-125,-127,-169,-184,-190,-185,246,-192,-201,-202,-203,-13,-14,-18,-19,-20,-21,301,-111,308,309,-172,-186,-180,-182,-6,-200,-204,-62,-58,-9,-11,-12,-56,-54,-52,-50,-47,-48,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-112,-126,-128,-170,332,-181,-30,-8,-10,-22,-171,-173,-193,-195,-196,-60,-198,-194,-197,-199,]),'CASE':([40,45,46,65,68,69,70,71,72,73,74,75,76,77,78,79,88,155,156,157,158,159,161,162,173,174,175,246,247,248,249,261,262,311,312,314,315,334,335,336,338,344,346,347,348,349,350,],[-77,-187,81,-78,-188,-183,81,81,-189,-174,-175,-176,-177,-178,-179,-191,81,-184,-190,-185,81,81,81,-192,-201,-202,-203,-186,-180,81,-182,-200,-204,-181,81,81,81,-193,-195,-196,81,81,-198,81,-194,-197,-199,]),'DEFAULT':([40,45,46,65,68,69,70,71,72,73,74,75,76,77,78,79,88,155,156,157,158,159,161,162,173,174,175,246,247,248,249,261,262,311,312,314,315,334,335,336,338,344,346,347,348,349,350,],[-77,-187,82,-78,-188,-183,82,82,-189,-174,-175,-176,-177,-178,-179,-191,82,-184,-190,-185,82,82,82,-192,-201,-202,-203,-186,-180,82,-182,-200,-204,-181,82,82,82,-193,-195,-196,82,82,-198,82,-194,-197,-199,]),'IF':([40,45,46,65,68,69,70,71,72,73,74,75,76,77,78,79,88,155,156,157,158,159,161,162,173,174,175,246,247,248,249,261,262,311,312,314,315,334,335,336,338,344,346,347,348,349,350,],[-77,-187,84,-78,-188,-183,84,84,-189,-174,-175,-176,-177,-178,-179,-191,84,-184,-190,-185,84,84,84,-192,-201,-202,-203,-186,-180,84,-182,-200,-204,-181,84,84,84,-193,-195,-196,84,84,-198,84,-194,-197,-199,]),'SWITCH':([40,45,46,65,68,69,70,71,72,73,74,75,76,77,78,79,88,155,156,157,158,159,161,162,173,174,175,246,247,248,249,261,262,311,312,314,315,334,335,336,338,344,346,347,348,349,350,],[-77,-187,86,-78,-188,-183,86,86,-189,-174,-175,-176,-177,-178,-179,-191,86,-184,-190,-185,86,86,86,-192,-201,-202,-203,-186,-180,86,-182,-200,-204,-181,86,86,86,-193,-195,-196,86,86,-198,86,-194,-197,-199,]),'WHILE':([40,45,46,65,68,69,70,71,72,73,74,75,76,77,78,79,88,155,156,157,158,159,161,162,170,173,174,175,246,247,248,249,261,262,311,312,314,315,334,335,336,338,344,346,347,348,349,350,],[-77,-187,87,-78,-188,-183,87,87,-189,-174,-175,-176,-177,-178,-179,-191,87,-184,-190,-185,87,87,87,-192,259,-201,-202,-203,-186,-180,87,-182,-200,-204,-181,87,87,87,-193,-195,-196,87,87,-198,87,-194,-197,-199,]),'DO':([40,45,46,65,68,69,70,71,72,73,74,75,76,77,78,79,88,155,156,157,158,159,161,162,173,174,175,246,247,248,249,261,262,311,312,314,315,334,335,336,338,344,346,347,348,349,350,],[-77,-187,88,-78,-188,-183,88,88,-189,-174,-175,-176,-177,-178,-179,-191,88,-184,-190,-185,88,88,88,-192,-201,-202,-203,-186,-180,88,-182,-200,-204,-181,88,88,88,-193,-195,-196,88,88,-198,88,-194,-197,-199,]),'FOR':([40,45,46,65,68,69,70,71,72,73,74,75,76,77,78,79,88,155,156,157,158,159,161,162,173,174,175,246,247,248,249,261,262,311,312,314,315,334,335,336,338,344,346,347,348,349,350,],[-77,-187,89,-78,-188,-183,89,89,-189,-174,-175,-176,-177,-178,-179,-191,89,-184,-190,-185,89,89,89,-192,-201,-202,-203,-186,-180,89,-182,-200,-204,-181,89,89,89,-193,-195,-196,89,89,-198,89,-194,-197,-199,]),'GOTO':([40,45,46,65,68,69,70,71,72,73,74,75,76,77,78,79,88,155,156,157,158,159,161,162,173,174,175,246,247,248,249,261,262,311,312,314,315,334,335,336,338,344,346,347,348,349,350,],[-77,-187,90,-78,-188,-183,90,90,-189,-174,-175,-176,-177,-178,-179,-191,90,-184,-190,-185,90,90,90,-192,-201,-202,-203,-186,-180,90,-182,-200,-204,-181,90,90,90,-193,-195,-196,90,90,-198,90,-194,-197,-199,]),'CONTINUE':([40,45,46,65,68,69,70,71,72,73,74,75,76,77,78,79,88,155,156,157,158,159,161,162,173,174,175,246,247,248,249,261,262,311,312,314,315,334,335,336,338,344,346,347,348,349,350,],[-77,-187,91,-78,-188,-183,91,91,-189,-174,-175,-176,-177,-178,-179,-191,91,-184,-190,-185,91,91,91,-192,-201,-202,-203,-186,-180,91,-182,-200,-204,-181,91,91,91,-193,-195,-196,91,91,-198,91,-194,-197,-199,]),'BREAK':([40,45,46,65,68,69,70,71,72,73,74,75,76,77,78,79,88,155,156,157,158,159,161,162,173,174,175,246,247,248,249,261,262,311,312,314,315,334,335,336,338,344,346,347,348,349,350,],[-77,-187,92,-78,-188,-183,92,92,-189,-174,-175,-176,-177,-178,-179,-191,92,-184,-190,-185,92,92,92,-192,-201,-202,-203,-186,-180,92,-182,-200,-204,-181,92,92,92,-193,-195,-196,92,92,-198,92,-194,-197,-199,]),'RETURN':([40,45,46,65,68,69,70,71,72,73,74,75,76,77,78,79,88,155,156,157,158,159,161,162,173,174,175,246,247,248,249,261,262,311,312,314,315,334,335,336,338,344,346,347,348,349,350,],[-77,-187,93,-78,-188,-183,93,93,-189,-174,-175,-176,-177,-178,-179,-191,93,-184,-190,-185,93,93,93,-192,-201,-202,-203,-186,-180,93,-182,-200,-204,-181,93,93,93,-193,-195,-196,93,93,-198,93,-194,-197,-199,]),'INC_OP':([40,45,46,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,88,93,98,99,100,101,103,105,106,107,108,109,110,111,113,114,115,128,129,153,155,156,157,158,159,161,162,163,164,168,169,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,246,247,248,249,252,253,260,261,262,267,270,271,294,304,310,311,312,314,315,316,317,318,319,320,321,334,335,336,338,344,346,347,348,349,350,],[-77,-187,99,99,99,-78,-188,-183,99,99,-189,-174,-175,-176,-177,-178,-179,-191,-2,99,99,99,99,195,99,99,99,99,-7,-23,-24,-25,-26,-27,-28,-3,-4,-5,99,-2,99,-184,-190,-185,99,99,99,-192,99,99,99,99,99,-201,-202,-203,99,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,99,99,99,99,-13,-14,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-186,-180,99,-182,-6,99,99,-200,-204,-9,-11,-12,99,99,99,-181,99,99,99,99,99,99,-8,-10,99,-193,-195,-196,99,99,-198,99,-194,-197,-199,]),'DEC_OP':([40,45,46,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,88,93,98,99,100,101,103,105,106,107,108,109,110,111,113,114,115,128,129,153,155,156,157,158,159,161,162,163,164,168,169,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,246,247,248,249,252,253,260,261,262,267,270,271,294,304,310,311,312,314,315,316,317,318,319,320,321,334,335,336,338,344,346,347,348,349,350,],[-77,-187,100,100,100,-78,-188,-183,100,100,-189,-174,-175,-176,-177,-178,-179,-191,-2,100,100,100,100,196,100,100,100,100,-7,-23,-24,-25,-26,-27,-28,-3,-4,-5,100,-2,100,-184,-190,-185,100,100,100,-192,100,100,100,100,100,-201,-202,-203,100,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,100,100,100,100,-13,-14,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-186,-180,100,-182,-6,100,100,-200,-204,-9,-11,-12,100,100,100,-181,100,100,100,100,100,100,-8,-10,100,-193,-195,-196,100,100,-198,100,-194,-197,-199,]),'SIZEOF':([40,45,46,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,81,85,88,93,99,100,101,103,106,107,108,109,110,111,128,153,155,156,157,158,159,161,162,163,164,168,169,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,246,247,248,249,253,260,261,262,294,304,310,311,312,314,315,316,317,318,321,334,335,336,338,344,346,347,348,349,350,],[-77,-187,103,103,103,-78,-188,-183,103,103,-189,-174,-175,-176,-177,-178,-179,-191,103,103,103,103,103,103,103,103,-23,-24,-25,-26,-27,-28,103,103,-184,-190,-185,103,103,103,-192,103,103,103,103,103,-201,-202,-203,103,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-186,-180,103,-182,103,103,-200,-204,103,103,103,-181,103,103,103,103,103,103,103,-193,-195,-196,103,103,-198,103,-194,-197,-199,]),'BANDOP':([40,45,46,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,88,93,96,98,99,100,101,102,103,105,106,107,108,109,110,111,113,114,115,117,118,119,120,121,122,127,128,129,153,155,156,157,158,159,161,162,163,164,168,169,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,246,247,248,249,252,253,260,261,262,267,270,271,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,294,304,310,311,312,313,314,315,316,317,318,319,320,321,322,334,335,336,338,344,346,347,348,349,350,],[-77,-187,106,106,106,-78,-188,-183,106,106,-189,-174,-175,-176,-177,-178,-179,-191,-2,106,106,106,106,-29,-17,106,106,106,-31,106,-7,-23,-24,-25,-26,-27,-28,-3,-4,-5,206,-49,-46,-41,-38,-35,-29,106,-2,106,-184,-190,-185,106,106,106,-192,106,106,106,106,106,-201,-202,-203,106,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,106,106,106,106,-13,-14,-18,106,-19,-20,-21,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,-186,-180,106,-182,-6,106,106,-200,-204,-9,-11,-12,206,-50,-47,-48,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,106,106,106,-181,106,-30,106,106,106,106,106,-8,-10,106,-22,-193,-195,-196,106,106,-198,106,-194,-197,-199,]),'PLUSOP':([40,45,46,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,88,93,96,98,99,100,101,102,103,105,106,107,108,109,110,111,113,114,115,121,122,127,128,129,153,155,156,157,158,159,161,162,163,164,168,169,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,246,247,248,249,252,253,260,261,262,267,270,271,283,284,285,286,287,288,289,294,304,310,311,312,313,314,315,316,317,318,319,320,321,322,334,335,336,338,344,346,347,348,349,350,],[-77,-187,108,108,108,-78,-188,-183,108,108,-189,-174,-175,-176,-177,-178,-179,-191,-2,108,108,108,108,-29,-17,108,108,108,-31,108,-7,-23,-24,-25,-26,-27,-28,-3,-4,-5,215,-35,-29,108,-2,108,-184,-190,-185,108,108,108,-192,108,108,108,108,108,-201,-202,-203,108,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,108,108,108,108,-13,-14,-18,108,-19,-20,-21,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,-186,-180,108,-182,-6,108,108,-200,-204,-9,-11,-12,215,215,-36,-37,-32,-33,-34,108,108,108,-181,108,-30,108,108,108,108,108,-8,-10,108,-22,-193,-195,-196,108,108,-198,108,-194,-197,-199,]),'MINUSOP':([40,45,46,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,88,93,96,98,99,100,101,102,103,105,106,107,108,109,110,111,113,114,115,121,122,127,128,129,153,155,156,157,158,159,161,162,163,164,168,169,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,246,247,248,249,252,253,260,261,262,267,270,271,283,284,285,286,287,288,289,294,304,310,311,312,313,314,315,316,317,318,319,320,321,322,334,335,336,338,344,346,347,348,349,350,],[-77,-187,109,109,109,-78,-188,-183,109,109,-189,-174,-175,-176,-177,-178,-179,-191,-2,109,109,109,109,-29,-17,109,109,109,-31,109,-7,-23,-24,-25,-26,-27,-28,-3,-4,-5,216,-35,-29,109,-2,109,-184,-190,-185,109,109,109,-192,109,109,109,109,109,-201,-202,-203,109,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,109,109,109,109,-13,-14,-18,109,-19,-20,-21,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,-186,-180,109,-182,-6,109,109,-200,-204,-9,-11,-12,216,216,-36,-37,-32,-33,-34,109,109,109,-181,109,-30,109,109,109,109,109,-8,-10,109,-22,-193,-195,-196,109,109,-198,109,-194,-197,-199,]),'BNOP':([40,45,46,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,81,85,88,93,99,100,101,103,106,107,108,109,110,111,128,153,155,156,157,158,159,161,162,163,164,168,169,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,246,247,248,249,253,260,261,262,294,304,310,311,312,314,315,316,317,318,321,334,335,336,338,344,346,347,348,349,350,],[-77,-187,110,110,110,-78,-188,-183,110,110,-189,-174,-175,-176,-177,-178,-179,-191,110,110,110,110,110,110,110,110,-23,-24,-25,-26,-27,-28,110,110,-184,-190,-185,110,110,110,-192,110,110,110,110,110,-201,-202,-203,110,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,-186,-180,110,-182,110,110,-200,-204,110,110,110,-181,110,110,110,110,110,110,110,-193,-195,-196,110,110,-198,110,-194,-197,-199,]),'NOTSYM':([40,45,46,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,81,85,88,93,99,100,101,103,106,107,108,109,110,111,128,153,155,156,157,158,159,161,162,163,164,168,169,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,246,247,248,249,253,260,261,262,294,304,310,311,312,314,315,316,317,318,321,334,335,336,338,344,346,347,348,349,350,],[-77,-187,111,111,111,-78,-188,-183,111,111,-189,-174,-175,-176,-177,-178,-179,-191,111,111,111,111,111,111,111,111,-23,-24,-25,-26,-27,-28,111,111,-184,-190,-185,111,111,111,-192,111,111,111,111,111,-201,-202,-203,111,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,-186,-180,111,-182,111,111,-200,-204,111,111,111,-181,111,111,111,111,111,111,111,-193,-195,-196,111,111,-198,111,-194,-197,-199,]),'NUMBER':([40,45,46,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,81,85,88,93,99,100,101,103,106,107,108,109,110,111,128,153,155,156,157,158,159,161,162,163,164,168,169,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,246,247,248,249,253,260,261,262,294,304,310,311,312,314,315,316,317,318,321,334,335,336,338,344,346,347,348,349,350,],[-77,-187,113,113,113,-78,-188,-183,113,113,-189,-174,-175,-176,-177,-178,-179,-191,113,113,113,113,113,113,113,113,-23,-24,-25,-26,-27,-28,113,113,-184,-190,-185,113,113,113,-192,113,113,113,113,113,-201,-202,-203,113,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,-186,-180,113,-182,113,113,-200,-204,113,113,113,-181,113,113,113,113,113,113,113,-193,-195,-196,113,113,-198,113,-194,-197,-199,]),'STRING_LITERAL':([40,45,46,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,81,85,88,93,99,100,101,103,106,107,108,109,110,111,128,153,155,156,157,158,159,161,162,163,164,168,169,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,246,247,248,249,253,260,261,262,294,304,310,311,312,314,315,316,317,318,321,334,335,336,338,344,346,347,348,349,350,],[-77,-187,114,114,114,-78,-188,-183,114,114,-189,-174,-175,-176,-177,-178,-179,-191,114,114,114,114,114,114,114,114,-23,-24,-25,-26,-27,-28,114,114,-184,-190,-185,114,114,114,-192,114,114,114,114,114,-201,-202,-203,114,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,-186,-180,114,-182,114,114,-200,-204,114,114,114,-181,114,114,114,114,114,114,114,-193,-195,-196,114,114,-198,114,-194,-197,-199,]),'SCHAR':([40,45,46,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,81,85,88,93,99,100,101,103,106,107,108,109,110,111,128,153,155,156,157,158,159,161,162,163,164,168,169,171,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,246,247,248,249,253,260,261,262,294,304,310,311,312,314,315,316,317,318,321,334,335,336,338,344,346,347,348,349,350,],[-77,-187,115,115,115,-78,-188,-183,115,115,-189,-174,-175,-176,-177,-178,-179,-191,115,115,115,115,115,115,115,115,-23,-24,-25,-26,-27,-28,115,115,-184,-190,-185,115,115,115,-192,115,115,115,115,115,-201,-202,-203,115,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-186,-180,115,-182,115,115,-200,-204,115,115,115,-181,115,115,115,115,115,115,115,-193,-195,-196,115,115,-198,115,-194,-197,-199,]),'RSPAREN':([52,94,95,96,97,98,102,104,105,112,113,114,115,116,117,118,119,120,121,122,124,126,127,129,195,196,197,199,200,201,230,250,252,263,265,266,267,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,294,300,313,319,320,322,324,340,],[125,-74,-61,-29,-59,-17,-31,-57,-7,-55,-3,-4,-5,-53,-51,-49,-46,-41,-38,-35,220,-76,-29,-2,-13,-14,-18,-19,-20,-21,299,-75,-6,-62,-58,319,-9,-11,-12,-56,-54,-52,-50,-47,-48,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,323,329,-30,-8,-10,-22,342,-60,]),'ELSE':([69,73,74,75,76,77,78,79,155,157,162,173,174,175,246,247,249,261,262,311,334,335,336,346,348,349,350,],[-183,-174,-175,-176,-177,-178,-179,-191,-184,-185,-192,-201,-202,-203,-186,-180,-182,-200,-204,-181,344,-195,-196,-198,-194,-197,-199,]),'DOT':([80,98,105,113,114,115,129,195,196,252,267,270,271,319,320,],[-2,193,-7,-3,-4,-5,-2,-13,-14,-6,-9,-11,-12,-8,-10,]),'PTR_OP':([80,98,105,113,114,115,129,195,196,252,267,270,271,319,320,],[-2,194,-7,-3,-4,-5,-2,-13,-14,-6,-9,-11,-12,-8,-10,]),'MUL_ASSIGN':([80,96,98,105,113,114,115,127,129,195,196,197,199,200,201,252,267,270,271,313,319,320,322,],[-2,179,-17,-7,-3,-4,-5,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,-30,-8,-10,-22,]),'DIV_ASSIGN':([80,96,98,105,113,114,115,127,129,195,196,197,199,200,201,252,267,270,271,313,319,320,322,],[-2,180,-17,-7,-3,-4,-5,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,-30,-8,-10,-22,]),'MOD_ASSIGN':([80,96,98,105,113,114,115,127,129,195,196,197,199,200,201,252,267,270,271,313,319,320,322,],[-2,181,-17,-7,-3,-4,-5,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,-30,-8,-10,-22,]),'ADD_ASSIGN':([80,96,98,105,113,114,115,127,129,195,196,197,199,200,201,252,267,270,271,313,319,320,322,],[-2,182,-17,-7,-3,-4,-5,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,-30,-8,-10,-22,]),'SUB_ASSIGN':([80,96,98,105,113,114,115,127,129,195,196,197,199,200,201,252,267,270,271,313,319,320,322,],[-2,183,-17,-7,-3,-4,-5,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,-30,-8,-10,-22,]),'LEFT_ASSIGN':([80,96,98,105,113,114,115,127,129,195,196,197,199,200,201,252,267,270,271,313,319,320,322,],[-2,184,-17,-7,-3,-4,-5,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,-30,-8,-10,-22,]),'RIGHT_ASSIGN':([80,96,98,105,113,114,115,127,129,195,196,197,199,200,201,252,267,270,271,313,319,320,322,],[-2,185,-17,-7,-3,-4,-5,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,-30,-8,-10,-22,]),'AND_ASSIGN':([80,96,98,105,113,114,115,127,129,195,196,197,199,200,201,252,267,270,271,313,319,320,322,],[-2,186,-17,-7,-3,-4,-5,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,-30,-8,-10,-22,]),'XOR_ASSIGN':([80,96,98,105,113,114,115,127,129,195,196,197,199,200,201,252,267,270,271,313,319,320,322,],[-2,187,-17,-7,-3,-4,-5,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,-30,-8,-10,-22,]),'OR_ASSIGN':([80,96,98,105,113,114,115,127,129,195,196,197,199,200,201,252,267,270,271,313,319,320,322,],[-2,188,-17,-7,-3,-4,-5,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,-30,-8,-10,-22,]),'DIVOP':([80,96,98,102,105,113,114,115,122,127,129,195,196,197,199,200,201,252,267,270,271,285,286,287,288,289,313,319,320,322,],[-2,-29,-17,-31,-7,-3,-4,-5,218,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,218,218,-32,-33,-34,-30,-8,-10,-22,]),'MODOP':([80,96,98,102,105,113,114,115,122,127,129,195,196,197,199,200,201,252,267,270,271,285,286,287,288,289,313,319,320,322,],[-2,-29,-17,-31,-7,-3,-4,-5,219,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,219,219,-32,-33,-34,-30,-8,-10,-22,]),'LEFT_OP':([80,96,98,102,105,113,114,115,120,121,122,127,129,195,196,197,199,200,201,252,267,270,271,279,280,281,282,283,284,285,286,287,288,289,313,319,320,322,],[-2,-29,-17,-31,-7,-3,-4,-5,213,-38,-35,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,213,213,213,213,-39,-40,-36,-37,-32,-33,-34,-30,-8,-10,-22,]),'RIGHT_OP':([80,96,98,102,105,113,114,115,120,121,122,127,129,195,196,197,199,200,201,252,267,270,271,279,280,281,282,283,284,285,286,287,288,289,313,319,320,322,],[-2,-29,-17,-31,-7,-3,-4,-5,214,-38,-35,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,214,214,214,214,-39,-40,-36,-37,-32,-33,-34,-30,-8,-10,-22,]),'LTCOMP':([80,96,98,102,105,113,114,115,119,120,121,122,127,129,195,196,197,199,200,201,252,267,270,271,277,278,279,280,281,282,283,284,285,286,287,288,289,313,319,320,322,],[-2,-29,-17,-31,-7,-3,-4,-5,209,-41,-38,-35,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,209,209,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-30,-8,-10,-22,]),'GTCOMP':([80,96,98,102,105,113,114,115,119,120,121,122,127,129,195,196,197,199,200,201,252,267,270,271,277,278,279,280,281,282,283,284,285,286,287,288,289,313,319,320,322,],[-2,-29,-17,-31,-7,-3,-4,-5,210,-41,-38,-35,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,210,210,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-30,-8,-10,-22,]),'LE_OP':([80,96,98,102,105,113,114,115,119,120,121,122,127,129,195,196,197,199,200,201,252,267,270,271,277,278,279,280,281,282,283,284,285,286,287,288,289,313,319,320,322,],[-2,-29,-17,-31,-7,-3,-4,-5,211,-41,-38,-35,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,211,211,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-30,-8,-10,-22,]),'GE_OP':([80,96,98,102,105,113,114,115,119,120,121,122,127,129,195,196,197,199,200,201,252,267,270,271,277,278,279,280,281,282,283,284,285,286,287,288,289,313,319,320,322,],[-2,-29,-17,-31,-7,-3,-4,-5,212,-41,-38,-35,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,212,212,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-30,-8,-10,-22,]),'EQ_OP':([80,96,98,102,105,113,114,115,118,119,120,121,122,127,129,195,196,197,199,200,201,252,267,270,271,276,277,278,279,280,281,282,283,284,285,286,287,288,289,313,319,320,322,],[-2,-29,-17,-31,-7,-3,-4,-5,207,-46,-41,-38,-35,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,207,-47,-48,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-30,-8,-10,-22,]),'NE_OP':([80,96,98,102,105,113,114,115,118,119,120,121,122,127,129,195,196,197,199,200,201,252,267,270,271,276,277,278,279,280,281,282,283,284,285,286,287,288,289,313,319,320,322,],[-2,-29,-17,-31,-7,-3,-4,-5,208,-46,-41,-38,-35,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,208,-47,-48,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-30,-8,-10,-22,]),'XOROP':([80,96,98,102,105,113,114,115,116,117,118,119,120,121,122,127,129,195,196,197,199,200,201,252,267,270,271,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,313,319,320,322,],[-2,-29,-17,-31,-7,-3,-4,-5,205,-51,-49,-46,-41,-38,-35,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,205,-52,-50,-47,-48,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-30,-8,-10,-22,]),'BOROP':([80,96,98,102,105,112,113,114,115,116,117,118,119,120,121,122,127,129,195,196,197,199,200,201,252,267,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,313,319,320,322,],[-2,-29,-17,-31,-7,204,-3,-4,-5,-53,-51,-49,-46,-41,-38,-35,-29,-2,-13,-14,-18,-19,-20,-21,-6,-9,-11,-12,204,-54,-52,-50,-47,-48,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-30,-8,-10,-22,]),'AND_OP':([80,96,98,102,104,105,112,113,114,115,116,117,118,119,120,121,122,127,129,195,196,197,199,200,201,252,265,267,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,313,319,320,322,],[-2,-29,-17,-31,203,-7,-55,-3,-4,-5,-53,-51,-49,-46,-41,-38,-35,-29,-2,-13,-14,-18,-19,-20,-21,-6,203,-9,-11,-12,-56,-54,-52,-50,-47,-48,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-30,-8,-10,-22,]),'QUESMARK':([80,96,97,98,102,104,105,112,113,114,115,116,117,118,119,120,121,122,127,129,195,196,197,199,200,201,252,265,267,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,313,319,320,322,],[-2,-29,189,-17,-31,-57,-7,-55,-3,-4,-5,-53,-51,-49,-46,-41,-38,-35,-29,-2,-13,-14,-18,-19,-20,-21,-6,-58,-9,-11,-12,-56,-54,-52,-50,-47,-48,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-30,-8,-10,-22,]),'OR_OP':([80,96,97,98,102,104,105,112,113,114,115,116,117,118,119,120,121,122,127,129,195,196,197,199,200,201,252,265,267,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,313,319,320,322,],[-2,-29,190,-17,-31,-57,-7,-55,-3,-4,-5,-53,-51,-49,-46,-41,-38,-35,-29,-2,-13,-14,-18,-19,-20,-21,-6,-58,-9,-11,-12,-56,-54,-52,-50,-47,-48,-42,-43,-44,-45,-39,-40,-36,-37,-32,-33,-34,-30,-8,-10,-22,]),'ELLIPSIS':([224,],[291,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,38,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,7,39,43,46,62,71,],[5,5,45,45,68,45,68,68,]),'declaration_specifiers':([0,2,7,8,9,10,39,43,46,53,62,71,224,229,256,295,],[6,6,47,48,49,50,47,47,47,136,47,47,136,136,136,136,]),'declarator':([0,2,6,33,47,66,136,143,229,303,],[7,7,39,57,123,123,225,236,57,236,]),'storage_class_specifier':([0,2,7,8,9,10,39,43,46,53,62,71,224,229,256,295,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'type_specifier':([0,2,7,8,9,10,39,43,46,53,59,62,71,85,128,140,141,144,145,202,224,229,231,256,295,],[9,9,9,9,9,9,9,9,9,9,144,9,9,144,144,144,144,144,144,144,9,9,144,9,9,]),'type_qualifier':([0,2,7,8,9,10,31,39,43,46,53,54,59,62,71,85,128,140,141,144,145,202,224,229,231,256,295,],[10,10,10,10,10,10,56,10,10,10,10,138,145,10,10,145,145,145,145,145,145,145,10,10,145,10,10,]),'pointer':([0,2,6,31,33,47,54,66,136,143,167,229,256,303,],[11,11,11,55,11,11,137,11,227,11,255,227,255,11,]),'direct_declarator':([0,2,6,11,33,47,66,136,143,227,229,303,],[12,12,12,51,12,12,12,12,12,51,12,12,]),'struct_or_union_specifier':([0,2,7,8,9,10,39,43,46,53,59,62,71,85,128,140,141,144,145,202,224,229,231,256,295,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'enum_specifier':([0,2,7,8,9,10,39,43,46,53,59,62,71,85,128,140,141,144,145,202,224,229,231,256,295,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'struct_or_union':([0,2,7,8,9,10,39,43,46,53,59,62,71,85,128,140,141,144,145,202,224,229,231,256,295,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'init_declarator_list':([6,47,],[41,41,]),'init_declarator':([6,47,66,],[42,42,154,]),'declaration_list':([7,39,46,],[43,62,71,]),'compound_statement':([7,39,43,46,62,70,71,88,158,159,161,248,312,314,315,338,344,347,],[44,63,67,74,150,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'type_qualifier_list':([31,],[54,]),'statement_list':([46,71,],[70,158,]),'statement':([46,70,71,88,158,159,161,248,312,314,315,338,344,347,],[72,156,72,170,156,247,249,311,334,335,336,346,348,350,]),'labeled_statement':([46,70,71,88,158,159,161,248,312,314,315,338,344,347,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'expression_statement':([46,70,71,88,158,159,161,171,248,260,312,314,315,338,344,347,],[75,75,75,75,75,75,75,260,75,317,75,75,75,75,75,75,]),'selection_statement':([46,70,71,88,158,159,161,248,312,314,315,338,344,347,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'iteration_statement':([46,70,71,88,158,159,161,248,312,314,315,338,344,347,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'jump_statement':([46,70,71,88,158,159,161,248,312,314,315,338,344,347,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'expression':([46,70,71,85,88,93,128,158,159,161,164,168,169,171,189,191,198,202,248,260,312,314,315,316,317,338,344,347,],[83,83,83,165,83,176,165,83,83,83,251,257,258,83,264,266,165,165,83,83,83,83,83,337,339,83,83,83,]),'assignment_expression':([46,64,70,71,85,88,93,128,153,158,159,161,163,164,168,169,171,177,189,191,192,198,202,248,260,310,312,314,315,316,317,321,338,344,347,],[94,152,94,94,94,94,94,94,152,94,94,94,250,94,94,94,94,263,94,94,269,94,94,94,94,152,94,94,94,94,94,341,94,94,94,]),'conditional_expression':([46,52,64,70,71,81,85,88,93,128,153,158,159,161,163,164,168,169,171,177,189,191,192,198,202,230,237,242,248,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[95,126,95,95,95,126,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,126,126,126,95,95,126,126,95,95,95,95,95,95,340,95,95,95,95,]),'unary_expression':([46,52,64,70,71,81,85,88,93,99,100,101,103,128,153,158,159,161,163,164,168,169,171,177,189,190,191,192,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,248,253,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[96,127,96,96,96,127,96,96,96,197,199,127,201,96,96,96,96,96,96,96,96,96,96,96,96,127,96,96,96,96,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,96,127,96,127,127,96,96,96,96,96,96,127,96,96,96,96,]),'logical_or_expression':([46,52,64,70,71,81,85,88,93,128,153,158,159,161,163,164,168,169,171,177,189,191,192,198,202,230,237,242,248,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'postfix_expression':([46,52,64,70,71,81,85,88,93,99,100,101,103,128,153,158,159,161,163,164,168,169,171,177,189,190,191,192,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,248,253,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'unary_operator':([46,52,64,70,71,81,85,88,93,99,100,101,103,128,153,158,159,161,163,164,168,169,171,177,189,190,191,192,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,248,253,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'cast_expression':([46,52,64,70,71,81,85,88,93,101,128,153,158,159,161,163,164,168,169,171,177,189,190,191,192,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,248,253,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[102,102,102,102,102,102,102,102,102,200,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,287,288,289,102,102,102,102,313,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'logical_and_expression':([46,52,64,70,71,81,85,88,93,128,153,158,159,161,163,164,168,169,171,177,189,190,191,192,198,202,230,237,242,248,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,265,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'primary_expression':([46,52,64,70,71,81,85,88,93,99,100,101,103,128,153,158,159,161,163,164,168,169,171,177,189,190,191,192,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,230,237,242,248,253,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'inclusive_or_expression':([46,52,64,70,71,81,85,88,93,128,153,158,159,161,163,164,168,169,171,177,189,190,191,192,198,202,203,230,237,242,248,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,273,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'exclusive_or_expression':([46,52,64,70,71,81,85,88,93,128,153,158,159,161,163,164,168,169,171,177,189,190,191,192,198,202,203,204,230,237,242,248,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,274,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'and_expression':([46,52,64,70,71,81,85,88,93,128,153,158,159,161,163,164,168,169,171,177,189,190,191,192,198,202,203,204,205,230,237,242,248,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,275,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'equality_expression':([46,52,64,70,71,81,85,88,93,128,153,158,159,161,163,164,168,169,171,177,189,190,191,192,198,202,203,204,205,206,230,237,242,248,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,276,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'relational_expression':([46,52,64,70,71,81,85,88,93,128,153,158,159,161,163,164,168,169,171,177,189,190,191,192,198,202,203,204,205,206,207,208,230,237,242,248,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,277,278,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'shift_expression':([46,52,64,70,71,81,85,88,93,128,153,158,159,161,163,164,168,169,171,177,189,190,191,192,198,202,203,204,205,206,207,208,209,210,211,212,230,237,242,248,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,279,280,281,282,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'additive_expression':([46,52,64,70,71,81,85,88,93,128,153,158,159,161,163,164,168,169,171,177,189,190,191,192,198,202,203,204,205,206,207,208,209,210,211,212,213,214,230,237,242,248,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,283,284,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'multiplicative_expression':([46,52,64,70,71,81,85,88,93,128,153,158,159,161,163,164,168,169,171,177,189,190,191,192,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,230,237,242,248,260,294,304,310,312,314,315,316,317,318,321,338,344,347,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,285,286,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'constant_expression':([52,81,230,237,242,294,304,],[124,160,300,305,307,324,331,]),'parameter_type_list':([53,229,256,295,],[130,298,298,326,]),'identifier_list':([53,],[132,]),'parameter_list':([53,229,256,295,],[133,133,133,133,]),'parameter_declaration':([53,224,229,256,295,],[135,292,135,135,135,]),'struct_declaration_list':([59,140,],[141,231,]),'struct_declaration':([59,140,141,231,],[142,142,233,233,]),'specifier_qualifier_list':([59,85,128,140,141,144,145,202,231,],[143,167,167,143,143,238,239,167,143,]),'enumerator_list':([60,149,],[146,243,]),'enumerator':([60,149,241,],[147,147,306,]),'initializer':([64,153,310,],[151,245,333,]),'type_name':([85,128,202,],[166,166,272,]),'assignment_operator':([96,],[177,]),'abstract_declarator':([136,167,229,256,],[226,254,297,297,]),'direct_abstract_declarator':([136,167,227,229,255,256,],[228,228,293,228,293,228,]),'struct_declarator_list':([143,],[234,]),'struct_declarator':([143,303,],[235,330,]),'initializer_list':([153,],[244,]),'argument_expression_list':([192,],[268,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','parser.py',14),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','parser.py',20),
  ('primary_expression -> NUMBER','primary_expression',1,'p_primary_expression','parser.py',21),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser.py',22),
  ('primary_expression -> SCHAR','primary_expression',1,'p_primary_expression','parser.py',23),
  ('primary_expression -> LRPAREN expression RRPAREN','primary_expression',3,'p_primary_expression','parser.py',24),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',30),
  ('postfix_expression -> postfix_expression LSPAREN expression RSPAREN','postfix_expression',4,'p_postfix_expression','parser.py',31),
  ('postfix_expression -> postfix_expression LRPAREN RRPAREN','postfix_expression',3,'p_postfix_expression','parser.py',32),
  ('postfix_expression -> postfix_expression LRPAREN argument_expression_list RRPAREN','postfix_expression',4,'p_postfix_expression','parser.py',33),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','parser.py',34),
  ('postfix_expression -> postfix_expression PTR_OP IDENTIFIER','postfix_expression',3,'p_postfix_expression','parser.py',35),
  ('postfix_expression -> postfix_expression INC_OP','postfix_expression',2,'p_postfix_expression','parser.py',36),
  ('postfix_expression -> postfix_expression DEC_OP','postfix_expression',2,'p_postfix_expression','parser.py',37),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','parser.py',43),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','parser.py',44),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',50),
  ('unary_expression -> INC_OP unary_expression','unary_expression',2,'p_unary_expression','parser.py',51),
  ('unary_expression -> DEC_OP unary_expression','unary_expression',2,'p_unary_expression','parser.py',52),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','parser.py',53),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','parser.py',54),
  ('unary_expression -> SIZEOF LRPAREN type_name RRPAREN','unary_expression',4,'p_unary_expression','parser.py',55),
  ('unary_operator -> BANDOP','unary_operator',1,'p_unary_operator','parser.py',61),
  ('unary_operator -> MULTOP','unary_operator',1,'p_unary_operator','parser.py',62),
  ('unary_operator -> PLUSOP','unary_operator',1,'p_unary_operator','parser.py',63),
  ('unary_operator -> MINUSOP','unary_operator',1,'p_unary_operator','parser.py',64),
  ('unary_operator -> BNOP','unary_operator',1,'p_unary_operator','parser.py',65),
  ('unary_operator -> NOTSYM','unary_operator',1,'p_unary_operator','parser.py',66),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','parser.py',72),
  ('cast_expression -> LRPAREN type_name RRPAREN cast_expression','cast_expression',4,'p_cast_expression','parser.py',73),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',79),
  ('multiplicative_expression -> multiplicative_expression MULTOP cast_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',80),
  ('multiplicative_expression -> multiplicative_expression DIVOP cast_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',81),
  ('multiplicative_expression -> multiplicative_expression MODOP cast_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',82),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',88),
  ('additive_expression -> additive_expression PLUSOP multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',89),
  ('additive_expression -> additive_expression MINUSOP multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',90),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','parser.py',96),
  ('shift_expression -> shift_expression LEFT_OP additive_expression','shift_expression',3,'p_shift_expression','parser.py',97),
  ('shift_expression -> shift_expression RIGHT_OP additive_expression','shift_expression',3,'p_shift_expression','parser.py',98),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','parser.py',104),
  ('relational_expression -> relational_expression LTCOMP shift_expression','relational_expression',3,'p_relational_expression','parser.py',105),
  ('relational_expression -> relational_expression GTCOMP shift_expression','relational_expression',3,'p_relational_expression','parser.py',106),
  ('relational_expression -> relational_expression LE_OP shift_expression','relational_expression',3,'p_relational_expression','parser.py',107),
  ('relational_expression -> relational_expression GE_OP shift_expression','relational_expression',3,'p_relational_expression','parser.py',108),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',114),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_equality_expression','parser.py',115),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_equality_expression','parser.py',116),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','parser.py',122),
  ('and_expression -> and_expression BANDOP equality_expression','and_expression',3,'p_and_expression','parser.py',123),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','parser.py',129),
  ('exclusive_or_expression -> exclusive_or_expression XOROP and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','parser.py',130),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','parser.py',136),
  ('inclusive_or_expression -> inclusive_or_expression BOROP exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','parser.py',137),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','parser.py',143),
  ('logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','parser.py',144),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','parser.py',150),
  ('logical_or_expression -> logical_or_expression OR_OP logical_and_expression','logical_or_expression',3,'p_logical_or_expression','parser.py',151),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','parser.py',157),
  ('conditional_expression -> logical_or_expression QUESMARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','parser.py',158),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','parser.py',164),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','parser.py',165),
  ('assignment_operator -> EQUAL','assignment_operator',1,'p_assignment_operator','parser.py',171),
  ('assignment_operator -> MUL_ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',172),
  ('assignment_operator -> DIV_ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',173),
  ('assignment_operator -> MOD_ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',174),
  ('assignment_operator -> ADD_ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',175),
  ('assignment_operator -> SUB_ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',176),
  ('assignment_operator -> LEFT_ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',177),
  ('assignment_operator -> RIGHT_ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',178),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',179),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',180),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',181),
  ('expression -> assignment_expression','expression',1,'p_expression','parser.py',187),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','parser.py',188),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','parser.py',194),
  ('declaration -> declaration_specifiers SEMICOLON','declaration',2,'p_declaration','parser.py',200),
  ('declaration -> declaration_specifiers init_declarator_list SEMICOLON','declaration',3,'p_declaration','parser.py',201),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers','parser.py',207),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','parser.py',208),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','parser.py',209),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','parser.py',210),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers','parser.py',211),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','parser.py',212),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','parser.py',218),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','parser.py',219),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','parser.py',225),
  ('init_declarator -> declarator EQUAL initializer','init_declarator',3,'p_init_declarator','parser.py',226),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier','parser.py',232),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','parser.py',233),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','parser.py',234),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','parser.py',235),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier','parser.py',236),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',242),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',243),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','parser.py',244),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',245),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','parser.py',246),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',247),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','parser.py',248),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','parser.py',249),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','parser.py',250),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier','parser.py',251),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','parser.py',252),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER LCPAREN struct_declaration_list RCPAREN','struct_or_union_specifier',5,'p_struct_or_union_specifier','parser.py',257),
  ('struct_or_union_specifier -> struct_or_union LCPAREN struct_declaration_list RCPAREN','struct_or_union_specifier',4,'p_struct_or_union_specifier','parser.py',258),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER','struct_or_union_specifier',2,'p_struct_or_union_specifier','parser.py',259),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union','parser.py',265),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union','parser.py',266),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','parser.py',272),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','parser.py',273),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON','struct_declaration',3,'p_struct_declaration','parser.py',279),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','parser.py',284),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','parser.py',285),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','parser.py',286),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','parser.py',287),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','parser.py',293),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','parser.py',294),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','parser.py',300),
  ('struct_declarator -> COLON constant_expression','struct_declarator',2,'p_struct_declarator','parser.py',301),
  ('struct_declarator -> declarator COLON constant_expression','struct_declarator',3,'p_struct_declarator','parser.py',302),
  ('enum_specifier -> ENUM LCPAREN enumerator_list RCPAREN','enum_specifier',4,'p_enum_specifier','parser.py',308),
  ('enum_specifier -> ENUM IDENTIFIER LCPAREN enumerator_list RCPAREN','enum_specifier',5,'p_enum_specifier','parser.py',309),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier','parser.py',310),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','parser.py',316),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','parser.py',317),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','parser.py',323),
  ('enumerator -> IDENTIFIER EQUAL constant_expression','enumerator',3,'p_enumerator','parser.py',324),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','parser.py',330),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','parser.py',331),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','parser.py',337),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','parser.py',338),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','parser.py',344),
  ('direct_declarator -> LRPAREN declarator RRPAREN','direct_declarator',3,'p_direct_declarator','parser.py',345),
  ('direct_declarator -> direct_declarator LSPAREN constant_expression RSPAREN','direct_declarator',4,'p_direct_declarator','parser.py',346),
  ('direct_declarator -> direct_declarator LSPAREN RSPAREN','direct_declarator',3,'p_direct_declarator','parser.py',347),
  ('direct_declarator -> direct_declarator LRPAREN parameter_type_list RRPAREN','direct_declarator',4,'p_direct_declarator','parser.py',348),
  ('direct_declarator -> direct_declarator LRPAREN identifier_list RRPAREN','direct_declarator',4,'p_direct_declarator','parser.py',349),
  ('direct_declarator -> direct_declarator LRPAREN RRPAREN','direct_declarator',3,'p_direct_declarator','parser.py',350),
  ('pointer -> MULTOP','pointer',1,'p_pointer','parser.py',356),
  ('pointer -> MULTOP type_qualifier_list','pointer',2,'p_pointer','parser.py',357),
  ('pointer -> MULTOP pointer','pointer',2,'p_pointer','parser.py',358),
  ('pointer -> MULTOP type_qualifier_list pointer','pointer',3,'p_pointer','parser.py',359),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','parser.py',365),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','parser.py',366),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','parser.py',372),
  ('parameter_type_list -> parameter_list COMMA ELLIPSIS','parameter_type_list',3,'p_parameter_type_list','parser.py',373),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','parser.py',379),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','parser.py',380),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',386),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',387),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','parser.py',388),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','parser.py',394),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','parser.py',395),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','parser.py',401),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','parser.py',402),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','parser.py',408),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','parser.py',409),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','parser.py',410),
  ('direct_abstract_declarator -> LRPAREN abstract_declarator RRPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser.py',416),
  ('direct_abstract_declarator -> LSPAREN RSPAREN','direct_abstract_declarator',2,'p_direct_abstract_declarator','parser.py',417),
  ('direct_abstract_declarator -> LSPAREN constant_expression RSPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser.py',418),
  ('direct_abstract_declarator -> direct_abstract_declarator LSPAREN RSPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser.py',419),
  ('direct_abstract_declarator -> direct_abstract_declarator LSPAREN constant_expression RSPAREN','direct_abstract_declarator',4,'p_direct_abstract_declarator','parser.py',420),
  ('direct_abstract_declarator -> LRPAREN RRPAREN','direct_abstract_declarator',2,'p_direct_abstract_declarator','parser.py',421),
  ('direct_abstract_declarator -> LRPAREN parameter_type_list RRPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser.py',422),
  ('direct_abstract_declarator -> direct_abstract_declarator LRPAREN RRPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','parser.py',423),
  ('direct_abstract_declarator -> direct_abstract_declarator LRPAREN parameter_type_list RRPAREN','direct_abstract_declarator',4,'p_direct_abstract_declarator','parser.py',424),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','parser.py',430),
  ('initializer -> LCPAREN initializer_list RCPAREN','initializer',3,'p_initializer','parser.py',431),
  ('initializer -> LCPAREN initializer_list COMMA RCPAREN','initializer',4,'p_initializer','parser.py',432),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','parser.py',438),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','parser.py',439),
  ('statement -> labeled_statement','statement',1,'p_statement','parser.py',445),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',446),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',447),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',448),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',449),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',450),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement','parser.py',456),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','parser.py',457),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','parser.py',458),
  ('compound_statement -> LCPAREN RCPAREN','compound_statement',2,'p_compound_statement','parser.py',464),
  ('compound_statement -> LCPAREN statement_list RCPAREN','compound_statement',3,'p_compound_statement','parser.py',465),
  ('compound_statement -> LCPAREN declaration_list RCPAREN','compound_statement',3,'p_compound_statement','parser.py',466),
  ('compound_statement -> LCPAREN declaration_list statement_list RCPAREN','compound_statement',4,'p_compound_statement','parser.py',467),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',473),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',474),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',480),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',481),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_statement','parser.py',487),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',488),
  ('selection_statement -> IF LRPAREN expression RRPAREN statement','selection_statement',5,'p_selection_statement','parser.py',494),
  ('selection_statement -> IF LRPAREN expression RRPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','parser.py',495),
  ('selection_statement -> SWITCH LRPAREN expression RRPAREN statement','selection_statement',5,'p_selection_statement','parser.py',496),
  ('iteration_statement -> WHILE LRPAREN expression RRPAREN statement','iteration_statement',5,'p_iteration_statement','parser.py',502),
  ('iteration_statement -> DO statement WHILE LRPAREN expression RRPAREN SEMICOLON','iteration_statement',7,'p_iteration_statement','parser.py',503),
  ('iteration_statement -> FOR LRPAREN expression_statement expression_statement RRPAREN statement','iteration_statement',6,'p_iteration_statement','parser.py',504),
  ('iteration_statement -> FOR LRPAREN expression_statement expression_statement expression RRPAREN statement','iteration_statement',7,'p_iteration_statement','parser.py',505),
  ('jump_statement -> GOTO IDENTIFIER SEMICOLON','jump_statement',3,'p_jump_statement','parser.py',511),
  ('jump_statement -> CONTINUE SEMICOLON','jump_statement',2,'p_jump_statement','parser.py',512),
  ('jump_statement -> BREAK SEMICOLON','jump_statement',2,'p_jump_statement','parser.py',513),
  ('jump_statement -> RETURN SEMICOLON','jump_statement',2,'p_jump_statement','parser.py',514),
  ('jump_statement -> RETURN expression SEMICOLON','jump_statement',3,'p_jump_statement','parser.py',515),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','parser.py',521),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','parser.py',522),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','parser.py',528),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','parser.py',529),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition','parser.py',534),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition','parser.py',535),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition','parser.py',536),
  ('function_definition -> declarator compound_statement','function_definition',2,'p_function_definition','parser.py',537),
]
